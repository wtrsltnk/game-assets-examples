#include <GL/glextl.h>

/* GL_VERSION_1_2 */
PFNGLCOPYTEXSUBIMAGE3DPROC __glCopyTexSubImage3D = nullptr; void APIENTRY glCopyTexSubImage3D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) { if (__glCopyTexSubImage3D != 0) (__glCopyTexSubImage3D)(target, level, xoffset, yoffset, zoffset, x, y, width, height);  }
PFNGLDRAWRANGEELEMENTSPROC __glDrawRangeElements = nullptr; void APIENTRY glDrawRangeElements (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices) { if (__glDrawRangeElements != 0) (__glDrawRangeElements)(mode, start, end, count, type, indices);  }
PFNGLTEXIMAGE3DPROC __glTexImage3D = nullptr; void APIENTRY glTexImage3D (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels) { if (__glTexImage3D != 0) (__glTexImage3D)(target, level, internalformat, width, height, depth, border, format, type, pixels);  }
PFNGLTEXSUBIMAGE3DPROC __glTexSubImage3D = nullptr; void APIENTRY glTexSubImage3D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels) { if (__glTexSubImage3D != 0) (__glTexSubImage3D)(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);  }
bool __loadGL_VERSION_1_2(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glCopyTexSubImage3D = (PFNGLCOPYTEXSUBIMAGE3DPROC)proc((const GLubyte*)"glCopyTexSubImage3D")) != nullptr) || r;
    r = ((__glDrawRangeElements = (PFNGLDRAWRANGEELEMENTSPROC)proc((const GLubyte*)"glDrawRangeElements")) != nullptr) || r;
    r = ((__glTexImage3D = (PFNGLTEXIMAGE3DPROC)proc((const GLubyte*)"glTexImage3D")) != nullptr) || r;
    r = ((__glTexSubImage3D = (PFNGLTEXSUBIMAGE3DPROC)proc((const GLubyte*)"glTexSubImage3D")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_VERSION_1_2 = false;
/* GL_VERSION_1_3 */
PFNGLACTIVETEXTUREPROC __glActiveTexture = nullptr; void APIENTRY glActiveTexture (GLenum texture) { if (__glActiveTexture != 0) (__glActiveTexture)(texture);  }
PFNGLCLIENTACTIVETEXTUREPROC __glClientActiveTexture = nullptr; void APIENTRY glClientActiveTexture (GLenum texture) { if (__glClientActiveTexture != 0) (__glClientActiveTexture)(texture);  }
PFNGLCOMPRESSEDTEXIMAGE1DPROC __glCompressedTexImage1D = nullptr; void APIENTRY glCompressedTexImage1D (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data) { if (__glCompressedTexImage1D != 0) (__glCompressedTexImage1D)(target, level, internalformat, width, border, imageSize, data);  }
PFNGLCOMPRESSEDTEXIMAGE2DPROC __glCompressedTexImage2D = nullptr; void APIENTRY glCompressedTexImage2D (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data) { if (__glCompressedTexImage2D != 0) (__glCompressedTexImage2D)(target, level, internalformat, width, height, border, imageSize, data);  }
PFNGLCOMPRESSEDTEXIMAGE3DPROC __glCompressedTexImage3D = nullptr; void APIENTRY glCompressedTexImage3D (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data) { if (__glCompressedTexImage3D != 0) (__glCompressedTexImage3D)(target, level, internalformat, width, height, depth, border, imageSize, data);  }
PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC __glCompressedTexSubImage1D = nullptr; void APIENTRY glCompressedTexSubImage1D (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data) { if (__glCompressedTexSubImage1D != 0) (__glCompressedTexSubImage1D)(target, level, xoffset, width, format, imageSize, data);  }
PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC __glCompressedTexSubImage2D = nullptr; void APIENTRY glCompressedTexSubImage2D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data) { if (__glCompressedTexSubImage2D != 0) (__glCompressedTexSubImage2D)(target, level, xoffset, yoffset, width, height, format, imageSize, data);  }
PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC __glCompressedTexSubImage3D = nullptr; void APIENTRY glCompressedTexSubImage3D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data) { if (__glCompressedTexSubImage3D != 0) (__glCompressedTexSubImage3D)(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);  }
PFNGLGETCOMPRESSEDTEXIMAGEPROC __glGetCompressedTexImage = nullptr; void APIENTRY glGetCompressedTexImage (GLenum target, GLint level, void *img) { if (__glGetCompressedTexImage != 0) (__glGetCompressedTexImage)(target, level, img);  }
PFNGLLOADTRANSPOSEMATRIXDPROC __glLoadTransposeMatrixd = nullptr; void APIENTRY glLoadTransposeMatrixd (const GLdouble *m) { if (__glLoadTransposeMatrixd != 0) (__glLoadTransposeMatrixd)(m);  }
PFNGLLOADTRANSPOSEMATRIXFPROC __glLoadTransposeMatrixf = nullptr; void APIENTRY glLoadTransposeMatrixf (const GLfloat *m) { if (__glLoadTransposeMatrixf != 0) (__glLoadTransposeMatrixf)(m);  }
PFNGLMULTTRANSPOSEMATRIXDPROC __glMultTransposeMatrixd = nullptr; void APIENTRY glMultTransposeMatrixd (const GLdouble *m) { if (__glMultTransposeMatrixd != 0) (__glMultTransposeMatrixd)(m);  }
PFNGLMULTTRANSPOSEMATRIXFPROC __glMultTransposeMatrixf = nullptr; void APIENTRY glMultTransposeMatrixf (const GLfloat *m) { if (__glMultTransposeMatrixf != 0) (__glMultTransposeMatrixf)(m);  }
PFNGLMULTITEXCOORD1DPROC __glMultiTexCoord1d = nullptr; void APIENTRY glMultiTexCoord1d (GLenum target, GLdouble s) { if (__glMultiTexCoord1d != 0) (__glMultiTexCoord1d)(target, s);  }
PFNGLMULTITEXCOORD1DVPROC __glMultiTexCoord1dv = nullptr; void APIENTRY glMultiTexCoord1dv (GLenum target, const GLdouble *v) { if (__glMultiTexCoord1dv != 0) (__glMultiTexCoord1dv)(target, v);  }
PFNGLMULTITEXCOORD1FPROC __glMultiTexCoord1f = nullptr; void APIENTRY glMultiTexCoord1f (GLenum target, GLfloat s) { if (__glMultiTexCoord1f != 0) (__glMultiTexCoord1f)(target, s);  }
PFNGLMULTITEXCOORD1FVPROC __glMultiTexCoord1fv = nullptr; void APIENTRY glMultiTexCoord1fv (GLenum target, const GLfloat *v) { if (__glMultiTexCoord1fv != 0) (__glMultiTexCoord1fv)(target, v);  }
PFNGLMULTITEXCOORD1IPROC __glMultiTexCoord1i = nullptr; void APIENTRY glMultiTexCoord1i (GLenum target, GLint s) { if (__glMultiTexCoord1i != 0) (__glMultiTexCoord1i)(target, s);  }
PFNGLMULTITEXCOORD1IVPROC __glMultiTexCoord1iv = nullptr; void APIENTRY glMultiTexCoord1iv (GLenum target, const GLint *v) { if (__glMultiTexCoord1iv != 0) (__glMultiTexCoord1iv)(target, v);  }
PFNGLMULTITEXCOORD1SPROC __glMultiTexCoord1s = nullptr; void APIENTRY glMultiTexCoord1s (GLenum target, GLshort s) { if (__glMultiTexCoord1s != 0) (__glMultiTexCoord1s)(target, s);  }
PFNGLMULTITEXCOORD1SVPROC __glMultiTexCoord1sv = nullptr; void APIENTRY glMultiTexCoord1sv (GLenum target, const GLshort *v) { if (__glMultiTexCoord1sv != 0) (__glMultiTexCoord1sv)(target, v);  }
PFNGLMULTITEXCOORD2DPROC __glMultiTexCoord2d = nullptr; void APIENTRY glMultiTexCoord2d (GLenum target, GLdouble s, GLdouble t) { if (__glMultiTexCoord2d != 0) (__glMultiTexCoord2d)(target, s, t);  }
PFNGLMULTITEXCOORD2DVPROC __glMultiTexCoord2dv = nullptr; void APIENTRY glMultiTexCoord2dv (GLenum target, const GLdouble *v) { if (__glMultiTexCoord2dv != 0) (__glMultiTexCoord2dv)(target, v);  }
PFNGLMULTITEXCOORD2FPROC __glMultiTexCoord2f = nullptr; void APIENTRY glMultiTexCoord2f (GLenum target, GLfloat s, GLfloat t) { if (__glMultiTexCoord2f != 0) (__glMultiTexCoord2f)(target, s, t);  }
PFNGLMULTITEXCOORD2FVPROC __glMultiTexCoord2fv = nullptr; void APIENTRY glMultiTexCoord2fv (GLenum target, const GLfloat *v) { if (__glMultiTexCoord2fv != 0) (__glMultiTexCoord2fv)(target, v);  }
PFNGLMULTITEXCOORD2IPROC __glMultiTexCoord2i = nullptr; void APIENTRY glMultiTexCoord2i (GLenum target, GLint s, GLint t) { if (__glMultiTexCoord2i != 0) (__glMultiTexCoord2i)(target, s, t);  }
PFNGLMULTITEXCOORD2IVPROC __glMultiTexCoord2iv = nullptr; void APIENTRY glMultiTexCoord2iv (GLenum target, const GLint *v) { if (__glMultiTexCoord2iv != 0) (__glMultiTexCoord2iv)(target, v);  }
PFNGLMULTITEXCOORD2SPROC __glMultiTexCoord2s = nullptr; void APIENTRY glMultiTexCoord2s (GLenum target, GLshort s, GLshort t) { if (__glMultiTexCoord2s != 0) (__glMultiTexCoord2s)(target, s, t);  }
PFNGLMULTITEXCOORD2SVPROC __glMultiTexCoord2sv = nullptr; void APIENTRY glMultiTexCoord2sv (GLenum target, const GLshort *v) { if (__glMultiTexCoord2sv != 0) (__glMultiTexCoord2sv)(target, v);  }
PFNGLMULTITEXCOORD3DPROC __glMultiTexCoord3d = nullptr; void APIENTRY glMultiTexCoord3d (GLenum target, GLdouble s, GLdouble t, GLdouble r) { if (__glMultiTexCoord3d != 0) (__glMultiTexCoord3d)(target, s, t, r);  }
PFNGLMULTITEXCOORD3DVPROC __glMultiTexCoord3dv = nullptr; void APIENTRY glMultiTexCoord3dv (GLenum target, const GLdouble *v) { if (__glMultiTexCoord3dv != 0) (__glMultiTexCoord3dv)(target, v);  }
PFNGLMULTITEXCOORD3FPROC __glMultiTexCoord3f = nullptr; void APIENTRY glMultiTexCoord3f (GLenum target, GLfloat s, GLfloat t, GLfloat r) { if (__glMultiTexCoord3f != 0) (__glMultiTexCoord3f)(target, s, t, r);  }
PFNGLMULTITEXCOORD3FVPROC __glMultiTexCoord3fv = nullptr; void APIENTRY glMultiTexCoord3fv (GLenum target, const GLfloat *v) { if (__glMultiTexCoord3fv != 0) (__glMultiTexCoord3fv)(target, v);  }
PFNGLMULTITEXCOORD3IPROC __glMultiTexCoord3i = nullptr; void APIENTRY glMultiTexCoord3i (GLenum target, GLint s, GLint t, GLint r) { if (__glMultiTexCoord3i != 0) (__glMultiTexCoord3i)(target, s, t, r);  }
PFNGLMULTITEXCOORD3IVPROC __glMultiTexCoord3iv = nullptr; void APIENTRY glMultiTexCoord3iv (GLenum target, const GLint *v) { if (__glMultiTexCoord3iv != 0) (__glMultiTexCoord3iv)(target, v);  }
PFNGLMULTITEXCOORD3SPROC __glMultiTexCoord3s = nullptr; void APIENTRY glMultiTexCoord3s (GLenum target, GLshort s, GLshort t, GLshort r) { if (__glMultiTexCoord3s != 0) (__glMultiTexCoord3s)(target, s, t, r);  }
PFNGLMULTITEXCOORD3SVPROC __glMultiTexCoord3sv = nullptr; void APIENTRY glMultiTexCoord3sv (GLenum target, const GLshort *v) { if (__glMultiTexCoord3sv != 0) (__glMultiTexCoord3sv)(target, v);  }
PFNGLMULTITEXCOORD4DPROC __glMultiTexCoord4d = nullptr; void APIENTRY glMultiTexCoord4d (GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q) { if (__glMultiTexCoord4d != 0) (__glMultiTexCoord4d)(target, s, t, r, q);  }
PFNGLMULTITEXCOORD4DVPROC __glMultiTexCoord4dv = nullptr; void APIENTRY glMultiTexCoord4dv (GLenum target, const GLdouble *v) { if (__glMultiTexCoord4dv != 0) (__glMultiTexCoord4dv)(target, v);  }
PFNGLMULTITEXCOORD4FPROC __glMultiTexCoord4f = nullptr; void APIENTRY glMultiTexCoord4f (GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q) { if (__glMultiTexCoord4f != 0) (__glMultiTexCoord4f)(target, s, t, r, q);  }
PFNGLMULTITEXCOORD4FVPROC __glMultiTexCoord4fv = nullptr; void APIENTRY glMultiTexCoord4fv (GLenum target, const GLfloat *v) { if (__glMultiTexCoord4fv != 0) (__glMultiTexCoord4fv)(target, v);  }
PFNGLMULTITEXCOORD4IPROC __glMultiTexCoord4i = nullptr; void APIENTRY glMultiTexCoord4i (GLenum target, GLint s, GLint t, GLint r, GLint q) { if (__glMultiTexCoord4i != 0) (__glMultiTexCoord4i)(target, s, t, r, q);  }
PFNGLMULTITEXCOORD4IVPROC __glMultiTexCoord4iv = nullptr; void APIENTRY glMultiTexCoord4iv (GLenum target, const GLint *v) { if (__glMultiTexCoord4iv != 0) (__glMultiTexCoord4iv)(target, v);  }
PFNGLMULTITEXCOORD4SPROC __glMultiTexCoord4s = nullptr; void APIENTRY glMultiTexCoord4s (GLenum target, GLshort s, GLshort t, GLshort r, GLshort q) { if (__glMultiTexCoord4s != 0) (__glMultiTexCoord4s)(target, s, t, r, q);  }
PFNGLMULTITEXCOORD4SVPROC __glMultiTexCoord4sv = nullptr; void APIENTRY glMultiTexCoord4sv (GLenum target, const GLshort *v) { if (__glMultiTexCoord4sv != 0) (__glMultiTexCoord4sv)(target, v);  }
PFNGLSAMPLECOVERAGEPROC __glSampleCoverage = nullptr; void APIENTRY glSampleCoverage (GLfloat value, GLboolean invert) { if (__glSampleCoverage != 0) (__glSampleCoverage)(value, invert);  }
bool __loadGL_VERSION_1_3(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glActiveTexture = (PFNGLACTIVETEXTUREPROC)proc((const GLubyte*)"glActiveTexture")) != nullptr) || r;
    r = ((__glClientActiveTexture = (PFNGLCLIENTACTIVETEXTUREPROC)proc((const GLubyte*)"glClientActiveTexture")) != nullptr) || r;
    r = ((__glCompressedTexImage1D = (PFNGLCOMPRESSEDTEXIMAGE1DPROC)proc((const GLubyte*)"glCompressedTexImage1D")) != nullptr) || r;
    r = ((__glCompressedTexImage2D = (PFNGLCOMPRESSEDTEXIMAGE2DPROC)proc((const GLubyte*)"glCompressedTexImage2D")) != nullptr) || r;
    r = ((__glCompressedTexImage3D = (PFNGLCOMPRESSEDTEXIMAGE3DPROC)proc((const GLubyte*)"glCompressedTexImage3D")) != nullptr) || r;
    r = ((__glCompressedTexSubImage1D = (PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC)proc((const GLubyte*)"glCompressedTexSubImage1D")) != nullptr) || r;
    r = ((__glCompressedTexSubImage2D = (PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC)proc((const GLubyte*)"glCompressedTexSubImage2D")) != nullptr) || r;
    r = ((__glCompressedTexSubImage3D = (PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC)proc((const GLubyte*)"glCompressedTexSubImage3D")) != nullptr) || r;
    r = ((__glGetCompressedTexImage = (PFNGLGETCOMPRESSEDTEXIMAGEPROC)proc((const GLubyte*)"glGetCompressedTexImage")) != nullptr) || r;
    r = ((__glLoadTransposeMatrixd = (PFNGLLOADTRANSPOSEMATRIXDPROC)proc((const GLubyte*)"glLoadTransposeMatrixd")) != nullptr) || r;
    r = ((__glLoadTransposeMatrixf = (PFNGLLOADTRANSPOSEMATRIXFPROC)proc((const GLubyte*)"glLoadTransposeMatrixf")) != nullptr) || r;
    r = ((__glMultTransposeMatrixd = (PFNGLMULTTRANSPOSEMATRIXDPROC)proc((const GLubyte*)"glMultTransposeMatrixd")) != nullptr) || r;
    r = ((__glMultTransposeMatrixf = (PFNGLMULTTRANSPOSEMATRIXFPROC)proc((const GLubyte*)"glMultTransposeMatrixf")) != nullptr) || r;
    r = ((__glMultiTexCoord1d = (PFNGLMULTITEXCOORD1DPROC)proc((const GLubyte*)"glMultiTexCoord1d")) != nullptr) || r;
    r = ((__glMultiTexCoord1dv = (PFNGLMULTITEXCOORD1DVPROC)proc((const GLubyte*)"glMultiTexCoord1dv")) != nullptr) || r;
    r = ((__glMultiTexCoord1f = (PFNGLMULTITEXCOORD1FPROC)proc((const GLubyte*)"glMultiTexCoord1f")) != nullptr) || r;
    r = ((__glMultiTexCoord1fv = (PFNGLMULTITEXCOORD1FVPROC)proc((const GLubyte*)"glMultiTexCoord1fv")) != nullptr) || r;
    r = ((__glMultiTexCoord1i = (PFNGLMULTITEXCOORD1IPROC)proc((const GLubyte*)"glMultiTexCoord1i")) != nullptr) || r;
    r = ((__glMultiTexCoord1iv = (PFNGLMULTITEXCOORD1IVPROC)proc((const GLubyte*)"glMultiTexCoord1iv")) != nullptr) || r;
    r = ((__glMultiTexCoord1s = (PFNGLMULTITEXCOORD1SPROC)proc((const GLubyte*)"glMultiTexCoord1s")) != nullptr) || r;
    r = ((__glMultiTexCoord1sv = (PFNGLMULTITEXCOORD1SVPROC)proc((const GLubyte*)"glMultiTexCoord1sv")) != nullptr) || r;
    r = ((__glMultiTexCoord2d = (PFNGLMULTITEXCOORD2DPROC)proc((const GLubyte*)"glMultiTexCoord2d")) != nullptr) || r;
    r = ((__glMultiTexCoord2dv = (PFNGLMULTITEXCOORD2DVPROC)proc((const GLubyte*)"glMultiTexCoord2dv")) != nullptr) || r;
    r = ((__glMultiTexCoord2f = (PFNGLMULTITEXCOORD2FPROC)proc((const GLubyte*)"glMultiTexCoord2f")) != nullptr) || r;
    r = ((__glMultiTexCoord2fv = (PFNGLMULTITEXCOORD2FVPROC)proc((const GLubyte*)"glMultiTexCoord2fv")) != nullptr) || r;
    r = ((__glMultiTexCoord2i = (PFNGLMULTITEXCOORD2IPROC)proc((const GLubyte*)"glMultiTexCoord2i")) != nullptr) || r;
    r = ((__glMultiTexCoord2iv = (PFNGLMULTITEXCOORD2IVPROC)proc((const GLubyte*)"glMultiTexCoord2iv")) != nullptr) || r;
    r = ((__glMultiTexCoord2s = (PFNGLMULTITEXCOORD2SPROC)proc((const GLubyte*)"glMultiTexCoord2s")) != nullptr) || r;
    r = ((__glMultiTexCoord2sv = (PFNGLMULTITEXCOORD2SVPROC)proc((const GLubyte*)"glMultiTexCoord2sv")) != nullptr) || r;
    r = ((__glMultiTexCoord3d = (PFNGLMULTITEXCOORD3DPROC)proc((const GLubyte*)"glMultiTexCoord3d")) != nullptr) || r;
    r = ((__glMultiTexCoord3dv = (PFNGLMULTITEXCOORD3DVPROC)proc((const GLubyte*)"glMultiTexCoord3dv")) != nullptr) || r;
    r = ((__glMultiTexCoord3f = (PFNGLMULTITEXCOORD3FPROC)proc((const GLubyte*)"glMultiTexCoord3f")) != nullptr) || r;
    r = ((__glMultiTexCoord3fv = (PFNGLMULTITEXCOORD3FVPROC)proc((const GLubyte*)"glMultiTexCoord3fv")) != nullptr) || r;
    r = ((__glMultiTexCoord3i = (PFNGLMULTITEXCOORD3IPROC)proc((const GLubyte*)"glMultiTexCoord3i")) != nullptr) || r;
    r = ((__glMultiTexCoord3iv = (PFNGLMULTITEXCOORD3IVPROC)proc((const GLubyte*)"glMultiTexCoord3iv")) != nullptr) || r;
    r = ((__glMultiTexCoord3s = (PFNGLMULTITEXCOORD3SPROC)proc((const GLubyte*)"glMultiTexCoord3s")) != nullptr) || r;
    r = ((__glMultiTexCoord3sv = (PFNGLMULTITEXCOORD3SVPROC)proc((const GLubyte*)"glMultiTexCoord3sv")) != nullptr) || r;
    r = ((__glMultiTexCoord4d = (PFNGLMULTITEXCOORD4DPROC)proc((const GLubyte*)"glMultiTexCoord4d")) != nullptr) || r;
    r = ((__glMultiTexCoord4dv = (PFNGLMULTITEXCOORD4DVPROC)proc((const GLubyte*)"glMultiTexCoord4dv")) != nullptr) || r;
    r = ((__glMultiTexCoord4f = (PFNGLMULTITEXCOORD4FPROC)proc((const GLubyte*)"glMultiTexCoord4f")) != nullptr) || r;
    r = ((__glMultiTexCoord4fv = (PFNGLMULTITEXCOORD4FVPROC)proc((const GLubyte*)"glMultiTexCoord4fv")) != nullptr) || r;
    r = ((__glMultiTexCoord4i = (PFNGLMULTITEXCOORD4IPROC)proc((const GLubyte*)"glMultiTexCoord4i")) != nullptr) || r;
    r = ((__glMultiTexCoord4iv = (PFNGLMULTITEXCOORD4IVPROC)proc((const GLubyte*)"glMultiTexCoord4iv")) != nullptr) || r;
    r = ((__glMultiTexCoord4s = (PFNGLMULTITEXCOORD4SPROC)proc((const GLubyte*)"glMultiTexCoord4s")) != nullptr) || r;
    r = ((__glMultiTexCoord4sv = (PFNGLMULTITEXCOORD4SVPROC)proc((const GLubyte*)"glMultiTexCoord4sv")) != nullptr) || r;
    r = ((__glSampleCoverage = (PFNGLSAMPLECOVERAGEPROC)proc((const GLubyte*)"glSampleCoverage")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_VERSION_1_3 = false;
/* GL_VERSION_1_4 */
PFNGLBLENDCOLORPROC __glBlendColor = nullptr; void APIENTRY glBlendColor (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) { if (__glBlendColor != 0) (__glBlendColor)(red, green, blue, alpha);  }
PFNGLBLENDEQUATIONPROC __glBlendEquation = nullptr; void APIENTRY glBlendEquation (GLenum mode) { if (__glBlendEquation != 0) (__glBlendEquation)(mode);  }
PFNGLBLENDFUNCSEPARATEPROC __glBlendFuncSeparate = nullptr; void APIENTRY glBlendFuncSeparate (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha) { if (__glBlendFuncSeparate != 0) (__glBlendFuncSeparate)(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);  }
PFNGLFOGCOORDPOINTERPROC __glFogCoordPointer = nullptr; void APIENTRY glFogCoordPointer (GLenum type, GLsizei stride, const void *pointer) { if (__glFogCoordPointer != 0) (__glFogCoordPointer)(type, stride, pointer);  }
PFNGLFOGCOORDDPROC __glFogCoordd = nullptr; void APIENTRY glFogCoordd (GLdouble coord) { if (__glFogCoordd != 0) (__glFogCoordd)(coord);  }
PFNGLFOGCOORDDVPROC __glFogCoorddv = nullptr; void APIENTRY glFogCoorddv (const GLdouble *coord) { if (__glFogCoorddv != 0) (__glFogCoorddv)(coord);  }
PFNGLFOGCOORDFPROC __glFogCoordf = nullptr; void APIENTRY glFogCoordf (GLfloat coord) { if (__glFogCoordf != 0) (__glFogCoordf)(coord);  }
PFNGLFOGCOORDFVPROC __glFogCoordfv = nullptr; void APIENTRY glFogCoordfv (const GLfloat *coord) { if (__glFogCoordfv != 0) (__glFogCoordfv)(coord);  }
PFNGLMULTIDRAWARRAYSPROC __glMultiDrawArrays = nullptr; void APIENTRY glMultiDrawArrays (GLenum mode, const GLint *first, const GLsizei *count, GLsizei drawcount) { if (__glMultiDrawArrays != 0) (__glMultiDrawArrays)(mode, first, count, drawcount);  }
PFNGLMULTIDRAWELEMENTSPROC __glMultiDrawElements = nullptr; void APIENTRY glMultiDrawElements (GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount) { if (__glMultiDrawElements != 0) (__glMultiDrawElements)(mode, count, type, indices, drawcount);  }
PFNGLPOINTPARAMETERFPROC __glPointParameterf = nullptr; void APIENTRY glPointParameterf (GLenum pname, GLfloat param) { if (__glPointParameterf != 0) (__glPointParameterf)(pname, param);  }
PFNGLPOINTPARAMETERFVPROC __glPointParameterfv = nullptr; void APIENTRY glPointParameterfv (GLenum pname, const GLfloat *params) { if (__glPointParameterfv != 0) (__glPointParameterfv)(pname, params);  }
PFNGLPOINTPARAMETERIPROC __glPointParameteri = nullptr; void APIENTRY glPointParameteri (GLenum pname, GLint param) { if (__glPointParameteri != 0) (__glPointParameteri)(pname, param);  }
PFNGLPOINTPARAMETERIVPROC __glPointParameteriv = nullptr; void APIENTRY glPointParameteriv (GLenum pname, const GLint *params) { if (__glPointParameteriv != 0) (__glPointParameteriv)(pname, params);  }
PFNGLSECONDARYCOLOR3BPROC __glSecondaryColor3b = nullptr; void APIENTRY glSecondaryColor3b (GLbyte red, GLbyte green, GLbyte blue) { if (__glSecondaryColor3b != 0) (__glSecondaryColor3b)(red, green, blue);  }
PFNGLSECONDARYCOLOR3BVPROC __glSecondaryColor3bv = nullptr; void APIENTRY glSecondaryColor3bv (const GLbyte *v) { if (__glSecondaryColor3bv != 0) (__glSecondaryColor3bv)(v);  }
PFNGLSECONDARYCOLOR3DPROC __glSecondaryColor3d = nullptr; void APIENTRY glSecondaryColor3d (GLdouble red, GLdouble green, GLdouble blue) { if (__glSecondaryColor3d != 0) (__glSecondaryColor3d)(red, green, blue);  }
PFNGLSECONDARYCOLOR3DVPROC __glSecondaryColor3dv = nullptr; void APIENTRY glSecondaryColor3dv (const GLdouble *v) { if (__glSecondaryColor3dv != 0) (__glSecondaryColor3dv)(v);  }
PFNGLSECONDARYCOLOR3FPROC __glSecondaryColor3f = nullptr; void APIENTRY glSecondaryColor3f (GLfloat red, GLfloat green, GLfloat blue) { if (__glSecondaryColor3f != 0) (__glSecondaryColor3f)(red, green, blue);  }
PFNGLSECONDARYCOLOR3FVPROC __glSecondaryColor3fv = nullptr; void APIENTRY glSecondaryColor3fv (const GLfloat *v) { if (__glSecondaryColor3fv != 0) (__glSecondaryColor3fv)(v);  }
PFNGLSECONDARYCOLOR3IPROC __glSecondaryColor3i = nullptr; void APIENTRY glSecondaryColor3i (GLint red, GLint green, GLint blue) { if (__glSecondaryColor3i != 0) (__glSecondaryColor3i)(red, green, blue);  }
PFNGLSECONDARYCOLOR3IVPROC __glSecondaryColor3iv = nullptr; void APIENTRY glSecondaryColor3iv (const GLint *v) { if (__glSecondaryColor3iv != 0) (__glSecondaryColor3iv)(v);  }
PFNGLSECONDARYCOLOR3SPROC __glSecondaryColor3s = nullptr; void APIENTRY glSecondaryColor3s (GLshort red, GLshort green, GLshort blue) { if (__glSecondaryColor3s != 0) (__glSecondaryColor3s)(red, green, blue);  }
PFNGLSECONDARYCOLOR3SVPROC __glSecondaryColor3sv = nullptr; void APIENTRY glSecondaryColor3sv (const GLshort *v) { if (__glSecondaryColor3sv != 0) (__glSecondaryColor3sv)(v);  }
PFNGLSECONDARYCOLOR3UBPROC __glSecondaryColor3ub = nullptr; void APIENTRY glSecondaryColor3ub (GLubyte red, GLubyte green, GLubyte blue) { if (__glSecondaryColor3ub != 0) (__glSecondaryColor3ub)(red, green, blue);  }
PFNGLSECONDARYCOLOR3UBVPROC __glSecondaryColor3ubv = nullptr; void APIENTRY glSecondaryColor3ubv (const GLubyte *v) { if (__glSecondaryColor3ubv != 0) (__glSecondaryColor3ubv)(v);  }
PFNGLSECONDARYCOLOR3UIPROC __glSecondaryColor3ui = nullptr; void APIENTRY glSecondaryColor3ui (GLuint red, GLuint green, GLuint blue) { if (__glSecondaryColor3ui != 0) (__glSecondaryColor3ui)(red, green, blue);  }
PFNGLSECONDARYCOLOR3UIVPROC __glSecondaryColor3uiv = nullptr; void APIENTRY glSecondaryColor3uiv (const GLuint *v) { if (__glSecondaryColor3uiv != 0) (__glSecondaryColor3uiv)(v);  }
PFNGLSECONDARYCOLOR3USPROC __glSecondaryColor3us = nullptr; void APIENTRY glSecondaryColor3us (GLushort red, GLushort green, GLushort blue) { if (__glSecondaryColor3us != 0) (__glSecondaryColor3us)(red, green, blue);  }
PFNGLSECONDARYCOLOR3USVPROC __glSecondaryColor3usv = nullptr; void APIENTRY glSecondaryColor3usv (const GLushort *v) { if (__glSecondaryColor3usv != 0) (__glSecondaryColor3usv)(v);  }
PFNGLSECONDARYCOLORPOINTERPROC __glSecondaryColorPointer = nullptr; void APIENTRY glSecondaryColorPointer (GLint size, GLenum type, GLsizei stride, const void *pointer) { if (__glSecondaryColorPointer != 0) (__glSecondaryColorPointer)(size, type, stride, pointer);  }
PFNGLWINDOWPOS2DPROC __glWindowPos2d = nullptr; void APIENTRY glWindowPos2d (GLdouble x, GLdouble y) { if (__glWindowPos2d != 0) (__glWindowPos2d)(x, y);  }
PFNGLWINDOWPOS2DVPROC __glWindowPos2dv = nullptr; void APIENTRY glWindowPos2dv (const GLdouble *v) { if (__glWindowPos2dv != 0) (__glWindowPos2dv)(v);  }
PFNGLWINDOWPOS2FPROC __glWindowPos2f = nullptr; void APIENTRY glWindowPos2f (GLfloat x, GLfloat y) { if (__glWindowPos2f != 0) (__glWindowPos2f)(x, y);  }
PFNGLWINDOWPOS2FVPROC __glWindowPos2fv = nullptr; void APIENTRY glWindowPos2fv (const GLfloat *v) { if (__glWindowPos2fv != 0) (__glWindowPos2fv)(v);  }
PFNGLWINDOWPOS2IPROC __glWindowPos2i = nullptr; void APIENTRY glWindowPos2i (GLint x, GLint y) { if (__glWindowPos2i != 0) (__glWindowPos2i)(x, y);  }
PFNGLWINDOWPOS2IVPROC __glWindowPos2iv = nullptr; void APIENTRY glWindowPos2iv (const GLint *v) { if (__glWindowPos2iv != 0) (__glWindowPos2iv)(v);  }
PFNGLWINDOWPOS2SPROC __glWindowPos2s = nullptr; void APIENTRY glWindowPos2s (GLshort x, GLshort y) { if (__glWindowPos2s != 0) (__glWindowPos2s)(x, y);  }
PFNGLWINDOWPOS2SVPROC __glWindowPos2sv = nullptr; void APIENTRY glWindowPos2sv (const GLshort *v) { if (__glWindowPos2sv != 0) (__glWindowPos2sv)(v);  }
PFNGLWINDOWPOS3DPROC __glWindowPos3d = nullptr; void APIENTRY glWindowPos3d (GLdouble x, GLdouble y, GLdouble z) { if (__glWindowPos3d != 0) (__glWindowPos3d)(x, y, z);  }
PFNGLWINDOWPOS3DVPROC __glWindowPos3dv = nullptr; void APIENTRY glWindowPos3dv (const GLdouble *v) { if (__glWindowPos3dv != 0) (__glWindowPos3dv)(v);  }
PFNGLWINDOWPOS3FPROC __glWindowPos3f = nullptr; void APIENTRY glWindowPos3f (GLfloat x, GLfloat y, GLfloat z) { if (__glWindowPos3f != 0) (__glWindowPos3f)(x, y, z);  }
PFNGLWINDOWPOS3FVPROC __glWindowPos3fv = nullptr; void APIENTRY glWindowPos3fv (const GLfloat *v) { if (__glWindowPos3fv != 0) (__glWindowPos3fv)(v);  }
PFNGLWINDOWPOS3IPROC __glWindowPos3i = nullptr; void APIENTRY glWindowPos3i (GLint x, GLint y, GLint z) { if (__glWindowPos3i != 0) (__glWindowPos3i)(x, y, z);  }
PFNGLWINDOWPOS3IVPROC __glWindowPos3iv = nullptr; void APIENTRY glWindowPos3iv (const GLint *v) { if (__glWindowPos3iv != 0) (__glWindowPos3iv)(v);  }
PFNGLWINDOWPOS3SPROC __glWindowPos3s = nullptr; void APIENTRY glWindowPos3s (GLshort x, GLshort y, GLshort z) { if (__glWindowPos3s != 0) (__glWindowPos3s)(x, y, z);  }
PFNGLWINDOWPOS3SVPROC __glWindowPos3sv = nullptr; void APIENTRY glWindowPos3sv (const GLshort *v) { if (__glWindowPos3sv != 0) (__glWindowPos3sv)(v);  }
bool __loadGL_VERSION_1_4(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glBlendColor = (PFNGLBLENDCOLORPROC)proc((const GLubyte*)"glBlendColor")) != nullptr) || r;
    r = ((__glBlendEquation = (PFNGLBLENDEQUATIONPROC)proc((const GLubyte*)"glBlendEquation")) != nullptr) || r;
    r = ((__glBlendFuncSeparate = (PFNGLBLENDFUNCSEPARATEPROC)proc((const GLubyte*)"glBlendFuncSeparate")) != nullptr) || r;
    r = ((__glFogCoordPointer = (PFNGLFOGCOORDPOINTERPROC)proc((const GLubyte*)"glFogCoordPointer")) != nullptr) || r;
    r = ((__glFogCoordd = (PFNGLFOGCOORDDPROC)proc((const GLubyte*)"glFogCoordd")) != nullptr) || r;
    r = ((__glFogCoorddv = (PFNGLFOGCOORDDVPROC)proc((const GLubyte*)"glFogCoorddv")) != nullptr) || r;
    r = ((__glFogCoordf = (PFNGLFOGCOORDFPROC)proc((const GLubyte*)"glFogCoordf")) != nullptr) || r;
    r = ((__glFogCoordfv = (PFNGLFOGCOORDFVPROC)proc((const GLubyte*)"glFogCoordfv")) != nullptr) || r;
    r = ((__glMultiDrawArrays = (PFNGLMULTIDRAWARRAYSPROC)proc((const GLubyte*)"glMultiDrawArrays")) != nullptr) || r;
    r = ((__glMultiDrawElements = (PFNGLMULTIDRAWELEMENTSPROC)proc((const GLubyte*)"glMultiDrawElements")) != nullptr) || r;
    r = ((__glPointParameterf = (PFNGLPOINTPARAMETERFPROC)proc((const GLubyte*)"glPointParameterf")) != nullptr) || r;
    r = ((__glPointParameterfv = (PFNGLPOINTPARAMETERFVPROC)proc((const GLubyte*)"glPointParameterfv")) != nullptr) || r;
    r = ((__glPointParameteri = (PFNGLPOINTPARAMETERIPROC)proc((const GLubyte*)"glPointParameteri")) != nullptr) || r;
    r = ((__glPointParameteriv = (PFNGLPOINTPARAMETERIVPROC)proc((const GLubyte*)"glPointParameteriv")) != nullptr) || r;
    r = ((__glSecondaryColor3b = (PFNGLSECONDARYCOLOR3BPROC)proc((const GLubyte*)"glSecondaryColor3b")) != nullptr) || r;
    r = ((__glSecondaryColor3bv = (PFNGLSECONDARYCOLOR3BVPROC)proc((const GLubyte*)"glSecondaryColor3bv")) != nullptr) || r;
    r = ((__glSecondaryColor3d = (PFNGLSECONDARYCOLOR3DPROC)proc((const GLubyte*)"glSecondaryColor3d")) != nullptr) || r;
    r = ((__glSecondaryColor3dv = (PFNGLSECONDARYCOLOR3DVPROC)proc((const GLubyte*)"glSecondaryColor3dv")) != nullptr) || r;
    r = ((__glSecondaryColor3f = (PFNGLSECONDARYCOLOR3FPROC)proc((const GLubyte*)"glSecondaryColor3f")) != nullptr) || r;
    r = ((__glSecondaryColor3fv = (PFNGLSECONDARYCOLOR3FVPROC)proc((const GLubyte*)"glSecondaryColor3fv")) != nullptr) || r;
    r = ((__glSecondaryColor3i = (PFNGLSECONDARYCOLOR3IPROC)proc((const GLubyte*)"glSecondaryColor3i")) != nullptr) || r;
    r = ((__glSecondaryColor3iv = (PFNGLSECONDARYCOLOR3IVPROC)proc((const GLubyte*)"glSecondaryColor3iv")) != nullptr) || r;
    r = ((__glSecondaryColor3s = (PFNGLSECONDARYCOLOR3SPROC)proc((const GLubyte*)"glSecondaryColor3s")) != nullptr) || r;
    r = ((__glSecondaryColor3sv = (PFNGLSECONDARYCOLOR3SVPROC)proc((const GLubyte*)"glSecondaryColor3sv")) != nullptr) || r;
    r = ((__glSecondaryColor3ub = (PFNGLSECONDARYCOLOR3UBPROC)proc((const GLubyte*)"glSecondaryColor3ub")) != nullptr) || r;
    r = ((__glSecondaryColor3ubv = (PFNGLSECONDARYCOLOR3UBVPROC)proc((const GLubyte*)"glSecondaryColor3ubv")) != nullptr) || r;
    r = ((__glSecondaryColor3ui = (PFNGLSECONDARYCOLOR3UIPROC)proc((const GLubyte*)"glSecondaryColor3ui")) != nullptr) || r;
    r = ((__glSecondaryColor3uiv = (PFNGLSECONDARYCOLOR3UIVPROC)proc((const GLubyte*)"glSecondaryColor3uiv")) != nullptr) || r;
    r = ((__glSecondaryColor3us = (PFNGLSECONDARYCOLOR3USPROC)proc((const GLubyte*)"glSecondaryColor3us")) != nullptr) || r;
    r = ((__glSecondaryColor3usv = (PFNGLSECONDARYCOLOR3USVPROC)proc((const GLubyte*)"glSecondaryColor3usv")) != nullptr) || r;
    r = ((__glSecondaryColorPointer = (PFNGLSECONDARYCOLORPOINTERPROC)proc((const GLubyte*)"glSecondaryColorPointer")) != nullptr) || r;
    r = ((__glWindowPos2d = (PFNGLWINDOWPOS2DPROC)proc((const GLubyte*)"glWindowPos2d")) != nullptr) || r;
    r = ((__glWindowPos2dv = (PFNGLWINDOWPOS2DVPROC)proc((const GLubyte*)"glWindowPos2dv")) != nullptr) || r;
    r = ((__glWindowPos2f = (PFNGLWINDOWPOS2FPROC)proc((const GLubyte*)"glWindowPos2f")) != nullptr) || r;
    r = ((__glWindowPos2fv = (PFNGLWINDOWPOS2FVPROC)proc((const GLubyte*)"glWindowPos2fv")) != nullptr) || r;
    r = ((__glWindowPos2i = (PFNGLWINDOWPOS2IPROC)proc((const GLubyte*)"glWindowPos2i")) != nullptr) || r;
    r = ((__glWindowPos2iv = (PFNGLWINDOWPOS2IVPROC)proc((const GLubyte*)"glWindowPos2iv")) != nullptr) || r;
    r = ((__glWindowPos2s = (PFNGLWINDOWPOS2SPROC)proc((const GLubyte*)"glWindowPos2s")) != nullptr) || r;
    r = ((__glWindowPos2sv = (PFNGLWINDOWPOS2SVPROC)proc((const GLubyte*)"glWindowPos2sv")) != nullptr) || r;
    r = ((__glWindowPos3d = (PFNGLWINDOWPOS3DPROC)proc((const GLubyte*)"glWindowPos3d")) != nullptr) || r;
    r = ((__glWindowPos3dv = (PFNGLWINDOWPOS3DVPROC)proc((const GLubyte*)"glWindowPos3dv")) != nullptr) || r;
    r = ((__glWindowPos3f = (PFNGLWINDOWPOS3FPROC)proc((const GLubyte*)"glWindowPos3f")) != nullptr) || r;
    r = ((__glWindowPos3fv = (PFNGLWINDOWPOS3FVPROC)proc((const GLubyte*)"glWindowPos3fv")) != nullptr) || r;
    r = ((__glWindowPos3i = (PFNGLWINDOWPOS3IPROC)proc((const GLubyte*)"glWindowPos3i")) != nullptr) || r;
    r = ((__glWindowPos3iv = (PFNGLWINDOWPOS3IVPROC)proc((const GLubyte*)"glWindowPos3iv")) != nullptr) || r;
    r = ((__glWindowPos3s = (PFNGLWINDOWPOS3SPROC)proc((const GLubyte*)"glWindowPos3s")) != nullptr) || r;
    r = ((__glWindowPos3sv = (PFNGLWINDOWPOS3SVPROC)proc((const GLubyte*)"glWindowPos3sv")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_VERSION_1_4 = false;
/* GL_VERSION_1_5 */
PFNGLBEGINQUERYPROC __glBeginQuery = nullptr; void APIENTRY glBeginQuery (GLenum target, GLuint id) { if (__glBeginQuery != 0) (__glBeginQuery)(target, id);  }
PFNGLBINDBUFFERPROC __glBindBuffer = nullptr; void APIENTRY glBindBuffer (GLenum target, GLuint buffer) { if (__glBindBuffer != 0) (__glBindBuffer)(target, buffer);  }
PFNGLBUFFERDATAPROC __glBufferData = nullptr; void APIENTRY glBufferData (GLenum target, GLsizeiptr size, const void *data, GLenum usage) { if (__glBufferData != 0) (__glBufferData)(target, size, data, usage);  }
PFNGLBUFFERSUBDATAPROC __glBufferSubData = nullptr; void APIENTRY glBufferSubData (GLenum target, GLintptr offset, GLsizeiptr size, const void *data) { if (__glBufferSubData != 0) (__glBufferSubData)(target, offset, size, data);  }
PFNGLDELETEBUFFERSPROC __glDeleteBuffers = nullptr; void APIENTRY glDeleteBuffers (GLsizei n, const GLuint *buffers) { if (__glDeleteBuffers != 0) (__glDeleteBuffers)(n, buffers);  }
PFNGLDELETEQUERIESPROC __glDeleteQueries = nullptr; void APIENTRY glDeleteQueries (GLsizei n, const GLuint *ids) { if (__glDeleteQueries != 0) (__glDeleteQueries)(n, ids);  }
PFNGLENDQUERYPROC __glEndQuery = nullptr; void APIENTRY glEndQuery (GLenum target) { if (__glEndQuery != 0) (__glEndQuery)(target);  }
PFNGLGENBUFFERSPROC __glGenBuffers = nullptr; void APIENTRY glGenBuffers (GLsizei n, GLuint *buffers) { if (__glGenBuffers != 0) (__glGenBuffers)(n, buffers);  }
PFNGLGENQUERIESPROC __glGenQueries = nullptr; void APIENTRY glGenQueries (GLsizei n, GLuint *ids) { if (__glGenQueries != 0) (__glGenQueries)(n, ids);  }
PFNGLGETBUFFERPARAMETERIVPROC __glGetBufferParameteriv = nullptr; void APIENTRY glGetBufferParameteriv (GLenum target, GLenum pname, GLint *params) { if (__glGetBufferParameteriv != 0) (__glGetBufferParameteriv)(target, pname, params);  }
PFNGLGETBUFFERPOINTERVPROC __glGetBufferPointerv = nullptr; void APIENTRY glGetBufferPointerv (GLenum target, GLenum pname, void **params) { if (__glGetBufferPointerv != 0) (__glGetBufferPointerv)(target, pname, params);  }
PFNGLGETBUFFERSUBDATAPROC __glGetBufferSubData = nullptr; void APIENTRY glGetBufferSubData (GLenum target, GLintptr offset, GLsizeiptr size, void *data) { if (__glGetBufferSubData != 0) (__glGetBufferSubData)(target, offset, size, data);  }
PFNGLGETQUERYOBJECTIVPROC __glGetQueryObjectiv = nullptr; void APIENTRY glGetQueryObjectiv (GLuint id, GLenum pname, GLint *params) { if (__glGetQueryObjectiv != 0) (__glGetQueryObjectiv)(id, pname, params);  }
PFNGLGETQUERYOBJECTUIVPROC __glGetQueryObjectuiv = nullptr; void APIENTRY glGetQueryObjectuiv (GLuint id, GLenum pname, GLuint *params) { if (__glGetQueryObjectuiv != 0) (__glGetQueryObjectuiv)(id, pname, params);  }
PFNGLGETQUERYIVPROC __glGetQueryiv = nullptr; void APIENTRY glGetQueryiv (GLenum target, GLenum pname, GLint *params) { if (__glGetQueryiv != 0) (__glGetQueryiv)(target, pname, params);  }
PFNGLISBUFFERPROC __glIsBuffer = nullptr; GLboolean APIENTRY glIsBuffer (GLuint buffer) { if (__glIsBuffer != 0) return (__glIsBuffer)(buffer); return 0; }
PFNGLISQUERYPROC __glIsQuery = nullptr; GLboolean APIENTRY glIsQuery (GLuint id) { if (__glIsQuery != 0) return (__glIsQuery)(id); return 0; }
PFNGLMAPBUFFERPROC __glMapBuffer = nullptr; void *APIENTRY glMapBuffer (GLenum target, GLenum access) { if (__glMapBuffer != 0) return (__glMapBuffer)(target, access); return 0; }
PFNGLUNMAPBUFFERPROC __glUnmapBuffer = nullptr; GLboolean APIENTRY glUnmapBuffer (GLenum target) { if (__glUnmapBuffer != 0) return (__glUnmapBuffer)(target); return 0; }
bool __loadGL_VERSION_1_5(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glBeginQuery = (PFNGLBEGINQUERYPROC)proc((const GLubyte*)"glBeginQuery")) != nullptr) || r;
    r = ((__glBindBuffer = (PFNGLBINDBUFFERPROC)proc((const GLubyte*)"glBindBuffer")) != nullptr) || r;
    r = ((__glBufferData = (PFNGLBUFFERDATAPROC)proc((const GLubyte*)"glBufferData")) != nullptr) || r;
    r = ((__glBufferSubData = (PFNGLBUFFERSUBDATAPROC)proc((const GLubyte*)"glBufferSubData")) != nullptr) || r;
    r = ((__glDeleteBuffers = (PFNGLDELETEBUFFERSPROC)proc((const GLubyte*)"glDeleteBuffers")) != nullptr) || r;
    r = ((__glDeleteQueries = (PFNGLDELETEQUERIESPROC)proc((const GLubyte*)"glDeleteQueries")) != nullptr) || r;
    r = ((__glEndQuery = (PFNGLENDQUERYPROC)proc((const GLubyte*)"glEndQuery")) != nullptr) || r;
    r = ((__glGenBuffers = (PFNGLGENBUFFERSPROC)proc((const GLubyte*)"glGenBuffers")) != nullptr) || r;
    r = ((__glGenQueries = (PFNGLGENQUERIESPROC)proc((const GLubyte*)"glGenQueries")) != nullptr) || r;
    r = ((__glGetBufferParameteriv = (PFNGLGETBUFFERPARAMETERIVPROC)proc((const GLubyte*)"glGetBufferParameteriv")) != nullptr) || r;
    r = ((__glGetBufferPointerv = (PFNGLGETBUFFERPOINTERVPROC)proc((const GLubyte*)"glGetBufferPointerv")) != nullptr) || r;
    r = ((__glGetBufferSubData = (PFNGLGETBUFFERSUBDATAPROC)proc((const GLubyte*)"glGetBufferSubData")) != nullptr) || r;
    r = ((__glGetQueryObjectiv = (PFNGLGETQUERYOBJECTIVPROC)proc((const GLubyte*)"glGetQueryObjectiv")) != nullptr) || r;
    r = ((__glGetQueryObjectuiv = (PFNGLGETQUERYOBJECTUIVPROC)proc((const GLubyte*)"glGetQueryObjectuiv")) != nullptr) || r;
    r = ((__glGetQueryiv = (PFNGLGETQUERYIVPROC)proc((const GLubyte*)"glGetQueryiv")) != nullptr) || r;
    r = ((__glIsBuffer = (PFNGLISBUFFERPROC)proc((const GLubyte*)"glIsBuffer")) != nullptr) || r;
    r = ((__glIsQuery = (PFNGLISQUERYPROC)proc((const GLubyte*)"glIsQuery")) != nullptr) || r;
    r = ((__glMapBuffer = (PFNGLMAPBUFFERPROC)proc((const GLubyte*)"glMapBuffer")) != nullptr) || r;
    r = ((__glUnmapBuffer = (PFNGLUNMAPBUFFERPROC)proc((const GLubyte*)"glUnmapBuffer")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_VERSION_1_5 = false;
/* GL_VERSION_2_0 */
PFNGLATTACHSHADERPROC __glAttachShader = nullptr; void APIENTRY glAttachShader (GLuint program, GLuint shader) { if (__glAttachShader != 0) (__glAttachShader)(program, shader);  }
PFNGLBINDATTRIBLOCATIONPROC __glBindAttribLocation = nullptr; void APIENTRY glBindAttribLocation (GLuint program, GLuint index, const GLchar *name) { if (__glBindAttribLocation != 0) (__glBindAttribLocation)(program, index, name);  }
PFNGLBLENDEQUATIONSEPARATEPROC __glBlendEquationSeparate = nullptr; void APIENTRY glBlendEquationSeparate (GLenum modeRGB, GLenum modeAlpha) { if (__glBlendEquationSeparate != 0) (__glBlendEquationSeparate)(modeRGB, modeAlpha);  }
PFNGLCOMPILESHADERPROC __glCompileShader = nullptr; void APIENTRY glCompileShader (GLuint shader) { if (__glCompileShader != 0) (__glCompileShader)(shader);  }
PFNGLCREATEPROGRAMPROC __glCreateProgram = nullptr; GLuint APIENTRY glCreateProgram () { if (__glCreateProgram != 0) return (__glCreateProgram)(); return 0; }
PFNGLCREATESHADERPROC __glCreateShader = nullptr; GLuint APIENTRY glCreateShader (GLenum type) { if (__glCreateShader != 0) return (__glCreateShader)(type); return 0; }
PFNGLDELETEPROGRAMPROC __glDeleteProgram = nullptr; void APIENTRY glDeleteProgram (GLuint program) { if (__glDeleteProgram != 0) (__glDeleteProgram)(program);  }
PFNGLDELETESHADERPROC __glDeleteShader = nullptr; void APIENTRY glDeleteShader (GLuint shader) { if (__glDeleteShader != 0) (__glDeleteShader)(shader);  }
PFNGLDETACHSHADERPROC __glDetachShader = nullptr; void APIENTRY glDetachShader (GLuint program, GLuint shader) { if (__glDetachShader != 0) (__glDetachShader)(program, shader);  }
PFNGLDISABLEVERTEXATTRIBARRAYPROC __glDisableVertexAttribArray = nullptr; void APIENTRY glDisableVertexAttribArray (GLuint index) { if (__glDisableVertexAttribArray != 0) (__glDisableVertexAttribArray)(index);  }
PFNGLDRAWBUFFERSPROC __glDrawBuffers = nullptr; void APIENTRY glDrawBuffers (GLsizei n, const GLenum *bufs) { if (__glDrawBuffers != 0) (__glDrawBuffers)(n, bufs);  }
PFNGLENABLEVERTEXATTRIBARRAYPROC __glEnableVertexAttribArray = nullptr; void APIENTRY glEnableVertexAttribArray (GLuint index) { if (__glEnableVertexAttribArray != 0) (__glEnableVertexAttribArray)(index);  }
PFNGLGETACTIVEATTRIBPROC __glGetActiveAttrib = nullptr; void APIENTRY glGetActiveAttrib (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name) { if (__glGetActiveAttrib != 0) (__glGetActiveAttrib)(program, index, bufSize, length, size, type, name);  }
PFNGLGETACTIVEUNIFORMPROC __glGetActiveUniform = nullptr; void APIENTRY glGetActiveUniform (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name) { if (__glGetActiveUniform != 0) (__glGetActiveUniform)(program, index, bufSize, length, size, type, name);  }
PFNGLGETATTACHEDSHADERSPROC __glGetAttachedShaders = nullptr; void APIENTRY glGetAttachedShaders (GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders) { if (__glGetAttachedShaders != 0) (__glGetAttachedShaders)(program, maxCount, count, shaders);  }
PFNGLGETATTRIBLOCATIONPROC __glGetAttribLocation = nullptr; GLint APIENTRY glGetAttribLocation (GLuint program, const GLchar *name) { if (__glGetAttribLocation != 0) return (__glGetAttribLocation)(program, name); return 0; }
PFNGLGETPROGRAMINFOLOGPROC __glGetProgramInfoLog = nullptr; void APIENTRY glGetProgramInfoLog (GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog) { if (__glGetProgramInfoLog != 0) (__glGetProgramInfoLog)(program, bufSize, length, infoLog);  }
PFNGLGETPROGRAMIVPROC __glGetProgramiv = nullptr; void APIENTRY glGetProgramiv (GLuint program, GLenum pname, GLint *params) { if (__glGetProgramiv != 0) (__glGetProgramiv)(program, pname, params);  }
PFNGLGETSHADERINFOLOGPROC __glGetShaderInfoLog = nullptr; void APIENTRY glGetShaderInfoLog (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog) { if (__glGetShaderInfoLog != 0) (__glGetShaderInfoLog)(shader, bufSize, length, infoLog);  }
PFNGLGETSHADERSOURCEPROC __glGetShaderSource = nullptr; void APIENTRY glGetShaderSource (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source) { if (__glGetShaderSource != 0) (__glGetShaderSource)(shader, bufSize, length, source);  }
PFNGLGETSHADERIVPROC __glGetShaderiv = nullptr; void APIENTRY glGetShaderiv (GLuint shader, GLenum pname, GLint *params) { if (__glGetShaderiv != 0) (__glGetShaderiv)(shader, pname, params);  }
PFNGLGETUNIFORMLOCATIONPROC __glGetUniformLocation = nullptr; GLint APIENTRY glGetUniformLocation (GLuint program, const GLchar *name) { if (__glGetUniformLocation != 0) return (__glGetUniformLocation)(program, name); return 0; }
PFNGLGETUNIFORMFVPROC __glGetUniformfv = nullptr; void APIENTRY glGetUniformfv (GLuint program, GLint location, GLfloat *params) { if (__glGetUniformfv != 0) (__glGetUniformfv)(program, location, params);  }
PFNGLGETUNIFORMIVPROC __glGetUniformiv = nullptr; void APIENTRY glGetUniformiv (GLuint program, GLint location, GLint *params) { if (__glGetUniformiv != 0) (__glGetUniformiv)(program, location, params);  }
PFNGLGETVERTEXATTRIBPOINTERVPROC __glGetVertexAttribPointerv = nullptr; void APIENTRY glGetVertexAttribPointerv (GLuint index, GLenum pname, void **pointer) { if (__glGetVertexAttribPointerv != 0) (__glGetVertexAttribPointerv)(index, pname, pointer);  }
PFNGLGETVERTEXATTRIBDVPROC __glGetVertexAttribdv = nullptr; void APIENTRY glGetVertexAttribdv (GLuint index, GLenum pname, GLdouble *params) { if (__glGetVertexAttribdv != 0) (__glGetVertexAttribdv)(index, pname, params);  }
PFNGLGETVERTEXATTRIBFVPROC __glGetVertexAttribfv = nullptr; void APIENTRY glGetVertexAttribfv (GLuint index, GLenum pname, GLfloat *params) { if (__glGetVertexAttribfv != 0) (__glGetVertexAttribfv)(index, pname, params);  }
PFNGLGETVERTEXATTRIBIVPROC __glGetVertexAttribiv = nullptr; void APIENTRY glGetVertexAttribiv (GLuint index, GLenum pname, GLint *params) { if (__glGetVertexAttribiv != 0) (__glGetVertexAttribiv)(index, pname, params);  }
PFNGLISPROGRAMPROC __glIsProgram = nullptr; GLboolean APIENTRY glIsProgram (GLuint program) { if (__glIsProgram != 0) return (__glIsProgram)(program); return 0; }
PFNGLISSHADERPROC __glIsShader = nullptr; GLboolean APIENTRY glIsShader (GLuint shader) { if (__glIsShader != 0) return (__glIsShader)(shader); return 0; }
PFNGLLINKPROGRAMPROC __glLinkProgram = nullptr; void APIENTRY glLinkProgram (GLuint program) { if (__glLinkProgram != 0) (__glLinkProgram)(program);  }
PFNGLSHADERSOURCEPROC __glShaderSource = nullptr; void APIENTRY glShaderSource (GLuint shader, GLsizei count, const GLchar *const*string, const GLint *length) { if (__glShaderSource != 0) (__glShaderSource)(shader, count, string, length);  }
PFNGLSTENCILFUNCSEPARATEPROC __glStencilFuncSeparate = nullptr; void APIENTRY glStencilFuncSeparate (GLenum face, GLenum func, GLint ref, GLuint mask) { if (__glStencilFuncSeparate != 0) (__glStencilFuncSeparate)(face, func, ref, mask);  }
PFNGLSTENCILMASKSEPARATEPROC __glStencilMaskSeparate = nullptr; void APIENTRY glStencilMaskSeparate (GLenum face, GLuint mask) { if (__glStencilMaskSeparate != 0) (__glStencilMaskSeparate)(face, mask);  }
PFNGLSTENCILOPSEPARATEPROC __glStencilOpSeparate = nullptr; void APIENTRY glStencilOpSeparate (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass) { if (__glStencilOpSeparate != 0) (__glStencilOpSeparate)(face, sfail, dpfail, dppass);  }
PFNGLUNIFORM1FPROC __glUniform1f = nullptr; void APIENTRY glUniform1f (GLint location, GLfloat v0) { if (__glUniform1f != 0) (__glUniform1f)(location, v0);  }
PFNGLUNIFORM1FVPROC __glUniform1fv = nullptr; void APIENTRY glUniform1fv (GLint location, GLsizei count, const GLfloat *value) { if (__glUniform1fv != 0) (__glUniform1fv)(location, count, value);  }
PFNGLUNIFORM1IPROC __glUniform1i = nullptr; void APIENTRY glUniform1i (GLint location, GLint v0) { if (__glUniform1i != 0) (__glUniform1i)(location, v0);  }
PFNGLUNIFORM1IVPROC __glUniform1iv = nullptr; void APIENTRY glUniform1iv (GLint location, GLsizei count, const GLint *value) { if (__glUniform1iv != 0) (__glUniform1iv)(location, count, value);  }
PFNGLUNIFORM2FPROC __glUniform2f = nullptr; void APIENTRY glUniform2f (GLint location, GLfloat v0, GLfloat v1) { if (__glUniform2f != 0) (__glUniform2f)(location, v0, v1);  }
PFNGLUNIFORM2FVPROC __glUniform2fv = nullptr; void APIENTRY glUniform2fv (GLint location, GLsizei count, const GLfloat *value) { if (__glUniform2fv != 0) (__glUniform2fv)(location, count, value);  }
PFNGLUNIFORM2IPROC __glUniform2i = nullptr; void APIENTRY glUniform2i (GLint location, GLint v0, GLint v1) { if (__glUniform2i != 0) (__glUniform2i)(location, v0, v1);  }
PFNGLUNIFORM2IVPROC __glUniform2iv = nullptr; void APIENTRY glUniform2iv (GLint location, GLsizei count, const GLint *value) { if (__glUniform2iv != 0) (__glUniform2iv)(location, count, value);  }
PFNGLUNIFORM3FPROC __glUniform3f = nullptr; void APIENTRY glUniform3f (GLint location, GLfloat v0, GLfloat v1, GLfloat v2) { if (__glUniform3f != 0) (__glUniform3f)(location, v0, v1, v2);  }
PFNGLUNIFORM3FVPROC __glUniform3fv = nullptr; void APIENTRY glUniform3fv (GLint location, GLsizei count, const GLfloat *value) { if (__glUniform3fv != 0) (__glUniform3fv)(location, count, value);  }
PFNGLUNIFORM3IPROC __glUniform3i = nullptr; void APIENTRY glUniform3i (GLint location, GLint v0, GLint v1, GLint v2) { if (__glUniform3i != 0) (__glUniform3i)(location, v0, v1, v2);  }
PFNGLUNIFORM3IVPROC __glUniform3iv = nullptr; void APIENTRY glUniform3iv (GLint location, GLsizei count, const GLint *value) { if (__glUniform3iv != 0) (__glUniform3iv)(location, count, value);  }
PFNGLUNIFORM4FPROC __glUniform4f = nullptr; void APIENTRY glUniform4f (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) { if (__glUniform4f != 0) (__glUniform4f)(location, v0, v1, v2, v3);  }
PFNGLUNIFORM4FVPROC __glUniform4fv = nullptr; void APIENTRY glUniform4fv (GLint location, GLsizei count, const GLfloat *value) { if (__glUniform4fv != 0) (__glUniform4fv)(location, count, value);  }
PFNGLUNIFORM4IPROC __glUniform4i = nullptr; void APIENTRY glUniform4i (GLint location, GLint v0, GLint v1, GLint v2, GLint v3) { if (__glUniform4i != 0) (__glUniform4i)(location, v0, v1, v2, v3);  }
PFNGLUNIFORM4IVPROC __glUniform4iv = nullptr; void APIENTRY glUniform4iv (GLint location, GLsizei count, const GLint *value) { if (__glUniform4iv != 0) (__glUniform4iv)(location, count, value);  }
PFNGLUNIFORMMATRIX2FVPROC __glUniformMatrix2fv = nullptr; void APIENTRY glUniformMatrix2fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) { if (__glUniformMatrix2fv != 0) (__glUniformMatrix2fv)(location, count, transpose, value);  }
PFNGLUNIFORMMATRIX3FVPROC __glUniformMatrix3fv = nullptr; void APIENTRY glUniformMatrix3fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) { if (__glUniformMatrix3fv != 0) (__glUniformMatrix3fv)(location, count, transpose, value);  }
PFNGLUNIFORMMATRIX4FVPROC __glUniformMatrix4fv = nullptr; void APIENTRY glUniformMatrix4fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) { if (__glUniformMatrix4fv != 0) (__glUniformMatrix4fv)(location, count, transpose, value);  }
PFNGLUSEPROGRAMPROC __glUseProgram = nullptr; void APIENTRY glUseProgram (GLuint program) { if (__glUseProgram != 0) (__glUseProgram)(program);  }
PFNGLVALIDATEPROGRAMPROC __glValidateProgram = nullptr; void APIENTRY glValidateProgram (GLuint program) { if (__glValidateProgram != 0) (__glValidateProgram)(program);  }
PFNGLVERTEXATTRIB1DPROC __glVertexAttrib1d = nullptr; void APIENTRY glVertexAttrib1d (GLuint index, GLdouble x) { if (__glVertexAttrib1d != 0) (__glVertexAttrib1d)(index, x);  }
PFNGLVERTEXATTRIB1DVPROC __glVertexAttrib1dv = nullptr; void APIENTRY glVertexAttrib1dv (GLuint index, const GLdouble *v) { if (__glVertexAttrib1dv != 0) (__glVertexAttrib1dv)(index, v);  }
PFNGLVERTEXATTRIB1FPROC __glVertexAttrib1f = nullptr; void APIENTRY glVertexAttrib1f (GLuint index, GLfloat x) { if (__glVertexAttrib1f != 0) (__glVertexAttrib1f)(index, x);  }
PFNGLVERTEXATTRIB1FVPROC __glVertexAttrib1fv = nullptr; void APIENTRY glVertexAttrib1fv (GLuint index, const GLfloat *v) { if (__glVertexAttrib1fv != 0) (__glVertexAttrib1fv)(index, v);  }
PFNGLVERTEXATTRIB1SPROC __glVertexAttrib1s = nullptr; void APIENTRY glVertexAttrib1s (GLuint index, GLshort x) { if (__glVertexAttrib1s != 0) (__glVertexAttrib1s)(index, x);  }
PFNGLVERTEXATTRIB1SVPROC __glVertexAttrib1sv = nullptr; void APIENTRY glVertexAttrib1sv (GLuint index, const GLshort *v) { if (__glVertexAttrib1sv != 0) (__glVertexAttrib1sv)(index, v);  }
PFNGLVERTEXATTRIB2DPROC __glVertexAttrib2d = nullptr; void APIENTRY glVertexAttrib2d (GLuint index, GLdouble x, GLdouble y) { if (__glVertexAttrib2d != 0) (__glVertexAttrib2d)(index, x, y);  }
PFNGLVERTEXATTRIB2DVPROC __glVertexAttrib2dv = nullptr; void APIENTRY glVertexAttrib2dv (GLuint index, const GLdouble *v) { if (__glVertexAttrib2dv != 0) (__glVertexAttrib2dv)(index, v);  }
PFNGLVERTEXATTRIB2FPROC __glVertexAttrib2f = nullptr; void APIENTRY glVertexAttrib2f (GLuint index, GLfloat x, GLfloat y) { if (__glVertexAttrib2f != 0) (__glVertexAttrib2f)(index, x, y);  }
PFNGLVERTEXATTRIB2FVPROC __glVertexAttrib2fv = nullptr; void APIENTRY glVertexAttrib2fv (GLuint index, const GLfloat *v) { if (__glVertexAttrib2fv != 0) (__glVertexAttrib2fv)(index, v);  }
PFNGLVERTEXATTRIB2SPROC __glVertexAttrib2s = nullptr; void APIENTRY glVertexAttrib2s (GLuint index, GLshort x, GLshort y) { if (__glVertexAttrib2s != 0) (__glVertexAttrib2s)(index, x, y);  }
PFNGLVERTEXATTRIB2SVPROC __glVertexAttrib2sv = nullptr; void APIENTRY glVertexAttrib2sv (GLuint index, const GLshort *v) { if (__glVertexAttrib2sv != 0) (__glVertexAttrib2sv)(index, v);  }
PFNGLVERTEXATTRIB3DPROC __glVertexAttrib3d = nullptr; void APIENTRY glVertexAttrib3d (GLuint index, GLdouble x, GLdouble y, GLdouble z) { if (__glVertexAttrib3d != 0) (__glVertexAttrib3d)(index, x, y, z);  }
PFNGLVERTEXATTRIB3DVPROC __glVertexAttrib3dv = nullptr; void APIENTRY glVertexAttrib3dv (GLuint index, const GLdouble *v) { if (__glVertexAttrib3dv != 0) (__glVertexAttrib3dv)(index, v);  }
PFNGLVERTEXATTRIB3FPROC __glVertexAttrib3f = nullptr; void APIENTRY glVertexAttrib3f (GLuint index, GLfloat x, GLfloat y, GLfloat z) { if (__glVertexAttrib3f != 0) (__glVertexAttrib3f)(index, x, y, z);  }
PFNGLVERTEXATTRIB3FVPROC __glVertexAttrib3fv = nullptr; void APIENTRY glVertexAttrib3fv (GLuint index, const GLfloat *v) { if (__glVertexAttrib3fv != 0) (__glVertexAttrib3fv)(index, v);  }
PFNGLVERTEXATTRIB3SPROC __glVertexAttrib3s = nullptr; void APIENTRY glVertexAttrib3s (GLuint index, GLshort x, GLshort y, GLshort z) { if (__glVertexAttrib3s != 0) (__glVertexAttrib3s)(index, x, y, z);  }
PFNGLVERTEXATTRIB3SVPROC __glVertexAttrib3sv = nullptr; void APIENTRY glVertexAttrib3sv (GLuint index, const GLshort *v) { if (__glVertexAttrib3sv != 0) (__glVertexAttrib3sv)(index, v);  }
PFNGLVERTEXATTRIB4NBVPROC __glVertexAttrib4Nbv = nullptr; void APIENTRY glVertexAttrib4Nbv (GLuint index, const GLbyte *v) { if (__glVertexAttrib4Nbv != 0) (__glVertexAttrib4Nbv)(index, v);  }
PFNGLVERTEXATTRIB4NIVPROC __glVertexAttrib4Niv = nullptr; void APIENTRY glVertexAttrib4Niv (GLuint index, const GLint *v) { if (__glVertexAttrib4Niv != 0) (__glVertexAttrib4Niv)(index, v);  }
PFNGLVERTEXATTRIB4NSVPROC __glVertexAttrib4Nsv = nullptr; void APIENTRY glVertexAttrib4Nsv (GLuint index, const GLshort *v) { if (__glVertexAttrib4Nsv != 0) (__glVertexAttrib4Nsv)(index, v);  }
PFNGLVERTEXATTRIB4NUBPROC __glVertexAttrib4Nub = nullptr; void APIENTRY glVertexAttrib4Nub (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w) { if (__glVertexAttrib4Nub != 0) (__glVertexAttrib4Nub)(index, x, y, z, w);  }
PFNGLVERTEXATTRIB4NUBVPROC __glVertexAttrib4Nubv = nullptr; void APIENTRY glVertexAttrib4Nubv (GLuint index, const GLubyte *v) { if (__glVertexAttrib4Nubv != 0) (__glVertexAttrib4Nubv)(index, v);  }
PFNGLVERTEXATTRIB4NUIVPROC __glVertexAttrib4Nuiv = nullptr; void APIENTRY glVertexAttrib4Nuiv (GLuint index, const GLuint *v) { if (__glVertexAttrib4Nuiv != 0) (__glVertexAttrib4Nuiv)(index, v);  }
PFNGLVERTEXATTRIB4NUSVPROC __glVertexAttrib4Nusv = nullptr; void APIENTRY glVertexAttrib4Nusv (GLuint index, const GLushort *v) { if (__glVertexAttrib4Nusv != 0) (__glVertexAttrib4Nusv)(index, v);  }
PFNGLVERTEXATTRIB4BVPROC __glVertexAttrib4bv = nullptr; void APIENTRY glVertexAttrib4bv (GLuint index, const GLbyte *v) { if (__glVertexAttrib4bv != 0) (__glVertexAttrib4bv)(index, v);  }
PFNGLVERTEXATTRIB4DPROC __glVertexAttrib4d = nullptr; void APIENTRY glVertexAttrib4d (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { if (__glVertexAttrib4d != 0) (__glVertexAttrib4d)(index, x, y, z, w);  }
PFNGLVERTEXATTRIB4DVPROC __glVertexAttrib4dv = nullptr; void APIENTRY glVertexAttrib4dv (GLuint index, const GLdouble *v) { if (__glVertexAttrib4dv != 0) (__glVertexAttrib4dv)(index, v);  }
PFNGLVERTEXATTRIB4FPROC __glVertexAttrib4f = nullptr; void APIENTRY glVertexAttrib4f (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) { if (__glVertexAttrib4f != 0) (__glVertexAttrib4f)(index, x, y, z, w);  }
PFNGLVERTEXATTRIB4FVPROC __glVertexAttrib4fv = nullptr; void APIENTRY glVertexAttrib4fv (GLuint index, const GLfloat *v) { if (__glVertexAttrib4fv != 0) (__glVertexAttrib4fv)(index, v);  }
PFNGLVERTEXATTRIB4IVPROC __glVertexAttrib4iv = nullptr; void APIENTRY glVertexAttrib4iv (GLuint index, const GLint *v) { if (__glVertexAttrib4iv != 0) (__glVertexAttrib4iv)(index, v);  }
PFNGLVERTEXATTRIB4SPROC __glVertexAttrib4s = nullptr; void APIENTRY glVertexAttrib4s (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w) { if (__glVertexAttrib4s != 0) (__glVertexAttrib4s)(index, x, y, z, w);  }
PFNGLVERTEXATTRIB4SVPROC __glVertexAttrib4sv = nullptr; void APIENTRY glVertexAttrib4sv (GLuint index, const GLshort *v) { if (__glVertexAttrib4sv != 0) (__glVertexAttrib4sv)(index, v);  }
PFNGLVERTEXATTRIB4UBVPROC __glVertexAttrib4ubv = nullptr; void APIENTRY glVertexAttrib4ubv (GLuint index, const GLubyte *v) { if (__glVertexAttrib4ubv != 0) (__glVertexAttrib4ubv)(index, v);  }
PFNGLVERTEXATTRIB4UIVPROC __glVertexAttrib4uiv = nullptr; void APIENTRY glVertexAttrib4uiv (GLuint index, const GLuint *v) { if (__glVertexAttrib4uiv != 0) (__glVertexAttrib4uiv)(index, v);  }
PFNGLVERTEXATTRIB4USVPROC __glVertexAttrib4usv = nullptr; void APIENTRY glVertexAttrib4usv (GLuint index, const GLushort *v) { if (__glVertexAttrib4usv != 0) (__glVertexAttrib4usv)(index, v);  }
PFNGLVERTEXATTRIBPOINTERPROC __glVertexAttribPointer = nullptr; void APIENTRY glVertexAttribPointer (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer) { if (__glVertexAttribPointer != 0) (__glVertexAttribPointer)(index, size, type, normalized, stride, pointer);  }
bool __loadGL_VERSION_2_0(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glAttachShader = (PFNGLATTACHSHADERPROC)proc((const GLubyte*)"glAttachShader")) != nullptr) || r;
    r = ((__glBindAttribLocation = (PFNGLBINDATTRIBLOCATIONPROC)proc((const GLubyte*)"glBindAttribLocation")) != nullptr) || r;
    r = ((__glBlendEquationSeparate = (PFNGLBLENDEQUATIONSEPARATEPROC)proc((const GLubyte*)"glBlendEquationSeparate")) != nullptr) || r;
    r = ((__glCompileShader = (PFNGLCOMPILESHADERPROC)proc((const GLubyte*)"glCompileShader")) != nullptr) || r;
    r = ((__glCreateProgram = (PFNGLCREATEPROGRAMPROC)proc((const GLubyte*)"glCreateProgram")) != nullptr) || r;
    r = ((__glCreateShader = (PFNGLCREATESHADERPROC)proc((const GLubyte*)"glCreateShader")) != nullptr) || r;
    r = ((__glDeleteProgram = (PFNGLDELETEPROGRAMPROC)proc((const GLubyte*)"glDeleteProgram")) != nullptr) || r;
    r = ((__glDeleteShader = (PFNGLDELETESHADERPROC)proc((const GLubyte*)"glDeleteShader")) != nullptr) || r;
    r = ((__glDetachShader = (PFNGLDETACHSHADERPROC)proc((const GLubyte*)"glDetachShader")) != nullptr) || r;
    r = ((__glDisableVertexAttribArray = (PFNGLDISABLEVERTEXATTRIBARRAYPROC)proc((const GLubyte*)"glDisableVertexAttribArray")) != nullptr) || r;
    r = ((__glDrawBuffers = (PFNGLDRAWBUFFERSPROC)proc((const GLubyte*)"glDrawBuffers")) != nullptr) || r;
    r = ((__glEnableVertexAttribArray = (PFNGLENABLEVERTEXATTRIBARRAYPROC)proc((const GLubyte*)"glEnableVertexAttribArray")) != nullptr) || r;
    r = ((__glGetActiveAttrib = (PFNGLGETACTIVEATTRIBPROC)proc((const GLubyte*)"glGetActiveAttrib")) != nullptr) || r;
    r = ((__glGetActiveUniform = (PFNGLGETACTIVEUNIFORMPROC)proc((const GLubyte*)"glGetActiveUniform")) != nullptr) || r;
    r = ((__glGetAttachedShaders = (PFNGLGETATTACHEDSHADERSPROC)proc((const GLubyte*)"glGetAttachedShaders")) != nullptr) || r;
    r = ((__glGetAttribLocation = (PFNGLGETATTRIBLOCATIONPROC)proc((const GLubyte*)"glGetAttribLocation")) != nullptr) || r;
    r = ((__glGetProgramInfoLog = (PFNGLGETPROGRAMINFOLOGPROC)proc((const GLubyte*)"glGetProgramInfoLog")) != nullptr) || r;
    r = ((__glGetProgramiv = (PFNGLGETPROGRAMIVPROC)proc((const GLubyte*)"glGetProgramiv")) != nullptr) || r;
    r = ((__glGetShaderInfoLog = (PFNGLGETSHADERINFOLOGPROC)proc((const GLubyte*)"glGetShaderInfoLog")) != nullptr) || r;
    r = ((__glGetShaderSource = (PFNGLGETSHADERSOURCEPROC)proc((const GLubyte*)"glGetShaderSource")) != nullptr) || r;
    r = ((__glGetShaderiv = (PFNGLGETSHADERIVPROC)proc((const GLubyte*)"glGetShaderiv")) != nullptr) || r;
    r = ((__glGetUniformLocation = (PFNGLGETUNIFORMLOCATIONPROC)proc((const GLubyte*)"glGetUniformLocation")) != nullptr) || r;
    r = ((__glGetUniformfv = (PFNGLGETUNIFORMFVPROC)proc((const GLubyte*)"glGetUniformfv")) != nullptr) || r;
    r = ((__glGetUniformiv = (PFNGLGETUNIFORMIVPROC)proc((const GLubyte*)"glGetUniformiv")) != nullptr) || r;
    r = ((__glGetVertexAttribPointerv = (PFNGLGETVERTEXATTRIBPOINTERVPROC)proc((const GLubyte*)"glGetVertexAttribPointerv")) != nullptr) || r;
    r = ((__glGetVertexAttribdv = (PFNGLGETVERTEXATTRIBDVPROC)proc((const GLubyte*)"glGetVertexAttribdv")) != nullptr) || r;
    r = ((__glGetVertexAttribfv = (PFNGLGETVERTEXATTRIBFVPROC)proc((const GLubyte*)"glGetVertexAttribfv")) != nullptr) || r;
    r = ((__glGetVertexAttribiv = (PFNGLGETVERTEXATTRIBIVPROC)proc((const GLubyte*)"glGetVertexAttribiv")) != nullptr) || r;
    r = ((__glIsProgram = (PFNGLISPROGRAMPROC)proc((const GLubyte*)"glIsProgram")) != nullptr) || r;
    r = ((__glIsShader = (PFNGLISSHADERPROC)proc((const GLubyte*)"glIsShader")) != nullptr) || r;
    r = ((__glLinkProgram = (PFNGLLINKPROGRAMPROC)proc((const GLubyte*)"glLinkProgram")) != nullptr) || r;
    r = ((__glShaderSource = (PFNGLSHADERSOURCEPROC)proc((const GLubyte*)"glShaderSource")) != nullptr) || r;
    r = ((__glStencilFuncSeparate = (PFNGLSTENCILFUNCSEPARATEPROC)proc((const GLubyte*)"glStencilFuncSeparate")) != nullptr) || r;
    r = ((__glStencilMaskSeparate = (PFNGLSTENCILMASKSEPARATEPROC)proc((const GLubyte*)"glStencilMaskSeparate")) != nullptr) || r;
    r = ((__glStencilOpSeparate = (PFNGLSTENCILOPSEPARATEPROC)proc((const GLubyte*)"glStencilOpSeparate")) != nullptr) || r;
    r = ((__glUniform1f = (PFNGLUNIFORM1FPROC)proc((const GLubyte*)"glUniform1f")) != nullptr) || r;
    r = ((__glUniform1fv = (PFNGLUNIFORM1FVPROC)proc((const GLubyte*)"glUniform1fv")) != nullptr) || r;
    r = ((__glUniform1i = (PFNGLUNIFORM1IPROC)proc((const GLubyte*)"glUniform1i")) != nullptr) || r;
    r = ((__glUniform1iv = (PFNGLUNIFORM1IVPROC)proc((const GLubyte*)"glUniform1iv")) != nullptr) || r;
    r = ((__glUniform2f = (PFNGLUNIFORM2FPROC)proc((const GLubyte*)"glUniform2f")) != nullptr) || r;
    r = ((__glUniform2fv = (PFNGLUNIFORM2FVPROC)proc((const GLubyte*)"glUniform2fv")) != nullptr) || r;
    r = ((__glUniform2i = (PFNGLUNIFORM2IPROC)proc((const GLubyte*)"glUniform2i")) != nullptr) || r;
    r = ((__glUniform2iv = (PFNGLUNIFORM2IVPROC)proc((const GLubyte*)"glUniform2iv")) != nullptr) || r;
    r = ((__glUniform3f = (PFNGLUNIFORM3FPROC)proc((const GLubyte*)"glUniform3f")) != nullptr) || r;
    r = ((__glUniform3fv = (PFNGLUNIFORM3FVPROC)proc((const GLubyte*)"glUniform3fv")) != nullptr) || r;
    r = ((__glUniform3i = (PFNGLUNIFORM3IPROC)proc((const GLubyte*)"glUniform3i")) != nullptr) || r;
    r = ((__glUniform3iv = (PFNGLUNIFORM3IVPROC)proc((const GLubyte*)"glUniform3iv")) != nullptr) || r;
    r = ((__glUniform4f = (PFNGLUNIFORM4FPROC)proc((const GLubyte*)"glUniform4f")) != nullptr) || r;
    r = ((__glUniform4fv = (PFNGLUNIFORM4FVPROC)proc((const GLubyte*)"glUniform4fv")) != nullptr) || r;
    r = ((__glUniform4i = (PFNGLUNIFORM4IPROC)proc((const GLubyte*)"glUniform4i")) != nullptr) || r;
    r = ((__glUniform4iv = (PFNGLUNIFORM4IVPROC)proc((const GLubyte*)"glUniform4iv")) != nullptr) || r;
    r = ((__glUniformMatrix2fv = (PFNGLUNIFORMMATRIX2FVPROC)proc((const GLubyte*)"glUniformMatrix2fv")) != nullptr) || r;
    r = ((__glUniformMatrix3fv = (PFNGLUNIFORMMATRIX3FVPROC)proc((const GLubyte*)"glUniformMatrix3fv")) != nullptr) || r;
    r = ((__glUniformMatrix4fv = (PFNGLUNIFORMMATRIX4FVPROC)proc((const GLubyte*)"glUniformMatrix4fv")) != nullptr) || r;
    r = ((__glUseProgram = (PFNGLUSEPROGRAMPROC)proc((const GLubyte*)"glUseProgram")) != nullptr) || r;
    r = ((__glValidateProgram = (PFNGLVALIDATEPROGRAMPROC)proc((const GLubyte*)"glValidateProgram")) != nullptr) || r;
    r = ((__glVertexAttrib1d = (PFNGLVERTEXATTRIB1DPROC)proc((const GLubyte*)"glVertexAttrib1d")) != nullptr) || r;
    r = ((__glVertexAttrib1dv = (PFNGLVERTEXATTRIB1DVPROC)proc((const GLubyte*)"glVertexAttrib1dv")) != nullptr) || r;
    r = ((__glVertexAttrib1f = (PFNGLVERTEXATTRIB1FPROC)proc((const GLubyte*)"glVertexAttrib1f")) != nullptr) || r;
    r = ((__glVertexAttrib1fv = (PFNGLVERTEXATTRIB1FVPROC)proc((const GLubyte*)"glVertexAttrib1fv")) != nullptr) || r;
    r = ((__glVertexAttrib1s = (PFNGLVERTEXATTRIB1SPROC)proc((const GLubyte*)"glVertexAttrib1s")) != nullptr) || r;
    r = ((__glVertexAttrib1sv = (PFNGLVERTEXATTRIB1SVPROC)proc((const GLubyte*)"glVertexAttrib1sv")) != nullptr) || r;
    r = ((__glVertexAttrib2d = (PFNGLVERTEXATTRIB2DPROC)proc((const GLubyte*)"glVertexAttrib2d")) != nullptr) || r;
    r = ((__glVertexAttrib2dv = (PFNGLVERTEXATTRIB2DVPROC)proc((const GLubyte*)"glVertexAttrib2dv")) != nullptr) || r;
    r = ((__glVertexAttrib2f = (PFNGLVERTEXATTRIB2FPROC)proc((const GLubyte*)"glVertexAttrib2f")) != nullptr) || r;
    r = ((__glVertexAttrib2fv = (PFNGLVERTEXATTRIB2FVPROC)proc((const GLubyte*)"glVertexAttrib2fv")) != nullptr) || r;
    r = ((__glVertexAttrib2s = (PFNGLVERTEXATTRIB2SPROC)proc((const GLubyte*)"glVertexAttrib2s")) != nullptr) || r;
    r = ((__glVertexAttrib2sv = (PFNGLVERTEXATTRIB2SVPROC)proc((const GLubyte*)"glVertexAttrib2sv")) != nullptr) || r;
    r = ((__glVertexAttrib3d = (PFNGLVERTEXATTRIB3DPROC)proc((const GLubyte*)"glVertexAttrib3d")) != nullptr) || r;
    r = ((__glVertexAttrib3dv = (PFNGLVERTEXATTRIB3DVPROC)proc((const GLubyte*)"glVertexAttrib3dv")) != nullptr) || r;
    r = ((__glVertexAttrib3f = (PFNGLVERTEXATTRIB3FPROC)proc((const GLubyte*)"glVertexAttrib3f")) != nullptr) || r;
    r = ((__glVertexAttrib3fv = (PFNGLVERTEXATTRIB3FVPROC)proc((const GLubyte*)"glVertexAttrib3fv")) != nullptr) || r;
    r = ((__glVertexAttrib3s = (PFNGLVERTEXATTRIB3SPROC)proc((const GLubyte*)"glVertexAttrib3s")) != nullptr) || r;
    r = ((__glVertexAttrib3sv = (PFNGLVERTEXATTRIB3SVPROC)proc((const GLubyte*)"glVertexAttrib3sv")) != nullptr) || r;
    r = ((__glVertexAttrib4Nbv = (PFNGLVERTEXATTRIB4NBVPROC)proc((const GLubyte*)"glVertexAttrib4Nbv")) != nullptr) || r;
    r = ((__glVertexAttrib4Niv = (PFNGLVERTEXATTRIB4NIVPROC)proc((const GLubyte*)"glVertexAttrib4Niv")) != nullptr) || r;
    r = ((__glVertexAttrib4Nsv = (PFNGLVERTEXATTRIB4NSVPROC)proc((const GLubyte*)"glVertexAttrib4Nsv")) != nullptr) || r;
    r = ((__glVertexAttrib4Nub = (PFNGLVERTEXATTRIB4NUBPROC)proc((const GLubyte*)"glVertexAttrib4Nub")) != nullptr) || r;
    r = ((__glVertexAttrib4Nubv = (PFNGLVERTEXATTRIB4NUBVPROC)proc((const GLubyte*)"glVertexAttrib4Nubv")) != nullptr) || r;
    r = ((__glVertexAttrib4Nuiv = (PFNGLVERTEXATTRIB4NUIVPROC)proc((const GLubyte*)"glVertexAttrib4Nuiv")) != nullptr) || r;
    r = ((__glVertexAttrib4Nusv = (PFNGLVERTEXATTRIB4NUSVPROC)proc((const GLubyte*)"glVertexAttrib4Nusv")) != nullptr) || r;
    r = ((__glVertexAttrib4bv = (PFNGLVERTEXATTRIB4BVPROC)proc((const GLubyte*)"glVertexAttrib4bv")) != nullptr) || r;
    r = ((__glVertexAttrib4d = (PFNGLVERTEXATTRIB4DPROC)proc((const GLubyte*)"glVertexAttrib4d")) != nullptr) || r;
    r = ((__glVertexAttrib4dv = (PFNGLVERTEXATTRIB4DVPROC)proc((const GLubyte*)"glVertexAttrib4dv")) != nullptr) || r;
    r = ((__glVertexAttrib4f = (PFNGLVERTEXATTRIB4FPROC)proc((const GLubyte*)"glVertexAttrib4f")) != nullptr) || r;
    r = ((__glVertexAttrib4fv = (PFNGLVERTEXATTRIB4FVPROC)proc((const GLubyte*)"glVertexAttrib4fv")) != nullptr) || r;
    r = ((__glVertexAttrib4iv = (PFNGLVERTEXATTRIB4IVPROC)proc((const GLubyte*)"glVertexAttrib4iv")) != nullptr) || r;
    r = ((__glVertexAttrib4s = (PFNGLVERTEXATTRIB4SPROC)proc((const GLubyte*)"glVertexAttrib4s")) != nullptr) || r;
    r = ((__glVertexAttrib4sv = (PFNGLVERTEXATTRIB4SVPROC)proc((const GLubyte*)"glVertexAttrib4sv")) != nullptr) || r;
    r = ((__glVertexAttrib4ubv = (PFNGLVERTEXATTRIB4UBVPROC)proc((const GLubyte*)"glVertexAttrib4ubv")) != nullptr) || r;
    r = ((__glVertexAttrib4uiv = (PFNGLVERTEXATTRIB4UIVPROC)proc((const GLubyte*)"glVertexAttrib4uiv")) != nullptr) || r;
    r = ((__glVertexAttrib4usv = (PFNGLVERTEXATTRIB4USVPROC)proc((const GLubyte*)"glVertexAttrib4usv")) != nullptr) || r;
    r = ((__glVertexAttribPointer = (PFNGLVERTEXATTRIBPOINTERPROC)proc((const GLubyte*)"glVertexAttribPointer")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_VERSION_2_0 = false;
/* GL_VERSION_2_1 */
PFNGLUNIFORMMATRIX2X3FVPROC __glUniformMatrix2x3fv = nullptr; void APIENTRY glUniformMatrix2x3fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) { if (__glUniformMatrix2x3fv != 0) (__glUniformMatrix2x3fv)(location, count, transpose, value);  }
PFNGLUNIFORMMATRIX2X4FVPROC __glUniformMatrix2x4fv = nullptr; void APIENTRY glUniformMatrix2x4fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) { if (__glUniformMatrix2x4fv != 0) (__glUniformMatrix2x4fv)(location, count, transpose, value);  }
PFNGLUNIFORMMATRIX3X2FVPROC __glUniformMatrix3x2fv = nullptr; void APIENTRY glUniformMatrix3x2fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) { if (__glUniformMatrix3x2fv != 0) (__glUniformMatrix3x2fv)(location, count, transpose, value);  }
PFNGLUNIFORMMATRIX3X4FVPROC __glUniformMatrix3x4fv = nullptr; void APIENTRY glUniformMatrix3x4fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) { if (__glUniformMatrix3x4fv != 0) (__glUniformMatrix3x4fv)(location, count, transpose, value);  }
PFNGLUNIFORMMATRIX4X2FVPROC __glUniformMatrix4x2fv = nullptr; void APIENTRY glUniformMatrix4x2fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) { if (__glUniformMatrix4x2fv != 0) (__glUniformMatrix4x2fv)(location, count, transpose, value);  }
PFNGLUNIFORMMATRIX4X3FVPROC __glUniformMatrix4x3fv = nullptr; void APIENTRY glUniformMatrix4x3fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) { if (__glUniformMatrix4x3fv != 0) (__glUniformMatrix4x3fv)(location, count, transpose, value);  }
bool __loadGL_VERSION_2_1(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glUniformMatrix2x3fv = (PFNGLUNIFORMMATRIX2X3FVPROC)proc((const GLubyte*)"glUniformMatrix2x3fv")) != nullptr) || r;
    r = ((__glUniformMatrix2x4fv = (PFNGLUNIFORMMATRIX2X4FVPROC)proc((const GLubyte*)"glUniformMatrix2x4fv")) != nullptr) || r;
    r = ((__glUniformMatrix3x2fv = (PFNGLUNIFORMMATRIX3X2FVPROC)proc((const GLubyte*)"glUniformMatrix3x2fv")) != nullptr) || r;
    r = ((__glUniformMatrix3x4fv = (PFNGLUNIFORMMATRIX3X4FVPROC)proc((const GLubyte*)"glUniformMatrix3x4fv")) != nullptr) || r;
    r = ((__glUniformMatrix4x2fv = (PFNGLUNIFORMMATRIX4X2FVPROC)proc((const GLubyte*)"glUniformMatrix4x2fv")) != nullptr) || r;
    r = ((__glUniformMatrix4x3fv = (PFNGLUNIFORMMATRIX4X3FVPROC)proc((const GLubyte*)"glUniformMatrix4x3fv")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_VERSION_2_1 = false;
/* GL_VERSION_3_0 */
PFNGLBEGINCONDITIONALRENDERPROC __glBeginConditionalRender = nullptr; void APIENTRY glBeginConditionalRender (GLuint id, GLenum mode) { if (__glBeginConditionalRender != 0) (__glBeginConditionalRender)(id, mode);  }
PFNGLBEGINTRANSFORMFEEDBACKPROC __glBeginTransformFeedback = nullptr; void APIENTRY glBeginTransformFeedback (GLenum primitiveMode) { if (__glBeginTransformFeedback != 0) (__glBeginTransformFeedback)(primitiveMode);  }
PFNGLBINDBUFFERBASEPROC __glBindBufferBase = nullptr; void APIENTRY glBindBufferBase (GLenum target, GLuint index, GLuint buffer) { if (__glBindBufferBase != 0) (__glBindBufferBase)(target, index, buffer);  }
PFNGLBINDBUFFERRANGEPROC __glBindBufferRange = nullptr; void APIENTRY glBindBufferRange (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size) { if (__glBindBufferRange != 0) (__glBindBufferRange)(target, index, buffer, offset, size);  }
PFNGLBINDFRAGDATALOCATIONPROC __glBindFragDataLocation = nullptr; void APIENTRY glBindFragDataLocation (GLuint program, GLuint color, const GLchar *name) { if (__glBindFragDataLocation != 0) (__glBindFragDataLocation)(program, color, name);  }
PFNGLBINDFRAMEBUFFERPROC __glBindFramebuffer = nullptr; void APIENTRY glBindFramebuffer (GLenum target, GLuint framebuffer) { if (__glBindFramebuffer != 0) (__glBindFramebuffer)(target, framebuffer);  }
PFNGLBINDRENDERBUFFERPROC __glBindRenderbuffer = nullptr; void APIENTRY glBindRenderbuffer (GLenum target, GLuint renderbuffer) { if (__glBindRenderbuffer != 0) (__glBindRenderbuffer)(target, renderbuffer);  }
PFNGLBINDVERTEXARRAYPROC __glBindVertexArray = nullptr; void APIENTRY glBindVertexArray (GLuint array) { if (__glBindVertexArray != 0) (__glBindVertexArray)(array);  }
PFNGLBLITFRAMEBUFFERPROC __glBlitFramebuffer = nullptr; void APIENTRY glBlitFramebuffer (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) { if (__glBlitFramebuffer != 0) (__glBlitFramebuffer)(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);  }
PFNGLCHECKFRAMEBUFFERSTATUSPROC __glCheckFramebufferStatus = nullptr; GLenum APIENTRY glCheckFramebufferStatus (GLenum target) { if (__glCheckFramebufferStatus != 0) return (__glCheckFramebufferStatus)(target); return 0; }
PFNGLCLAMPCOLORPROC __glClampColor = nullptr; void APIENTRY glClampColor (GLenum target, GLenum clamp) { if (__glClampColor != 0) (__glClampColor)(target, clamp);  }
PFNGLCLEARBUFFERFIPROC __glClearBufferfi = nullptr; void APIENTRY glClearBufferfi (GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil) { if (__glClearBufferfi != 0) (__glClearBufferfi)(buffer, drawbuffer, depth, stencil);  }
PFNGLCLEARBUFFERFVPROC __glClearBufferfv = nullptr; void APIENTRY glClearBufferfv (GLenum buffer, GLint drawbuffer, const GLfloat *value) { if (__glClearBufferfv != 0) (__glClearBufferfv)(buffer, drawbuffer, value);  }
PFNGLCLEARBUFFERIVPROC __glClearBufferiv = nullptr; void APIENTRY glClearBufferiv (GLenum buffer, GLint drawbuffer, const GLint *value) { if (__glClearBufferiv != 0) (__glClearBufferiv)(buffer, drawbuffer, value);  }
PFNGLCLEARBUFFERUIVPROC __glClearBufferuiv = nullptr; void APIENTRY glClearBufferuiv (GLenum buffer, GLint drawbuffer, const GLuint *value) { if (__glClearBufferuiv != 0) (__glClearBufferuiv)(buffer, drawbuffer, value);  }
PFNGLCOLORMASKIPROC __glColorMaski = nullptr; void APIENTRY glColorMaski (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a) { if (__glColorMaski != 0) (__glColorMaski)(index, r, g, b, a);  }
PFNGLDELETEFRAMEBUFFERSPROC __glDeleteFramebuffers = nullptr; void APIENTRY glDeleteFramebuffers (GLsizei n, const GLuint *framebuffers) { if (__glDeleteFramebuffers != 0) (__glDeleteFramebuffers)(n, framebuffers);  }
PFNGLDELETERENDERBUFFERSPROC __glDeleteRenderbuffers = nullptr; void APIENTRY glDeleteRenderbuffers (GLsizei n, const GLuint *renderbuffers) { if (__glDeleteRenderbuffers != 0) (__glDeleteRenderbuffers)(n, renderbuffers);  }
PFNGLDELETEVERTEXARRAYSPROC __glDeleteVertexArrays = nullptr; void APIENTRY glDeleteVertexArrays (GLsizei n, const GLuint *arrays) { if (__glDeleteVertexArrays != 0) (__glDeleteVertexArrays)(n, arrays);  }
PFNGLDISABLEIPROC __glDisablei = nullptr; void APIENTRY glDisablei (GLenum target, GLuint index) { if (__glDisablei != 0) (__glDisablei)(target, index);  }
PFNGLENABLEIPROC __glEnablei = nullptr; void APIENTRY glEnablei (GLenum target, GLuint index) { if (__glEnablei != 0) (__glEnablei)(target, index);  }
PFNGLENDCONDITIONALRENDERPROC __glEndConditionalRender = nullptr; void APIENTRY glEndConditionalRender () { if (__glEndConditionalRender != 0) (__glEndConditionalRender)();  }
PFNGLENDTRANSFORMFEEDBACKPROC __glEndTransformFeedback = nullptr; void APIENTRY glEndTransformFeedback () { if (__glEndTransformFeedback != 0) (__glEndTransformFeedback)();  }
PFNGLFLUSHMAPPEDBUFFERRANGEPROC __glFlushMappedBufferRange = nullptr; void APIENTRY glFlushMappedBufferRange (GLenum target, GLintptr offset, GLsizeiptr length) { if (__glFlushMappedBufferRange != 0) (__glFlushMappedBufferRange)(target, offset, length);  }
PFNGLFRAMEBUFFERRENDERBUFFERPROC __glFramebufferRenderbuffer = nullptr; void APIENTRY glFramebufferRenderbuffer (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) { if (__glFramebufferRenderbuffer != 0) (__glFramebufferRenderbuffer)(target, attachment, renderbuffertarget, renderbuffer);  }
PFNGLFRAMEBUFFERTEXTURE1DPROC __glFramebufferTexture1D = nullptr; void APIENTRY glFramebufferTexture1D (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) { if (__glFramebufferTexture1D != 0) (__glFramebufferTexture1D)(target, attachment, textarget, texture, level);  }
PFNGLFRAMEBUFFERTEXTURE2DPROC __glFramebufferTexture2D = nullptr; void APIENTRY glFramebufferTexture2D (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) { if (__glFramebufferTexture2D != 0) (__glFramebufferTexture2D)(target, attachment, textarget, texture, level);  }
PFNGLFRAMEBUFFERTEXTURE3DPROC __glFramebufferTexture3D = nullptr; void APIENTRY glFramebufferTexture3D (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset) { if (__glFramebufferTexture3D != 0) (__glFramebufferTexture3D)(target, attachment, textarget, texture, level, zoffset);  }
PFNGLFRAMEBUFFERTEXTURELAYERPROC __glFramebufferTextureLayer = nullptr; void APIENTRY glFramebufferTextureLayer (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer) { if (__glFramebufferTextureLayer != 0) (__glFramebufferTextureLayer)(target, attachment, texture, level, layer);  }
PFNGLGENFRAMEBUFFERSPROC __glGenFramebuffers = nullptr; void APIENTRY glGenFramebuffers (GLsizei n, GLuint *framebuffers) { if (__glGenFramebuffers != 0) (__glGenFramebuffers)(n, framebuffers);  }
PFNGLGENRENDERBUFFERSPROC __glGenRenderbuffers = nullptr; void APIENTRY glGenRenderbuffers (GLsizei n, GLuint *renderbuffers) { if (__glGenRenderbuffers != 0) (__glGenRenderbuffers)(n, renderbuffers);  }
PFNGLGENVERTEXARRAYSPROC __glGenVertexArrays = nullptr; void APIENTRY glGenVertexArrays (GLsizei n, GLuint *arrays) { if (__glGenVertexArrays != 0) (__glGenVertexArrays)(n, arrays);  }
PFNGLGENERATEMIPMAPPROC __glGenerateMipmap = nullptr; void APIENTRY glGenerateMipmap (GLenum target) { if (__glGenerateMipmap != 0) (__glGenerateMipmap)(target);  }
PFNGLGETBOOLEANI_VPROC __glGetBooleani_v = nullptr; void APIENTRY glGetBooleani_v (GLenum target, GLuint index, GLboolean *data) { if (__glGetBooleani_v != 0) (__glGetBooleani_v)(target, index, data);  }
PFNGLGETFRAGDATALOCATIONPROC __glGetFragDataLocation = nullptr; GLint APIENTRY glGetFragDataLocation (GLuint program, const GLchar *name) { if (__glGetFragDataLocation != 0) return (__glGetFragDataLocation)(program, name); return 0; }
PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC __glGetFramebufferAttachmentParameteriv = nullptr; void APIENTRY glGetFramebufferAttachmentParameteriv (GLenum target, GLenum attachment, GLenum pname, GLint *params) { if (__glGetFramebufferAttachmentParameteriv != 0) (__glGetFramebufferAttachmentParameteriv)(target, attachment, pname, params);  }
PFNGLGETINTEGERI_VPROC __glGetIntegeri_v = nullptr; void APIENTRY glGetIntegeri_v (GLenum target, GLuint index, GLint *data) { if (__glGetIntegeri_v != 0) (__glGetIntegeri_v)(target, index, data);  }
PFNGLGETRENDERBUFFERPARAMETERIVPROC __glGetRenderbufferParameteriv = nullptr; void APIENTRY glGetRenderbufferParameteriv (GLenum target, GLenum pname, GLint *params) { if (__glGetRenderbufferParameteriv != 0) (__glGetRenderbufferParameteriv)(target, pname, params);  }
PFNGLGETSTRINGIPROC __glGetStringi = nullptr; const GLubyte *APIENTRY glGetStringi (GLenum name, GLuint index) { if (__glGetStringi != 0) return (__glGetStringi)(name, index); return 0; }
PFNGLGETTEXPARAMETERIIVPROC __glGetTexParameterIiv = nullptr; void APIENTRY glGetTexParameterIiv (GLenum target, GLenum pname, GLint *params) { if (__glGetTexParameterIiv != 0) (__glGetTexParameterIiv)(target, pname, params);  }
PFNGLGETTEXPARAMETERIUIVPROC __glGetTexParameterIuiv = nullptr; void APIENTRY glGetTexParameterIuiv (GLenum target, GLenum pname, GLuint *params) { if (__glGetTexParameterIuiv != 0) (__glGetTexParameterIuiv)(target, pname, params);  }
PFNGLGETTRANSFORMFEEDBACKVARYINGPROC __glGetTransformFeedbackVarying = nullptr; void APIENTRY glGetTransformFeedbackVarying (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name) { if (__glGetTransformFeedbackVarying != 0) (__glGetTransformFeedbackVarying)(program, index, bufSize, length, size, type, name);  }
PFNGLGETUNIFORMUIVPROC __glGetUniformuiv = nullptr; void APIENTRY glGetUniformuiv (GLuint program, GLint location, GLuint *params) { if (__glGetUniformuiv != 0) (__glGetUniformuiv)(program, location, params);  }
PFNGLGETVERTEXATTRIBIIVPROC __glGetVertexAttribIiv = nullptr; void APIENTRY glGetVertexAttribIiv (GLuint index, GLenum pname, GLint *params) { if (__glGetVertexAttribIiv != 0) (__glGetVertexAttribIiv)(index, pname, params);  }
PFNGLGETVERTEXATTRIBIUIVPROC __glGetVertexAttribIuiv = nullptr; void APIENTRY glGetVertexAttribIuiv (GLuint index, GLenum pname, GLuint *params) { if (__glGetVertexAttribIuiv != 0) (__glGetVertexAttribIuiv)(index, pname, params);  }
PFNGLISENABLEDIPROC __glIsEnabledi = nullptr; GLboolean APIENTRY glIsEnabledi (GLenum target, GLuint index) { if (__glIsEnabledi != 0) return (__glIsEnabledi)(target, index); return 0; }
PFNGLISFRAMEBUFFERPROC __glIsFramebuffer = nullptr; GLboolean APIENTRY glIsFramebuffer (GLuint framebuffer) { if (__glIsFramebuffer != 0) return (__glIsFramebuffer)(framebuffer); return 0; }
PFNGLISRENDERBUFFERPROC __glIsRenderbuffer = nullptr; GLboolean APIENTRY glIsRenderbuffer (GLuint renderbuffer) { if (__glIsRenderbuffer != 0) return (__glIsRenderbuffer)(renderbuffer); return 0; }
PFNGLISVERTEXARRAYPROC __glIsVertexArray = nullptr; GLboolean APIENTRY glIsVertexArray (GLuint array) { if (__glIsVertexArray != 0) return (__glIsVertexArray)(array); return 0; }
PFNGLMAPBUFFERRANGEPROC __glMapBufferRange = nullptr; void *APIENTRY glMapBufferRange (GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access) { if (__glMapBufferRange != 0) return (__glMapBufferRange)(target, offset, length, access); return 0; }
PFNGLRENDERBUFFERSTORAGEPROC __glRenderbufferStorage = nullptr; void APIENTRY glRenderbufferStorage (GLenum target, GLenum internalformat, GLsizei width, GLsizei height) { if (__glRenderbufferStorage != 0) (__glRenderbufferStorage)(target, internalformat, width, height);  }
PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC __glRenderbufferStorageMultisample = nullptr; void APIENTRY glRenderbufferStorageMultisample (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) { if (__glRenderbufferStorageMultisample != 0) (__glRenderbufferStorageMultisample)(target, samples, internalformat, width, height);  }
PFNGLTEXPARAMETERIIVPROC __glTexParameterIiv = nullptr; void APIENTRY glTexParameterIiv (GLenum target, GLenum pname, const GLint *params) { if (__glTexParameterIiv != 0) (__glTexParameterIiv)(target, pname, params);  }
PFNGLTEXPARAMETERIUIVPROC __glTexParameterIuiv = nullptr; void APIENTRY glTexParameterIuiv (GLenum target, GLenum pname, const GLuint *params) { if (__glTexParameterIuiv != 0) (__glTexParameterIuiv)(target, pname, params);  }
PFNGLTRANSFORMFEEDBACKVARYINGSPROC __glTransformFeedbackVaryings = nullptr; void APIENTRY glTransformFeedbackVaryings (GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode) { if (__glTransformFeedbackVaryings != 0) (__glTransformFeedbackVaryings)(program, count, varyings, bufferMode);  }
PFNGLUNIFORM1UIPROC __glUniform1ui = nullptr; void APIENTRY glUniform1ui (GLint location, GLuint v0) { if (__glUniform1ui != 0) (__glUniform1ui)(location, v0);  }
PFNGLUNIFORM1UIVPROC __glUniform1uiv = nullptr; void APIENTRY glUniform1uiv (GLint location, GLsizei count, const GLuint *value) { if (__glUniform1uiv != 0) (__glUniform1uiv)(location, count, value);  }
PFNGLUNIFORM2UIPROC __glUniform2ui = nullptr; void APIENTRY glUniform2ui (GLint location, GLuint v0, GLuint v1) { if (__glUniform2ui != 0) (__glUniform2ui)(location, v0, v1);  }
PFNGLUNIFORM2UIVPROC __glUniform2uiv = nullptr; void APIENTRY glUniform2uiv (GLint location, GLsizei count, const GLuint *value) { if (__glUniform2uiv != 0) (__glUniform2uiv)(location, count, value);  }
PFNGLUNIFORM3UIPROC __glUniform3ui = nullptr; void APIENTRY glUniform3ui (GLint location, GLuint v0, GLuint v1, GLuint v2) { if (__glUniform3ui != 0) (__glUniform3ui)(location, v0, v1, v2);  }
PFNGLUNIFORM3UIVPROC __glUniform3uiv = nullptr; void APIENTRY glUniform3uiv (GLint location, GLsizei count, const GLuint *value) { if (__glUniform3uiv != 0) (__glUniform3uiv)(location, count, value);  }
PFNGLUNIFORM4UIPROC __glUniform4ui = nullptr; void APIENTRY glUniform4ui (GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) { if (__glUniform4ui != 0) (__glUniform4ui)(location, v0, v1, v2, v3);  }
PFNGLUNIFORM4UIVPROC __glUniform4uiv = nullptr; void APIENTRY glUniform4uiv (GLint location, GLsizei count, const GLuint *value) { if (__glUniform4uiv != 0) (__glUniform4uiv)(location, count, value);  }
PFNGLVERTEXATTRIBI1IPROC __glVertexAttribI1i = nullptr; void APIENTRY glVertexAttribI1i (GLuint index, GLint x) { if (__glVertexAttribI1i != 0) (__glVertexAttribI1i)(index, x);  }
PFNGLVERTEXATTRIBI1IVPROC __glVertexAttribI1iv = nullptr; void APIENTRY glVertexAttribI1iv (GLuint index, const GLint *v) { if (__glVertexAttribI1iv != 0) (__glVertexAttribI1iv)(index, v);  }
PFNGLVERTEXATTRIBI1UIPROC __glVertexAttribI1ui = nullptr; void APIENTRY glVertexAttribI1ui (GLuint index, GLuint x) { if (__glVertexAttribI1ui != 0) (__glVertexAttribI1ui)(index, x);  }
PFNGLVERTEXATTRIBI1UIVPROC __glVertexAttribI1uiv = nullptr; void APIENTRY glVertexAttribI1uiv (GLuint index, const GLuint *v) { if (__glVertexAttribI1uiv != 0) (__glVertexAttribI1uiv)(index, v);  }
PFNGLVERTEXATTRIBI2IPROC __glVertexAttribI2i = nullptr; void APIENTRY glVertexAttribI2i (GLuint index, GLint x, GLint y) { if (__glVertexAttribI2i != 0) (__glVertexAttribI2i)(index, x, y);  }
PFNGLVERTEXATTRIBI2IVPROC __glVertexAttribI2iv = nullptr; void APIENTRY glVertexAttribI2iv (GLuint index, const GLint *v) { if (__glVertexAttribI2iv != 0) (__glVertexAttribI2iv)(index, v);  }
PFNGLVERTEXATTRIBI2UIPROC __glVertexAttribI2ui = nullptr; void APIENTRY glVertexAttribI2ui (GLuint index, GLuint x, GLuint y) { if (__glVertexAttribI2ui != 0) (__glVertexAttribI2ui)(index, x, y);  }
PFNGLVERTEXATTRIBI2UIVPROC __glVertexAttribI2uiv = nullptr; void APIENTRY glVertexAttribI2uiv (GLuint index, const GLuint *v) { if (__glVertexAttribI2uiv != 0) (__glVertexAttribI2uiv)(index, v);  }
PFNGLVERTEXATTRIBI3IPROC __glVertexAttribI3i = nullptr; void APIENTRY glVertexAttribI3i (GLuint index, GLint x, GLint y, GLint z) { if (__glVertexAttribI3i != 0) (__glVertexAttribI3i)(index, x, y, z);  }
PFNGLVERTEXATTRIBI3IVPROC __glVertexAttribI3iv = nullptr; void APIENTRY glVertexAttribI3iv (GLuint index, const GLint *v) { if (__glVertexAttribI3iv != 0) (__glVertexAttribI3iv)(index, v);  }
PFNGLVERTEXATTRIBI3UIPROC __glVertexAttribI3ui = nullptr; void APIENTRY glVertexAttribI3ui (GLuint index, GLuint x, GLuint y, GLuint z) { if (__glVertexAttribI3ui != 0) (__glVertexAttribI3ui)(index, x, y, z);  }
PFNGLVERTEXATTRIBI3UIVPROC __glVertexAttribI3uiv = nullptr; void APIENTRY glVertexAttribI3uiv (GLuint index, const GLuint *v) { if (__glVertexAttribI3uiv != 0) (__glVertexAttribI3uiv)(index, v);  }
PFNGLVERTEXATTRIBI4BVPROC __glVertexAttribI4bv = nullptr; void APIENTRY glVertexAttribI4bv (GLuint index, const GLbyte *v) { if (__glVertexAttribI4bv != 0) (__glVertexAttribI4bv)(index, v);  }
PFNGLVERTEXATTRIBI4IPROC __glVertexAttribI4i = nullptr; void APIENTRY glVertexAttribI4i (GLuint index, GLint x, GLint y, GLint z, GLint w) { if (__glVertexAttribI4i != 0) (__glVertexAttribI4i)(index, x, y, z, w);  }
PFNGLVERTEXATTRIBI4IVPROC __glVertexAttribI4iv = nullptr; void APIENTRY glVertexAttribI4iv (GLuint index, const GLint *v) { if (__glVertexAttribI4iv != 0) (__glVertexAttribI4iv)(index, v);  }
PFNGLVERTEXATTRIBI4SVPROC __glVertexAttribI4sv = nullptr; void APIENTRY glVertexAttribI4sv (GLuint index, const GLshort *v) { if (__glVertexAttribI4sv != 0) (__glVertexAttribI4sv)(index, v);  }
PFNGLVERTEXATTRIBI4UBVPROC __glVertexAttribI4ubv = nullptr; void APIENTRY glVertexAttribI4ubv (GLuint index, const GLubyte *v) { if (__glVertexAttribI4ubv != 0) (__glVertexAttribI4ubv)(index, v);  }
PFNGLVERTEXATTRIBI4UIPROC __glVertexAttribI4ui = nullptr; void APIENTRY glVertexAttribI4ui (GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) { if (__glVertexAttribI4ui != 0) (__glVertexAttribI4ui)(index, x, y, z, w);  }
PFNGLVERTEXATTRIBI4UIVPROC __glVertexAttribI4uiv = nullptr; void APIENTRY glVertexAttribI4uiv (GLuint index, const GLuint *v) { if (__glVertexAttribI4uiv != 0) (__glVertexAttribI4uiv)(index, v);  }
PFNGLVERTEXATTRIBI4USVPROC __glVertexAttribI4usv = nullptr; void APIENTRY glVertexAttribI4usv (GLuint index, const GLushort *v) { if (__glVertexAttribI4usv != 0) (__glVertexAttribI4usv)(index, v);  }
PFNGLVERTEXATTRIBIPOINTERPROC __glVertexAttribIPointer = nullptr; void APIENTRY glVertexAttribIPointer (GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer) { if (__glVertexAttribIPointer != 0) (__glVertexAttribIPointer)(index, size, type, stride, pointer);  }
bool __loadGL_VERSION_3_0(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glBeginConditionalRender = (PFNGLBEGINCONDITIONALRENDERPROC)proc((const GLubyte*)"glBeginConditionalRender")) != nullptr) || r;
    r = ((__glBeginTransformFeedback = (PFNGLBEGINTRANSFORMFEEDBACKPROC)proc((const GLubyte*)"glBeginTransformFeedback")) != nullptr) || r;
    r = ((__glBindBufferBase = (PFNGLBINDBUFFERBASEPROC)proc((const GLubyte*)"glBindBufferBase")) != nullptr) || r;
    r = ((__glBindBufferRange = (PFNGLBINDBUFFERRANGEPROC)proc((const GLubyte*)"glBindBufferRange")) != nullptr) || r;
    r = ((__glBindFragDataLocation = (PFNGLBINDFRAGDATALOCATIONPROC)proc((const GLubyte*)"glBindFragDataLocation")) != nullptr) || r;
    r = ((__glBindFramebuffer = (PFNGLBINDFRAMEBUFFERPROC)proc((const GLubyte*)"glBindFramebuffer")) != nullptr) || r;
    r = ((__glBindRenderbuffer = (PFNGLBINDRENDERBUFFERPROC)proc((const GLubyte*)"glBindRenderbuffer")) != nullptr) || r;
    r = ((__glBindVertexArray = (PFNGLBINDVERTEXARRAYPROC)proc((const GLubyte*)"glBindVertexArray")) != nullptr) || r;
    r = ((__glBlitFramebuffer = (PFNGLBLITFRAMEBUFFERPROC)proc((const GLubyte*)"glBlitFramebuffer")) != nullptr) || r;
    r = ((__glCheckFramebufferStatus = (PFNGLCHECKFRAMEBUFFERSTATUSPROC)proc((const GLubyte*)"glCheckFramebufferStatus")) != nullptr) || r;
    r = ((__glClampColor = (PFNGLCLAMPCOLORPROC)proc((const GLubyte*)"glClampColor")) != nullptr) || r;
    r = ((__glClearBufferfi = (PFNGLCLEARBUFFERFIPROC)proc((const GLubyte*)"glClearBufferfi")) != nullptr) || r;
    r = ((__glClearBufferfv = (PFNGLCLEARBUFFERFVPROC)proc((const GLubyte*)"glClearBufferfv")) != nullptr) || r;
    r = ((__glClearBufferiv = (PFNGLCLEARBUFFERIVPROC)proc((const GLubyte*)"glClearBufferiv")) != nullptr) || r;
    r = ((__glClearBufferuiv = (PFNGLCLEARBUFFERUIVPROC)proc((const GLubyte*)"glClearBufferuiv")) != nullptr) || r;
    r = ((__glColorMaski = (PFNGLCOLORMASKIPROC)proc((const GLubyte*)"glColorMaski")) != nullptr) || r;
    r = ((__glDeleteFramebuffers = (PFNGLDELETEFRAMEBUFFERSPROC)proc((const GLubyte*)"glDeleteFramebuffers")) != nullptr) || r;
    r = ((__glDeleteRenderbuffers = (PFNGLDELETERENDERBUFFERSPROC)proc((const GLubyte*)"glDeleteRenderbuffers")) != nullptr) || r;
    r = ((__glDeleteVertexArrays = (PFNGLDELETEVERTEXARRAYSPROC)proc((const GLubyte*)"glDeleteVertexArrays")) != nullptr) || r;
    r = ((__glDisablei = (PFNGLDISABLEIPROC)proc((const GLubyte*)"glDisablei")) != nullptr) || r;
    r = ((__glEnablei = (PFNGLENABLEIPROC)proc((const GLubyte*)"glEnablei")) != nullptr) || r;
    r = ((__glEndConditionalRender = (PFNGLENDCONDITIONALRENDERPROC)proc((const GLubyte*)"glEndConditionalRender")) != nullptr) || r;
    r = ((__glEndTransformFeedback = (PFNGLENDTRANSFORMFEEDBACKPROC)proc((const GLubyte*)"glEndTransformFeedback")) != nullptr) || r;
    r = ((__glFlushMappedBufferRange = (PFNGLFLUSHMAPPEDBUFFERRANGEPROC)proc((const GLubyte*)"glFlushMappedBufferRange")) != nullptr) || r;
    r = ((__glFramebufferRenderbuffer = (PFNGLFRAMEBUFFERRENDERBUFFERPROC)proc((const GLubyte*)"glFramebufferRenderbuffer")) != nullptr) || r;
    r = ((__glFramebufferTexture1D = (PFNGLFRAMEBUFFERTEXTURE1DPROC)proc((const GLubyte*)"glFramebufferTexture1D")) != nullptr) || r;
    r = ((__glFramebufferTexture2D = (PFNGLFRAMEBUFFERTEXTURE2DPROC)proc((const GLubyte*)"glFramebufferTexture2D")) != nullptr) || r;
    r = ((__glFramebufferTexture3D = (PFNGLFRAMEBUFFERTEXTURE3DPROC)proc((const GLubyte*)"glFramebufferTexture3D")) != nullptr) || r;
    r = ((__glFramebufferTextureLayer = (PFNGLFRAMEBUFFERTEXTURELAYERPROC)proc((const GLubyte*)"glFramebufferTextureLayer")) != nullptr) || r;
    r = ((__glGenFramebuffers = (PFNGLGENFRAMEBUFFERSPROC)proc((const GLubyte*)"glGenFramebuffers")) != nullptr) || r;
    r = ((__glGenRenderbuffers = (PFNGLGENRENDERBUFFERSPROC)proc((const GLubyte*)"glGenRenderbuffers")) != nullptr) || r;
    r = ((__glGenVertexArrays = (PFNGLGENVERTEXARRAYSPROC)proc((const GLubyte*)"glGenVertexArrays")) != nullptr) || r;
    r = ((__glGenerateMipmap = (PFNGLGENERATEMIPMAPPROC)proc((const GLubyte*)"glGenerateMipmap")) != nullptr) || r;
    r = ((__glGetBooleani_v = (PFNGLGETBOOLEANI_VPROC)proc((const GLubyte*)"glGetBooleani_v")) != nullptr) || r;
    r = ((__glGetFragDataLocation = (PFNGLGETFRAGDATALOCATIONPROC)proc((const GLubyte*)"glGetFragDataLocation")) != nullptr) || r;
    r = ((__glGetFramebufferAttachmentParameteriv = (PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC)proc((const GLubyte*)"glGetFramebufferAttachmentParameteriv")) != nullptr) || r;
    r = ((__glGetIntegeri_v = (PFNGLGETINTEGERI_VPROC)proc((const GLubyte*)"glGetIntegeri_v")) != nullptr) || r;
    r = ((__glGetRenderbufferParameteriv = (PFNGLGETRENDERBUFFERPARAMETERIVPROC)proc((const GLubyte*)"glGetRenderbufferParameteriv")) != nullptr) || r;
    r = ((__glGetStringi = (PFNGLGETSTRINGIPROC)proc((const GLubyte*)"glGetStringi")) != nullptr) || r;
    r = ((__glGetTexParameterIiv = (PFNGLGETTEXPARAMETERIIVPROC)proc((const GLubyte*)"glGetTexParameterIiv")) != nullptr) || r;
    r = ((__glGetTexParameterIuiv = (PFNGLGETTEXPARAMETERIUIVPROC)proc((const GLubyte*)"glGetTexParameterIuiv")) != nullptr) || r;
    r = ((__glGetTransformFeedbackVarying = (PFNGLGETTRANSFORMFEEDBACKVARYINGPROC)proc((const GLubyte*)"glGetTransformFeedbackVarying")) != nullptr) || r;
    r = ((__glGetUniformuiv = (PFNGLGETUNIFORMUIVPROC)proc((const GLubyte*)"glGetUniformuiv")) != nullptr) || r;
    r = ((__glGetVertexAttribIiv = (PFNGLGETVERTEXATTRIBIIVPROC)proc((const GLubyte*)"glGetVertexAttribIiv")) != nullptr) || r;
    r = ((__glGetVertexAttribIuiv = (PFNGLGETVERTEXATTRIBIUIVPROC)proc((const GLubyte*)"glGetVertexAttribIuiv")) != nullptr) || r;
    r = ((__glIsEnabledi = (PFNGLISENABLEDIPROC)proc((const GLubyte*)"glIsEnabledi")) != nullptr) || r;
    r = ((__glIsFramebuffer = (PFNGLISFRAMEBUFFERPROC)proc((const GLubyte*)"glIsFramebuffer")) != nullptr) || r;
    r = ((__glIsRenderbuffer = (PFNGLISRENDERBUFFERPROC)proc((const GLubyte*)"glIsRenderbuffer")) != nullptr) || r;
    r = ((__glIsVertexArray = (PFNGLISVERTEXARRAYPROC)proc((const GLubyte*)"glIsVertexArray")) != nullptr) || r;
    r = ((__glMapBufferRange = (PFNGLMAPBUFFERRANGEPROC)proc((const GLubyte*)"glMapBufferRange")) != nullptr) || r;
    r = ((__glRenderbufferStorage = (PFNGLRENDERBUFFERSTORAGEPROC)proc((const GLubyte*)"glRenderbufferStorage")) != nullptr) || r;
    r = ((__glRenderbufferStorageMultisample = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC)proc((const GLubyte*)"glRenderbufferStorageMultisample")) != nullptr) || r;
    r = ((__glTexParameterIiv = (PFNGLTEXPARAMETERIIVPROC)proc((const GLubyte*)"glTexParameterIiv")) != nullptr) || r;
    r = ((__glTexParameterIuiv = (PFNGLTEXPARAMETERIUIVPROC)proc((const GLubyte*)"glTexParameterIuiv")) != nullptr) || r;
    r = ((__glTransformFeedbackVaryings = (PFNGLTRANSFORMFEEDBACKVARYINGSPROC)proc((const GLubyte*)"glTransformFeedbackVaryings")) != nullptr) || r;
    r = ((__glUniform1ui = (PFNGLUNIFORM1UIPROC)proc((const GLubyte*)"glUniform1ui")) != nullptr) || r;
    r = ((__glUniform1uiv = (PFNGLUNIFORM1UIVPROC)proc((const GLubyte*)"glUniform1uiv")) != nullptr) || r;
    r = ((__glUniform2ui = (PFNGLUNIFORM2UIPROC)proc((const GLubyte*)"glUniform2ui")) != nullptr) || r;
    r = ((__glUniform2uiv = (PFNGLUNIFORM2UIVPROC)proc((const GLubyte*)"glUniform2uiv")) != nullptr) || r;
    r = ((__glUniform3ui = (PFNGLUNIFORM3UIPROC)proc((const GLubyte*)"glUniform3ui")) != nullptr) || r;
    r = ((__glUniform3uiv = (PFNGLUNIFORM3UIVPROC)proc((const GLubyte*)"glUniform3uiv")) != nullptr) || r;
    r = ((__glUniform4ui = (PFNGLUNIFORM4UIPROC)proc((const GLubyte*)"glUniform4ui")) != nullptr) || r;
    r = ((__glUniform4uiv = (PFNGLUNIFORM4UIVPROC)proc((const GLubyte*)"glUniform4uiv")) != nullptr) || r;
    r = ((__glVertexAttribI1i = (PFNGLVERTEXATTRIBI1IPROC)proc((const GLubyte*)"glVertexAttribI1i")) != nullptr) || r;
    r = ((__glVertexAttribI1iv = (PFNGLVERTEXATTRIBI1IVPROC)proc((const GLubyte*)"glVertexAttribI1iv")) != nullptr) || r;
    r = ((__glVertexAttribI1ui = (PFNGLVERTEXATTRIBI1UIPROC)proc((const GLubyte*)"glVertexAttribI1ui")) != nullptr) || r;
    r = ((__glVertexAttribI1uiv = (PFNGLVERTEXATTRIBI1UIVPROC)proc((const GLubyte*)"glVertexAttribI1uiv")) != nullptr) || r;
    r = ((__glVertexAttribI2i = (PFNGLVERTEXATTRIBI2IPROC)proc((const GLubyte*)"glVertexAttribI2i")) != nullptr) || r;
    r = ((__glVertexAttribI2iv = (PFNGLVERTEXATTRIBI2IVPROC)proc((const GLubyte*)"glVertexAttribI2iv")) != nullptr) || r;
    r = ((__glVertexAttribI2ui = (PFNGLVERTEXATTRIBI2UIPROC)proc((const GLubyte*)"glVertexAttribI2ui")) != nullptr) || r;
    r = ((__glVertexAttribI2uiv = (PFNGLVERTEXATTRIBI2UIVPROC)proc((const GLubyte*)"glVertexAttribI2uiv")) != nullptr) || r;
    r = ((__glVertexAttribI3i = (PFNGLVERTEXATTRIBI3IPROC)proc((const GLubyte*)"glVertexAttribI3i")) != nullptr) || r;
    r = ((__glVertexAttribI3iv = (PFNGLVERTEXATTRIBI3IVPROC)proc((const GLubyte*)"glVertexAttribI3iv")) != nullptr) || r;
    r = ((__glVertexAttribI3ui = (PFNGLVERTEXATTRIBI3UIPROC)proc((const GLubyte*)"glVertexAttribI3ui")) != nullptr) || r;
    r = ((__glVertexAttribI3uiv = (PFNGLVERTEXATTRIBI3UIVPROC)proc((const GLubyte*)"glVertexAttribI3uiv")) != nullptr) || r;
    r = ((__glVertexAttribI4bv = (PFNGLVERTEXATTRIBI4BVPROC)proc((const GLubyte*)"glVertexAttribI4bv")) != nullptr) || r;
    r = ((__glVertexAttribI4i = (PFNGLVERTEXATTRIBI4IPROC)proc((const GLubyte*)"glVertexAttribI4i")) != nullptr) || r;
    r = ((__glVertexAttribI4iv = (PFNGLVERTEXATTRIBI4IVPROC)proc((const GLubyte*)"glVertexAttribI4iv")) != nullptr) || r;
    r = ((__glVertexAttribI4sv = (PFNGLVERTEXATTRIBI4SVPROC)proc((const GLubyte*)"glVertexAttribI4sv")) != nullptr) || r;
    r = ((__glVertexAttribI4ubv = (PFNGLVERTEXATTRIBI4UBVPROC)proc((const GLubyte*)"glVertexAttribI4ubv")) != nullptr) || r;
    r = ((__glVertexAttribI4ui = (PFNGLVERTEXATTRIBI4UIPROC)proc((const GLubyte*)"glVertexAttribI4ui")) != nullptr) || r;
    r = ((__glVertexAttribI4uiv = (PFNGLVERTEXATTRIBI4UIVPROC)proc((const GLubyte*)"glVertexAttribI4uiv")) != nullptr) || r;
    r = ((__glVertexAttribI4usv = (PFNGLVERTEXATTRIBI4USVPROC)proc((const GLubyte*)"glVertexAttribI4usv")) != nullptr) || r;
    r = ((__glVertexAttribIPointer = (PFNGLVERTEXATTRIBIPOINTERPROC)proc((const GLubyte*)"glVertexAttribIPointer")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_VERSION_3_0 = false;
/* GL_VERSION_3_1 */
PFNGLCOPYBUFFERSUBDATAPROC __glCopyBufferSubData = nullptr; void APIENTRY glCopyBufferSubData (GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) { if (__glCopyBufferSubData != 0) (__glCopyBufferSubData)(readTarget, writeTarget, readOffset, writeOffset, size);  }
PFNGLDRAWARRAYSINSTANCEDPROC __glDrawArraysInstanced = nullptr; void APIENTRY glDrawArraysInstanced (GLenum mode, GLint first, GLsizei count, GLsizei instancecount) { if (__glDrawArraysInstanced != 0) (__glDrawArraysInstanced)(mode, first, count, instancecount);  }
PFNGLDRAWELEMENTSINSTANCEDPROC __glDrawElementsInstanced = nullptr; void APIENTRY glDrawElementsInstanced (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount) { if (__glDrawElementsInstanced != 0) (__glDrawElementsInstanced)(mode, count, type, indices, instancecount);  }
PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC __glGetActiveUniformBlockName = nullptr; void APIENTRY glGetActiveUniformBlockName (GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName) { if (__glGetActiveUniformBlockName != 0) (__glGetActiveUniformBlockName)(program, uniformBlockIndex, bufSize, length, uniformBlockName);  }
PFNGLGETACTIVEUNIFORMBLOCKIVPROC __glGetActiveUniformBlockiv = nullptr; void APIENTRY glGetActiveUniformBlockiv (GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params) { if (__glGetActiveUniformBlockiv != 0) (__glGetActiveUniformBlockiv)(program, uniformBlockIndex, pname, params);  }
PFNGLGETACTIVEUNIFORMNAMEPROC __glGetActiveUniformName = nullptr; void APIENTRY glGetActiveUniformName (GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName) { if (__glGetActiveUniformName != 0) (__glGetActiveUniformName)(program, uniformIndex, bufSize, length, uniformName);  }
PFNGLGETACTIVEUNIFORMSIVPROC __glGetActiveUniformsiv = nullptr; void APIENTRY glGetActiveUniformsiv (GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params) { if (__glGetActiveUniformsiv != 0) (__glGetActiveUniformsiv)(program, uniformCount, uniformIndices, pname, params);  }
PFNGLGETUNIFORMBLOCKINDEXPROC __glGetUniformBlockIndex = nullptr; GLuint APIENTRY glGetUniformBlockIndex (GLuint program, const GLchar *uniformBlockName) { if (__glGetUniformBlockIndex != 0) return (__glGetUniformBlockIndex)(program, uniformBlockName); return 0; }
PFNGLGETUNIFORMINDICESPROC __glGetUniformIndices = nullptr; void APIENTRY glGetUniformIndices (GLuint program, GLsizei uniformCount, const GLchar *const*uniformNames, GLuint *uniformIndices) { if (__glGetUniformIndices != 0) (__glGetUniformIndices)(program, uniformCount, uniformNames, uniformIndices);  }
PFNGLPRIMITIVERESTARTINDEXPROC __glPrimitiveRestartIndex = nullptr; void APIENTRY glPrimitiveRestartIndex (GLuint index) { if (__glPrimitiveRestartIndex != 0) (__glPrimitiveRestartIndex)(index);  }
PFNGLTEXBUFFERPROC __glTexBuffer = nullptr; void APIENTRY glTexBuffer (GLenum target, GLenum internalformat, GLuint buffer) { if (__glTexBuffer != 0) (__glTexBuffer)(target, internalformat, buffer);  }
PFNGLUNIFORMBLOCKBINDINGPROC __glUniformBlockBinding = nullptr; void APIENTRY glUniformBlockBinding (GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding) { if (__glUniformBlockBinding != 0) (__glUniformBlockBinding)(program, uniformBlockIndex, uniformBlockBinding);  }
bool __loadGL_VERSION_3_1(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glCopyBufferSubData = (PFNGLCOPYBUFFERSUBDATAPROC)proc((const GLubyte*)"glCopyBufferSubData")) != nullptr) || r;
    r = ((__glDrawArraysInstanced = (PFNGLDRAWARRAYSINSTANCEDPROC)proc((const GLubyte*)"glDrawArraysInstanced")) != nullptr) || r;
    r = ((__glDrawElementsInstanced = (PFNGLDRAWELEMENTSINSTANCEDPROC)proc((const GLubyte*)"glDrawElementsInstanced")) != nullptr) || r;
    r = ((__glGetActiveUniformBlockName = (PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC)proc((const GLubyte*)"glGetActiveUniformBlockName")) != nullptr) || r;
    r = ((__glGetActiveUniformBlockiv = (PFNGLGETACTIVEUNIFORMBLOCKIVPROC)proc((const GLubyte*)"glGetActiveUniformBlockiv")) != nullptr) || r;
    r = ((__glGetActiveUniformName = (PFNGLGETACTIVEUNIFORMNAMEPROC)proc((const GLubyte*)"glGetActiveUniformName")) != nullptr) || r;
    r = ((__glGetActiveUniformsiv = (PFNGLGETACTIVEUNIFORMSIVPROC)proc((const GLubyte*)"glGetActiveUniformsiv")) != nullptr) || r;
    r = ((__glGetUniformBlockIndex = (PFNGLGETUNIFORMBLOCKINDEXPROC)proc((const GLubyte*)"glGetUniformBlockIndex")) != nullptr) || r;
    r = ((__glGetUniformIndices = (PFNGLGETUNIFORMINDICESPROC)proc((const GLubyte*)"glGetUniformIndices")) != nullptr) || r;
    r = ((__glPrimitiveRestartIndex = (PFNGLPRIMITIVERESTARTINDEXPROC)proc((const GLubyte*)"glPrimitiveRestartIndex")) != nullptr) || r;
    r = ((__glTexBuffer = (PFNGLTEXBUFFERPROC)proc((const GLubyte*)"glTexBuffer")) != nullptr) || r;
    r = ((__glUniformBlockBinding = (PFNGLUNIFORMBLOCKBINDINGPROC)proc((const GLubyte*)"glUniformBlockBinding")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_VERSION_3_1 = false;
/* GL_VERSION_3_2 */
PFNGLCLIENTWAITSYNCPROC __glClientWaitSync = nullptr; GLenum APIENTRY glClientWaitSync (GLsync sync, GLbitfield flags, GLuint64 timeout) { if (__glClientWaitSync != 0) return (__glClientWaitSync)(sync, flags, timeout); return 0; }
PFNGLDELETESYNCPROC __glDeleteSync = nullptr; void APIENTRY glDeleteSync (GLsync sync) { if (__glDeleteSync != 0) (__glDeleteSync)(sync);  }
PFNGLDRAWELEMENTSBASEVERTEXPROC __glDrawElementsBaseVertex = nullptr; void APIENTRY glDrawElementsBaseVertex (GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex) { if (__glDrawElementsBaseVertex != 0) (__glDrawElementsBaseVertex)(mode, count, type, indices, basevertex);  }
PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC __glDrawElementsInstancedBaseVertex = nullptr; void APIENTRY glDrawElementsInstancedBaseVertex (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex) { if (__glDrawElementsInstancedBaseVertex != 0) (__glDrawElementsInstancedBaseVertex)(mode, count, type, indices, instancecount, basevertex);  }
PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC __glDrawRangeElementsBaseVertex = nullptr; void APIENTRY glDrawRangeElementsBaseVertex (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex) { if (__glDrawRangeElementsBaseVertex != 0) (__glDrawRangeElementsBaseVertex)(mode, start, end, count, type, indices, basevertex);  }
PFNGLFENCESYNCPROC __glFenceSync = nullptr; GLsync APIENTRY glFenceSync (GLenum condition, GLbitfield flags) { if (__glFenceSync != 0) return (__glFenceSync)(condition, flags); return 0; }
PFNGLFRAMEBUFFERTEXTUREPROC __glFramebufferTexture = nullptr; void APIENTRY glFramebufferTexture (GLenum target, GLenum attachment, GLuint texture, GLint level) { if (__glFramebufferTexture != 0) (__glFramebufferTexture)(target, attachment, texture, level);  }
PFNGLGETBUFFERPARAMETERI64VPROC __glGetBufferParameteri64v = nullptr; void APIENTRY glGetBufferParameteri64v (GLenum target, GLenum pname, GLint64 *params) { if (__glGetBufferParameteri64v != 0) (__glGetBufferParameteri64v)(target, pname, params);  }
PFNGLGETINTEGER64I_VPROC __glGetInteger64i_v = nullptr; void APIENTRY glGetInteger64i_v (GLenum target, GLuint index, GLint64 *data) { if (__glGetInteger64i_v != 0) (__glGetInteger64i_v)(target, index, data);  }
PFNGLGETINTEGER64VPROC __glGetInteger64v = nullptr; void APIENTRY glGetInteger64v (GLenum pname, GLint64 *data) { if (__glGetInteger64v != 0) (__glGetInteger64v)(pname, data);  }
PFNGLGETMULTISAMPLEFVPROC __glGetMultisamplefv = nullptr; void APIENTRY glGetMultisamplefv (GLenum pname, GLuint index, GLfloat *val) { if (__glGetMultisamplefv != 0) (__glGetMultisamplefv)(pname, index, val);  }
PFNGLGETSYNCIVPROC __glGetSynciv = nullptr; void APIENTRY glGetSynciv (GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values) { if (__glGetSynciv != 0) (__glGetSynciv)(sync, pname, bufSize, length, values);  }
PFNGLISSYNCPROC __glIsSync = nullptr; GLboolean APIENTRY glIsSync (GLsync sync) { if (__glIsSync != 0) return (__glIsSync)(sync); return 0; }
PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC __glMultiDrawElementsBaseVertex = nullptr; void APIENTRY glMultiDrawElementsBaseVertex (GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount, const GLint *basevertex) { if (__glMultiDrawElementsBaseVertex != 0) (__glMultiDrawElementsBaseVertex)(mode, count, type, indices, drawcount, basevertex);  }
PFNGLPROVOKINGVERTEXPROC __glProvokingVertex = nullptr; void APIENTRY glProvokingVertex (GLenum mode) { if (__glProvokingVertex != 0) (__glProvokingVertex)(mode);  }
PFNGLSAMPLEMASKIPROC __glSampleMaski = nullptr; void APIENTRY glSampleMaski (GLuint maskNumber, GLbitfield mask) { if (__glSampleMaski != 0) (__glSampleMaski)(maskNumber, mask);  }
PFNGLTEXIMAGE2DMULTISAMPLEPROC __glTexImage2DMultisample = nullptr; void APIENTRY glTexImage2DMultisample (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) { if (__glTexImage2DMultisample != 0) (__glTexImage2DMultisample)(target, samples, internalformat, width, height, fixedsamplelocations);  }
PFNGLTEXIMAGE3DMULTISAMPLEPROC __glTexImage3DMultisample = nullptr; void APIENTRY glTexImage3DMultisample (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) { if (__glTexImage3DMultisample != 0) (__glTexImage3DMultisample)(target, samples, internalformat, width, height, depth, fixedsamplelocations);  }
PFNGLWAITSYNCPROC __glWaitSync = nullptr; void APIENTRY glWaitSync (GLsync sync, GLbitfield flags, GLuint64 timeout) { if (__glWaitSync != 0) (__glWaitSync)(sync, flags, timeout);  }
bool __loadGL_VERSION_3_2(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glClientWaitSync = (PFNGLCLIENTWAITSYNCPROC)proc((const GLubyte*)"glClientWaitSync")) != nullptr) || r;
    r = ((__glDeleteSync = (PFNGLDELETESYNCPROC)proc((const GLubyte*)"glDeleteSync")) != nullptr) || r;
    r = ((__glDrawElementsBaseVertex = (PFNGLDRAWELEMENTSBASEVERTEXPROC)proc((const GLubyte*)"glDrawElementsBaseVertex")) != nullptr) || r;
    r = ((__glDrawElementsInstancedBaseVertex = (PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC)proc((const GLubyte*)"glDrawElementsInstancedBaseVertex")) != nullptr) || r;
    r = ((__glDrawRangeElementsBaseVertex = (PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC)proc((const GLubyte*)"glDrawRangeElementsBaseVertex")) != nullptr) || r;
    r = ((__glFenceSync = (PFNGLFENCESYNCPROC)proc((const GLubyte*)"glFenceSync")) != nullptr) || r;
    r = ((__glFramebufferTexture = (PFNGLFRAMEBUFFERTEXTUREPROC)proc((const GLubyte*)"glFramebufferTexture")) != nullptr) || r;
    r = ((__glGetBufferParameteri64v = (PFNGLGETBUFFERPARAMETERI64VPROC)proc((const GLubyte*)"glGetBufferParameteri64v")) != nullptr) || r;
    r = ((__glGetInteger64i_v = (PFNGLGETINTEGER64I_VPROC)proc((const GLubyte*)"glGetInteger64i_v")) != nullptr) || r;
    r = ((__glGetInteger64v = (PFNGLGETINTEGER64VPROC)proc((const GLubyte*)"glGetInteger64v")) != nullptr) || r;
    r = ((__glGetMultisamplefv = (PFNGLGETMULTISAMPLEFVPROC)proc((const GLubyte*)"glGetMultisamplefv")) != nullptr) || r;
    r = ((__glGetSynciv = (PFNGLGETSYNCIVPROC)proc((const GLubyte*)"glGetSynciv")) != nullptr) || r;
    r = ((__glIsSync = (PFNGLISSYNCPROC)proc((const GLubyte*)"glIsSync")) != nullptr) || r;
    r = ((__glMultiDrawElementsBaseVertex = (PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC)proc((const GLubyte*)"glMultiDrawElementsBaseVertex")) != nullptr) || r;
    r = ((__glProvokingVertex = (PFNGLPROVOKINGVERTEXPROC)proc((const GLubyte*)"glProvokingVertex")) != nullptr) || r;
    r = ((__glSampleMaski = (PFNGLSAMPLEMASKIPROC)proc((const GLubyte*)"glSampleMaski")) != nullptr) || r;
    r = ((__glTexImage2DMultisample = (PFNGLTEXIMAGE2DMULTISAMPLEPROC)proc((const GLubyte*)"glTexImage2DMultisample")) != nullptr) || r;
    r = ((__glTexImage3DMultisample = (PFNGLTEXIMAGE3DMULTISAMPLEPROC)proc((const GLubyte*)"glTexImage3DMultisample")) != nullptr) || r;
    r = ((__glWaitSync = (PFNGLWAITSYNCPROC)proc((const GLubyte*)"glWaitSync")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_VERSION_3_2 = false;
/* GL_VERSION_3_3 */
PFNGLBINDFRAGDATALOCATIONINDEXEDPROC __glBindFragDataLocationIndexed = nullptr; void APIENTRY glBindFragDataLocationIndexed (GLuint program, GLuint colorNumber, GLuint index, const GLchar *name) { if (__glBindFragDataLocationIndexed != 0) (__glBindFragDataLocationIndexed)(program, colorNumber, index, name);  }
PFNGLBINDSAMPLERPROC __glBindSampler = nullptr; void APIENTRY glBindSampler (GLuint unit, GLuint sampler) { if (__glBindSampler != 0) (__glBindSampler)(unit, sampler);  }
PFNGLCOLORP3UIPROC __glColorP3ui = nullptr; void APIENTRY glColorP3ui (GLenum type, GLuint color) { if (__glColorP3ui != 0) (__glColorP3ui)(type, color);  }
PFNGLCOLORP3UIVPROC __glColorP3uiv = nullptr; void APIENTRY glColorP3uiv (GLenum type, const GLuint *color) { if (__glColorP3uiv != 0) (__glColorP3uiv)(type, color);  }
PFNGLCOLORP4UIPROC __glColorP4ui = nullptr; void APIENTRY glColorP4ui (GLenum type, GLuint color) { if (__glColorP4ui != 0) (__glColorP4ui)(type, color);  }
PFNGLCOLORP4UIVPROC __glColorP4uiv = nullptr; void APIENTRY glColorP4uiv (GLenum type, const GLuint *color) { if (__glColorP4uiv != 0) (__glColorP4uiv)(type, color);  }
PFNGLDELETESAMPLERSPROC __glDeleteSamplers = nullptr; void APIENTRY glDeleteSamplers (GLsizei count, const GLuint *samplers) { if (__glDeleteSamplers != 0) (__glDeleteSamplers)(count, samplers);  }
PFNGLGENSAMPLERSPROC __glGenSamplers = nullptr; void APIENTRY glGenSamplers (GLsizei count, GLuint *samplers) { if (__glGenSamplers != 0) (__glGenSamplers)(count, samplers);  }
PFNGLGETFRAGDATAINDEXPROC __glGetFragDataIndex = nullptr; GLint APIENTRY glGetFragDataIndex (GLuint program, const GLchar *name) { if (__glGetFragDataIndex != 0) return (__glGetFragDataIndex)(program, name); return 0; }
PFNGLGETQUERYOBJECTI64VPROC __glGetQueryObjecti64v = nullptr; void APIENTRY glGetQueryObjecti64v (GLuint id, GLenum pname, GLint64 *params) { if (__glGetQueryObjecti64v != 0) (__glGetQueryObjecti64v)(id, pname, params);  }
PFNGLGETQUERYOBJECTUI64VPROC __glGetQueryObjectui64v = nullptr; void APIENTRY glGetQueryObjectui64v (GLuint id, GLenum pname, GLuint64 *params) { if (__glGetQueryObjectui64v != 0) (__glGetQueryObjectui64v)(id, pname, params);  }
PFNGLGETSAMPLERPARAMETERIIVPROC __glGetSamplerParameterIiv = nullptr; void APIENTRY glGetSamplerParameterIiv (GLuint sampler, GLenum pname, GLint *params) { if (__glGetSamplerParameterIiv != 0) (__glGetSamplerParameterIiv)(sampler, pname, params);  }
PFNGLGETSAMPLERPARAMETERIUIVPROC __glGetSamplerParameterIuiv = nullptr; void APIENTRY glGetSamplerParameterIuiv (GLuint sampler, GLenum pname, GLuint *params) { if (__glGetSamplerParameterIuiv != 0) (__glGetSamplerParameterIuiv)(sampler, pname, params);  }
PFNGLGETSAMPLERPARAMETERFVPROC __glGetSamplerParameterfv = nullptr; void APIENTRY glGetSamplerParameterfv (GLuint sampler, GLenum pname, GLfloat *params) { if (__glGetSamplerParameterfv != 0) (__glGetSamplerParameterfv)(sampler, pname, params);  }
PFNGLGETSAMPLERPARAMETERIVPROC __glGetSamplerParameteriv = nullptr; void APIENTRY glGetSamplerParameteriv (GLuint sampler, GLenum pname, GLint *params) { if (__glGetSamplerParameteriv != 0) (__glGetSamplerParameteriv)(sampler, pname, params);  }
PFNGLISSAMPLERPROC __glIsSampler = nullptr; GLboolean APIENTRY glIsSampler (GLuint sampler) { if (__glIsSampler != 0) return (__glIsSampler)(sampler); return 0; }
PFNGLMULTITEXCOORDP1UIPROC __glMultiTexCoordP1ui = nullptr; void APIENTRY glMultiTexCoordP1ui (GLenum texture, GLenum type, GLuint coords) { if (__glMultiTexCoordP1ui != 0) (__glMultiTexCoordP1ui)(texture, type, coords);  }
PFNGLMULTITEXCOORDP1UIVPROC __glMultiTexCoordP1uiv = nullptr; void APIENTRY glMultiTexCoordP1uiv (GLenum texture, GLenum type, const GLuint *coords) { if (__glMultiTexCoordP1uiv != 0) (__glMultiTexCoordP1uiv)(texture, type, coords);  }
PFNGLMULTITEXCOORDP2UIPROC __glMultiTexCoordP2ui = nullptr; void APIENTRY glMultiTexCoordP2ui (GLenum texture, GLenum type, GLuint coords) { if (__glMultiTexCoordP2ui != 0) (__glMultiTexCoordP2ui)(texture, type, coords);  }
PFNGLMULTITEXCOORDP2UIVPROC __glMultiTexCoordP2uiv = nullptr; void APIENTRY glMultiTexCoordP2uiv (GLenum texture, GLenum type, const GLuint *coords) { if (__glMultiTexCoordP2uiv != 0) (__glMultiTexCoordP2uiv)(texture, type, coords);  }
PFNGLMULTITEXCOORDP3UIPROC __glMultiTexCoordP3ui = nullptr; void APIENTRY glMultiTexCoordP3ui (GLenum texture, GLenum type, GLuint coords) { if (__glMultiTexCoordP3ui != 0) (__glMultiTexCoordP3ui)(texture, type, coords);  }
PFNGLMULTITEXCOORDP3UIVPROC __glMultiTexCoordP3uiv = nullptr; void APIENTRY glMultiTexCoordP3uiv (GLenum texture, GLenum type, const GLuint *coords) { if (__glMultiTexCoordP3uiv != 0) (__glMultiTexCoordP3uiv)(texture, type, coords);  }
PFNGLMULTITEXCOORDP4UIPROC __glMultiTexCoordP4ui = nullptr; void APIENTRY glMultiTexCoordP4ui (GLenum texture, GLenum type, GLuint coords) { if (__glMultiTexCoordP4ui != 0) (__glMultiTexCoordP4ui)(texture, type, coords);  }
PFNGLMULTITEXCOORDP4UIVPROC __glMultiTexCoordP4uiv = nullptr; void APIENTRY glMultiTexCoordP4uiv (GLenum texture, GLenum type, const GLuint *coords) { if (__glMultiTexCoordP4uiv != 0) (__glMultiTexCoordP4uiv)(texture, type, coords);  }
PFNGLNORMALP3UIPROC __glNormalP3ui = nullptr; void APIENTRY glNormalP3ui (GLenum type, GLuint coords) { if (__glNormalP3ui != 0) (__glNormalP3ui)(type, coords);  }
PFNGLNORMALP3UIVPROC __glNormalP3uiv = nullptr; void APIENTRY glNormalP3uiv (GLenum type, const GLuint *coords) { if (__glNormalP3uiv != 0) (__glNormalP3uiv)(type, coords);  }
PFNGLQUERYCOUNTERPROC __glQueryCounter = nullptr; void APIENTRY glQueryCounter (GLuint id, GLenum target) { if (__glQueryCounter != 0) (__glQueryCounter)(id, target);  }
PFNGLSAMPLERPARAMETERIIVPROC __glSamplerParameterIiv = nullptr; void APIENTRY glSamplerParameterIiv (GLuint sampler, GLenum pname, const GLint *param) { if (__glSamplerParameterIiv != 0) (__glSamplerParameterIiv)(sampler, pname, param);  }
PFNGLSAMPLERPARAMETERIUIVPROC __glSamplerParameterIuiv = nullptr; void APIENTRY glSamplerParameterIuiv (GLuint sampler, GLenum pname, const GLuint *param) { if (__glSamplerParameterIuiv != 0) (__glSamplerParameterIuiv)(sampler, pname, param);  }
PFNGLSAMPLERPARAMETERFPROC __glSamplerParameterf = nullptr; void APIENTRY glSamplerParameterf (GLuint sampler, GLenum pname, GLfloat param) { if (__glSamplerParameterf != 0) (__glSamplerParameterf)(sampler, pname, param);  }
PFNGLSAMPLERPARAMETERFVPROC __glSamplerParameterfv = nullptr; void APIENTRY glSamplerParameterfv (GLuint sampler, GLenum pname, const GLfloat *param) { if (__glSamplerParameterfv != 0) (__glSamplerParameterfv)(sampler, pname, param);  }
PFNGLSAMPLERPARAMETERIPROC __glSamplerParameteri = nullptr; void APIENTRY glSamplerParameteri (GLuint sampler, GLenum pname, GLint param) { if (__glSamplerParameteri != 0) (__glSamplerParameteri)(sampler, pname, param);  }
PFNGLSAMPLERPARAMETERIVPROC __glSamplerParameteriv = nullptr; void APIENTRY glSamplerParameteriv (GLuint sampler, GLenum pname, const GLint *param) { if (__glSamplerParameteriv != 0) (__glSamplerParameteriv)(sampler, pname, param);  }
PFNGLSECONDARYCOLORP3UIPROC __glSecondaryColorP3ui = nullptr; void APIENTRY glSecondaryColorP3ui (GLenum type, GLuint color) { if (__glSecondaryColorP3ui != 0) (__glSecondaryColorP3ui)(type, color);  }
PFNGLSECONDARYCOLORP3UIVPROC __glSecondaryColorP3uiv = nullptr; void APIENTRY glSecondaryColorP3uiv (GLenum type, const GLuint *color) { if (__glSecondaryColorP3uiv != 0) (__glSecondaryColorP3uiv)(type, color);  }
PFNGLTEXCOORDP1UIPROC __glTexCoordP1ui = nullptr; void APIENTRY glTexCoordP1ui (GLenum type, GLuint coords) { if (__glTexCoordP1ui != 0) (__glTexCoordP1ui)(type, coords);  }
PFNGLTEXCOORDP1UIVPROC __glTexCoordP1uiv = nullptr; void APIENTRY glTexCoordP1uiv (GLenum type, const GLuint *coords) { if (__glTexCoordP1uiv != 0) (__glTexCoordP1uiv)(type, coords);  }
PFNGLTEXCOORDP2UIPROC __glTexCoordP2ui = nullptr; void APIENTRY glTexCoordP2ui (GLenum type, GLuint coords) { if (__glTexCoordP2ui != 0) (__glTexCoordP2ui)(type, coords);  }
PFNGLTEXCOORDP2UIVPROC __glTexCoordP2uiv = nullptr; void APIENTRY glTexCoordP2uiv (GLenum type, const GLuint *coords) { if (__glTexCoordP2uiv != 0) (__glTexCoordP2uiv)(type, coords);  }
PFNGLTEXCOORDP3UIPROC __glTexCoordP3ui = nullptr; void APIENTRY glTexCoordP3ui (GLenum type, GLuint coords) { if (__glTexCoordP3ui != 0) (__glTexCoordP3ui)(type, coords);  }
PFNGLTEXCOORDP3UIVPROC __glTexCoordP3uiv = nullptr; void APIENTRY glTexCoordP3uiv (GLenum type, const GLuint *coords) { if (__glTexCoordP3uiv != 0) (__glTexCoordP3uiv)(type, coords);  }
PFNGLTEXCOORDP4UIPROC __glTexCoordP4ui = nullptr; void APIENTRY glTexCoordP4ui (GLenum type, GLuint coords) { if (__glTexCoordP4ui != 0) (__glTexCoordP4ui)(type, coords);  }
PFNGLTEXCOORDP4UIVPROC __glTexCoordP4uiv = nullptr; void APIENTRY glTexCoordP4uiv (GLenum type, const GLuint *coords) { if (__glTexCoordP4uiv != 0) (__glTexCoordP4uiv)(type, coords);  }
PFNGLVERTEXATTRIBDIVISORPROC __glVertexAttribDivisor = nullptr; void APIENTRY glVertexAttribDivisor (GLuint index, GLuint divisor) { if (__glVertexAttribDivisor != 0) (__glVertexAttribDivisor)(index, divisor);  }
PFNGLVERTEXATTRIBP1UIPROC __glVertexAttribP1ui = nullptr; void APIENTRY glVertexAttribP1ui (GLuint index, GLenum type, GLboolean normalized, GLuint value) { if (__glVertexAttribP1ui != 0) (__glVertexAttribP1ui)(index, type, normalized, value);  }
PFNGLVERTEXATTRIBP1UIVPROC __glVertexAttribP1uiv = nullptr; void APIENTRY glVertexAttribP1uiv (GLuint index, GLenum type, GLboolean normalized, const GLuint *value) { if (__glVertexAttribP1uiv != 0) (__glVertexAttribP1uiv)(index, type, normalized, value);  }
PFNGLVERTEXATTRIBP2UIPROC __glVertexAttribP2ui = nullptr; void APIENTRY glVertexAttribP2ui (GLuint index, GLenum type, GLboolean normalized, GLuint value) { if (__glVertexAttribP2ui != 0) (__glVertexAttribP2ui)(index, type, normalized, value);  }
PFNGLVERTEXATTRIBP2UIVPROC __glVertexAttribP2uiv = nullptr; void APIENTRY glVertexAttribP2uiv (GLuint index, GLenum type, GLboolean normalized, const GLuint *value) { if (__glVertexAttribP2uiv != 0) (__glVertexAttribP2uiv)(index, type, normalized, value);  }
PFNGLVERTEXATTRIBP3UIPROC __glVertexAttribP3ui = nullptr; void APIENTRY glVertexAttribP3ui (GLuint index, GLenum type, GLboolean normalized, GLuint value) { if (__glVertexAttribP3ui != 0) (__glVertexAttribP3ui)(index, type, normalized, value);  }
PFNGLVERTEXATTRIBP3UIVPROC __glVertexAttribP3uiv = nullptr; void APIENTRY glVertexAttribP3uiv (GLuint index, GLenum type, GLboolean normalized, const GLuint *value) { if (__glVertexAttribP3uiv != 0) (__glVertexAttribP3uiv)(index, type, normalized, value);  }
PFNGLVERTEXATTRIBP4UIPROC __glVertexAttribP4ui = nullptr; void APIENTRY glVertexAttribP4ui (GLuint index, GLenum type, GLboolean normalized, GLuint value) { if (__glVertexAttribP4ui != 0) (__glVertexAttribP4ui)(index, type, normalized, value);  }
PFNGLVERTEXATTRIBP4UIVPROC __glVertexAttribP4uiv = nullptr; void APIENTRY glVertexAttribP4uiv (GLuint index, GLenum type, GLboolean normalized, const GLuint *value) { if (__glVertexAttribP4uiv != 0) (__glVertexAttribP4uiv)(index, type, normalized, value);  }
PFNGLVERTEXP2UIPROC __glVertexP2ui = nullptr; void APIENTRY glVertexP2ui (GLenum type, GLuint value) { if (__glVertexP2ui != 0) (__glVertexP2ui)(type, value);  }
PFNGLVERTEXP2UIVPROC __glVertexP2uiv = nullptr; void APIENTRY glVertexP2uiv (GLenum type, const GLuint *value) { if (__glVertexP2uiv != 0) (__glVertexP2uiv)(type, value);  }
PFNGLVERTEXP3UIPROC __glVertexP3ui = nullptr; void APIENTRY glVertexP3ui (GLenum type, GLuint value) { if (__glVertexP3ui != 0) (__glVertexP3ui)(type, value);  }
PFNGLVERTEXP3UIVPROC __glVertexP3uiv = nullptr; void APIENTRY glVertexP3uiv (GLenum type, const GLuint *value) { if (__glVertexP3uiv != 0) (__glVertexP3uiv)(type, value);  }
PFNGLVERTEXP4UIPROC __glVertexP4ui = nullptr; void APIENTRY glVertexP4ui (GLenum type, GLuint value) { if (__glVertexP4ui != 0) (__glVertexP4ui)(type, value);  }
PFNGLVERTEXP4UIVPROC __glVertexP4uiv = nullptr; void APIENTRY glVertexP4uiv (GLenum type, const GLuint *value) { if (__glVertexP4uiv != 0) (__glVertexP4uiv)(type, value);  }
bool __loadGL_VERSION_3_3(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glBindFragDataLocationIndexed = (PFNGLBINDFRAGDATALOCATIONINDEXEDPROC)proc((const GLubyte*)"glBindFragDataLocationIndexed")) != nullptr) || r;
    r = ((__glBindSampler = (PFNGLBINDSAMPLERPROC)proc((const GLubyte*)"glBindSampler")) != nullptr) || r;
    r = ((__glColorP3ui = (PFNGLCOLORP3UIPROC)proc((const GLubyte*)"glColorP3ui")) != nullptr) || r;
    r = ((__glColorP3uiv = (PFNGLCOLORP3UIVPROC)proc((const GLubyte*)"glColorP3uiv")) != nullptr) || r;
    r = ((__glColorP4ui = (PFNGLCOLORP4UIPROC)proc((const GLubyte*)"glColorP4ui")) != nullptr) || r;
    r = ((__glColorP4uiv = (PFNGLCOLORP4UIVPROC)proc((const GLubyte*)"glColorP4uiv")) != nullptr) || r;
    r = ((__glDeleteSamplers = (PFNGLDELETESAMPLERSPROC)proc((const GLubyte*)"glDeleteSamplers")) != nullptr) || r;
    r = ((__glGenSamplers = (PFNGLGENSAMPLERSPROC)proc((const GLubyte*)"glGenSamplers")) != nullptr) || r;
    r = ((__glGetFragDataIndex = (PFNGLGETFRAGDATAINDEXPROC)proc((const GLubyte*)"glGetFragDataIndex")) != nullptr) || r;
    r = ((__glGetQueryObjecti64v = (PFNGLGETQUERYOBJECTI64VPROC)proc((const GLubyte*)"glGetQueryObjecti64v")) != nullptr) || r;
    r = ((__glGetQueryObjectui64v = (PFNGLGETQUERYOBJECTUI64VPROC)proc((const GLubyte*)"glGetQueryObjectui64v")) != nullptr) || r;
    r = ((__glGetSamplerParameterIiv = (PFNGLGETSAMPLERPARAMETERIIVPROC)proc((const GLubyte*)"glGetSamplerParameterIiv")) != nullptr) || r;
    r = ((__glGetSamplerParameterIuiv = (PFNGLGETSAMPLERPARAMETERIUIVPROC)proc((const GLubyte*)"glGetSamplerParameterIuiv")) != nullptr) || r;
    r = ((__glGetSamplerParameterfv = (PFNGLGETSAMPLERPARAMETERFVPROC)proc((const GLubyte*)"glGetSamplerParameterfv")) != nullptr) || r;
    r = ((__glGetSamplerParameteriv = (PFNGLGETSAMPLERPARAMETERIVPROC)proc((const GLubyte*)"glGetSamplerParameteriv")) != nullptr) || r;
    r = ((__glIsSampler = (PFNGLISSAMPLERPROC)proc((const GLubyte*)"glIsSampler")) != nullptr) || r;
    r = ((__glMultiTexCoordP1ui = (PFNGLMULTITEXCOORDP1UIPROC)proc((const GLubyte*)"glMultiTexCoordP1ui")) != nullptr) || r;
    r = ((__glMultiTexCoordP1uiv = (PFNGLMULTITEXCOORDP1UIVPROC)proc((const GLubyte*)"glMultiTexCoordP1uiv")) != nullptr) || r;
    r = ((__glMultiTexCoordP2ui = (PFNGLMULTITEXCOORDP2UIPROC)proc((const GLubyte*)"glMultiTexCoordP2ui")) != nullptr) || r;
    r = ((__glMultiTexCoordP2uiv = (PFNGLMULTITEXCOORDP2UIVPROC)proc((const GLubyte*)"glMultiTexCoordP2uiv")) != nullptr) || r;
    r = ((__glMultiTexCoordP3ui = (PFNGLMULTITEXCOORDP3UIPROC)proc((const GLubyte*)"glMultiTexCoordP3ui")) != nullptr) || r;
    r = ((__glMultiTexCoordP3uiv = (PFNGLMULTITEXCOORDP3UIVPROC)proc((const GLubyte*)"glMultiTexCoordP3uiv")) != nullptr) || r;
    r = ((__glMultiTexCoordP4ui = (PFNGLMULTITEXCOORDP4UIPROC)proc((const GLubyte*)"glMultiTexCoordP4ui")) != nullptr) || r;
    r = ((__glMultiTexCoordP4uiv = (PFNGLMULTITEXCOORDP4UIVPROC)proc((const GLubyte*)"glMultiTexCoordP4uiv")) != nullptr) || r;
    r = ((__glNormalP3ui = (PFNGLNORMALP3UIPROC)proc((const GLubyte*)"glNormalP3ui")) != nullptr) || r;
    r = ((__glNormalP3uiv = (PFNGLNORMALP3UIVPROC)proc((const GLubyte*)"glNormalP3uiv")) != nullptr) || r;
    r = ((__glQueryCounter = (PFNGLQUERYCOUNTERPROC)proc((const GLubyte*)"glQueryCounter")) != nullptr) || r;
    r = ((__glSamplerParameterIiv = (PFNGLSAMPLERPARAMETERIIVPROC)proc((const GLubyte*)"glSamplerParameterIiv")) != nullptr) || r;
    r = ((__glSamplerParameterIuiv = (PFNGLSAMPLERPARAMETERIUIVPROC)proc((const GLubyte*)"glSamplerParameterIuiv")) != nullptr) || r;
    r = ((__glSamplerParameterf = (PFNGLSAMPLERPARAMETERFPROC)proc((const GLubyte*)"glSamplerParameterf")) != nullptr) || r;
    r = ((__glSamplerParameterfv = (PFNGLSAMPLERPARAMETERFVPROC)proc((const GLubyte*)"glSamplerParameterfv")) != nullptr) || r;
    r = ((__glSamplerParameteri = (PFNGLSAMPLERPARAMETERIPROC)proc((const GLubyte*)"glSamplerParameteri")) != nullptr) || r;
    r = ((__glSamplerParameteriv = (PFNGLSAMPLERPARAMETERIVPROC)proc((const GLubyte*)"glSamplerParameteriv")) != nullptr) || r;
    r = ((__glSecondaryColorP3ui = (PFNGLSECONDARYCOLORP3UIPROC)proc((const GLubyte*)"glSecondaryColorP3ui")) != nullptr) || r;
    r = ((__glSecondaryColorP3uiv = (PFNGLSECONDARYCOLORP3UIVPROC)proc((const GLubyte*)"glSecondaryColorP3uiv")) != nullptr) || r;
    r = ((__glTexCoordP1ui = (PFNGLTEXCOORDP1UIPROC)proc((const GLubyte*)"glTexCoordP1ui")) != nullptr) || r;
    r = ((__glTexCoordP1uiv = (PFNGLTEXCOORDP1UIVPROC)proc((const GLubyte*)"glTexCoordP1uiv")) != nullptr) || r;
    r = ((__glTexCoordP2ui = (PFNGLTEXCOORDP2UIPROC)proc((const GLubyte*)"glTexCoordP2ui")) != nullptr) || r;
    r = ((__glTexCoordP2uiv = (PFNGLTEXCOORDP2UIVPROC)proc((const GLubyte*)"glTexCoordP2uiv")) != nullptr) || r;
    r = ((__glTexCoordP3ui = (PFNGLTEXCOORDP3UIPROC)proc((const GLubyte*)"glTexCoordP3ui")) != nullptr) || r;
    r = ((__glTexCoordP3uiv = (PFNGLTEXCOORDP3UIVPROC)proc((const GLubyte*)"glTexCoordP3uiv")) != nullptr) || r;
    r = ((__glTexCoordP4ui = (PFNGLTEXCOORDP4UIPROC)proc((const GLubyte*)"glTexCoordP4ui")) != nullptr) || r;
    r = ((__glTexCoordP4uiv = (PFNGLTEXCOORDP4UIVPROC)proc((const GLubyte*)"glTexCoordP4uiv")) != nullptr) || r;
    r = ((__glVertexAttribDivisor = (PFNGLVERTEXATTRIBDIVISORPROC)proc((const GLubyte*)"glVertexAttribDivisor")) != nullptr) || r;
    r = ((__glVertexAttribP1ui = (PFNGLVERTEXATTRIBP1UIPROC)proc((const GLubyte*)"glVertexAttribP1ui")) != nullptr) || r;
    r = ((__glVertexAttribP1uiv = (PFNGLVERTEXATTRIBP1UIVPROC)proc((const GLubyte*)"glVertexAttribP1uiv")) != nullptr) || r;
    r = ((__glVertexAttribP2ui = (PFNGLVERTEXATTRIBP2UIPROC)proc((const GLubyte*)"glVertexAttribP2ui")) != nullptr) || r;
    r = ((__glVertexAttribP2uiv = (PFNGLVERTEXATTRIBP2UIVPROC)proc((const GLubyte*)"glVertexAttribP2uiv")) != nullptr) || r;
    r = ((__glVertexAttribP3ui = (PFNGLVERTEXATTRIBP3UIPROC)proc((const GLubyte*)"glVertexAttribP3ui")) != nullptr) || r;
    r = ((__glVertexAttribP3uiv = (PFNGLVERTEXATTRIBP3UIVPROC)proc((const GLubyte*)"glVertexAttribP3uiv")) != nullptr) || r;
    r = ((__glVertexAttribP4ui = (PFNGLVERTEXATTRIBP4UIPROC)proc((const GLubyte*)"glVertexAttribP4ui")) != nullptr) || r;
    r = ((__glVertexAttribP4uiv = (PFNGLVERTEXATTRIBP4UIVPROC)proc((const GLubyte*)"glVertexAttribP4uiv")) != nullptr) || r;
    r = ((__glVertexP2ui = (PFNGLVERTEXP2UIPROC)proc((const GLubyte*)"glVertexP2ui")) != nullptr) || r;
    r = ((__glVertexP2uiv = (PFNGLVERTEXP2UIVPROC)proc((const GLubyte*)"glVertexP2uiv")) != nullptr) || r;
    r = ((__glVertexP3ui = (PFNGLVERTEXP3UIPROC)proc((const GLubyte*)"glVertexP3ui")) != nullptr) || r;
    r = ((__glVertexP3uiv = (PFNGLVERTEXP3UIVPROC)proc((const GLubyte*)"glVertexP3uiv")) != nullptr) || r;
    r = ((__glVertexP4ui = (PFNGLVERTEXP4UIPROC)proc((const GLubyte*)"glVertexP4ui")) != nullptr) || r;
    r = ((__glVertexP4uiv = (PFNGLVERTEXP4UIVPROC)proc((const GLubyte*)"glVertexP4uiv")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_VERSION_3_3 = false;
/* GL_VERSION_4_0 */
PFNGLBEGINQUERYINDEXEDPROC __glBeginQueryIndexed = nullptr; void APIENTRY glBeginQueryIndexed (GLenum target, GLuint index, GLuint id) { if (__glBeginQueryIndexed != 0) (__glBeginQueryIndexed)(target, index, id);  }
PFNGLBINDTRANSFORMFEEDBACKPROC __glBindTransformFeedback = nullptr; void APIENTRY glBindTransformFeedback (GLenum target, GLuint id) { if (__glBindTransformFeedback != 0) (__glBindTransformFeedback)(target, id);  }
PFNGLBLENDEQUATIONSEPARATEIPROC __glBlendEquationSeparatei = nullptr; void APIENTRY glBlendEquationSeparatei (GLuint buf, GLenum modeRGB, GLenum modeAlpha) { if (__glBlendEquationSeparatei != 0) (__glBlendEquationSeparatei)(buf, modeRGB, modeAlpha);  }
PFNGLBLENDEQUATIONIPROC __glBlendEquationi = nullptr; void APIENTRY glBlendEquationi (GLuint buf, GLenum mode) { if (__glBlendEquationi != 0) (__glBlendEquationi)(buf, mode);  }
PFNGLBLENDFUNCSEPARATEIPROC __glBlendFuncSeparatei = nullptr; void APIENTRY glBlendFuncSeparatei (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) { if (__glBlendFuncSeparatei != 0) (__glBlendFuncSeparatei)(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);  }
PFNGLBLENDFUNCIPROC __glBlendFunci = nullptr; void APIENTRY glBlendFunci (GLuint buf, GLenum src, GLenum dst) { if (__glBlendFunci != 0) (__glBlendFunci)(buf, src, dst);  }
PFNGLDELETETRANSFORMFEEDBACKSPROC __glDeleteTransformFeedbacks = nullptr; void APIENTRY glDeleteTransformFeedbacks (GLsizei n, const GLuint *ids) { if (__glDeleteTransformFeedbacks != 0) (__glDeleteTransformFeedbacks)(n, ids);  }
PFNGLDRAWARRAYSINDIRECTPROC __glDrawArraysIndirect = nullptr; void APIENTRY glDrawArraysIndirect (GLenum mode, const void *indirect) { if (__glDrawArraysIndirect != 0) (__glDrawArraysIndirect)(mode, indirect);  }
PFNGLDRAWELEMENTSINDIRECTPROC __glDrawElementsIndirect = nullptr; void APIENTRY glDrawElementsIndirect (GLenum mode, GLenum type, const void *indirect) { if (__glDrawElementsIndirect != 0) (__glDrawElementsIndirect)(mode, type, indirect);  }
PFNGLDRAWTRANSFORMFEEDBACKPROC __glDrawTransformFeedback = nullptr; void APIENTRY glDrawTransformFeedback (GLenum mode, GLuint id) { if (__glDrawTransformFeedback != 0) (__glDrawTransformFeedback)(mode, id);  }
PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC __glDrawTransformFeedbackStream = nullptr; void APIENTRY glDrawTransformFeedbackStream (GLenum mode, GLuint id, GLuint stream) { if (__glDrawTransformFeedbackStream != 0) (__glDrawTransformFeedbackStream)(mode, id, stream);  }
PFNGLENDQUERYINDEXEDPROC __glEndQueryIndexed = nullptr; void APIENTRY glEndQueryIndexed (GLenum target, GLuint index) { if (__glEndQueryIndexed != 0) (__glEndQueryIndexed)(target, index);  }
PFNGLGENTRANSFORMFEEDBACKSPROC __glGenTransformFeedbacks = nullptr; void APIENTRY glGenTransformFeedbacks (GLsizei n, GLuint *ids) { if (__glGenTransformFeedbacks != 0) (__glGenTransformFeedbacks)(n, ids);  }
PFNGLGETACTIVESUBROUTINENAMEPROC __glGetActiveSubroutineName = nullptr; void APIENTRY glGetActiveSubroutineName (GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name) { if (__glGetActiveSubroutineName != 0) (__glGetActiveSubroutineName)(program, shadertype, index, bufsize, length, name);  }
PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC __glGetActiveSubroutineUniformName = nullptr; void APIENTRY glGetActiveSubroutineUniformName (GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name) { if (__glGetActiveSubroutineUniformName != 0) (__glGetActiveSubroutineUniformName)(program, shadertype, index, bufsize, length, name);  }
PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC __glGetActiveSubroutineUniformiv = nullptr; void APIENTRY glGetActiveSubroutineUniformiv (GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *values) { if (__glGetActiveSubroutineUniformiv != 0) (__glGetActiveSubroutineUniformiv)(program, shadertype, index, pname, values);  }
PFNGLGETPROGRAMSTAGEIVPROC __glGetProgramStageiv = nullptr; void APIENTRY glGetProgramStageiv (GLuint program, GLenum shadertype, GLenum pname, GLint *values) { if (__glGetProgramStageiv != 0) (__glGetProgramStageiv)(program, shadertype, pname, values);  }
PFNGLGETQUERYINDEXEDIVPROC __glGetQueryIndexediv = nullptr; void APIENTRY glGetQueryIndexediv (GLenum target, GLuint index, GLenum pname, GLint *params) { if (__glGetQueryIndexediv != 0) (__glGetQueryIndexediv)(target, index, pname, params);  }
PFNGLGETSUBROUTINEINDEXPROC __glGetSubroutineIndex = nullptr; GLuint APIENTRY glGetSubroutineIndex (GLuint program, GLenum shadertype, const GLchar *name) { if (__glGetSubroutineIndex != 0) return (__glGetSubroutineIndex)(program, shadertype, name); return 0; }
PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC __glGetSubroutineUniformLocation = nullptr; GLint APIENTRY glGetSubroutineUniformLocation (GLuint program, GLenum shadertype, const GLchar *name) { if (__glGetSubroutineUniformLocation != 0) return (__glGetSubroutineUniformLocation)(program, shadertype, name); return 0; }
PFNGLGETUNIFORMSUBROUTINEUIVPROC __glGetUniformSubroutineuiv = nullptr; void APIENTRY glGetUniformSubroutineuiv (GLenum shadertype, GLint location, GLuint *params) { if (__glGetUniformSubroutineuiv != 0) (__glGetUniformSubroutineuiv)(shadertype, location, params);  }
PFNGLGETUNIFORMDVPROC __glGetUniformdv = nullptr; void APIENTRY glGetUniformdv (GLuint program, GLint location, GLdouble *params) { if (__glGetUniformdv != 0) (__glGetUniformdv)(program, location, params);  }
PFNGLISTRANSFORMFEEDBACKPROC __glIsTransformFeedback = nullptr; GLboolean APIENTRY glIsTransformFeedback (GLuint id) { if (__glIsTransformFeedback != 0) return (__glIsTransformFeedback)(id); return 0; }
PFNGLMINSAMPLESHADINGPROC __glMinSampleShading = nullptr; void APIENTRY glMinSampleShading (GLfloat value) { if (__glMinSampleShading != 0) (__glMinSampleShading)(value);  }
PFNGLPATCHPARAMETERFVPROC __glPatchParameterfv = nullptr; void APIENTRY glPatchParameterfv (GLenum pname, const GLfloat *values) { if (__glPatchParameterfv != 0) (__glPatchParameterfv)(pname, values);  }
PFNGLPATCHPARAMETERIPROC __glPatchParameteri = nullptr; void APIENTRY glPatchParameteri (GLenum pname, GLint value) { if (__glPatchParameteri != 0) (__glPatchParameteri)(pname, value);  }
PFNGLPAUSETRANSFORMFEEDBACKPROC __glPauseTransformFeedback = nullptr; void APIENTRY glPauseTransformFeedback () { if (__glPauseTransformFeedback != 0) (__glPauseTransformFeedback)();  }
PFNGLRESUMETRANSFORMFEEDBACKPROC __glResumeTransformFeedback = nullptr; void APIENTRY glResumeTransformFeedback () { if (__glResumeTransformFeedback != 0) (__glResumeTransformFeedback)();  }
PFNGLUNIFORM1DPROC __glUniform1d = nullptr; void APIENTRY glUniform1d (GLint location, GLdouble x) { if (__glUniform1d != 0) (__glUniform1d)(location, x);  }
PFNGLUNIFORM1DVPROC __glUniform1dv = nullptr; void APIENTRY glUniform1dv (GLint location, GLsizei count, const GLdouble *value) { if (__glUniform1dv != 0) (__glUniform1dv)(location, count, value);  }
PFNGLUNIFORM2DPROC __glUniform2d = nullptr; void APIENTRY glUniform2d (GLint location, GLdouble x, GLdouble y) { if (__glUniform2d != 0) (__glUniform2d)(location, x, y);  }
PFNGLUNIFORM2DVPROC __glUniform2dv = nullptr; void APIENTRY glUniform2dv (GLint location, GLsizei count, const GLdouble *value) { if (__glUniform2dv != 0) (__glUniform2dv)(location, count, value);  }
PFNGLUNIFORM3DPROC __glUniform3d = nullptr; void APIENTRY glUniform3d (GLint location, GLdouble x, GLdouble y, GLdouble z) { if (__glUniform3d != 0) (__glUniform3d)(location, x, y, z);  }
PFNGLUNIFORM3DVPROC __glUniform3dv = nullptr; void APIENTRY glUniform3dv (GLint location, GLsizei count, const GLdouble *value) { if (__glUniform3dv != 0) (__glUniform3dv)(location, count, value);  }
PFNGLUNIFORM4DPROC __glUniform4d = nullptr; void APIENTRY glUniform4d (GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { if (__glUniform4d != 0) (__glUniform4d)(location, x, y, z, w);  }
PFNGLUNIFORM4DVPROC __glUniform4dv = nullptr; void APIENTRY glUniform4dv (GLint location, GLsizei count, const GLdouble *value) { if (__glUniform4dv != 0) (__glUniform4dv)(location, count, value);  }
PFNGLUNIFORMMATRIX2DVPROC __glUniformMatrix2dv = nullptr; void APIENTRY glUniformMatrix2dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) { if (__glUniformMatrix2dv != 0) (__glUniformMatrix2dv)(location, count, transpose, value);  }
PFNGLUNIFORMMATRIX2X3DVPROC __glUniformMatrix2x3dv = nullptr; void APIENTRY glUniformMatrix2x3dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) { if (__glUniformMatrix2x3dv != 0) (__glUniformMatrix2x3dv)(location, count, transpose, value);  }
PFNGLUNIFORMMATRIX2X4DVPROC __glUniformMatrix2x4dv = nullptr; void APIENTRY glUniformMatrix2x4dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) { if (__glUniformMatrix2x4dv != 0) (__glUniformMatrix2x4dv)(location, count, transpose, value);  }
PFNGLUNIFORMMATRIX3DVPROC __glUniformMatrix3dv = nullptr; void APIENTRY glUniformMatrix3dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) { if (__glUniformMatrix3dv != 0) (__glUniformMatrix3dv)(location, count, transpose, value);  }
PFNGLUNIFORMMATRIX3X2DVPROC __glUniformMatrix3x2dv = nullptr; void APIENTRY glUniformMatrix3x2dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) { if (__glUniformMatrix3x2dv != 0) (__glUniformMatrix3x2dv)(location, count, transpose, value);  }
PFNGLUNIFORMMATRIX3X4DVPROC __glUniformMatrix3x4dv = nullptr; void APIENTRY glUniformMatrix3x4dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) { if (__glUniformMatrix3x4dv != 0) (__glUniformMatrix3x4dv)(location, count, transpose, value);  }
PFNGLUNIFORMMATRIX4DVPROC __glUniformMatrix4dv = nullptr; void APIENTRY glUniformMatrix4dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) { if (__glUniformMatrix4dv != 0) (__glUniformMatrix4dv)(location, count, transpose, value);  }
PFNGLUNIFORMMATRIX4X2DVPROC __glUniformMatrix4x2dv = nullptr; void APIENTRY glUniformMatrix4x2dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) { if (__glUniformMatrix4x2dv != 0) (__glUniformMatrix4x2dv)(location, count, transpose, value);  }
PFNGLUNIFORMMATRIX4X3DVPROC __glUniformMatrix4x3dv = nullptr; void APIENTRY glUniformMatrix4x3dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) { if (__glUniformMatrix4x3dv != 0) (__glUniformMatrix4x3dv)(location, count, transpose, value);  }
PFNGLUNIFORMSUBROUTINESUIVPROC __glUniformSubroutinesuiv = nullptr; void APIENTRY glUniformSubroutinesuiv (GLenum shadertype, GLsizei count, const GLuint *indices) { if (__glUniformSubroutinesuiv != 0) (__glUniformSubroutinesuiv)(shadertype, count, indices);  }
bool __loadGL_VERSION_4_0(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glBeginQueryIndexed = (PFNGLBEGINQUERYINDEXEDPROC)proc((const GLubyte*)"glBeginQueryIndexed")) != nullptr) || r;
    r = ((__glBindTransformFeedback = (PFNGLBINDTRANSFORMFEEDBACKPROC)proc((const GLubyte*)"glBindTransformFeedback")) != nullptr) || r;
    r = ((__glBlendEquationSeparatei = (PFNGLBLENDEQUATIONSEPARATEIPROC)proc((const GLubyte*)"glBlendEquationSeparatei")) != nullptr) || r;
    r = ((__glBlendEquationi = (PFNGLBLENDEQUATIONIPROC)proc((const GLubyte*)"glBlendEquationi")) != nullptr) || r;
    r = ((__glBlendFuncSeparatei = (PFNGLBLENDFUNCSEPARATEIPROC)proc((const GLubyte*)"glBlendFuncSeparatei")) != nullptr) || r;
    r = ((__glBlendFunci = (PFNGLBLENDFUNCIPROC)proc((const GLubyte*)"glBlendFunci")) != nullptr) || r;
    r = ((__glDeleteTransformFeedbacks = (PFNGLDELETETRANSFORMFEEDBACKSPROC)proc((const GLubyte*)"glDeleteTransformFeedbacks")) != nullptr) || r;
    r = ((__glDrawArraysIndirect = (PFNGLDRAWARRAYSINDIRECTPROC)proc((const GLubyte*)"glDrawArraysIndirect")) != nullptr) || r;
    r = ((__glDrawElementsIndirect = (PFNGLDRAWELEMENTSINDIRECTPROC)proc((const GLubyte*)"glDrawElementsIndirect")) != nullptr) || r;
    r = ((__glDrawTransformFeedback = (PFNGLDRAWTRANSFORMFEEDBACKPROC)proc((const GLubyte*)"glDrawTransformFeedback")) != nullptr) || r;
    r = ((__glDrawTransformFeedbackStream = (PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC)proc((const GLubyte*)"glDrawTransformFeedbackStream")) != nullptr) || r;
    r = ((__glEndQueryIndexed = (PFNGLENDQUERYINDEXEDPROC)proc((const GLubyte*)"glEndQueryIndexed")) != nullptr) || r;
    r = ((__glGenTransformFeedbacks = (PFNGLGENTRANSFORMFEEDBACKSPROC)proc((const GLubyte*)"glGenTransformFeedbacks")) != nullptr) || r;
    r = ((__glGetActiveSubroutineName = (PFNGLGETACTIVESUBROUTINENAMEPROC)proc((const GLubyte*)"glGetActiveSubroutineName")) != nullptr) || r;
    r = ((__glGetActiveSubroutineUniformName = (PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC)proc((const GLubyte*)"glGetActiveSubroutineUniformName")) != nullptr) || r;
    r = ((__glGetActiveSubroutineUniformiv = (PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC)proc((const GLubyte*)"glGetActiveSubroutineUniformiv")) != nullptr) || r;
    r = ((__glGetProgramStageiv = (PFNGLGETPROGRAMSTAGEIVPROC)proc((const GLubyte*)"glGetProgramStageiv")) != nullptr) || r;
    r = ((__glGetQueryIndexediv = (PFNGLGETQUERYINDEXEDIVPROC)proc((const GLubyte*)"glGetQueryIndexediv")) != nullptr) || r;
    r = ((__glGetSubroutineIndex = (PFNGLGETSUBROUTINEINDEXPROC)proc((const GLubyte*)"glGetSubroutineIndex")) != nullptr) || r;
    r = ((__glGetSubroutineUniformLocation = (PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC)proc((const GLubyte*)"glGetSubroutineUniformLocation")) != nullptr) || r;
    r = ((__glGetUniformSubroutineuiv = (PFNGLGETUNIFORMSUBROUTINEUIVPROC)proc((const GLubyte*)"glGetUniformSubroutineuiv")) != nullptr) || r;
    r = ((__glGetUniformdv = (PFNGLGETUNIFORMDVPROC)proc((const GLubyte*)"glGetUniformdv")) != nullptr) || r;
    r = ((__glIsTransformFeedback = (PFNGLISTRANSFORMFEEDBACKPROC)proc((const GLubyte*)"glIsTransformFeedback")) != nullptr) || r;
    r = ((__glMinSampleShading = (PFNGLMINSAMPLESHADINGPROC)proc((const GLubyte*)"glMinSampleShading")) != nullptr) || r;
    r = ((__glPatchParameterfv = (PFNGLPATCHPARAMETERFVPROC)proc((const GLubyte*)"glPatchParameterfv")) != nullptr) || r;
    r = ((__glPatchParameteri = (PFNGLPATCHPARAMETERIPROC)proc((const GLubyte*)"glPatchParameteri")) != nullptr) || r;
    r = ((__glPauseTransformFeedback = (PFNGLPAUSETRANSFORMFEEDBACKPROC)proc((const GLubyte*)"glPauseTransformFeedback")) != nullptr) || r;
    r = ((__glResumeTransformFeedback = (PFNGLRESUMETRANSFORMFEEDBACKPROC)proc((const GLubyte*)"glResumeTransformFeedback")) != nullptr) || r;
    r = ((__glUniform1d = (PFNGLUNIFORM1DPROC)proc((const GLubyte*)"glUniform1d")) != nullptr) || r;
    r = ((__glUniform1dv = (PFNGLUNIFORM1DVPROC)proc((const GLubyte*)"glUniform1dv")) != nullptr) || r;
    r = ((__glUniform2d = (PFNGLUNIFORM2DPROC)proc((const GLubyte*)"glUniform2d")) != nullptr) || r;
    r = ((__glUniform2dv = (PFNGLUNIFORM2DVPROC)proc((const GLubyte*)"glUniform2dv")) != nullptr) || r;
    r = ((__glUniform3d = (PFNGLUNIFORM3DPROC)proc((const GLubyte*)"glUniform3d")) != nullptr) || r;
    r = ((__glUniform3dv = (PFNGLUNIFORM3DVPROC)proc((const GLubyte*)"glUniform3dv")) != nullptr) || r;
    r = ((__glUniform4d = (PFNGLUNIFORM4DPROC)proc((const GLubyte*)"glUniform4d")) != nullptr) || r;
    r = ((__glUniform4dv = (PFNGLUNIFORM4DVPROC)proc((const GLubyte*)"glUniform4dv")) != nullptr) || r;
    r = ((__glUniformMatrix2dv = (PFNGLUNIFORMMATRIX2DVPROC)proc((const GLubyte*)"glUniformMatrix2dv")) != nullptr) || r;
    r = ((__glUniformMatrix2x3dv = (PFNGLUNIFORMMATRIX2X3DVPROC)proc((const GLubyte*)"glUniformMatrix2x3dv")) != nullptr) || r;
    r = ((__glUniformMatrix2x4dv = (PFNGLUNIFORMMATRIX2X4DVPROC)proc((const GLubyte*)"glUniformMatrix2x4dv")) != nullptr) || r;
    r = ((__glUniformMatrix3dv = (PFNGLUNIFORMMATRIX3DVPROC)proc((const GLubyte*)"glUniformMatrix3dv")) != nullptr) || r;
    r = ((__glUniformMatrix3x2dv = (PFNGLUNIFORMMATRIX3X2DVPROC)proc((const GLubyte*)"glUniformMatrix3x2dv")) != nullptr) || r;
    r = ((__glUniformMatrix3x4dv = (PFNGLUNIFORMMATRIX3X4DVPROC)proc((const GLubyte*)"glUniformMatrix3x4dv")) != nullptr) || r;
    r = ((__glUniformMatrix4dv = (PFNGLUNIFORMMATRIX4DVPROC)proc((const GLubyte*)"glUniformMatrix4dv")) != nullptr) || r;
    r = ((__glUniformMatrix4x2dv = (PFNGLUNIFORMMATRIX4X2DVPROC)proc((const GLubyte*)"glUniformMatrix4x2dv")) != nullptr) || r;
    r = ((__glUniformMatrix4x3dv = (PFNGLUNIFORMMATRIX4X3DVPROC)proc((const GLubyte*)"glUniformMatrix4x3dv")) != nullptr) || r;
    r = ((__glUniformSubroutinesuiv = (PFNGLUNIFORMSUBROUTINESUIVPROC)proc((const GLubyte*)"glUniformSubroutinesuiv")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_VERSION_4_0 = false;
/* GL_VERSION_4_1 */
PFNGLACTIVESHADERPROGRAMPROC __glActiveShaderProgram = nullptr; void APIENTRY glActiveShaderProgram (GLuint pipeline, GLuint program) { if (__glActiveShaderProgram != 0) (__glActiveShaderProgram)(pipeline, program);  }
PFNGLBINDPROGRAMPIPELINEPROC __glBindProgramPipeline = nullptr; void APIENTRY glBindProgramPipeline (GLuint pipeline) { if (__glBindProgramPipeline != 0) (__glBindProgramPipeline)(pipeline);  }
PFNGLCLEARDEPTHFPROC __glClearDepthf = nullptr; void APIENTRY glClearDepthf (GLfloat d) { if (__glClearDepthf != 0) (__glClearDepthf)(d);  }
PFNGLCREATESHADERPROGRAMVPROC __glCreateShaderProgramv = nullptr; GLuint APIENTRY glCreateShaderProgramv (GLenum type, GLsizei count, const GLchar *const*strings) { if (__glCreateShaderProgramv != 0) return (__glCreateShaderProgramv)(type, count, strings); return 0; }
PFNGLDELETEPROGRAMPIPELINESPROC __glDeleteProgramPipelines = nullptr; void APIENTRY glDeleteProgramPipelines (GLsizei n, const GLuint *pipelines) { if (__glDeleteProgramPipelines != 0) (__glDeleteProgramPipelines)(n, pipelines);  }
PFNGLDEPTHRANGEARRAYVPROC __glDepthRangeArrayv = nullptr; void APIENTRY glDepthRangeArrayv (GLuint first, GLsizei count, const GLdouble *v) { if (__glDepthRangeArrayv != 0) (__glDepthRangeArrayv)(first, count, v);  }
PFNGLDEPTHRANGEINDEXEDPROC __glDepthRangeIndexed = nullptr; void APIENTRY glDepthRangeIndexed (GLuint index, GLdouble n, GLdouble f) { if (__glDepthRangeIndexed != 0) (__glDepthRangeIndexed)(index, n, f);  }
PFNGLDEPTHRANGEFPROC __glDepthRangef = nullptr; void APIENTRY glDepthRangef (GLfloat n, GLfloat f) { if (__glDepthRangef != 0) (__glDepthRangef)(n, f);  }
PFNGLGENPROGRAMPIPELINESPROC __glGenProgramPipelines = nullptr; void APIENTRY glGenProgramPipelines (GLsizei n, GLuint *pipelines) { if (__glGenProgramPipelines != 0) (__glGenProgramPipelines)(n, pipelines);  }
PFNGLGETDOUBLEI_VPROC __glGetDoublei_v = nullptr; void APIENTRY glGetDoublei_v (GLenum target, GLuint index, GLdouble *data) { if (__glGetDoublei_v != 0) (__glGetDoublei_v)(target, index, data);  }
PFNGLGETFLOATI_VPROC __glGetFloati_v = nullptr; void APIENTRY glGetFloati_v (GLenum target, GLuint index, GLfloat *data) { if (__glGetFloati_v != 0) (__glGetFloati_v)(target, index, data);  }
PFNGLGETPROGRAMBINARYPROC __glGetProgramBinary = nullptr; void APIENTRY glGetProgramBinary (GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary) { if (__glGetProgramBinary != 0) (__glGetProgramBinary)(program, bufSize, length, binaryFormat, binary);  }
PFNGLGETPROGRAMPIPELINEINFOLOGPROC __glGetProgramPipelineInfoLog = nullptr; void APIENTRY glGetProgramPipelineInfoLog (GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog) { if (__glGetProgramPipelineInfoLog != 0) (__glGetProgramPipelineInfoLog)(pipeline, bufSize, length, infoLog);  }
PFNGLGETPROGRAMPIPELINEIVPROC __glGetProgramPipelineiv = nullptr; void APIENTRY glGetProgramPipelineiv (GLuint pipeline, GLenum pname, GLint *params) { if (__glGetProgramPipelineiv != 0) (__glGetProgramPipelineiv)(pipeline, pname, params);  }
PFNGLGETSHADERPRECISIONFORMATPROC __glGetShaderPrecisionFormat = nullptr; void APIENTRY glGetShaderPrecisionFormat (GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision) { if (__glGetShaderPrecisionFormat != 0) (__glGetShaderPrecisionFormat)(shadertype, precisiontype, range, precision);  }
PFNGLGETVERTEXATTRIBLDVPROC __glGetVertexAttribLdv = nullptr; void APIENTRY glGetVertexAttribLdv (GLuint index, GLenum pname, GLdouble *params) { if (__glGetVertexAttribLdv != 0) (__glGetVertexAttribLdv)(index, pname, params);  }
PFNGLISPROGRAMPIPELINEPROC __glIsProgramPipeline = nullptr; GLboolean APIENTRY glIsProgramPipeline (GLuint pipeline) { if (__glIsProgramPipeline != 0) return (__glIsProgramPipeline)(pipeline); return 0; }
PFNGLPROGRAMBINARYPROC __glProgramBinary = nullptr; void APIENTRY glProgramBinary (GLuint program, GLenum binaryFormat, const void *binary, GLsizei length) { if (__glProgramBinary != 0) (__glProgramBinary)(program, binaryFormat, binary, length);  }
PFNGLPROGRAMPARAMETERIPROC __glProgramParameteri = nullptr; void APIENTRY glProgramParameteri (GLuint program, GLenum pname, GLint value) { if (__glProgramParameteri != 0) (__glProgramParameteri)(program, pname, value);  }
PFNGLPROGRAMUNIFORM1DPROC __glProgramUniform1d = nullptr; void APIENTRY glProgramUniform1d (GLuint program, GLint location, GLdouble v0) { if (__glProgramUniform1d != 0) (__glProgramUniform1d)(program, location, v0);  }
PFNGLPROGRAMUNIFORM1DVPROC __glProgramUniform1dv = nullptr; void APIENTRY glProgramUniform1dv (GLuint program, GLint location, GLsizei count, const GLdouble *value) { if (__glProgramUniform1dv != 0) (__glProgramUniform1dv)(program, location, count, value);  }
PFNGLPROGRAMUNIFORM1FPROC __glProgramUniform1f = nullptr; void APIENTRY glProgramUniform1f (GLuint program, GLint location, GLfloat v0) { if (__glProgramUniform1f != 0) (__glProgramUniform1f)(program, location, v0);  }
PFNGLPROGRAMUNIFORM1FVPROC __glProgramUniform1fv = nullptr; void APIENTRY glProgramUniform1fv (GLuint program, GLint location, GLsizei count, const GLfloat *value) { if (__glProgramUniform1fv != 0) (__glProgramUniform1fv)(program, location, count, value);  }
PFNGLPROGRAMUNIFORM1IPROC __glProgramUniform1i = nullptr; void APIENTRY glProgramUniform1i (GLuint program, GLint location, GLint v0) { if (__glProgramUniform1i != 0) (__glProgramUniform1i)(program, location, v0);  }
PFNGLPROGRAMUNIFORM1IVPROC __glProgramUniform1iv = nullptr; void APIENTRY glProgramUniform1iv (GLuint program, GLint location, GLsizei count, const GLint *value) { if (__glProgramUniform1iv != 0) (__glProgramUniform1iv)(program, location, count, value);  }
PFNGLPROGRAMUNIFORM1UIPROC __glProgramUniform1ui = nullptr; void APIENTRY glProgramUniform1ui (GLuint program, GLint location, GLuint v0) { if (__glProgramUniform1ui != 0) (__glProgramUniform1ui)(program, location, v0);  }
PFNGLPROGRAMUNIFORM1UIVPROC __glProgramUniform1uiv = nullptr; void APIENTRY glProgramUniform1uiv (GLuint program, GLint location, GLsizei count, const GLuint *value) { if (__glProgramUniform1uiv != 0) (__glProgramUniform1uiv)(program, location, count, value);  }
PFNGLPROGRAMUNIFORM2DPROC __glProgramUniform2d = nullptr; void APIENTRY glProgramUniform2d (GLuint program, GLint location, GLdouble v0, GLdouble v1) { if (__glProgramUniform2d != 0) (__glProgramUniform2d)(program, location, v0, v1);  }
PFNGLPROGRAMUNIFORM2DVPROC __glProgramUniform2dv = nullptr; void APIENTRY glProgramUniform2dv (GLuint program, GLint location, GLsizei count, const GLdouble *value) { if (__glProgramUniform2dv != 0) (__glProgramUniform2dv)(program, location, count, value);  }
PFNGLPROGRAMUNIFORM2FPROC __glProgramUniform2f = nullptr; void APIENTRY glProgramUniform2f (GLuint program, GLint location, GLfloat v0, GLfloat v1) { if (__glProgramUniform2f != 0) (__glProgramUniform2f)(program, location, v0, v1);  }
PFNGLPROGRAMUNIFORM2FVPROC __glProgramUniform2fv = nullptr; void APIENTRY glProgramUniform2fv (GLuint program, GLint location, GLsizei count, const GLfloat *value) { if (__glProgramUniform2fv != 0) (__glProgramUniform2fv)(program, location, count, value);  }
PFNGLPROGRAMUNIFORM2IPROC __glProgramUniform2i = nullptr; void APIENTRY glProgramUniform2i (GLuint program, GLint location, GLint v0, GLint v1) { if (__glProgramUniform2i != 0) (__glProgramUniform2i)(program, location, v0, v1);  }
PFNGLPROGRAMUNIFORM2IVPROC __glProgramUniform2iv = nullptr; void APIENTRY glProgramUniform2iv (GLuint program, GLint location, GLsizei count, const GLint *value) { if (__glProgramUniform2iv != 0) (__glProgramUniform2iv)(program, location, count, value);  }
PFNGLPROGRAMUNIFORM2UIPROC __glProgramUniform2ui = nullptr; void APIENTRY glProgramUniform2ui (GLuint program, GLint location, GLuint v0, GLuint v1) { if (__glProgramUniform2ui != 0) (__glProgramUniform2ui)(program, location, v0, v1);  }
PFNGLPROGRAMUNIFORM2UIVPROC __glProgramUniform2uiv = nullptr; void APIENTRY glProgramUniform2uiv (GLuint program, GLint location, GLsizei count, const GLuint *value) { if (__glProgramUniform2uiv != 0) (__glProgramUniform2uiv)(program, location, count, value);  }
PFNGLPROGRAMUNIFORM3DPROC __glProgramUniform3d = nullptr; void APIENTRY glProgramUniform3d (GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2) { if (__glProgramUniform3d != 0) (__glProgramUniform3d)(program, location, v0, v1, v2);  }
PFNGLPROGRAMUNIFORM3DVPROC __glProgramUniform3dv = nullptr; void APIENTRY glProgramUniform3dv (GLuint program, GLint location, GLsizei count, const GLdouble *value) { if (__glProgramUniform3dv != 0) (__glProgramUniform3dv)(program, location, count, value);  }
PFNGLPROGRAMUNIFORM3FPROC __glProgramUniform3f = nullptr; void APIENTRY glProgramUniform3f (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2) { if (__glProgramUniform3f != 0) (__glProgramUniform3f)(program, location, v0, v1, v2);  }
PFNGLPROGRAMUNIFORM3FVPROC __glProgramUniform3fv = nullptr; void APIENTRY glProgramUniform3fv (GLuint program, GLint location, GLsizei count, const GLfloat *value) { if (__glProgramUniform3fv != 0) (__glProgramUniform3fv)(program, location, count, value);  }
PFNGLPROGRAMUNIFORM3IPROC __glProgramUniform3i = nullptr; void APIENTRY glProgramUniform3i (GLuint program, GLint location, GLint v0, GLint v1, GLint v2) { if (__glProgramUniform3i != 0) (__glProgramUniform3i)(program, location, v0, v1, v2);  }
PFNGLPROGRAMUNIFORM3IVPROC __glProgramUniform3iv = nullptr; void APIENTRY glProgramUniform3iv (GLuint program, GLint location, GLsizei count, const GLint *value) { if (__glProgramUniform3iv != 0) (__glProgramUniform3iv)(program, location, count, value);  }
PFNGLPROGRAMUNIFORM3UIPROC __glProgramUniform3ui = nullptr; void APIENTRY glProgramUniform3ui (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2) { if (__glProgramUniform3ui != 0) (__glProgramUniform3ui)(program, location, v0, v1, v2);  }
PFNGLPROGRAMUNIFORM3UIVPROC __glProgramUniform3uiv = nullptr; void APIENTRY glProgramUniform3uiv (GLuint program, GLint location, GLsizei count, const GLuint *value) { if (__glProgramUniform3uiv != 0) (__glProgramUniform3uiv)(program, location, count, value);  }
PFNGLPROGRAMUNIFORM4DPROC __glProgramUniform4d = nullptr; void APIENTRY glProgramUniform4d (GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3) { if (__glProgramUniform4d != 0) (__glProgramUniform4d)(program, location, v0, v1, v2, v3);  }
PFNGLPROGRAMUNIFORM4DVPROC __glProgramUniform4dv = nullptr; void APIENTRY glProgramUniform4dv (GLuint program, GLint location, GLsizei count, const GLdouble *value) { if (__glProgramUniform4dv != 0) (__glProgramUniform4dv)(program, location, count, value);  }
PFNGLPROGRAMUNIFORM4FPROC __glProgramUniform4f = nullptr; void APIENTRY glProgramUniform4f (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) { if (__glProgramUniform4f != 0) (__glProgramUniform4f)(program, location, v0, v1, v2, v3);  }
PFNGLPROGRAMUNIFORM4FVPROC __glProgramUniform4fv = nullptr; void APIENTRY glProgramUniform4fv (GLuint program, GLint location, GLsizei count, const GLfloat *value) { if (__glProgramUniform4fv != 0) (__glProgramUniform4fv)(program, location, count, value);  }
PFNGLPROGRAMUNIFORM4IPROC __glProgramUniform4i = nullptr; void APIENTRY glProgramUniform4i (GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3) { if (__glProgramUniform4i != 0) (__glProgramUniform4i)(program, location, v0, v1, v2, v3);  }
PFNGLPROGRAMUNIFORM4IVPROC __glProgramUniform4iv = nullptr; void APIENTRY glProgramUniform4iv (GLuint program, GLint location, GLsizei count, const GLint *value) { if (__glProgramUniform4iv != 0) (__glProgramUniform4iv)(program, location, count, value);  }
PFNGLPROGRAMUNIFORM4UIPROC __glProgramUniform4ui = nullptr; void APIENTRY glProgramUniform4ui (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) { if (__glProgramUniform4ui != 0) (__glProgramUniform4ui)(program, location, v0, v1, v2, v3);  }
PFNGLPROGRAMUNIFORM4UIVPROC __glProgramUniform4uiv = nullptr; void APIENTRY glProgramUniform4uiv (GLuint program, GLint location, GLsizei count, const GLuint *value) { if (__glProgramUniform4uiv != 0) (__glProgramUniform4uiv)(program, location, count, value);  }
PFNGLPROGRAMUNIFORMMATRIX2DVPROC __glProgramUniformMatrix2dv = nullptr; void APIENTRY glProgramUniformMatrix2dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) { if (__glProgramUniformMatrix2dv != 0) (__glProgramUniformMatrix2dv)(program, location, count, transpose, value);  }
PFNGLPROGRAMUNIFORMMATRIX2FVPROC __glProgramUniformMatrix2fv = nullptr; void APIENTRY glProgramUniformMatrix2fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) { if (__glProgramUniformMatrix2fv != 0) (__glProgramUniformMatrix2fv)(program, location, count, transpose, value);  }
PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC __glProgramUniformMatrix2x3dv = nullptr; void APIENTRY glProgramUniformMatrix2x3dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) { if (__glProgramUniformMatrix2x3dv != 0) (__glProgramUniformMatrix2x3dv)(program, location, count, transpose, value);  }
PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC __glProgramUniformMatrix2x3fv = nullptr; void APIENTRY glProgramUniformMatrix2x3fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) { if (__glProgramUniformMatrix2x3fv != 0) (__glProgramUniformMatrix2x3fv)(program, location, count, transpose, value);  }
PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC __glProgramUniformMatrix2x4dv = nullptr; void APIENTRY glProgramUniformMatrix2x4dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) { if (__glProgramUniformMatrix2x4dv != 0) (__glProgramUniformMatrix2x4dv)(program, location, count, transpose, value);  }
PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC __glProgramUniformMatrix2x4fv = nullptr; void APIENTRY glProgramUniformMatrix2x4fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) { if (__glProgramUniformMatrix2x4fv != 0) (__glProgramUniformMatrix2x4fv)(program, location, count, transpose, value);  }
PFNGLPROGRAMUNIFORMMATRIX3DVPROC __glProgramUniformMatrix3dv = nullptr; void APIENTRY glProgramUniformMatrix3dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) { if (__glProgramUniformMatrix3dv != 0) (__glProgramUniformMatrix3dv)(program, location, count, transpose, value);  }
PFNGLPROGRAMUNIFORMMATRIX3FVPROC __glProgramUniformMatrix3fv = nullptr; void APIENTRY glProgramUniformMatrix3fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) { if (__glProgramUniformMatrix3fv != 0) (__glProgramUniformMatrix3fv)(program, location, count, transpose, value);  }
PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC __glProgramUniformMatrix3x2dv = nullptr; void APIENTRY glProgramUniformMatrix3x2dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) { if (__glProgramUniformMatrix3x2dv != 0) (__glProgramUniformMatrix3x2dv)(program, location, count, transpose, value);  }
PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC __glProgramUniformMatrix3x2fv = nullptr; void APIENTRY glProgramUniformMatrix3x2fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) { if (__glProgramUniformMatrix3x2fv != 0) (__glProgramUniformMatrix3x2fv)(program, location, count, transpose, value);  }
PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC __glProgramUniformMatrix3x4dv = nullptr; void APIENTRY glProgramUniformMatrix3x4dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) { if (__glProgramUniformMatrix3x4dv != 0) (__glProgramUniformMatrix3x4dv)(program, location, count, transpose, value);  }
PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC __glProgramUniformMatrix3x4fv = nullptr; void APIENTRY glProgramUniformMatrix3x4fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) { if (__glProgramUniformMatrix3x4fv != 0) (__glProgramUniformMatrix3x4fv)(program, location, count, transpose, value);  }
PFNGLPROGRAMUNIFORMMATRIX4DVPROC __glProgramUniformMatrix4dv = nullptr; void APIENTRY glProgramUniformMatrix4dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) { if (__glProgramUniformMatrix4dv != 0) (__glProgramUniformMatrix4dv)(program, location, count, transpose, value);  }
PFNGLPROGRAMUNIFORMMATRIX4FVPROC __glProgramUniformMatrix4fv = nullptr; void APIENTRY glProgramUniformMatrix4fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) { if (__glProgramUniformMatrix4fv != 0) (__glProgramUniformMatrix4fv)(program, location, count, transpose, value);  }
PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC __glProgramUniformMatrix4x2dv = nullptr; void APIENTRY glProgramUniformMatrix4x2dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) { if (__glProgramUniformMatrix4x2dv != 0) (__glProgramUniformMatrix4x2dv)(program, location, count, transpose, value);  }
PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC __glProgramUniformMatrix4x2fv = nullptr; void APIENTRY glProgramUniformMatrix4x2fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) { if (__glProgramUniformMatrix4x2fv != 0) (__glProgramUniformMatrix4x2fv)(program, location, count, transpose, value);  }
PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC __glProgramUniformMatrix4x3dv = nullptr; void APIENTRY glProgramUniformMatrix4x3dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) { if (__glProgramUniformMatrix4x3dv != 0) (__glProgramUniformMatrix4x3dv)(program, location, count, transpose, value);  }
PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC __glProgramUniformMatrix4x3fv = nullptr; void APIENTRY glProgramUniformMatrix4x3fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) { if (__glProgramUniformMatrix4x3fv != 0) (__glProgramUniformMatrix4x3fv)(program, location, count, transpose, value);  }
PFNGLRELEASESHADERCOMPILERPROC __glReleaseShaderCompiler = nullptr; void APIENTRY glReleaseShaderCompiler () { if (__glReleaseShaderCompiler != 0) (__glReleaseShaderCompiler)();  }
PFNGLSCISSORARRAYVPROC __glScissorArrayv = nullptr; void APIENTRY glScissorArrayv (GLuint first, GLsizei count, const GLint *v) { if (__glScissorArrayv != 0) (__glScissorArrayv)(first, count, v);  }
PFNGLSCISSORINDEXEDPROC __glScissorIndexed = nullptr; void APIENTRY glScissorIndexed (GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height) { if (__glScissorIndexed != 0) (__glScissorIndexed)(index, left, bottom, width, height);  }
PFNGLSCISSORINDEXEDVPROC __glScissorIndexedv = nullptr; void APIENTRY glScissorIndexedv (GLuint index, const GLint *v) { if (__glScissorIndexedv != 0) (__glScissorIndexedv)(index, v);  }
PFNGLSHADERBINARYPROC __glShaderBinary = nullptr; void APIENTRY glShaderBinary (GLsizei count, const GLuint *shaders, GLenum binaryformat, const void *binary, GLsizei length) { if (__glShaderBinary != 0) (__glShaderBinary)(count, shaders, binaryformat, binary, length);  }
PFNGLUSEPROGRAMSTAGESPROC __glUseProgramStages = nullptr; void APIENTRY glUseProgramStages (GLuint pipeline, GLbitfield stages, GLuint program) { if (__glUseProgramStages != 0) (__glUseProgramStages)(pipeline, stages, program);  }
PFNGLVALIDATEPROGRAMPIPELINEPROC __glValidateProgramPipeline = nullptr; void APIENTRY glValidateProgramPipeline (GLuint pipeline) { if (__glValidateProgramPipeline != 0) (__glValidateProgramPipeline)(pipeline);  }
PFNGLVERTEXATTRIBL1DPROC __glVertexAttribL1d = nullptr; void APIENTRY glVertexAttribL1d (GLuint index, GLdouble x) { if (__glVertexAttribL1d != 0) (__glVertexAttribL1d)(index, x);  }
PFNGLVERTEXATTRIBL1DVPROC __glVertexAttribL1dv = nullptr; void APIENTRY glVertexAttribL1dv (GLuint index, const GLdouble *v) { if (__glVertexAttribL1dv != 0) (__glVertexAttribL1dv)(index, v);  }
PFNGLVERTEXATTRIBL2DPROC __glVertexAttribL2d = nullptr; void APIENTRY glVertexAttribL2d (GLuint index, GLdouble x, GLdouble y) { if (__glVertexAttribL2d != 0) (__glVertexAttribL2d)(index, x, y);  }
PFNGLVERTEXATTRIBL2DVPROC __glVertexAttribL2dv = nullptr; void APIENTRY glVertexAttribL2dv (GLuint index, const GLdouble *v) { if (__glVertexAttribL2dv != 0) (__glVertexAttribL2dv)(index, v);  }
PFNGLVERTEXATTRIBL3DPROC __glVertexAttribL3d = nullptr; void APIENTRY glVertexAttribL3d (GLuint index, GLdouble x, GLdouble y, GLdouble z) { if (__glVertexAttribL3d != 0) (__glVertexAttribL3d)(index, x, y, z);  }
PFNGLVERTEXATTRIBL3DVPROC __glVertexAttribL3dv = nullptr; void APIENTRY glVertexAttribL3dv (GLuint index, const GLdouble *v) { if (__glVertexAttribL3dv != 0) (__glVertexAttribL3dv)(index, v);  }
PFNGLVERTEXATTRIBL4DPROC __glVertexAttribL4d = nullptr; void APIENTRY glVertexAttribL4d (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { if (__glVertexAttribL4d != 0) (__glVertexAttribL4d)(index, x, y, z, w);  }
PFNGLVERTEXATTRIBL4DVPROC __glVertexAttribL4dv = nullptr; void APIENTRY glVertexAttribL4dv (GLuint index, const GLdouble *v) { if (__glVertexAttribL4dv != 0) (__glVertexAttribL4dv)(index, v);  }
PFNGLVERTEXATTRIBLPOINTERPROC __glVertexAttribLPointer = nullptr; void APIENTRY glVertexAttribLPointer (GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer) { if (__glVertexAttribLPointer != 0) (__glVertexAttribLPointer)(index, size, type, stride, pointer);  }
PFNGLVIEWPORTARRAYVPROC __glViewportArrayv = nullptr; void APIENTRY glViewportArrayv (GLuint first, GLsizei count, const GLfloat *v) { if (__glViewportArrayv != 0) (__glViewportArrayv)(first, count, v);  }
PFNGLVIEWPORTINDEXEDFPROC __glViewportIndexedf = nullptr; void APIENTRY glViewportIndexedf (GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h) { if (__glViewportIndexedf != 0) (__glViewportIndexedf)(index, x, y, w, h);  }
PFNGLVIEWPORTINDEXEDFVPROC __glViewportIndexedfv = nullptr; void APIENTRY glViewportIndexedfv (GLuint index, const GLfloat *v) { if (__glViewportIndexedfv != 0) (__glViewportIndexedfv)(index, v);  }
bool __loadGL_VERSION_4_1(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glActiveShaderProgram = (PFNGLACTIVESHADERPROGRAMPROC)proc((const GLubyte*)"glActiveShaderProgram")) != nullptr) || r;
    r = ((__glBindProgramPipeline = (PFNGLBINDPROGRAMPIPELINEPROC)proc((const GLubyte*)"glBindProgramPipeline")) != nullptr) || r;
    r = ((__glClearDepthf = (PFNGLCLEARDEPTHFPROC)proc((const GLubyte*)"glClearDepthf")) != nullptr) || r;
    r = ((__glCreateShaderProgramv = (PFNGLCREATESHADERPROGRAMVPROC)proc((const GLubyte*)"glCreateShaderProgramv")) != nullptr) || r;
    r = ((__glDeleteProgramPipelines = (PFNGLDELETEPROGRAMPIPELINESPROC)proc((const GLubyte*)"glDeleteProgramPipelines")) != nullptr) || r;
    r = ((__glDepthRangeArrayv = (PFNGLDEPTHRANGEARRAYVPROC)proc((const GLubyte*)"glDepthRangeArrayv")) != nullptr) || r;
    r = ((__glDepthRangeIndexed = (PFNGLDEPTHRANGEINDEXEDPROC)proc((const GLubyte*)"glDepthRangeIndexed")) != nullptr) || r;
    r = ((__glDepthRangef = (PFNGLDEPTHRANGEFPROC)proc((const GLubyte*)"glDepthRangef")) != nullptr) || r;
    r = ((__glGenProgramPipelines = (PFNGLGENPROGRAMPIPELINESPROC)proc((const GLubyte*)"glGenProgramPipelines")) != nullptr) || r;
    r = ((__glGetDoublei_v = (PFNGLGETDOUBLEI_VPROC)proc((const GLubyte*)"glGetDoublei_v")) != nullptr) || r;
    r = ((__glGetFloati_v = (PFNGLGETFLOATI_VPROC)proc((const GLubyte*)"glGetFloati_v")) != nullptr) || r;
    r = ((__glGetProgramBinary = (PFNGLGETPROGRAMBINARYPROC)proc((const GLubyte*)"glGetProgramBinary")) != nullptr) || r;
    r = ((__glGetProgramPipelineInfoLog = (PFNGLGETPROGRAMPIPELINEINFOLOGPROC)proc((const GLubyte*)"glGetProgramPipelineInfoLog")) != nullptr) || r;
    r = ((__glGetProgramPipelineiv = (PFNGLGETPROGRAMPIPELINEIVPROC)proc((const GLubyte*)"glGetProgramPipelineiv")) != nullptr) || r;
    r = ((__glGetShaderPrecisionFormat = (PFNGLGETSHADERPRECISIONFORMATPROC)proc((const GLubyte*)"glGetShaderPrecisionFormat")) != nullptr) || r;
    r = ((__glGetVertexAttribLdv = (PFNGLGETVERTEXATTRIBLDVPROC)proc((const GLubyte*)"glGetVertexAttribLdv")) != nullptr) || r;
    r = ((__glIsProgramPipeline = (PFNGLISPROGRAMPIPELINEPROC)proc((const GLubyte*)"glIsProgramPipeline")) != nullptr) || r;
    r = ((__glProgramBinary = (PFNGLPROGRAMBINARYPROC)proc((const GLubyte*)"glProgramBinary")) != nullptr) || r;
    r = ((__glProgramParameteri = (PFNGLPROGRAMPARAMETERIPROC)proc((const GLubyte*)"glProgramParameteri")) != nullptr) || r;
    r = ((__glProgramUniform1d = (PFNGLPROGRAMUNIFORM1DPROC)proc((const GLubyte*)"glProgramUniform1d")) != nullptr) || r;
    r = ((__glProgramUniform1dv = (PFNGLPROGRAMUNIFORM1DVPROC)proc((const GLubyte*)"glProgramUniform1dv")) != nullptr) || r;
    r = ((__glProgramUniform1f = (PFNGLPROGRAMUNIFORM1FPROC)proc((const GLubyte*)"glProgramUniform1f")) != nullptr) || r;
    r = ((__glProgramUniform1fv = (PFNGLPROGRAMUNIFORM1FVPROC)proc((const GLubyte*)"glProgramUniform1fv")) != nullptr) || r;
    r = ((__glProgramUniform1i = (PFNGLPROGRAMUNIFORM1IPROC)proc((const GLubyte*)"glProgramUniform1i")) != nullptr) || r;
    r = ((__glProgramUniform1iv = (PFNGLPROGRAMUNIFORM1IVPROC)proc((const GLubyte*)"glProgramUniform1iv")) != nullptr) || r;
    r = ((__glProgramUniform1ui = (PFNGLPROGRAMUNIFORM1UIPROC)proc((const GLubyte*)"glProgramUniform1ui")) != nullptr) || r;
    r = ((__glProgramUniform1uiv = (PFNGLPROGRAMUNIFORM1UIVPROC)proc((const GLubyte*)"glProgramUniform1uiv")) != nullptr) || r;
    r = ((__glProgramUniform2d = (PFNGLPROGRAMUNIFORM2DPROC)proc((const GLubyte*)"glProgramUniform2d")) != nullptr) || r;
    r = ((__glProgramUniform2dv = (PFNGLPROGRAMUNIFORM2DVPROC)proc((const GLubyte*)"glProgramUniform2dv")) != nullptr) || r;
    r = ((__glProgramUniform2f = (PFNGLPROGRAMUNIFORM2FPROC)proc((const GLubyte*)"glProgramUniform2f")) != nullptr) || r;
    r = ((__glProgramUniform2fv = (PFNGLPROGRAMUNIFORM2FVPROC)proc((const GLubyte*)"glProgramUniform2fv")) != nullptr) || r;
    r = ((__glProgramUniform2i = (PFNGLPROGRAMUNIFORM2IPROC)proc((const GLubyte*)"glProgramUniform2i")) != nullptr) || r;
    r = ((__glProgramUniform2iv = (PFNGLPROGRAMUNIFORM2IVPROC)proc((const GLubyte*)"glProgramUniform2iv")) != nullptr) || r;
    r = ((__glProgramUniform2ui = (PFNGLPROGRAMUNIFORM2UIPROC)proc((const GLubyte*)"glProgramUniform2ui")) != nullptr) || r;
    r = ((__glProgramUniform2uiv = (PFNGLPROGRAMUNIFORM2UIVPROC)proc((const GLubyte*)"glProgramUniform2uiv")) != nullptr) || r;
    r = ((__glProgramUniform3d = (PFNGLPROGRAMUNIFORM3DPROC)proc((const GLubyte*)"glProgramUniform3d")) != nullptr) || r;
    r = ((__glProgramUniform3dv = (PFNGLPROGRAMUNIFORM3DVPROC)proc((const GLubyte*)"glProgramUniform3dv")) != nullptr) || r;
    r = ((__glProgramUniform3f = (PFNGLPROGRAMUNIFORM3FPROC)proc((const GLubyte*)"glProgramUniform3f")) != nullptr) || r;
    r = ((__glProgramUniform3fv = (PFNGLPROGRAMUNIFORM3FVPROC)proc((const GLubyte*)"glProgramUniform3fv")) != nullptr) || r;
    r = ((__glProgramUniform3i = (PFNGLPROGRAMUNIFORM3IPROC)proc((const GLubyte*)"glProgramUniform3i")) != nullptr) || r;
    r = ((__glProgramUniform3iv = (PFNGLPROGRAMUNIFORM3IVPROC)proc((const GLubyte*)"glProgramUniform3iv")) != nullptr) || r;
    r = ((__glProgramUniform3ui = (PFNGLPROGRAMUNIFORM3UIPROC)proc((const GLubyte*)"glProgramUniform3ui")) != nullptr) || r;
    r = ((__glProgramUniform3uiv = (PFNGLPROGRAMUNIFORM3UIVPROC)proc((const GLubyte*)"glProgramUniform3uiv")) != nullptr) || r;
    r = ((__glProgramUniform4d = (PFNGLPROGRAMUNIFORM4DPROC)proc((const GLubyte*)"glProgramUniform4d")) != nullptr) || r;
    r = ((__glProgramUniform4dv = (PFNGLPROGRAMUNIFORM4DVPROC)proc((const GLubyte*)"glProgramUniform4dv")) != nullptr) || r;
    r = ((__glProgramUniform4f = (PFNGLPROGRAMUNIFORM4FPROC)proc((const GLubyte*)"glProgramUniform4f")) != nullptr) || r;
    r = ((__glProgramUniform4fv = (PFNGLPROGRAMUNIFORM4FVPROC)proc((const GLubyte*)"glProgramUniform4fv")) != nullptr) || r;
    r = ((__glProgramUniform4i = (PFNGLPROGRAMUNIFORM4IPROC)proc((const GLubyte*)"glProgramUniform4i")) != nullptr) || r;
    r = ((__glProgramUniform4iv = (PFNGLPROGRAMUNIFORM4IVPROC)proc((const GLubyte*)"glProgramUniform4iv")) != nullptr) || r;
    r = ((__glProgramUniform4ui = (PFNGLPROGRAMUNIFORM4UIPROC)proc((const GLubyte*)"glProgramUniform4ui")) != nullptr) || r;
    r = ((__glProgramUniform4uiv = (PFNGLPROGRAMUNIFORM4UIVPROC)proc((const GLubyte*)"glProgramUniform4uiv")) != nullptr) || r;
    r = ((__glProgramUniformMatrix2dv = (PFNGLPROGRAMUNIFORMMATRIX2DVPROC)proc((const GLubyte*)"glProgramUniformMatrix2dv")) != nullptr) || r;
    r = ((__glProgramUniformMatrix2fv = (PFNGLPROGRAMUNIFORMMATRIX2FVPROC)proc((const GLubyte*)"glProgramUniformMatrix2fv")) != nullptr) || r;
    r = ((__glProgramUniformMatrix2x3dv = (PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC)proc((const GLubyte*)"glProgramUniformMatrix2x3dv")) != nullptr) || r;
    r = ((__glProgramUniformMatrix2x3fv = (PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC)proc((const GLubyte*)"glProgramUniformMatrix2x3fv")) != nullptr) || r;
    r = ((__glProgramUniformMatrix2x4dv = (PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC)proc((const GLubyte*)"glProgramUniformMatrix2x4dv")) != nullptr) || r;
    r = ((__glProgramUniformMatrix2x4fv = (PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC)proc((const GLubyte*)"glProgramUniformMatrix2x4fv")) != nullptr) || r;
    r = ((__glProgramUniformMatrix3dv = (PFNGLPROGRAMUNIFORMMATRIX3DVPROC)proc((const GLubyte*)"glProgramUniformMatrix3dv")) != nullptr) || r;
    r = ((__glProgramUniformMatrix3fv = (PFNGLPROGRAMUNIFORMMATRIX3FVPROC)proc((const GLubyte*)"glProgramUniformMatrix3fv")) != nullptr) || r;
    r = ((__glProgramUniformMatrix3x2dv = (PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC)proc((const GLubyte*)"glProgramUniformMatrix3x2dv")) != nullptr) || r;
    r = ((__glProgramUniformMatrix3x2fv = (PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC)proc((const GLubyte*)"glProgramUniformMatrix3x2fv")) != nullptr) || r;
    r = ((__glProgramUniformMatrix3x4dv = (PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC)proc((const GLubyte*)"glProgramUniformMatrix3x4dv")) != nullptr) || r;
    r = ((__glProgramUniformMatrix3x4fv = (PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC)proc((const GLubyte*)"glProgramUniformMatrix3x4fv")) != nullptr) || r;
    r = ((__glProgramUniformMatrix4dv = (PFNGLPROGRAMUNIFORMMATRIX4DVPROC)proc((const GLubyte*)"glProgramUniformMatrix4dv")) != nullptr) || r;
    r = ((__glProgramUniformMatrix4fv = (PFNGLPROGRAMUNIFORMMATRIX4FVPROC)proc((const GLubyte*)"glProgramUniformMatrix4fv")) != nullptr) || r;
    r = ((__glProgramUniformMatrix4x2dv = (PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC)proc((const GLubyte*)"glProgramUniformMatrix4x2dv")) != nullptr) || r;
    r = ((__glProgramUniformMatrix4x2fv = (PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC)proc((const GLubyte*)"glProgramUniformMatrix4x2fv")) != nullptr) || r;
    r = ((__glProgramUniformMatrix4x3dv = (PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC)proc((const GLubyte*)"glProgramUniformMatrix4x3dv")) != nullptr) || r;
    r = ((__glProgramUniformMatrix4x3fv = (PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC)proc((const GLubyte*)"glProgramUniformMatrix4x3fv")) != nullptr) || r;
    r = ((__glReleaseShaderCompiler = (PFNGLRELEASESHADERCOMPILERPROC)proc((const GLubyte*)"glReleaseShaderCompiler")) != nullptr) || r;
    r = ((__glScissorArrayv = (PFNGLSCISSORARRAYVPROC)proc((const GLubyte*)"glScissorArrayv")) != nullptr) || r;
    r = ((__glScissorIndexed = (PFNGLSCISSORINDEXEDPROC)proc((const GLubyte*)"glScissorIndexed")) != nullptr) || r;
    r = ((__glScissorIndexedv = (PFNGLSCISSORINDEXEDVPROC)proc((const GLubyte*)"glScissorIndexedv")) != nullptr) || r;
    r = ((__glShaderBinary = (PFNGLSHADERBINARYPROC)proc((const GLubyte*)"glShaderBinary")) != nullptr) || r;
    r = ((__glUseProgramStages = (PFNGLUSEPROGRAMSTAGESPROC)proc((const GLubyte*)"glUseProgramStages")) != nullptr) || r;
    r = ((__glValidateProgramPipeline = (PFNGLVALIDATEPROGRAMPIPELINEPROC)proc((const GLubyte*)"glValidateProgramPipeline")) != nullptr) || r;
    r = ((__glVertexAttribL1d = (PFNGLVERTEXATTRIBL1DPROC)proc((const GLubyte*)"glVertexAttribL1d")) != nullptr) || r;
    r = ((__glVertexAttribL1dv = (PFNGLVERTEXATTRIBL1DVPROC)proc((const GLubyte*)"glVertexAttribL1dv")) != nullptr) || r;
    r = ((__glVertexAttribL2d = (PFNGLVERTEXATTRIBL2DPROC)proc((const GLubyte*)"glVertexAttribL2d")) != nullptr) || r;
    r = ((__glVertexAttribL2dv = (PFNGLVERTEXATTRIBL2DVPROC)proc((const GLubyte*)"glVertexAttribL2dv")) != nullptr) || r;
    r = ((__glVertexAttribL3d = (PFNGLVERTEXATTRIBL3DPROC)proc((const GLubyte*)"glVertexAttribL3d")) != nullptr) || r;
    r = ((__glVertexAttribL3dv = (PFNGLVERTEXATTRIBL3DVPROC)proc((const GLubyte*)"glVertexAttribL3dv")) != nullptr) || r;
    r = ((__glVertexAttribL4d = (PFNGLVERTEXATTRIBL4DPROC)proc((const GLubyte*)"glVertexAttribL4d")) != nullptr) || r;
    r = ((__glVertexAttribL4dv = (PFNGLVERTEXATTRIBL4DVPROC)proc((const GLubyte*)"glVertexAttribL4dv")) != nullptr) || r;
    r = ((__glVertexAttribLPointer = (PFNGLVERTEXATTRIBLPOINTERPROC)proc((const GLubyte*)"glVertexAttribLPointer")) != nullptr) || r;
    r = ((__glViewportArrayv = (PFNGLVIEWPORTARRAYVPROC)proc((const GLubyte*)"glViewportArrayv")) != nullptr) || r;
    r = ((__glViewportIndexedf = (PFNGLVIEWPORTINDEXEDFPROC)proc((const GLubyte*)"glViewportIndexedf")) != nullptr) || r;
    r = ((__glViewportIndexedfv = (PFNGLVIEWPORTINDEXEDFVPROC)proc((const GLubyte*)"glViewportIndexedfv")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_VERSION_4_1 = false;
/* GL_VERSION_4_2 */
PFNGLBINDIMAGETEXTUREPROC __glBindImageTexture = nullptr; void APIENTRY glBindImageTexture (GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format) { if (__glBindImageTexture != 0) (__glBindImageTexture)(unit, texture, level, layered, layer, access, format);  }
PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC __glDrawArraysInstancedBaseInstance = nullptr; void APIENTRY glDrawArraysInstancedBaseInstance (GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance) { if (__glDrawArraysInstancedBaseInstance != 0) (__glDrawArraysInstancedBaseInstance)(mode, first, count, instancecount, baseinstance);  }
PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC __glDrawElementsInstancedBaseInstance = nullptr; void APIENTRY glDrawElementsInstancedBaseInstance (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLuint baseinstance) { if (__glDrawElementsInstancedBaseInstance != 0) (__glDrawElementsInstancedBaseInstance)(mode, count, type, indices, instancecount, baseinstance);  }
PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC __glDrawElementsInstancedBaseVertexBaseInstance = nullptr; void APIENTRY glDrawElementsInstancedBaseVertexBaseInstance (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance) { if (__glDrawElementsInstancedBaseVertexBaseInstance != 0) (__glDrawElementsInstancedBaseVertexBaseInstance)(mode, count, type, indices, instancecount, basevertex, baseinstance);  }
PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC __glDrawTransformFeedbackInstanced = nullptr; void APIENTRY glDrawTransformFeedbackInstanced (GLenum mode, GLuint id, GLsizei instancecount) { if (__glDrawTransformFeedbackInstanced != 0) (__glDrawTransformFeedbackInstanced)(mode, id, instancecount);  }
PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC __glDrawTransformFeedbackStreamInstanced = nullptr; void APIENTRY glDrawTransformFeedbackStreamInstanced (GLenum mode, GLuint id, GLuint stream, GLsizei instancecount) { if (__glDrawTransformFeedbackStreamInstanced != 0) (__glDrawTransformFeedbackStreamInstanced)(mode, id, stream, instancecount);  }
PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC __glGetActiveAtomicCounterBufferiv = nullptr; void APIENTRY glGetActiveAtomicCounterBufferiv (GLuint program, GLuint bufferIndex, GLenum pname, GLint *params) { if (__glGetActiveAtomicCounterBufferiv != 0) (__glGetActiveAtomicCounterBufferiv)(program, bufferIndex, pname, params);  }
PFNGLGETINTERNALFORMATIVPROC __glGetInternalformativ = nullptr; void APIENTRY glGetInternalformativ (GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params) { if (__glGetInternalformativ != 0) (__glGetInternalformativ)(target, internalformat, pname, bufSize, params);  }
PFNGLMEMORYBARRIERPROC __glMemoryBarrier = nullptr; void APIENTRY glMemoryBarrier (GLbitfield barriers) { if (__glMemoryBarrier != 0) (__glMemoryBarrier)(barriers);  }
PFNGLTEXSTORAGE1DPROC __glTexStorage1D = nullptr; void APIENTRY glTexStorage1D (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width) { if (__glTexStorage1D != 0) (__glTexStorage1D)(target, levels, internalformat, width);  }
PFNGLTEXSTORAGE2DPROC __glTexStorage2D = nullptr; void APIENTRY glTexStorage2D (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height) { if (__glTexStorage2D != 0) (__glTexStorage2D)(target, levels, internalformat, width, height);  }
PFNGLTEXSTORAGE3DPROC __glTexStorage3D = nullptr; void APIENTRY glTexStorage3D (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth) { if (__glTexStorage3D != 0) (__glTexStorage3D)(target, levels, internalformat, width, height, depth);  }
bool __loadGL_VERSION_4_2(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glBindImageTexture = (PFNGLBINDIMAGETEXTUREPROC)proc((const GLubyte*)"glBindImageTexture")) != nullptr) || r;
    r = ((__glDrawArraysInstancedBaseInstance = (PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC)proc((const GLubyte*)"glDrawArraysInstancedBaseInstance")) != nullptr) || r;
    r = ((__glDrawElementsInstancedBaseInstance = (PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC)proc((const GLubyte*)"glDrawElementsInstancedBaseInstance")) != nullptr) || r;
    r = ((__glDrawElementsInstancedBaseVertexBaseInstance = (PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC)proc((const GLubyte*)"glDrawElementsInstancedBaseVertexBaseInstance")) != nullptr) || r;
    r = ((__glDrawTransformFeedbackInstanced = (PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC)proc((const GLubyte*)"glDrawTransformFeedbackInstanced")) != nullptr) || r;
    r = ((__glDrawTransformFeedbackStreamInstanced = (PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC)proc((const GLubyte*)"glDrawTransformFeedbackStreamInstanced")) != nullptr) || r;
    r = ((__glGetActiveAtomicCounterBufferiv = (PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC)proc((const GLubyte*)"glGetActiveAtomicCounterBufferiv")) != nullptr) || r;
    r = ((__glGetInternalformativ = (PFNGLGETINTERNALFORMATIVPROC)proc((const GLubyte*)"glGetInternalformativ")) != nullptr) || r;
    r = ((__glMemoryBarrier = (PFNGLMEMORYBARRIERPROC)proc((const GLubyte*)"glMemoryBarrier")) != nullptr) || r;
    r = ((__glTexStorage1D = (PFNGLTEXSTORAGE1DPROC)proc((const GLubyte*)"glTexStorage1D")) != nullptr) || r;
    r = ((__glTexStorage2D = (PFNGLTEXSTORAGE2DPROC)proc((const GLubyte*)"glTexStorage2D")) != nullptr) || r;
    r = ((__glTexStorage3D = (PFNGLTEXSTORAGE3DPROC)proc((const GLubyte*)"glTexStorage3D")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_VERSION_4_2 = false;
/* GL_VERSION_4_3 */
PFNGLBINDVERTEXBUFFERPROC __glBindVertexBuffer = nullptr; void APIENTRY glBindVertexBuffer (GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride) { if (__glBindVertexBuffer != 0) (__glBindVertexBuffer)(bindingindex, buffer, offset, stride);  }
PFNGLCLEARBUFFERDATAPROC __glClearBufferData = nullptr; void APIENTRY glClearBufferData (GLenum target, GLenum internalformat, GLenum format, GLenum type, const void *data) { if (__glClearBufferData != 0) (__glClearBufferData)(target, internalformat, format, type, data);  }
PFNGLCLEARBUFFERSUBDATAPROC __glClearBufferSubData = nullptr; void APIENTRY glClearBufferSubData (GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data) { if (__glClearBufferSubData != 0) (__glClearBufferSubData)(target, internalformat, offset, size, format, type, data);  }
PFNGLCOPYIMAGESUBDATAPROC __glCopyImageSubData = nullptr; void APIENTRY glCopyImageSubData (GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth) { if (__glCopyImageSubData != 0) (__glCopyImageSubData)(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);  }
PFNGLDEBUGMESSAGECALLBACKPROC __glDebugMessageCallback = nullptr; void APIENTRY glDebugMessageCallback (GLDEBUGPROC callback, const void *userParam) { if (__glDebugMessageCallback != 0) (__glDebugMessageCallback)(callback, userParam);  }
PFNGLDEBUGMESSAGECONTROLPROC __glDebugMessageControl = nullptr; void APIENTRY glDebugMessageControl (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled) { if (__glDebugMessageControl != 0) (__glDebugMessageControl)(source, type, severity, count, ids, enabled);  }
PFNGLDEBUGMESSAGEINSERTPROC __glDebugMessageInsert = nullptr; void APIENTRY glDebugMessageInsert (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf) { if (__glDebugMessageInsert != 0) (__glDebugMessageInsert)(source, type, id, severity, length, buf);  }
PFNGLDISPATCHCOMPUTEPROC __glDispatchCompute = nullptr; void APIENTRY glDispatchCompute (GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z) { if (__glDispatchCompute != 0) (__glDispatchCompute)(num_groups_x, num_groups_y, num_groups_z);  }
PFNGLDISPATCHCOMPUTEINDIRECTPROC __glDispatchComputeIndirect = nullptr; void APIENTRY glDispatchComputeIndirect (GLintptr indirect) { if (__glDispatchComputeIndirect != 0) (__glDispatchComputeIndirect)(indirect);  }
PFNGLFRAMEBUFFERPARAMETERIPROC __glFramebufferParameteri = nullptr; void APIENTRY glFramebufferParameteri (GLenum target, GLenum pname, GLint param) { if (__glFramebufferParameteri != 0) (__glFramebufferParameteri)(target, pname, param);  }
PFNGLGETDEBUGMESSAGELOGPROC __glGetDebugMessageLog = nullptr; GLuint APIENTRY glGetDebugMessageLog (GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog) { if (__glGetDebugMessageLog != 0) return (__glGetDebugMessageLog)(count, bufSize, sources, types, ids, severities, lengths, messageLog); return 0; }
PFNGLGETFRAMEBUFFERPARAMETERIVPROC __glGetFramebufferParameteriv = nullptr; void APIENTRY glGetFramebufferParameteriv (GLenum target, GLenum pname, GLint *params) { if (__glGetFramebufferParameteriv != 0) (__glGetFramebufferParameteriv)(target, pname, params);  }
PFNGLGETINTERNALFORMATI64VPROC __glGetInternalformati64v = nullptr; void APIENTRY glGetInternalformati64v (GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64 *params) { if (__glGetInternalformati64v != 0) (__glGetInternalformati64v)(target, internalformat, pname, bufSize, params);  }
PFNGLGETOBJECTLABELPROC __glGetObjectLabel = nullptr; void APIENTRY glGetObjectLabel (GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label) { if (__glGetObjectLabel != 0) (__glGetObjectLabel)(identifier, name, bufSize, length, label);  }
PFNGLGETOBJECTPTRLABELPROC __glGetObjectPtrLabel = nullptr; void APIENTRY glGetObjectPtrLabel (const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label) { if (__glGetObjectPtrLabel != 0) (__glGetObjectPtrLabel)(ptr, bufSize, length, label);  }
PFNGLGETPROGRAMINTERFACEIVPROC __glGetProgramInterfaceiv = nullptr; void APIENTRY glGetProgramInterfaceiv (GLuint program, GLenum programInterface, GLenum pname, GLint *params) { if (__glGetProgramInterfaceiv != 0) (__glGetProgramInterfaceiv)(program, programInterface, pname, params);  }
PFNGLGETPROGRAMRESOURCEINDEXPROC __glGetProgramResourceIndex = nullptr; GLuint APIENTRY glGetProgramResourceIndex (GLuint program, GLenum programInterface, const GLchar *name) { if (__glGetProgramResourceIndex != 0) return (__glGetProgramResourceIndex)(program, programInterface, name); return 0; }
PFNGLGETPROGRAMRESOURCELOCATIONPROC __glGetProgramResourceLocation = nullptr; GLint APIENTRY glGetProgramResourceLocation (GLuint program, GLenum programInterface, const GLchar *name) { if (__glGetProgramResourceLocation != 0) return (__glGetProgramResourceLocation)(program, programInterface, name); return 0; }
PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC __glGetProgramResourceLocationIndex = nullptr; GLint APIENTRY glGetProgramResourceLocationIndex (GLuint program, GLenum programInterface, const GLchar *name) { if (__glGetProgramResourceLocationIndex != 0) return (__glGetProgramResourceLocationIndex)(program, programInterface, name); return 0; }
PFNGLGETPROGRAMRESOURCENAMEPROC __glGetProgramResourceName = nullptr; void APIENTRY glGetProgramResourceName (GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name) { if (__glGetProgramResourceName != 0) (__glGetProgramResourceName)(program, programInterface, index, bufSize, length, name);  }
PFNGLGETPROGRAMRESOURCEIVPROC __glGetProgramResourceiv = nullptr; void APIENTRY glGetProgramResourceiv (GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLint *params) { if (__glGetProgramResourceiv != 0) (__glGetProgramResourceiv)(program, programInterface, index, propCount, props, bufSize, length, params);  }
PFNGLINVALIDATEBUFFERDATAPROC __glInvalidateBufferData = nullptr; void APIENTRY glInvalidateBufferData (GLuint buffer) { if (__glInvalidateBufferData != 0) (__glInvalidateBufferData)(buffer);  }
PFNGLINVALIDATEBUFFERSUBDATAPROC __glInvalidateBufferSubData = nullptr; void APIENTRY glInvalidateBufferSubData (GLuint buffer, GLintptr offset, GLsizeiptr length) { if (__glInvalidateBufferSubData != 0) (__glInvalidateBufferSubData)(buffer, offset, length);  }
PFNGLINVALIDATEFRAMEBUFFERPROC __glInvalidateFramebuffer = nullptr; void APIENTRY glInvalidateFramebuffer (GLenum target, GLsizei numAttachments, const GLenum *attachments) { if (__glInvalidateFramebuffer != 0) (__glInvalidateFramebuffer)(target, numAttachments, attachments);  }
PFNGLINVALIDATESUBFRAMEBUFFERPROC __glInvalidateSubFramebuffer = nullptr; void APIENTRY glInvalidateSubFramebuffer (GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height) { if (__glInvalidateSubFramebuffer != 0) (__glInvalidateSubFramebuffer)(target, numAttachments, attachments, x, y, width, height);  }
PFNGLINVALIDATETEXIMAGEPROC __glInvalidateTexImage = nullptr; void APIENTRY glInvalidateTexImage (GLuint texture, GLint level) { if (__glInvalidateTexImage != 0) (__glInvalidateTexImage)(texture, level);  }
PFNGLINVALIDATETEXSUBIMAGEPROC __glInvalidateTexSubImage = nullptr; void APIENTRY glInvalidateTexSubImage (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth) { if (__glInvalidateTexSubImage != 0) (__glInvalidateTexSubImage)(texture, level, xoffset, yoffset, zoffset, width, height, depth);  }
PFNGLMULTIDRAWARRAYSINDIRECTPROC __glMultiDrawArraysIndirect = nullptr; void APIENTRY glMultiDrawArraysIndirect (GLenum mode, const void *indirect, GLsizei drawcount, GLsizei stride) { if (__glMultiDrawArraysIndirect != 0) (__glMultiDrawArraysIndirect)(mode, indirect, drawcount, stride);  }
PFNGLMULTIDRAWELEMENTSINDIRECTPROC __glMultiDrawElementsIndirect = nullptr; void APIENTRY glMultiDrawElementsIndirect (GLenum mode, GLenum type, const void *indirect, GLsizei drawcount, GLsizei stride) { if (__glMultiDrawElementsIndirect != 0) (__glMultiDrawElementsIndirect)(mode, type, indirect, drawcount, stride);  }
PFNGLOBJECTLABELPROC __glObjectLabel = nullptr; void APIENTRY glObjectLabel (GLenum identifier, GLuint name, GLsizei length, const GLchar *label) { if (__glObjectLabel != 0) (__glObjectLabel)(identifier, name, length, label);  }
PFNGLOBJECTPTRLABELPROC __glObjectPtrLabel = nullptr; void APIENTRY glObjectPtrLabel (const void *ptr, GLsizei length, const GLchar *label) { if (__glObjectPtrLabel != 0) (__glObjectPtrLabel)(ptr, length, label);  }
PFNGLPOPDEBUGGROUPPROC __glPopDebugGroup = nullptr; void APIENTRY glPopDebugGroup () { if (__glPopDebugGroup != 0) (__glPopDebugGroup)();  }
PFNGLPUSHDEBUGGROUPPROC __glPushDebugGroup = nullptr; void APIENTRY glPushDebugGroup (GLenum source, GLuint id, GLsizei length, const GLchar *message) { if (__glPushDebugGroup != 0) (__glPushDebugGroup)(source, id, length, message);  }
PFNGLSHADERSTORAGEBLOCKBINDINGPROC __glShaderStorageBlockBinding = nullptr; void APIENTRY glShaderStorageBlockBinding (GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding) { if (__glShaderStorageBlockBinding != 0) (__glShaderStorageBlockBinding)(program, storageBlockIndex, storageBlockBinding);  }
PFNGLTEXBUFFERRANGEPROC __glTexBufferRange = nullptr; void APIENTRY glTexBufferRange (GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size) { if (__glTexBufferRange != 0) (__glTexBufferRange)(target, internalformat, buffer, offset, size);  }
PFNGLTEXSTORAGE2DMULTISAMPLEPROC __glTexStorage2DMultisample = nullptr; void APIENTRY glTexStorage2DMultisample (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) { if (__glTexStorage2DMultisample != 0) (__glTexStorage2DMultisample)(target, samples, internalformat, width, height, fixedsamplelocations);  }
PFNGLTEXSTORAGE3DMULTISAMPLEPROC __glTexStorage3DMultisample = nullptr; void APIENTRY glTexStorage3DMultisample (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) { if (__glTexStorage3DMultisample != 0) (__glTexStorage3DMultisample)(target, samples, internalformat, width, height, depth, fixedsamplelocations);  }
PFNGLTEXTUREVIEWPROC __glTextureView = nullptr; void APIENTRY glTextureView (GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers) { if (__glTextureView != 0) (__glTextureView)(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);  }
PFNGLVERTEXATTRIBBINDINGPROC __glVertexAttribBinding = nullptr; void APIENTRY glVertexAttribBinding (GLuint attribindex, GLuint bindingindex) { if (__glVertexAttribBinding != 0) (__glVertexAttribBinding)(attribindex, bindingindex);  }
PFNGLVERTEXATTRIBFORMATPROC __glVertexAttribFormat = nullptr; void APIENTRY glVertexAttribFormat (GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset) { if (__glVertexAttribFormat != 0) (__glVertexAttribFormat)(attribindex, size, type, normalized, relativeoffset);  }
PFNGLVERTEXATTRIBIFORMATPROC __glVertexAttribIFormat = nullptr; void APIENTRY glVertexAttribIFormat (GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) { if (__glVertexAttribIFormat != 0) (__glVertexAttribIFormat)(attribindex, size, type, relativeoffset);  }
PFNGLVERTEXATTRIBLFORMATPROC __glVertexAttribLFormat = nullptr; void APIENTRY glVertexAttribLFormat (GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) { if (__glVertexAttribLFormat != 0) (__glVertexAttribLFormat)(attribindex, size, type, relativeoffset);  }
PFNGLVERTEXBINDINGDIVISORPROC __glVertexBindingDivisor = nullptr; void APIENTRY glVertexBindingDivisor (GLuint bindingindex, GLuint divisor) { if (__glVertexBindingDivisor != 0) (__glVertexBindingDivisor)(bindingindex, divisor);  }
bool __loadGL_VERSION_4_3(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glBindVertexBuffer = (PFNGLBINDVERTEXBUFFERPROC)proc((const GLubyte*)"glBindVertexBuffer")) != nullptr) || r;
    r = ((__glClearBufferData = (PFNGLCLEARBUFFERDATAPROC)proc((const GLubyte*)"glClearBufferData")) != nullptr) || r;
    r = ((__glClearBufferSubData = (PFNGLCLEARBUFFERSUBDATAPROC)proc((const GLubyte*)"glClearBufferSubData")) != nullptr) || r;
    r = ((__glCopyImageSubData = (PFNGLCOPYIMAGESUBDATAPROC)proc((const GLubyte*)"glCopyImageSubData")) != nullptr) || r;
    r = ((__glDebugMessageCallback = (PFNGLDEBUGMESSAGECALLBACKPROC)proc((const GLubyte*)"glDebugMessageCallback")) != nullptr) || r;
    r = ((__glDebugMessageControl = (PFNGLDEBUGMESSAGECONTROLPROC)proc((const GLubyte*)"glDebugMessageControl")) != nullptr) || r;
    r = ((__glDebugMessageInsert = (PFNGLDEBUGMESSAGEINSERTPROC)proc((const GLubyte*)"glDebugMessageInsert")) != nullptr) || r;
    r = ((__glDispatchCompute = (PFNGLDISPATCHCOMPUTEPROC)proc((const GLubyte*)"glDispatchCompute")) != nullptr) || r;
    r = ((__glDispatchComputeIndirect = (PFNGLDISPATCHCOMPUTEINDIRECTPROC)proc((const GLubyte*)"glDispatchComputeIndirect")) != nullptr) || r;
    r = ((__glFramebufferParameteri = (PFNGLFRAMEBUFFERPARAMETERIPROC)proc((const GLubyte*)"glFramebufferParameteri")) != nullptr) || r;
    r = ((__glGetDebugMessageLog = (PFNGLGETDEBUGMESSAGELOGPROC)proc((const GLubyte*)"glGetDebugMessageLog")) != nullptr) || r;
    r = ((__glGetFramebufferParameteriv = (PFNGLGETFRAMEBUFFERPARAMETERIVPROC)proc((const GLubyte*)"glGetFramebufferParameteriv")) != nullptr) || r;
    r = ((__glGetInternalformati64v = (PFNGLGETINTERNALFORMATI64VPROC)proc((const GLubyte*)"glGetInternalformati64v")) != nullptr) || r;
    r = ((__glGetObjectLabel = (PFNGLGETOBJECTLABELPROC)proc((const GLubyte*)"glGetObjectLabel")) != nullptr) || r;
    r = ((__glGetObjectPtrLabel = (PFNGLGETOBJECTPTRLABELPROC)proc((const GLubyte*)"glGetObjectPtrLabel")) != nullptr) || r;
    r = ((__glGetProgramInterfaceiv = (PFNGLGETPROGRAMINTERFACEIVPROC)proc((const GLubyte*)"glGetProgramInterfaceiv")) != nullptr) || r;
    r = ((__glGetProgramResourceIndex = (PFNGLGETPROGRAMRESOURCEINDEXPROC)proc((const GLubyte*)"glGetProgramResourceIndex")) != nullptr) || r;
    r = ((__glGetProgramResourceLocation = (PFNGLGETPROGRAMRESOURCELOCATIONPROC)proc((const GLubyte*)"glGetProgramResourceLocation")) != nullptr) || r;
    r = ((__glGetProgramResourceLocationIndex = (PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC)proc((const GLubyte*)"glGetProgramResourceLocationIndex")) != nullptr) || r;
    r = ((__glGetProgramResourceName = (PFNGLGETPROGRAMRESOURCENAMEPROC)proc((const GLubyte*)"glGetProgramResourceName")) != nullptr) || r;
    r = ((__glGetProgramResourceiv = (PFNGLGETPROGRAMRESOURCEIVPROC)proc((const GLubyte*)"glGetProgramResourceiv")) != nullptr) || r;
    r = ((__glInvalidateBufferData = (PFNGLINVALIDATEBUFFERDATAPROC)proc((const GLubyte*)"glInvalidateBufferData")) != nullptr) || r;
    r = ((__glInvalidateBufferSubData = (PFNGLINVALIDATEBUFFERSUBDATAPROC)proc((const GLubyte*)"glInvalidateBufferSubData")) != nullptr) || r;
    r = ((__glInvalidateFramebuffer = (PFNGLINVALIDATEFRAMEBUFFERPROC)proc((const GLubyte*)"glInvalidateFramebuffer")) != nullptr) || r;
    r = ((__glInvalidateSubFramebuffer = (PFNGLINVALIDATESUBFRAMEBUFFERPROC)proc((const GLubyte*)"glInvalidateSubFramebuffer")) != nullptr) || r;
    r = ((__glInvalidateTexImage = (PFNGLINVALIDATETEXIMAGEPROC)proc((const GLubyte*)"glInvalidateTexImage")) != nullptr) || r;
    r = ((__glInvalidateTexSubImage = (PFNGLINVALIDATETEXSUBIMAGEPROC)proc((const GLubyte*)"glInvalidateTexSubImage")) != nullptr) || r;
    r = ((__glMultiDrawArraysIndirect = (PFNGLMULTIDRAWARRAYSINDIRECTPROC)proc((const GLubyte*)"glMultiDrawArraysIndirect")) != nullptr) || r;
    r = ((__glMultiDrawElementsIndirect = (PFNGLMULTIDRAWELEMENTSINDIRECTPROC)proc((const GLubyte*)"glMultiDrawElementsIndirect")) != nullptr) || r;
    r = ((__glObjectLabel = (PFNGLOBJECTLABELPROC)proc((const GLubyte*)"glObjectLabel")) != nullptr) || r;
    r = ((__glObjectPtrLabel = (PFNGLOBJECTPTRLABELPROC)proc((const GLubyte*)"glObjectPtrLabel")) != nullptr) || r;
    r = ((__glPopDebugGroup = (PFNGLPOPDEBUGGROUPPROC)proc((const GLubyte*)"glPopDebugGroup")) != nullptr) || r;
    r = ((__glPushDebugGroup = (PFNGLPUSHDEBUGGROUPPROC)proc((const GLubyte*)"glPushDebugGroup")) != nullptr) || r;
    r = ((__glShaderStorageBlockBinding = (PFNGLSHADERSTORAGEBLOCKBINDINGPROC)proc((const GLubyte*)"glShaderStorageBlockBinding")) != nullptr) || r;
    r = ((__glTexBufferRange = (PFNGLTEXBUFFERRANGEPROC)proc((const GLubyte*)"glTexBufferRange")) != nullptr) || r;
    r = ((__glTexStorage2DMultisample = (PFNGLTEXSTORAGE2DMULTISAMPLEPROC)proc((const GLubyte*)"glTexStorage2DMultisample")) != nullptr) || r;
    r = ((__glTexStorage3DMultisample = (PFNGLTEXSTORAGE3DMULTISAMPLEPROC)proc((const GLubyte*)"glTexStorage3DMultisample")) != nullptr) || r;
    r = ((__glTextureView = (PFNGLTEXTUREVIEWPROC)proc((const GLubyte*)"glTextureView")) != nullptr) || r;
    r = ((__glVertexAttribBinding = (PFNGLVERTEXATTRIBBINDINGPROC)proc((const GLubyte*)"glVertexAttribBinding")) != nullptr) || r;
    r = ((__glVertexAttribFormat = (PFNGLVERTEXATTRIBFORMATPROC)proc((const GLubyte*)"glVertexAttribFormat")) != nullptr) || r;
    r = ((__glVertexAttribIFormat = (PFNGLVERTEXATTRIBIFORMATPROC)proc((const GLubyte*)"glVertexAttribIFormat")) != nullptr) || r;
    r = ((__glVertexAttribLFormat = (PFNGLVERTEXATTRIBLFORMATPROC)proc((const GLubyte*)"glVertexAttribLFormat")) != nullptr) || r;
    r = ((__glVertexBindingDivisor = (PFNGLVERTEXBINDINGDIVISORPROC)proc((const GLubyte*)"glVertexBindingDivisor")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_VERSION_4_3 = false;
/* GL_VERSION_4_4 */
PFNGLBINDBUFFERSBASEPROC __glBindBuffersBase = nullptr; void APIENTRY glBindBuffersBase (GLenum target, GLuint first, GLsizei count, const GLuint *buffers) { if (__glBindBuffersBase != 0) (__glBindBuffersBase)(target, first, count, buffers);  }
PFNGLBINDBUFFERSRANGEPROC __glBindBuffersRange = nullptr; void APIENTRY glBindBuffersRange (GLenum target, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizeiptr *sizes) { if (__glBindBuffersRange != 0) (__glBindBuffersRange)(target, first, count, buffers, offsets, sizes);  }
PFNGLBINDIMAGETEXTURESPROC __glBindImageTextures = nullptr; void APIENTRY glBindImageTextures (GLuint first, GLsizei count, const GLuint *textures) { if (__glBindImageTextures != 0) (__glBindImageTextures)(first, count, textures);  }
PFNGLBINDSAMPLERSPROC __glBindSamplers = nullptr; void APIENTRY glBindSamplers (GLuint first, GLsizei count, const GLuint *samplers) { if (__glBindSamplers != 0) (__glBindSamplers)(first, count, samplers);  }
PFNGLBINDTEXTURESPROC __glBindTextures = nullptr; void APIENTRY glBindTextures (GLuint first, GLsizei count, const GLuint *textures) { if (__glBindTextures != 0) (__glBindTextures)(first, count, textures);  }
PFNGLBINDVERTEXBUFFERSPROC __glBindVertexBuffers = nullptr; void APIENTRY glBindVertexBuffers (GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides) { if (__glBindVertexBuffers != 0) (__glBindVertexBuffers)(first, count, buffers, offsets, strides);  }
PFNGLBUFFERSTORAGEPROC __glBufferStorage = nullptr; void APIENTRY glBufferStorage (GLenum target, GLsizeiptr size, const void *data, GLbitfield flags) { if (__glBufferStorage != 0) (__glBufferStorage)(target, size, data, flags);  }
PFNGLCLEARTEXIMAGEPROC __glClearTexImage = nullptr; void APIENTRY glClearTexImage (GLuint texture, GLint level, GLenum format, GLenum type, const void *data) { if (__glClearTexImage != 0) (__glClearTexImage)(texture, level, format, type, data);  }
PFNGLCLEARTEXSUBIMAGEPROC __glClearTexSubImage = nullptr; void APIENTRY glClearTexSubImage (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *data) { if (__glClearTexSubImage != 0) (__glClearTexSubImage)(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data);  }
bool __loadGL_VERSION_4_4(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glBindBuffersBase = (PFNGLBINDBUFFERSBASEPROC)proc((const GLubyte*)"glBindBuffersBase")) != nullptr) || r;
    r = ((__glBindBuffersRange = (PFNGLBINDBUFFERSRANGEPROC)proc((const GLubyte*)"glBindBuffersRange")) != nullptr) || r;
    r = ((__glBindImageTextures = (PFNGLBINDIMAGETEXTURESPROC)proc((const GLubyte*)"glBindImageTextures")) != nullptr) || r;
    r = ((__glBindSamplers = (PFNGLBINDSAMPLERSPROC)proc((const GLubyte*)"glBindSamplers")) != nullptr) || r;
    r = ((__glBindTextures = (PFNGLBINDTEXTURESPROC)proc((const GLubyte*)"glBindTextures")) != nullptr) || r;
    r = ((__glBindVertexBuffers = (PFNGLBINDVERTEXBUFFERSPROC)proc((const GLubyte*)"glBindVertexBuffers")) != nullptr) || r;
    r = ((__glBufferStorage = (PFNGLBUFFERSTORAGEPROC)proc((const GLubyte*)"glBufferStorage")) != nullptr) || r;
    r = ((__glClearTexImage = (PFNGLCLEARTEXIMAGEPROC)proc((const GLubyte*)"glClearTexImage")) != nullptr) || r;
    r = ((__glClearTexSubImage = (PFNGLCLEARTEXSUBIMAGEPROC)proc((const GLubyte*)"glClearTexSubImage")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_VERSION_4_4 = false;
/* GL_VERSION_4_5 */
PFNGLBINDTEXTUREUNITPROC __glBindTextureUnit = nullptr; void APIENTRY glBindTextureUnit (GLuint unit, GLuint texture) { if (__glBindTextureUnit != 0) (__glBindTextureUnit)(unit, texture);  }
PFNGLBLITNAMEDFRAMEBUFFERPROC __glBlitNamedFramebuffer = nullptr; void APIENTRY glBlitNamedFramebuffer (GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) { if (__glBlitNamedFramebuffer != 0) (__glBlitNamedFramebuffer)(readFramebuffer, drawFramebuffer, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);  }
PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC __glCheckNamedFramebufferStatus = nullptr; GLenum APIENTRY glCheckNamedFramebufferStatus (GLuint framebuffer, GLenum target) { if (__glCheckNamedFramebufferStatus != 0) return (__glCheckNamedFramebufferStatus)(framebuffer, target); return 0; }
PFNGLCLEARNAMEDBUFFERDATAPROC __glClearNamedBufferData = nullptr; void APIENTRY glClearNamedBufferData (GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data) { if (__glClearNamedBufferData != 0) (__glClearNamedBufferData)(buffer, internalformat, format, type, data);  }
PFNGLCLEARNAMEDBUFFERSUBDATAPROC __glClearNamedBufferSubData = nullptr; void APIENTRY glClearNamedBufferSubData (GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data) { if (__glClearNamedBufferSubData != 0) (__glClearNamedBufferSubData)(buffer, internalformat, offset, size, format, type, data);  }
PFNGLCLEARNAMEDFRAMEBUFFERFIPROC __glClearNamedFramebufferfi = nullptr; void APIENTRY glClearNamedFramebufferfi (GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil) { if (__glClearNamedFramebufferfi != 0) (__glClearNamedFramebufferfi)(framebuffer, buffer, drawbuffer, depth, stencil);  }
PFNGLCLEARNAMEDFRAMEBUFFERFVPROC __glClearNamedFramebufferfv = nullptr; void APIENTRY glClearNamedFramebufferfv (GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat *value) { if (__glClearNamedFramebufferfv != 0) (__glClearNamedFramebufferfv)(framebuffer, buffer, drawbuffer, value);  }
PFNGLCLEARNAMEDFRAMEBUFFERIVPROC __glClearNamedFramebufferiv = nullptr; void APIENTRY glClearNamedFramebufferiv (GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint *value) { if (__glClearNamedFramebufferiv != 0) (__glClearNamedFramebufferiv)(framebuffer, buffer, drawbuffer, value);  }
PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC __glClearNamedFramebufferuiv = nullptr; void APIENTRY glClearNamedFramebufferuiv (GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint *value) { if (__glClearNamedFramebufferuiv != 0) (__glClearNamedFramebufferuiv)(framebuffer, buffer, drawbuffer, value);  }
PFNGLCLIPCONTROLPROC __glClipControl = nullptr; void APIENTRY glClipControl (GLenum origin, GLenum depth) { if (__glClipControl != 0) (__glClipControl)(origin, depth);  }
PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC __glCompressedTextureSubImage1D = nullptr; void APIENTRY glCompressedTextureSubImage1D (GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data) { if (__glCompressedTextureSubImage1D != 0) (__glCompressedTextureSubImage1D)(texture, level, xoffset, width, format, imageSize, data);  }
PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC __glCompressedTextureSubImage2D = nullptr; void APIENTRY glCompressedTextureSubImage2D (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data) { if (__glCompressedTextureSubImage2D != 0) (__glCompressedTextureSubImage2D)(texture, level, xoffset, yoffset, width, height, format, imageSize, data);  }
PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC __glCompressedTextureSubImage3D = nullptr; void APIENTRY glCompressedTextureSubImage3D (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data) { if (__glCompressedTextureSubImage3D != 0) (__glCompressedTextureSubImage3D)(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);  }
PFNGLCOPYNAMEDBUFFERSUBDATAPROC __glCopyNamedBufferSubData = nullptr; void APIENTRY glCopyNamedBufferSubData (GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) { if (__glCopyNamedBufferSubData != 0) (__glCopyNamedBufferSubData)(readBuffer, writeBuffer, readOffset, writeOffset, size);  }
PFNGLCOPYTEXTURESUBIMAGE1DPROC __glCopyTextureSubImage1D = nullptr; void APIENTRY glCopyTextureSubImage1D (GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) { if (__glCopyTextureSubImage1D != 0) (__glCopyTextureSubImage1D)(texture, level, xoffset, x, y, width);  }
PFNGLCOPYTEXTURESUBIMAGE2DPROC __glCopyTextureSubImage2D = nullptr; void APIENTRY glCopyTextureSubImage2D (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) { if (__glCopyTextureSubImage2D != 0) (__glCopyTextureSubImage2D)(texture, level, xoffset, yoffset, x, y, width, height);  }
PFNGLCOPYTEXTURESUBIMAGE3DPROC __glCopyTextureSubImage3D = nullptr; void APIENTRY glCopyTextureSubImage3D (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) { if (__glCopyTextureSubImage3D != 0) (__glCopyTextureSubImage3D)(texture, level, xoffset, yoffset, zoffset, x, y, width, height);  }
PFNGLCREATEBUFFERSPROC __glCreateBuffers = nullptr; void APIENTRY glCreateBuffers (GLsizei n, GLuint *buffers) { if (__glCreateBuffers != 0) (__glCreateBuffers)(n, buffers);  }
PFNGLCREATEFRAMEBUFFERSPROC __glCreateFramebuffers = nullptr; void APIENTRY glCreateFramebuffers (GLsizei n, GLuint *framebuffers) { if (__glCreateFramebuffers != 0) (__glCreateFramebuffers)(n, framebuffers);  }
PFNGLCREATEPROGRAMPIPELINESPROC __glCreateProgramPipelines = nullptr; void APIENTRY glCreateProgramPipelines (GLsizei n, GLuint *pipelines) { if (__glCreateProgramPipelines != 0) (__glCreateProgramPipelines)(n, pipelines);  }
PFNGLCREATEQUERIESPROC __glCreateQueries = nullptr; void APIENTRY glCreateQueries (GLenum target, GLsizei n, GLuint *ids) { if (__glCreateQueries != 0) (__glCreateQueries)(target, n, ids);  }
PFNGLCREATERENDERBUFFERSPROC __glCreateRenderbuffers = nullptr; void APIENTRY glCreateRenderbuffers (GLsizei n, GLuint *renderbuffers) { if (__glCreateRenderbuffers != 0) (__glCreateRenderbuffers)(n, renderbuffers);  }
PFNGLCREATESAMPLERSPROC __glCreateSamplers = nullptr; void APIENTRY glCreateSamplers (GLsizei n, GLuint *samplers) { if (__glCreateSamplers != 0) (__glCreateSamplers)(n, samplers);  }
PFNGLCREATETEXTURESPROC __glCreateTextures = nullptr; void APIENTRY glCreateTextures (GLenum target, GLsizei n, GLuint *textures) { if (__glCreateTextures != 0) (__glCreateTextures)(target, n, textures);  }
PFNGLCREATETRANSFORMFEEDBACKSPROC __glCreateTransformFeedbacks = nullptr; void APIENTRY glCreateTransformFeedbacks (GLsizei n, GLuint *ids) { if (__glCreateTransformFeedbacks != 0) (__glCreateTransformFeedbacks)(n, ids);  }
PFNGLCREATEVERTEXARRAYSPROC __glCreateVertexArrays = nullptr; void APIENTRY glCreateVertexArrays (GLsizei n, GLuint *arrays) { if (__glCreateVertexArrays != 0) (__glCreateVertexArrays)(n, arrays);  }
PFNGLDISABLEVERTEXARRAYATTRIBPROC __glDisableVertexArrayAttrib = nullptr; void APIENTRY glDisableVertexArrayAttrib (GLuint vaobj, GLuint index) { if (__glDisableVertexArrayAttrib != 0) (__glDisableVertexArrayAttrib)(vaobj, index);  }
PFNGLENABLEVERTEXARRAYATTRIBPROC __glEnableVertexArrayAttrib = nullptr; void APIENTRY glEnableVertexArrayAttrib (GLuint vaobj, GLuint index) { if (__glEnableVertexArrayAttrib != 0) (__glEnableVertexArrayAttrib)(vaobj, index);  }
PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC __glFlushMappedNamedBufferRange = nullptr; void APIENTRY glFlushMappedNamedBufferRange (GLuint buffer, GLintptr offset, GLsizeiptr length) { if (__glFlushMappedNamedBufferRange != 0) (__glFlushMappedNamedBufferRange)(buffer, offset, length);  }
PFNGLGENERATETEXTUREMIPMAPPROC __glGenerateTextureMipmap = nullptr; void APIENTRY glGenerateTextureMipmap (GLuint texture) { if (__glGenerateTextureMipmap != 0) (__glGenerateTextureMipmap)(texture);  }
PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC __glGetCompressedTextureImage = nullptr; void APIENTRY glGetCompressedTextureImage (GLuint texture, GLint level, GLsizei bufSize, void *pixels) { if (__glGetCompressedTextureImage != 0) (__glGetCompressedTextureImage)(texture, level, bufSize, pixels);  }
PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC __glGetCompressedTextureSubImage = nullptr; void APIENTRY glGetCompressedTextureSubImage (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void *pixels) { if (__glGetCompressedTextureSubImage != 0) (__glGetCompressedTextureSubImage)(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels);  }
PFNGLGETGRAPHICSRESETSTATUSPROC __glGetGraphicsResetStatus = nullptr; GLenum APIENTRY glGetGraphicsResetStatus () { if (__glGetGraphicsResetStatus != 0) return (__glGetGraphicsResetStatus)(); return 0; }
PFNGLGETNAMEDBUFFERPARAMETERI64VPROC __glGetNamedBufferParameteri64v = nullptr; void APIENTRY glGetNamedBufferParameteri64v (GLuint buffer, GLenum pname, GLint64 *params) { if (__glGetNamedBufferParameteri64v != 0) (__glGetNamedBufferParameteri64v)(buffer, pname, params);  }
PFNGLGETNAMEDBUFFERPARAMETERIVPROC __glGetNamedBufferParameteriv = nullptr; void APIENTRY glGetNamedBufferParameteriv (GLuint buffer, GLenum pname, GLint *params) { if (__glGetNamedBufferParameteriv != 0) (__glGetNamedBufferParameteriv)(buffer, pname, params);  }
PFNGLGETNAMEDBUFFERPOINTERVPROC __glGetNamedBufferPointerv = nullptr; void APIENTRY glGetNamedBufferPointerv (GLuint buffer, GLenum pname, void **params) { if (__glGetNamedBufferPointerv != 0) (__glGetNamedBufferPointerv)(buffer, pname, params);  }
PFNGLGETNAMEDBUFFERSUBDATAPROC __glGetNamedBufferSubData = nullptr; void APIENTRY glGetNamedBufferSubData (GLuint buffer, GLintptr offset, GLsizeiptr size, void *data) { if (__glGetNamedBufferSubData != 0) (__glGetNamedBufferSubData)(buffer, offset, size, data);  }
PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC __glGetNamedFramebufferAttachmentParameteriv = nullptr; void APIENTRY glGetNamedFramebufferAttachmentParameteriv (GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params) { if (__glGetNamedFramebufferAttachmentParameteriv != 0) (__glGetNamedFramebufferAttachmentParameteriv)(framebuffer, attachment, pname, params);  }
PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC __glGetNamedFramebufferParameteriv = nullptr; void APIENTRY glGetNamedFramebufferParameteriv (GLuint framebuffer, GLenum pname, GLint *param) { if (__glGetNamedFramebufferParameteriv != 0) (__glGetNamedFramebufferParameteriv)(framebuffer, pname, param);  }
PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC __glGetNamedRenderbufferParameteriv = nullptr; void APIENTRY glGetNamedRenderbufferParameteriv (GLuint renderbuffer, GLenum pname, GLint *params) { if (__glGetNamedRenderbufferParameteriv != 0) (__glGetNamedRenderbufferParameteriv)(renderbuffer, pname, params);  }
PFNGLGETQUERYBUFFEROBJECTI64VPROC __glGetQueryBufferObjecti64v = nullptr; void APIENTRY glGetQueryBufferObjecti64v (GLuint id, GLuint buffer, GLenum pname, GLintptr offset) { if (__glGetQueryBufferObjecti64v != 0) (__glGetQueryBufferObjecti64v)(id, buffer, pname, offset);  }
PFNGLGETQUERYBUFFEROBJECTIVPROC __glGetQueryBufferObjectiv = nullptr; void APIENTRY glGetQueryBufferObjectiv (GLuint id, GLuint buffer, GLenum pname, GLintptr offset) { if (__glGetQueryBufferObjectiv != 0) (__glGetQueryBufferObjectiv)(id, buffer, pname, offset);  }
PFNGLGETQUERYBUFFEROBJECTUI64VPROC __glGetQueryBufferObjectui64v = nullptr; void APIENTRY glGetQueryBufferObjectui64v (GLuint id, GLuint buffer, GLenum pname, GLintptr offset) { if (__glGetQueryBufferObjectui64v != 0) (__glGetQueryBufferObjectui64v)(id, buffer, pname, offset);  }
PFNGLGETQUERYBUFFEROBJECTUIVPROC __glGetQueryBufferObjectuiv = nullptr; void APIENTRY glGetQueryBufferObjectuiv (GLuint id, GLuint buffer, GLenum pname, GLintptr offset) { if (__glGetQueryBufferObjectuiv != 0) (__glGetQueryBufferObjectuiv)(id, buffer, pname, offset);  }
PFNGLGETTEXTUREIMAGEPROC __glGetTextureImage = nullptr; void APIENTRY glGetTextureImage (GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels) { if (__glGetTextureImage != 0) (__glGetTextureImage)(texture, level, format, type, bufSize, pixels);  }
PFNGLGETTEXTURELEVELPARAMETERFVPROC __glGetTextureLevelParameterfv = nullptr; void APIENTRY glGetTextureLevelParameterfv (GLuint texture, GLint level, GLenum pname, GLfloat *params) { if (__glGetTextureLevelParameterfv != 0) (__glGetTextureLevelParameterfv)(texture, level, pname, params);  }
PFNGLGETTEXTURELEVELPARAMETERIVPROC __glGetTextureLevelParameteriv = nullptr; void APIENTRY glGetTextureLevelParameteriv (GLuint texture, GLint level, GLenum pname, GLint *params) { if (__glGetTextureLevelParameteriv != 0) (__glGetTextureLevelParameteriv)(texture, level, pname, params);  }
PFNGLGETTEXTUREPARAMETERIIVPROC __glGetTextureParameterIiv = nullptr; void APIENTRY glGetTextureParameterIiv (GLuint texture, GLenum pname, GLint *params) { if (__glGetTextureParameterIiv != 0) (__glGetTextureParameterIiv)(texture, pname, params);  }
PFNGLGETTEXTUREPARAMETERIUIVPROC __glGetTextureParameterIuiv = nullptr; void APIENTRY glGetTextureParameterIuiv (GLuint texture, GLenum pname, GLuint *params) { if (__glGetTextureParameterIuiv != 0) (__glGetTextureParameterIuiv)(texture, pname, params);  }
PFNGLGETTEXTUREPARAMETERFVPROC __glGetTextureParameterfv = nullptr; void APIENTRY glGetTextureParameterfv (GLuint texture, GLenum pname, GLfloat *params) { if (__glGetTextureParameterfv != 0) (__glGetTextureParameterfv)(texture, pname, params);  }
PFNGLGETTEXTUREPARAMETERIVPROC __glGetTextureParameteriv = nullptr; void APIENTRY glGetTextureParameteriv (GLuint texture, GLenum pname, GLint *params) { if (__glGetTextureParameteriv != 0) (__glGetTextureParameteriv)(texture, pname, params);  }
PFNGLGETTEXTURESUBIMAGEPROC __glGetTextureSubImage = nullptr; void APIENTRY glGetTextureSubImage (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void *pixels) { if (__glGetTextureSubImage != 0) (__glGetTextureSubImage)(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels);  }
PFNGLGETTRANSFORMFEEDBACKI64_VPROC __glGetTransformFeedbacki64_v = nullptr; void APIENTRY glGetTransformFeedbacki64_v (GLuint xfb, GLenum pname, GLuint index, GLint64 *param) { if (__glGetTransformFeedbacki64_v != 0) (__glGetTransformFeedbacki64_v)(xfb, pname, index, param);  }
PFNGLGETTRANSFORMFEEDBACKI_VPROC __glGetTransformFeedbacki_v = nullptr; void APIENTRY glGetTransformFeedbacki_v (GLuint xfb, GLenum pname, GLuint index, GLint *param) { if (__glGetTransformFeedbacki_v != 0) (__glGetTransformFeedbacki_v)(xfb, pname, index, param);  }
PFNGLGETTRANSFORMFEEDBACKIVPROC __glGetTransformFeedbackiv = nullptr; void APIENTRY glGetTransformFeedbackiv (GLuint xfb, GLenum pname, GLint *param) { if (__glGetTransformFeedbackiv != 0) (__glGetTransformFeedbackiv)(xfb, pname, param);  }
PFNGLGETVERTEXARRAYINDEXED64IVPROC __glGetVertexArrayIndexed64iv = nullptr; void APIENTRY glGetVertexArrayIndexed64iv (GLuint vaobj, GLuint index, GLenum pname, GLint64 *param) { if (__glGetVertexArrayIndexed64iv != 0) (__glGetVertexArrayIndexed64iv)(vaobj, index, pname, param);  }
PFNGLGETVERTEXARRAYINDEXEDIVPROC __glGetVertexArrayIndexediv = nullptr; void APIENTRY glGetVertexArrayIndexediv (GLuint vaobj, GLuint index, GLenum pname, GLint *param) { if (__glGetVertexArrayIndexediv != 0) (__glGetVertexArrayIndexediv)(vaobj, index, pname, param);  }
PFNGLGETVERTEXARRAYIVPROC __glGetVertexArrayiv = nullptr; void APIENTRY glGetVertexArrayiv (GLuint vaobj, GLenum pname, GLint *param) { if (__glGetVertexArrayiv != 0) (__glGetVertexArrayiv)(vaobj, pname, param);  }
PFNGLGETNCOLORTABLEPROC __glGetnColorTable = nullptr; void APIENTRY glGetnColorTable (GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *table) { if (__glGetnColorTable != 0) (__glGetnColorTable)(target, format, type, bufSize, table);  }
PFNGLGETNCOMPRESSEDTEXIMAGEPROC __glGetnCompressedTexImage = nullptr; void APIENTRY glGetnCompressedTexImage (GLenum target, GLint lod, GLsizei bufSize, void *pixels) { if (__glGetnCompressedTexImage != 0) (__glGetnCompressedTexImage)(target, lod, bufSize, pixels);  }
PFNGLGETNCONVOLUTIONFILTERPROC __glGetnConvolutionFilter = nullptr; void APIENTRY glGetnConvolutionFilter (GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *image) { if (__glGetnConvolutionFilter != 0) (__glGetnConvolutionFilter)(target, format, type, bufSize, image);  }
PFNGLGETNHISTOGRAMPROC __glGetnHistogram = nullptr; void APIENTRY glGetnHistogram (GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values) { if (__glGetnHistogram != 0) (__glGetnHistogram)(target, reset, format, type, bufSize, values);  }
PFNGLGETNMAPDVPROC __glGetnMapdv = nullptr; void APIENTRY glGetnMapdv (GLenum target, GLenum query, GLsizei bufSize, GLdouble *v) { if (__glGetnMapdv != 0) (__glGetnMapdv)(target, query, bufSize, v);  }
PFNGLGETNMAPFVPROC __glGetnMapfv = nullptr; void APIENTRY glGetnMapfv (GLenum target, GLenum query, GLsizei bufSize, GLfloat *v) { if (__glGetnMapfv != 0) (__glGetnMapfv)(target, query, bufSize, v);  }
PFNGLGETNMAPIVPROC __glGetnMapiv = nullptr; void APIENTRY glGetnMapiv (GLenum target, GLenum query, GLsizei bufSize, GLint *v) { if (__glGetnMapiv != 0) (__glGetnMapiv)(target, query, bufSize, v);  }
PFNGLGETNMINMAXPROC __glGetnMinmax = nullptr; void APIENTRY glGetnMinmax (GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values) { if (__glGetnMinmax != 0) (__glGetnMinmax)(target, reset, format, type, bufSize, values);  }
PFNGLGETNPIXELMAPFVPROC __glGetnPixelMapfv = nullptr; void APIENTRY glGetnPixelMapfv (GLenum map, GLsizei bufSize, GLfloat *values) { if (__glGetnPixelMapfv != 0) (__glGetnPixelMapfv)(map, bufSize, values);  }
PFNGLGETNPIXELMAPUIVPROC __glGetnPixelMapuiv = nullptr; void APIENTRY glGetnPixelMapuiv (GLenum map, GLsizei bufSize, GLuint *values) { if (__glGetnPixelMapuiv != 0) (__glGetnPixelMapuiv)(map, bufSize, values);  }
PFNGLGETNPIXELMAPUSVPROC __glGetnPixelMapusv = nullptr; void APIENTRY glGetnPixelMapusv (GLenum map, GLsizei bufSize, GLushort *values) { if (__glGetnPixelMapusv != 0) (__glGetnPixelMapusv)(map, bufSize, values);  }
PFNGLGETNPOLYGONSTIPPLEPROC __glGetnPolygonStipple = nullptr; void APIENTRY glGetnPolygonStipple (GLsizei bufSize, GLubyte *pattern) { if (__glGetnPolygonStipple != 0) (__glGetnPolygonStipple)(bufSize, pattern);  }
PFNGLGETNSEPARABLEFILTERPROC __glGetnSeparableFilter = nullptr; void APIENTRY glGetnSeparableFilter (GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void *row, GLsizei columnBufSize, void *column, void *span) { if (__glGetnSeparableFilter != 0) (__glGetnSeparableFilter)(target, format, type, rowBufSize, row, columnBufSize, column, span);  }
PFNGLGETNTEXIMAGEPROC __glGetnTexImage = nullptr; void APIENTRY glGetnTexImage (GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels) { if (__glGetnTexImage != 0) (__glGetnTexImage)(target, level, format, type, bufSize, pixels);  }
PFNGLGETNUNIFORMDVPROC __glGetnUniformdv = nullptr; void APIENTRY glGetnUniformdv (GLuint program, GLint location, GLsizei bufSize, GLdouble *params) { if (__glGetnUniformdv != 0) (__glGetnUniformdv)(program, location, bufSize, params);  }
PFNGLGETNUNIFORMFVPROC __glGetnUniformfv = nullptr; void APIENTRY glGetnUniformfv (GLuint program, GLint location, GLsizei bufSize, GLfloat *params) { if (__glGetnUniformfv != 0) (__glGetnUniformfv)(program, location, bufSize, params);  }
PFNGLGETNUNIFORMIVPROC __glGetnUniformiv = nullptr; void APIENTRY glGetnUniformiv (GLuint program, GLint location, GLsizei bufSize, GLint *params) { if (__glGetnUniformiv != 0) (__glGetnUniformiv)(program, location, bufSize, params);  }
PFNGLGETNUNIFORMUIVPROC __glGetnUniformuiv = nullptr; void APIENTRY glGetnUniformuiv (GLuint program, GLint location, GLsizei bufSize, GLuint *params) { if (__glGetnUniformuiv != 0) (__glGetnUniformuiv)(program, location, bufSize, params);  }
PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC __glInvalidateNamedFramebufferData = nullptr; void APIENTRY glInvalidateNamedFramebufferData (GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments) { if (__glInvalidateNamedFramebufferData != 0) (__glInvalidateNamedFramebufferData)(framebuffer, numAttachments, attachments);  }
PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC __glInvalidateNamedFramebufferSubData = nullptr; void APIENTRY glInvalidateNamedFramebufferSubData (GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height) { if (__glInvalidateNamedFramebufferSubData != 0) (__glInvalidateNamedFramebufferSubData)(framebuffer, numAttachments, attachments, x, y, width, height);  }
PFNGLMAPNAMEDBUFFERPROC __glMapNamedBuffer = nullptr; void *APIENTRY glMapNamedBuffer (GLuint buffer, GLenum access) { if (__glMapNamedBuffer != 0) return (__glMapNamedBuffer)(buffer, access); return 0; }
PFNGLMAPNAMEDBUFFERRANGEPROC __glMapNamedBufferRange = nullptr; void *APIENTRY glMapNamedBufferRange (GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access) { if (__glMapNamedBufferRange != 0) return (__glMapNamedBufferRange)(buffer, offset, length, access); return 0; }
PFNGLMEMORYBARRIERBYREGIONPROC __glMemoryBarrierByRegion = nullptr; void APIENTRY glMemoryBarrierByRegion (GLbitfield barriers) { if (__glMemoryBarrierByRegion != 0) (__glMemoryBarrierByRegion)(barriers);  }
PFNGLNAMEDBUFFERDATAPROC __glNamedBufferData = nullptr; void APIENTRY glNamedBufferData (GLuint buffer, GLsizeiptr size, const void *data, GLenum usage) { if (__glNamedBufferData != 0) (__glNamedBufferData)(buffer, size, data, usage);  }
PFNGLNAMEDBUFFERSTORAGEPROC __glNamedBufferStorage = nullptr; void APIENTRY glNamedBufferStorage (GLuint buffer, GLsizeiptr size, const void *data, GLbitfield flags) { if (__glNamedBufferStorage != 0) (__glNamedBufferStorage)(buffer, size, data, flags);  }
PFNGLNAMEDBUFFERSUBDATAPROC __glNamedBufferSubData = nullptr; void APIENTRY glNamedBufferSubData (GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data) { if (__glNamedBufferSubData != 0) (__glNamedBufferSubData)(buffer, offset, size, data);  }
PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC __glNamedFramebufferDrawBuffer = nullptr; void APIENTRY glNamedFramebufferDrawBuffer (GLuint framebuffer, GLenum buf) { if (__glNamedFramebufferDrawBuffer != 0) (__glNamedFramebufferDrawBuffer)(framebuffer, buf);  }
PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC __glNamedFramebufferDrawBuffers = nullptr; void APIENTRY glNamedFramebufferDrawBuffers (GLuint framebuffer, GLsizei n, const GLenum *bufs) { if (__glNamedFramebufferDrawBuffers != 0) (__glNamedFramebufferDrawBuffers)(framebuffer, n, bufs);  }
PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC __glNamedFramebufferParameteri = nullptr; void APIENTRY glNamedFramebufferParameteri (GLuint framebuffer, GLenum pname, GLint param) { if (__glNamedFramebufferParameteri != 0) (__glNamedFramebufferParameteri)(framebuffer, pname, param);  }
PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC __glNamedFramebufferReadBuffer = nullptr; void APIENTRY glNamedFramebufferReadBuffer (GLuint framebuffer, GLenum src) { if (__glNamedFramebufferReadBuffer != 0) (__glNamedFramebufferReadBuffer)(framebuffer, src);  }
PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC __glNamedFramebufferRenderbuffer = nullptr; void APIENTRY glNamedFramebufferRenderbuffer (GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) { if (__glNamedFramebufferRenderbuffer != 0) (__glNamedFramebufferRenderbuffer)(framebuffer, attachment, renderbuffertarget, renderbuffer);  }
PFNGLNAMEDFRAMEBUFFERTEXTUREPROC __glNamedFramebufferTexture = nullptr; void APIENTRY glNamedFramebufferTexture (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level) { if (__glNamedFramebufferTexture != 0) (__glNamedFramebufferTexture)(framebuffer, attachment, texture, level);  }
PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC __glNamedFramebufferTextureLayer = nullptr; void APIENTRY glNamedFramebufferTextureLayer (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer) { if (__glNamedFramebufferTextureLayer != 0) (__glNamedFramebufferTextureLayer)(framebuffer, attachment, texture, level, layer);  }
PFNGLNAMEDRENDERBUFFERSTORAGEPROC __glNamedRenderbufferStorage = nullptr; void APIENTRY glNamedRenderbufferStorage (GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height) { if (__glNamedRenderbufferStorage != 0) (__glNamedRenderbufferStorage)(renderbuffer, internalformat, width, height);  }
PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC __glNamedRenderbufferStorageMultisample = nullptr; void APIENTRY glNamedRenderbufferStorageMultisample (GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) { if (__glNamedRenderbufferStorageMultisample != 0) (__glNamedRenderbufferStorageMultisample)(renderbuffer, samples, internalformat, width, height);  }
PFNGLREADNPIXELSPROC __glReadnPixels = nullptr; void APIENTRY glReadnPixels (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data) { if (__glReadnPixels != 0) (__glReadnPixels)(x, y, width, height, format, type, bufSize, data);  }
PFNGLTEXTUREBARRIERPROC __glTextureBarrier = nullptr; void APIENTRY glTextureBarrier () { if (__glTextureBarrier != 0) (__glTextureBarrier)();  }
PFNGLTEXTUREBUFFERPROC __glTextureBuffer = nullptr; void APIENTRY glTextureBuffer (GLuint texture, GLenum internalformat, GLuint buffer) { if (__glTextureBuffer != 0) (__glTextureBuffer)(texture, internalformat, buffer);  }
PFNGLTEXTUREBUFFERRANGEPROC __glTextureBufferRange = nullptr; void APIENTRY glTextureBufferRange (GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size) { if (__glTextureBufferRange != 0) (__glTextureBufferRange)(texture, internalformat, buffer, offset, size);  }
PFNGLTEXTUREPARAMETERIIVPROC __glTextureParameterIiv = nullptr; void APIENTRY glTextureParameterIiv (GLuint texture, GLenum pname, const GLint *params) { if (__glTextureParameterIiv != 0) (__glTextureParameterIiv)(texture, pname, params);  }
PFNGLTEXTUREPARAMETERIUIVPROC __glTextureParameterIuiv = nullptr; void APIENTRY glTextureParameterIuiv (GLuint texture, GLenum pname, const GLuint *params) { if (__glTextureParameterIuiv != 0) (__glTextureParameterIuiv)(texture, pname, params);  }
PFNGLTEXTUREPARAMETERFPROC __glTextureParameterf = nullptr; void APIENTRY glTextureParameterf (GLuint texture, GLenum pname, GLfloat param) { if (__glTextureParameterf != 0) (__glTextureParameterf)(texture, pname, param);  }
PFNGLTEXTUREPARAMETERFVPROC __glTextureParameterfv = nullptr; void APIENTRY glTextureParameterfv (GLuint texture, GLenum pname, const GLfloat *param) { if (__glTextureParameterfv != 0) (__glTextureParameterfv)(texture, pname, param);  }
PFNGLTEXTUREPARAMETERIPROC __glTextureParameteri = nullptr; void APIENTRY glTextureParameteri (GLuint texture, GLenum pname, GLint param) { if (__glTextureParameteri != 0) (__glTextureParameteri)(texture, pname, param);  }
PFNGLTEXTUREPARAMETERIVPROC __glTextureParameteriv = nullptr; void APIENTRY glTextureParameteriv (GLuint texture, GLenum pname, const GLint *param) { if (__glTextureParameteriv != 0) (__glTextureParameteriv)(texture, pname, param);  }
PFNGLTEXTURESTORAGE1DPROC __glTextureStorage1D = nullptr; void APIENTRY glTextureStorage1D (GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width) { if (__glTextureStorage1D != 0) (__glTextureStorage1D)(texture, levels, internalformat, width);  }
PFNGLTEXTURESTORAGE2DPROC __glTextureStorage2D = nullptr; void APIENTRY glTextureStorage2D (GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height) { if (__glTextureStorage2D != 0) (__glTextureStorage2D)(texture, levels, internalformat, width, height);  }
PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC __glTextureStorage2DMultisample = nullptr; void APIENTRY glTextureStorage2DMultisample (GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) { if (__glTextureStorage2DMultisample != 0) (__glTextureStorage2DMultisample)(texture, samples, internalformat, width, height, fixedsamplelocations);  }
PFNGLTEXTURESTORAGE3DPROC __glTextureStorage3D = nullptr; void APIENTRY glTextureStorage3D (GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth) { if (__glTextureStorage3D != 0) (__glTextureStorage3D)(texture, levels, internalformat, width, height, depth);  }
PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC __glTextureStorage3DMultisample = nullptr; void APIENTRY glTextureStorage3DMultisample (GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) { if (__glTextureStorage3DMultisample != 0) (__glTextureStorage3DMultisample)(texture, samples, internalformat, width, height, depth, fixedsamplelocations);  }
PFNGLTEXTURESUBIMAGE1DPROC __glTextureSubImage1D = nullptr; void APIENTRY glTextureSubImage1D (GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels) { if (__glTextureSubImage1D != 0) (__glTextureSubImage1D)(texture, level, xoffset, width, format, type, pixels);  }
PFNGLTEXTURESUBIMAGE2DPROC __glTextureSubImage2D = nullptr; void APIENTRY glTextureSubImage2D (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels) { if (__glTextureSubImage2D != 0) (__glTextureSubImage2D)(texture, level, xoffset, yoffset, width, height, format, type, pixels);  }
PFNGLTEXTURESUBIMAGE3DPROC __glTextureSubImage3D = nullptr; void APIENTRY glTextureSubImage3D (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels) { if (__glTextureSubImage3D != 0) (__glTextureSubImage3D)(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);  }
PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC __glTransformFeedbackBufferBase = nullptr; void APIENTRY glTransformFeedbackBufferBase (GLuint xfb, GLuint index, GLuint buffer) { if (__glTransformFeedbackBufferBase != 0) (__glTransformFeedbackBufferBase)(xfb, index, buffer);  }
PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC __glTransformFeedbackBufferRange = nullptr; void APIENTRY glTransformFeedbackBufferRange (GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size) { if (__glTransformFeedbackBufferRange != 0) (__glTransformFeedbackBufferRange)(xfb, index, buffer, offset, size);  }
PFNGLUNMAPNAMEDBUFFERPROC __glUnmapNamedBuffer = nullptr; GLboolean APIENTRY glUnmapNamedBuffer (GLuint buffer) { if (__glUnmapNamedBuffer != 0) return (__glUnmapNamedBuffer)(buffer); return 0; }
PFNGLVERTEXARRAYATTRIBBINDINGPROC __glVertexArrayAttribBinding = nullptr; void APIENTRY glVertexArrayAttribBinding (GLuint vaobj, GLuint attribindex, GLuint bindingindex) { if (__glVertexArrayAttribBinding != 0) (__glVertexArrayAttribBinding)(vaobj, attribindex, bindingindex);  }
PFNGLVERTEXARRAYATTRIBFORMATPROC __glVertexArrayAttribFormat = nullptr; void APIENTRY glVertexArrayAttribFormat (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset) { if (__glVertexArrayAttribFormat != 0) (__glVertexArrayAttribFormat)(vaobj, attribindex, size, type, normalized, relativeoffset);  }
PFNGLVERTEXARRAYATTRIBIFORMATPROC __glVertexArrayAttribIFormat = nullptr; void APIENTRY glVertexArrayAttribIFormat (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) { if (__glVertexArrayAttribIFormat != 0) (__glVertexArrayAttribIFormat)(vaobj, attribindex, size, type, relativeoffset);  }
PFNGLVERTEXARRAYATTRIBLFORMATPROC __glVertexArrayAttribLFormat = nullptr; void APIENTRY glVertexArrayAttribLFormat (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) { if (__glVertexArrayAttribLFormat != 0) (__glVertexArrayAttribLFormat)(vaobj, attribindex, size, type, relativeoffset);  }
PFNGLVERTEXARRAYBINDINGDIVISORPROC __glVertexArrayBindingDivisor = nullptr; void APIENTRY glVertexArrayBindingDivisor (GLuint vaobj, GLuint bindingindex, GLuint divisor) { if (__glVertexArrayBindingDivisor != 0) (__glVertexArrayBindingDivisor)(vaobj, bindingindex, divisor);  }
PFNGLVERTEXARRAYELEMENTBUFFERPROC __glVertexArrayElementBuffer = nullptr; void APIENTRY glVertexArrayElementBuffer (GLuint vaobj, GLuint buffer) { if (__glVertexArrayElementBuffer != 0) (__glVertexArrayElementBuffer)(vaobj, buffer);  }
PFNGLVERTEXARRAYVERTEXBUFFERPROC __glVertexArrayVertexBuffer = nullptr; void APIENTRY glVertexArrayVertexBuffer (GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride) { if (__glVertexArrayVertexBuffer != 0) (__glVertexArrayVertexBuffer)(vaobj, bindingindex, buffer, offset, stride);  }
PFNGLVERTEXARRAYVERTEXBUFFERSPROC __glVertexArrayVertexBuffers = nullptr; void APIENTRY glVertexArrayVertexBuffers (GLuint vaobj, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides) { if (__glVertexArrayVertexBuffers != 0) (__glVertexArrayVertexBuffers)(vaobj, first, count, buffers, offsets, strides);  }
bool __loadGL_VERSION_4_5(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glBindTextureUnit = (PFNGLBINDTEXTUREUNITPROC)proc((const GLubyte*)"glBindTextureUnit")) != nullptr) || r;
    r = ((__glBlitNamedFramebuffer = (PFNGLBLITNAMEDFRAMEBUFFERPROC)proc((const GLubyte*)"glBlitNamedFramebuffer")) != nullptr) || r;
    r = ((__glCheckNamedFramebufferStatus = (PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC)proc((const GLubyte*)"glCheckNamedFramebufferStatus")) != nullptr) || r;
    r = ((__glClearNamedBufferData = (PFNGLCLEARNAMEDBUFFERDATAPROC)proc((const GLubyte*)"glClearNamedBufferData")) != nullptr) || r;
    r = ((__glClearNamedBufferSubData = (PFNGLCLEARNAMEDBUFFERSUBDATAPROC)proc((const GLubyte*)"glClearNamedBufferSubData")) != nullptr) || r;
    r = ((__glClearNamedFramebufferfi = (PFNGLCLEARNAMEDFRAMEBUFFERFIPROC)proc((const GLubyte*)"glClearNamedFramebufferfi")) != nullptr) || r;
    r = ((__glClearNamedFramebufferfv = (PFNGLCLEARNAMEDFRAMEBUFFERFVPROC)proc((const GLubyte*)"glClearNamedFramebufferfv")) != nullptr) || r;
    r = ((__glClearNamedFramebufferiv = (PFNGLCLEARNAMEDFRAMEBUFFERIVPROC)proc((const GLubyte*)"glClearNamedFramebufferiv")) != nullptr) || r;
    r = ((__glClearNamedFramebufferuiv = (PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC)proc((const GLubyte*)"glClearNamedFramebufferuiv")) != nullptr) || r;
    r = ((__glClipControl = (PFNGLCLIPCONTROLPROC)proc((const GLubyte*)"glClipControl")) != nullptr) || r;
    r = ((__glCompressedTextureSubImage1D = (PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC)proc((const GLubyte*)"glCompressedTextureSubImage1D")) != nullptr) || r;
    r = ((__glCompressedTextureSubImage2D = (PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC)proc((const GLubyte*)"glCompressedTextureSubImage2D")) != nullptr) || r;
    r = ((__glCompressedTextureSubImage3D = (PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC)proc((const GLubyte*)"glCompressedTextureSubImage3D")) != nullptr) || r;
    r = ((__glCopyNamedBufferSubData = (PFNGLCOPYNAMEDBUFFERSUBDATAPROC)proc((const GLubyte*)"glCopyNamedBufferSubData")) != nullptr) || r;
    r = ((__glCopyTextureSubImage1D = (PFNGLCOPYTEXTURESUBIMAGE1DPROC)proc((const GLubyte*)"glCopyTextureSubImage1D")) != nullptr) || r;
    r = ((__glCopyTextureSubImage2D = (PFNGLCOPYTEXTURESUBIMAGE2DPROC)proc((const GLubyte*)"glCopyTextureSubImage2D")) != nullptr) || r;
    r = ((__glCopyTextureSubImage3D = (PFNGLCOPYTEXTURESUBIMAGE3DPROC)proc((const GLubyte*)"glCopyTextureSubImage3D")) != nullptr) || r;
    r = ((__glCreateBuffers = (PFNGLCREATEBUFFERSPROC)proc((const GLubyte*)"glCreateBuffers")) != nullptr) || r;
    r = ((__glCreateFramebuffers = (PFNGLCREATEFRAMEBUFFERSPROC)proc((const GLubyte*)"glCreateFramebuffers")) != nullptr) || r;
    r = ((__glCreateProgramPipelines = (PFNGLCREATEPROGRAMPIPELINESPROC)proc((const GLubyte*)"glCreateProgramPipelines")) != nullptr) || r;
    r = ((__glCreateQueries = (PFNGLCREATEQUERIESPROC)proc((const GLubyte*)"glCreateQueries")) != nullptr) || r;
    r = ((__glCreateRenderbuffers = (PFNGLCREATERENDERBUFFERSPROC)proc((const GLubyte*)"glCreateRenderbuffers")) != nullptr) || r;
    r = ((__glCreateSamplers = (PFNGLCREATESAMPLERSPROC)proc((const GLubyte*)"glCreateSamplers")) != nullptr) || r;
    r = ((__glCreateTextures = (PFNGLCREATETEXTURESPROC)proc((const GLubyte*)"glCreateTextures")) != nullptr) || r;
    r = ((__glCreateTransformFeedbacks = (PFNGLCREATETRANSFORMFEEDBACKSPROC)proc((const GLubyte*)"glCreateTransformFeedbacks")) != nullptr) || r;
    r = ((__glCreateVertexArrays = (PFNGLCREATEVERTEXARRAYSPROC)proc((const GLubyte*)"glCreateVertexArrays")) != nullptr) || r;
    r = ((__glDisableVertexArrayAttrib = (PFNGLDISABLEVERTEXARRAYATTRIBPROC)proc((const GLubyte*)"glDisableVertexArrayAttrib")) != nullptr) || r;
    r = ((__glEnableVertexArrayAttrib = (PFNGLENABLEVERTEXARRAYATTRIBPROC)proc((const GLubyte*)"glEnableVertexArrayAttrib")) != nullptr) || r;
    r = ((__glFlushMappedNamedBufferRange = (PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC)proc((const GLubyte*)"glFlushMappedNamedBufferRange")) != nullptr) || r;
    r = ((__glGenerateTextureMipmap = (PFNGLGENERATETEXTUREMIPMAPPROC)proc((const GLubyte*)"glGenerateTextureMipmap")) != nullptr) || r;
    r = ((__glGetCompressedTextureImage = (PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC)proc((const GLubyte*)"glGetCompressedTextureImage")) != nullptr) || r;
    r = ((__glGetCompressedTextureSubImage = (PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC)proc((const GLubyte*)"glGetCompressedTextureSubImage")) != nullptr) || r;
    r = ((__glGetGraphicsResetStatus = (PFNGLGETGRAPHICSRESETSTATUSPROC)proc((const GLubyte*)"glGetGraphicsResetStatus")) != nullptr) || r;
    r = ((__glGetNamedBufferParameteri64v = (PFNGLGETNAMEDBUFFERPARAMETERI64VPROC)proc((const GLubyte*)"glGetNamedBufferParameteri64v")) != nullptr) || r;
    r = ((__glGetNamedBufferParameteriv = (PFNGLGETNAMEDBUFFERPARAMETERIVPROC)proc((const GLubyte*)"glGetNamedBufferParameteriv")) != nullptr) || r;
    r = ((__glGetNamedBufferPointerv = (PFNGLGETNAMEDBUFFERPOINTERVPROC)proc((const GLubyte*)"glGetNamedBufferPointerv")) != nullptr) || r;
    r = ((__glGetNamedBufferSubData = (PFNGLGETNAMEDBUFFERSUBDATAPROC)proc((const GLubyte*)"glGetNamedBufferSubData")) != nullptr) || r;
    r = ((__glGetNamedFramebufferAttachmentParameteriv = (PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC)proc((const GLubyte*)"glGetNamedFramebufferAttachmentParameteriv")) != nullptr) || r;
    r = ((__glGetNamedFramebufferParameteriv = (PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC)proc((const GLubyte*)"glGetNamedFramebufferParameteriv")) != nullptr) || r;
    r = ((__glGetNamedRenderbufferParameteriv = (PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC)proc((const GLubyte*)"glGetNamedRenderbufferParameteriv")) != nullptr) || r;
    r = ((__glGetQueryBufferObjecti64v = (PFNGLGETQUERYBUFFEROBJECTI64VPROC)proc((const GLubyte*)"glGetQueryBufferObjecti64v")) != nullptr) || r;
    r = ((__glGetQueryBufferObjectiv = (PFNGLGETQUERYBUFFEROBJECTIVPROC)proc((const GLubyte*)"glGetQueryBufferObjectiv")) != nullptr) || r;
    r = ((__glGetQueryBufferObjectui64v = (PFNGLGETQUERYBUFFEROBJECTUI64VPROC)proc((const GLubyte*)"glGetQueryBufferObjectui64v")) != nullptr) || r;
    r = ((__glGetQueryBufferObjectuiv = (PFNGLGETQUERYBUFFEROBJECTUIVPROC)proc((const GLubyte*)"glGetQueryBufferObjectuiv")) != nullptr) || r;
    r = ((__glGetTextureImage = (PFNGLGETTEXTUREIMAGEPROC)proc((const GLubyte*)"glGetTextureImage")) != nullptr) || r;
    r = ((__glGetTextureLevelParameterfv = (PFNGLGETTEXTURELEVELPARAMETERFVPROC)proc((const GLubyte*)"glGetTextureLevelParameterfv")) != nullptr) || r;
    r = ((__glGetTextureLevelParameteriv = (PFNGLGETTEXTURELEVELPARAMETERIVPROC)proc((const GLubyte*)"glGetTextureLevelParameteriv")) != nullptr) || r;
    r = ((__glGetTextureParameterIiv = (PFNGLGETTEXTUREPARAMETERIIVPROC)proc((const GLubyte*)"glGetTextureParameterIiv")) != nullptr) || r;
    r = ((__glGetTextureParameterIuiv = (PFNGLGETTEXTUREPARAMETERIUIVPROC)proc((const GLubyte*)"glGetTextureParameterIuiv")) != nullptr) || r;
    r = ((__glGetTextureParameterfv = (PFNGLGETTEXTUREPARAMETERFVPROC)proc((const GLubyte*)"glGetTextureParameterfv")) != nullptr) || r;
    r = ((__glGetTextureParameteriv = (PFNGLGETTEXTUREPARAMETERIVPROC)proc((const GLubyte*)"glGetTextureParameteriv")) != nullptr) || r;
    r = ((__glGetTextureSubImage = (PFNGLGETTEXTURESUBIMAGEPROC)proc((const GLubyte*)"glGetTextureSubImage")) != nullptr) || r;
    r = ((__glGetTransformFeedbacki64_v = (PFNGLGETTRANSFORMFEEDBACKI64_VPROC)proc((const GLubyte*)"glGetTransformFeedbacki64_v")) != nullptr) || r;
    r = ((__glGetTransformFeedbacki_v = (PFNGLGETTRANSFORMFEEDBACKI_VPROC)proc((const GLubyte*)"glGetTransformFeedbacki_v")) != nullptr) || r;
    r = ((__glGetTransformFeedbackiv = (PFNGLGETTRANSFORMFEEDBACKIVPROC)proc((const GLubyte*)"glGetTransformFeedbackiv")) != nullptr) || r;
    r = ((__glGetVertexArrayIndexed64iv = (PFNGLGETVERTEXARRAYINDEXED64IVPROC)proc((const GLubyte*)"glGetVertexArrayIndexed64iv")) != nullptr) || r;
    r = ((__glGetVertexArrayIndexediv = (PFNGLGETVERTEXARRAYINDEXEDIVPROC)proc((const GLubyte*)"glGetVertexArrayIndexediv")) != nullptr) || r;
    r = ((__glGetVertexArrayiv = (PFNGLGETVERTEXARRAYIVPROC)proc((const GLubyte*)"glGetVertexArrayiv")) != nullptr) || r;
    r = ((__glGetnColorTable = (PFNGLGETNCOLORTABLEPROC)proc((const GLubyte*)"glGetnColorTable")) != nullptr) || r;
    r = ((__glGetnCompressedTexImage = (PFNGLGETNCOMPRESSEDTEXIMAGEPROC)proc((const GLubyte*)"glGetnCompressedTexImage")) != nullptr) || r;
    r = ((__glGetnConvolutionFilter = (PFNGLGETNCONVOLUTIONFILTERPROC)proc((const GLubyte*)"glGetnConvolutionFilter")) != nullptr) || r;
    r = ((__glGetnHistogram = (PFNGLGETNHISTOGRAMPROC)proc((const GLubyte*)"glGetnHistogram")) != nullptr) || r;
    r = ((__glGetnMapdv = (PFNGLGETNMAPDVPROC)proc((const GLubyte*)"glGetnMapdv")) != nullptr) || r;
    r = ((__glGetnMapfv = (PFNGLGETNMAPFVPROC)proc((const GLubyte*)"glGetnMapfv")) != nullptr) || r;
    r = ((__glGetnMapiv = (PFNGLGETNMAPIVPROC)proc((const GLubyte*)"glGetnMapiv")) != nullptr) || r;
    r = ((__glGetnMinmax = (PFNGLGETNMINMAXPROC)proc((const GLubyte*)"glGetnMinmax")) != nullptr) || r;
    r = ((__glGetnPixelMapfv = (PFNGLGETNPIXELMAPFVPROC)proc((const GLubyte*)"glGetnPixelMapfv")) != nullptr) || r;
    r = ((__glGetnPixelMapuiv = (PFNGLGETNPIXELMAPUIVPROC)proc((const GLubyte*)"glGetnPixelMapuiv")) != nullptr) || r;
    r = ((__glGetnPixelMapusv = (PFNGLGETNPIXELMAPUSVPROC)proc((const GLubyte*)"glGetnPixelMapusv")) != nullptr) || r;
    r = ((__glGetnPolygonStipple = (PFNGLGETNPOLYGONSTIPPLEPROC)proc((const GLubyte*)"glGetnPolygonStipple")) != nullptr) || r;
    r = ((__glGetnSeparableFilter = (PFNGLGETNSEPARABLEFILTERPROC)proc((const GLubyte*)"glGetnSeparableFilter")) != nullptr) || r;
    r = ((__glGetnTexImage = (PFNGLGETNTEXIMAGEPROC)proc((const GLubyte*)"glGetnTexImage")) != nullptr) || r;
    r = ((__glGetnUniformdv = (PFNGLGETNUNIFORMDVPROC)proc((const GLubyte*)"glGetnUniformdv")) != nullptr) || r;
    r = ((__glGetnUniformfv = (PFNGLGETNUNIFORMFVPROC)proc((const GLubyte*)"glGetnUniformfv")) != nullptr) || r;
    r = ((__glGetnUniformiv = (PFNGLGETNUNIFORMIVPROC)proc((const GLubyte*)"glGetnUniformiv")) != nullptr) || r;
    r = ((__glGetnUniformuiv = (PFNGLGETNUNIFORMUIVPROC)proc((const GLubyte*)"glGetnUniformuiv")) != nullptr) || r;
    r = ((__glInvalidateNamedFramebufferData = (PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC)proc((const GLubyte*)"glInvalidateNamedFramebufferData")) != nullptr) || r;
    r = ((__glInvalidateNamedFramebufferSubData = (PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC)proc((const GLubyte*)"glInvalidateNamedFramebufferSubData")) != nullptr) || r;
    r = ((__glMapNamedBuffer = (PFNGLMAPNAMEDBUFFERPROC)proc((const GLubyte*)"glMapNamedBuffer")) != nullptr) || r;
    r = ((__glMapNamedBufferRange = (PFNGLMAPNAMEDBUFFERRANGEPROC)proc((const GLubyte*)"glMapNamedBufferRange")) != nullptr) || r;
    r = ((__glMemoryBarrierByRegion = (PFNGLMEMORYBARRIERBYREGIONPROC)proc((const GLubyte*)"glMemoryBarrierByRegion")) != nullptr) || r;
    r = ((__glNamedBufferData = (PFNGLNAMEDBUFFERDATAPROC)proc((const GLubyte*)"glNamedBufferData")) != nullptr) || r;
    r = ((__glNamedBufferStorage = (PFNGLNAMEDBUFFERSTORAGEPROC)proc((const GLubyte*)"glNamedBufferStorage")) != nullptr) || r;
    r = ((__glNamedBufferSubData = (PFNGLNAMEDBUFFERSUBDATAPROC)proc((const GLubyte*)"glNamedBufferSubData")) != nullptr) || r;
    r = ((__glNamedFramebufferDrawBuffer = (PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC)proc((const GLubyte*)"glNamedFramebufferDrawBuffer")) != nullptr) || r;
    r = ((__glNamedFramebufferDrawBuffers = (PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC)proc((const GLubyte*)"glNamedFramebufferDrawBuffers")) != nullptr) || r;
    r = ((__glNamedFramebufferParameteri = (PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC)proc((const GLubyte*)"glNamedFramebufferParameteri")) != nullptr) || r;
    r = ((__glNamedFramebufferReadBuffer = (PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC)proc((const GLubyte*)"glNamedFramebufferReadBuffer")) != nullptr) || r;
    r = ((__glNamedFramebufferRenderbuffer = (PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC)proc((const GLubyte*)"glNamedFramebufferRenderbuffer")) != nullptr) || r;
    r = ((__glNamedFramebufferTexture = (PFNGLNAMEDFRAMEBUFFERTEXTUREPROC)proc((const GLubyte*)"glNamedFramebufferTexture")) != nullptr) || r;
    r = ((__glNamedFramebufferTextureLayer = (PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC)proc((const GLubyte*)"glNamedFramebufferTextureLayer")) != nullptr) || r;
    r = ((__glNamedRenderbufferStorage = (PFNGLNAMEDRENDERBUFFERSTORAGEPROC)proc((const GLubyte*)"glNamedRenderbufferStorage")) != nullptr) || r;
    r = ((__glNamedRenderbufferStorageMultisample = (PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC)proc((const GLubyte*)"glNamedRenderbufferStorageMultisample")) != nullptr) || r;
    r = ((__glReadnPixels = (PFNGLREADNPIXELSPROC)proc((const GLubyte*)"glReadnPixels")) != nullptr) || r;
    r = ((__glTextureBarrier = (PFNGLTEXTUREBARRIERPROC)proc((const GLubyte*)"glTextureBarrier")) != nullptr) || r;
    r = ((__glTextureBuffer = (PFNGLTEXTUREBUFFERPROC)proc((const GLubyte*)"glTextureBuffer")) != nullptr) || r;
    r = ((__glTextureBufferRange = (PFNGLTEXTUREBUFFERRANGEPROC)proc((const GLubyte*)"glTextureBufferRange")) != nullptr) || r;
    r = ((__glTextureParameterIiv = (PFNGLTEXTUREPARAMETERIIVPROC)proc((const GLubyte*)"glTextureParameterIiv")) != nullptr) || r;
    r = ((__glTextureParameterIuiv = (PFNGLTEXTUREPARAMETERIUIVPROC)proc((const GLubyte*)"glTextureParameterIuiv")) != nullptr) || r;
    r = ((__glTextureParameterf = (PFNGLTEXTUREPARAMETERFPROC)proc((const GLubyte*)"glTextureParameterf")) != nullptr) || r;
    r = ((__glTextureParameterfv = (PFNGLTEXTUREPARAMETERFVPROC)proc((const GLubyte*)"glTextureParameterfv")) != nullptr) || r;
    r = ((__glTextureParameteri = (PFNGLTEXTUREPARAMETERIPROC)proc((const GLubyte*)"glTextureParameteri")) != nullptr) || r;
    r = ((__glTextureParameteriv = (PFNGLTEXTUREPARAMETERIVPROC)proc((const GLubyte*)"glTextureParameteriv")) != nullptr) || r;
    r = ((__glTextureStorage1D = (PFNGLTEXTURESTORAGE1DPROC)proc((const GLubyte*)"glTextureStorage1D")) != nullptr) || r;
    r = ((__glTextureStorage2D = (PFNGLTEXTURESTORAGE2DPROC)proc((const GLubyte*)"glTextureStorage2D")) != nullptr) || r;
    r = ((__glTextureStorage2DMultisample = (PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC)proc((const GLubyte*)"glTextureStorage2DMultisample")) != nullptr) || r;
    r = ((__glTextureStorage3D = (PFNGLTEXTURESTORAGE3DPROC)proc((const GLubyte*)"glTextureStorage3D")) != nullptr) || r;
    r = ((__glTextureStorage3DMultisample = (PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC)proc((const GLubyte*)"glTextureStorage3DMultisample")) != nullptr) || r;
    r = ((__glTextureSubImage1D = (PFNGLTEXTURESUBIMAGE1DPROC)proc((const GLubyte*)"glTextureSubImage1D")) != nullptr) || r;
    r = ((__glTextureSubImage2D = (PFNGLTEXTURESUBIMAGE2DPROC)proc((const GLubyte*)"glTextureSubImage2D")) != nullptr) || r;
    r = ((__glTextureSubImage3D = (PFNGLTEXTURESUBIMAGE3DPROC)proc((const GLubyte*)"glTextureSubImage3D")) != nullptr) || r;
    r = ((__glTransformFeedbackBufferBase = (PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC)proc((const GLubyte*)"glTransformFeedbackBufferBase")) != nullptr) || r;
    r = ((__glTransformFeedbackBufferRange = (PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC)proc((const GLubyte*)"glTransformFeedbackBufferRange")) != nullptr) || r;
    r = ((__glUnmapNamedBuffer = (PFNGLUNMAPNAMEDBUFFERPROC)proc((const GLubyte*)"glUnmapNamedBuffer")) != nullptr) || r;
    r = ((__glVertexArrayAttribBinding = (PFNGLVERTEXARRAYATTRIBBINDINGPROC)proc((const GLubyte*)"glVertexArrayAttribBinding")) != nullptr) || r;
    r = ((__glVertexArrayAttribFormat = (PFNGLVERTEXARRAYATTRIBFORMATPROC)proc((const GLubyte*)"glVertexArrayAttribFormat")) != nullptr) || r;
    r = ((__glVertexArrayAttribIFormat = (PFNGLVERTEXARRAYATTRIBIFORMATPROC)proc((const GLubyte*)"glVertexArrayAttribIFormat")) != nullptr) || r;
    r = ((__glVertexArrayAttribLFormat = (PFNGLVERTEXARRAYATTRIBLFORMATPROC)proc((const GLubyte*)"glVertexArrayAttribLFormat")) != nullptr) || r;
    r = ((__glVertexArrayBindingDivisor = (PFNGLVERTEXARRAYBINDINGDIVISORPROC)proc((const GLubyte*)"glVertexArrayBindingDivisor")) != nullptr) || r;
    r = ((__glVertexArrayElementBuffer = (PFNGLVERTEXARRAYELEMENTBUFFERPROC)proc((const GLubyte*)"glVertexArrayElementBuffer")) != nullptr) || r;
    r = ((__glVertexArrayVertexBuffer = (PFNGLVERTEXARRAYVERTEXBUFFERPROC)proc((const GLubyte*)"glVertexArrayVertexBuffer")) != nullptr) || r;
    r = ((__glVertexArrayVertexBuffers = (PFNGLVERTEXARRAYVERTEXBUFFERSPROC)proc((const GLubyte*)"glVertexArrayVertexBuffers")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_VERSION_4_5 = false;
/* GL_ARB_ES2_compatibility */
bool __loadGL_ARB_ES2_compatibility(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_ES2_compatibility = false;
/* GL_ARB_ES3_1_compatibility */
bool __loadGL_ARB_ES3_1_compatibility(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_ES3_1_compatibility = false;
/* GL_ARB_ES3_2_compatibility */
PFNGLPRIMITIVEBOUNDINGBOXARBPROC __glPrimitiveBoundingBoxARB = nullptr; void APIENTRY glPrimitiveBoundingBoxARB (GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW) { if (__glPrimitiveBoundingBoxARB != 0) (__glPrimitiveBoundingBoxARB)(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW);  }
bool __loadGL_ARB_ES3_2_compatibility(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glPrimitiveBoundingBoxARB = (PFNGLPRIMITIVEBOUNDINGBOXARBPROC)proc((const GLubyte*)"glPrimitiveBoundingBoxARB")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_ARB_ES3_2_compatibility = false;
/* GL_ARB_ES3_compatibility */
bool __loadGL_ARB_ES3_compatibility(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_ES3_compatibility = false;
/* GL_ARB_arrays_of_arrays */
bool __loadGL_ARB_arrays_of_arrays(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_arrays_of_arrays = false;
/* GL_ARB_base_instance */
bool __loadGL_ARB_base_instance(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_base_instance = false;
/* GL_ARB_bindless_texture */
PFNGLGETIMAGEHANDLEARBPROC __glGetImageHandleARB = nullptr; GLuint64 APIENTRY glGetImageHandleARB (GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format) { if (__glGetImageHandleARB != 0) return (__glGetImageHandleARB)(texture, level, layered, layer, format); return 0; }
PFNGLGETTEXTUREHANDLEARBPROC __glGetTextureHandleARB = nullptr; GLuint64 APIENTRY glGetTextureHandleARB (GLuint texture) { if (__glGetTextureHandleARB != 0) return (__glGetTextureHandleARB)(texture); return 0; }
PFNGLGETTEXTURESAMPLERHANDLEARBPROC __glGetTextureSamplerHandleARB = nullptr; GLuint64 APIENTRY glGetTextureSamplerHandleARB (GLuint texture, GLuint sampler) { if (__glGetTextureSamplerHandleARB != 0) return (__glGetTextureSamplerHandleARB)(texture, sampler); return 0; }
PFNGLGETVERTEXATTRIBLUI64VARBPROC __glGetVertexAttribLui64vARB = nullptr; void APIENTRY glGetVertexAttribLui64vARB (GLuint index, GLenum pname, GLuint64EXT *params) { if (__glGetVertexAttribLui64vARB != 0) (__glGetVertexAttribLui64vARB)(index, pname, params);  }
PFNGLISIMAGEHANDLERESIDENTARBPROC __glIsImageHandleResidentARB = nullptr; GLboolean APIENTRY glIsImageHandleResidentARB (GLuint64 handle) { if (__glIsImageHandleResidentARB != 0) return (__glIsImageHandleResidentARB)(handle); return 0; }
PFNGLISTEXTUREHANDLERESIDENTARBPROC __glIsTextureHandleResidentARB = nullptr; GLboolean APIENTRY glIsTextureHandleResidentARB (GLuint64 handle) { if (__glIsTextureHandleResidentARB != 0) return (__glIsTextureHandleResidentARB)(handle); return 0; }
PFNGLMAKEIMAGEHANDLENONRESIDENTARBPROC __glMakeImageHandleNonResidentARB = nullptr; void APIENTRY glMakeImageHandleNonResidentARB (GLuint64 handle) { if (__glMakeImageHandleNonResidentARB != 0) (__glMakeImageHandleNonResidentARB)(handle);  }
PFNGLMAKEIMAGEHANDLERESIDENTARBPROC __glMakeImageHandleResidentARB = nullptr; void APIENTRY glMakeImageHandleResidentARB (GLuint64 handle, GLenum access) { if (__glMakeImageHandleResidentARB != 0) (__glMakeImageHandleResidentARB)(handle, access);  }
PFNGLMAKETEXTUREHANDLENONRESIDENTARBPROC __glMakeTextureHandleNonResidentARB = nullptr; void APIENTRY glMakeTextureHandleNonResidentARB (GLuint64 handle) { if (__glMakeTextureHandleNonResidentARB != 0) (__glMakeTextureHandleNonResidentARB)(handle);  }
PFNGLMAKETEXTUREHANDLERESIDENTARBPROC __glMakeTextureHandleResidentARB = nullptr; void APIENTRY glMakeTextureHandleResidentARB (GLuint64 handle) { if (__glMakeTextureHandleResidentARB != 0) (__glMakeTextureHandleResidentARB)(handle);  }
PFNGLPROGRAMUNIFORMHANDLEUI64ARBPROC __glProgramUniformHandleui64ARB = nullptr; void APIENTRY glProgramUniformHandleui64ARB (GLuint program, GLint location, GLuint64 value) { if (__glProgramUniformHandleui64ARB != 0) (__glProgramUniformHandleui64ARB)(program, location, value);  }
PFNGLPROGRAMUNIFORMHANDLEUI64VARBPROC __glProgramUniformHandleui64vARB = nullptr; void APIENTRY glProgramUniformHandleui64vARB (GLuint program, GLint location, GLsizei count, const GLuint64 *values) { if (__glProgramUniformHandleui64vARB != 0) (__glProgramUniformHandleui64vARB)(program, location, count, values);  }
PFNGLUNIFORMHANDLEUI64ARBPROC __glUniformHandleui64ARB = nullptr; void APIENTRY glUniformHandleui64ARB (GLint location, GLuint64 value) { if (__glUniformHandleui64ARB != 0) (__glUniformHandleui64ARB)(location, value);  }
PFNGLUNIFORMHANDLEUI64VARBPROC __glUniformHandleui64vARB = nullptr; void APIENTRY glUniformHandleui64vARB (GLint location, GLsizei count, const GLuint64 *value) { if (__glUniformHandleui64vARB != 0) (__glUniformHandleui64vARB)(location, count, value);  }
PFNGLVERTEXATTRIBL1UI64ARBPROC __glVertexAttribL1ui64ARB = nullptr; void APIENTRY glVertexAttribL1ui64ARB (GLuint index, GLuint64EXT x) { if (__glVertexAttribL1ui64ARB != 0) (__glVertexAttribL1ui64ARB)(index, x);  }
PFNGLVERTEXATTRIBL1UI64VARBPROC __glVertexAttribL1ui64vARB = nullptr; void APIENTRY glVertexAttribL1ui64vARB (GLuint index, const GLuint64EXT *v) { if (__glVertexAttribL1ui64vARB != 0) (__glVertexAttribL1ui64vARB)(index, v);  }
bool __loadGL_ARB_bindless_texture(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glGetImageHandleARB = (PFNGLGETIMAGEHANDLEARBPROC)proc((const GLubyte*)"glGetImageHandleARB")) != nullptr) || r;
    r = ((__glGetTextureHandleARB = (PFNGLGETTEXTUREHANDLEARBPROC)proc((const GLubyte*)"glGetTextureHandleARB")) != nullptr) || r;
    r = ((__glGetTextureSamplerHandleARB = (PFNGLGETTEXTURESAMPLERHANDLEARBPROC)proc((const GLubyte*)"glGetTextureSamplerHandleARB")) != nullptr) || r;
    r = ((__glGetVertexAttribLui64vARB = (PFNGLGETVERTEXATTRIBLUI64VARBPROC)proc((const GLubyte*)"glGetVertexAttribLui64vARB")) != nullptr) || r;
    r = ((__glIsImageHandleResidentARB = (PFNGLISIMAGEHANDLERESIDENTARBPROC)proc((const GLubyte*)"glIsImageHandleResidentARB")) != nullptr) || r;
    r = ((__glIsTextureHandleResidentARB = (PFNGLISTEXTUREHANDLERESIDENTARBPROC)proc((const GLubyte*)"glIsTextureHandleResidentARB")) != nullptr) || r;
    r = ((__glMakeImageHandleNonResidentARB = (PFNGLMAKEIMAGEHANDLENONRESIDENTARBPROC)proc((const GLubyte*)"glMakeImageHandleNonResidentARB")) != nullptr) || r;
    r = ((__glMakeImageHandleResidentARB = (PFNGLMAKEIMAGEHANDLERESIDENTARBPROC)proc((const GLubyte*)"glMakeImageHandleResidentARB")) != nullptr) || r;
    r = ((__glMakeTextureHandleNonResidentARB = (PFNGLMAKETEXTUREHANDLENONRESIDENTARBPROC)proc((const GLubyte*)"glMakeTextureHandleNonResidentARB")) != nullptr) || r;
    r = ((__glMakeTextureHandleResidentARB = (PFNGLMAKETEXTUREHANDLERESIDENTARBPROC)proc((const GLubyte*)"glMakeTextureHandleResidentARB")) != nullptr) || r;
    r = ((__glProgramUniformHandleui64ARB = (PFNGLPROGRAMUNIFORMHANDLEUI64ARBPROC)proc((const GLubyte*)"glProgramUniformHandleui64ARB")) != nullptr) || r;
    r = ((__glProgramUniformHandleui64vARB = (PFNGLPROGRAMUNIFORMHANDLEUI64VARBPROC)proc((const GLubyte*)"glProgramUniformHandleui64vARB")) != nullptr) || r;
    r = ((__glUniformHandleui64ARB = (PFNGLUNIFORMHANDLEUI64ARBPROC)proc((const GLubyte*)"glUniformHandleui64ARB")) != nullptr) || r;
    r = ((__glUniformHandleui64vARB = (PFNGLUNIFORMHANDLEUI64VARBPROC)proc((const GLubyte*)"glUniformHandleui64vARB")) != nullptr) || r;
    r = ((__glVertexAttribL1ui64ARB = (PFNGLVERTEXATTRIBL1UI64ARBPROC)proc((const GLubyte*)"glVertexAttribL1ui64ARB")) != nullptr) || r;
    r = ((__glVertexAttribL1ui64vARB = (PFNGLVERTEXATTRIBL1UI64VARBPROC)proc((const GLubyte*)"glVertexAttribL1ui64vARB")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_ARB_bindless_texture = false;
/* GL_ARB_blend_func_extended */
bool __loadGL_ARB_blend_func_extended(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_blend_func_extended = false;
/* GL_ARB_buffer_storage */
bool __loadGL_ARB_buffer_storage(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_buffer_storage = false;
/* GL_ARB_cl_event */
PFNGLCREATESYNCFROMCLEVENTARBPROC __glCreateSyncFromCLeventARB = nullptr; GLsync APIENTRY glCreateSyncFromCLeventARB (struct _cl_context *context, struct _cl_event *event, GLbitfield flags) { if (__glCreateSyncFromCLeventARB != 0) return (__glCreateSyncFromCLeventARB)(context, event, flags); return 0; }
bool __loadGL_ARB_cl_event(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glCreateSyncFromCLeventARB = (PFNGLCREATESYNCFROMCLEVENTARBPROC)proc((const GLubyte*)"glCreateSyncFromCLeventARB")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_ARB_cl_event = false;
/* GL_ARB_clear_buffer_object */
bool __loadGL_ARB_clear_buffer_object(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_clear_buffer_object = false;
/* GL_ARB_clear_texture */
bool __loadGL_ARB_clear_texture(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_clear_texture = false;
/* GL_ARB_clip_control */
bool __loadGL_ARB_clip_control(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_clip_control = false;
/* GL_ARB_color_buffer_float */
PFNGLCLAMPCOLORARBPROC __glClampColorARB = nullptr; void APIENTRY glClampColorARB (GLenum target, GLenum clamp) { if (__glClampColorARB != 0) (__glClampColorARB)(target, clamp);  }
bool __loadGL_ARB_color_buffer_float(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glClampColorARB = (PFNGLCLAMPCOLORARBPROC)proc((const GLubyte*)"glClampColorARB")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_ARB_color_buffer_float = false;
/* GL_ARB_compatibility */
bool __loadGL_ARB_compatibility(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_compatibility = false;
/* GL_ARB_compressed_texture_pixel_storage */
bool __loadGL_ARB_compressed_texture_pixel_storage(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_compressed_texture_pixel_storage = false;
/* GL_ARB_compute_shader */
bool __loadGL_ARB_compute_shader(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_compute_shader = false;
/* GL_ARB_compute_variable_group_size */
PFNGLDISPATCHCOMPUTEGROUPSIZEARBPROC __glDispatchComputeGroupSizeARB = nullptr; void APIENTRY glDispatchComputeGroupSizeARB (GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, GLuint group_size_x, GLuint group_size_y, GLuint group_size_z) { if (__glDispatchComputeGroupSizeARB != 0) (__glDispatchComputeGroupSizeARB)(num_groups_x, num_groups_y, num_groups_z, group_size_x, group_size_y, group_size_z);  }
bool __loadGL_ARB_compute_variable_group_size(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glDispatchComputeGroupSizeARB = (PFNGLDISPATCHCOMPUTEGROUPSIZEARBPROC)proc((const GLubyte*)"glDispatchComputeGroupSizeARB")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_ARB_compute_variable_group_size = false;
/* GL_ARB_conditional_render_inverted */
bool __loadGL_ARB_conditional_render_inverted(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_conditional_render_inverted = false;
/* GL_ARB_conservative_depth */
bool __loadGL_ARB_conservative_depth(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_conservative_depth = false;
/* GL_ARB_copy_buffer */
bool __loadGL_ARB_copy_buffer(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_copy_buffer = false;
/* GL_ARB_copy_image */
bool __loadGL_ARB_copy_image(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_copy_image = false;
/* GL_ARB_cull_distance */
bool __loadGL_ARB_cull_distance(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_cull_distance = false;
/* GL_ARB_debug_output */
PFNGLDEBUGMESSAGECALLBACKARBPROC __glDebugMessageCallbackARB = nullptr; void APIENTRY glDebugMessageCallbackARB (GLDEBUGPROCARB callback, const void *userParam) { if (__glDebugMessageCallbackARB != 0) (__glDebugMessageCallbackARB)(callback, userParam);  }
PFNGLDEBUGMESSAGECONTROLARBPROC __glDebugMessageControlARB = nullptr; void APIENTRY glDebugMessageControlARB (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled) { if (__glDebugMessageControlARB != 0) (__glDebugMessageControlARB)(source, type, severity, count, ids, enabled);  }
PFNGLDEBUGMESSAGEINSERTARBPROC __glDebugMessageInsertARB = nullptr; void APIENTRY glDebugMessageInsertARB (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf) { if (__glDebugMessageInsertARB != 0) (__glDebugMessageInsertARB)(source, type, id, severity, length, buf);  }
PFNGLGETDEBUGMESSAGELOGARBPROC __glGetDebugMessageLogARB = nullptr; GLuint APIENTRY glGetDebugMessageLogARB (GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog) { if (__glGetDebugMessageLogARB != 0) return (__glGetDebugMessageLogARB)(count, bufSize, sources, types, ids, severities, lengths, messageLog); return 0; }
bool __loadGL_ARB_debug_output(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glDebugMessageCallbackARB = (PFNGLDEBUGMESSAGECALLBACKARBPROC)proc((const GLubyte*)"glDebugMessageCallbackARB")) != nullptr) || r;
    r = ((__glDebugMessageControlARB = (PFNGLDEBUGMESSAGECONTROLARBPROC)proc((const GLubyte*)"glDebugMessageControlARB")) != nullptr) || r;
    r = ((__glDebugMessageInsertARB = (PFNGLDEBUGMESSAGEINSERTARBPROC)proc((const GLubyte*)"glDebugMessageInsertARB")) != nullptr) || r;
    r = ((__glGetDebugMessageLogARB = (PFNGLGETDEBUGMESSAGELOGARBPROC)proc((const GLubyte*)"glGetDebugMessageLogARB")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_ARB_debug_output = false;
/* GL_ARB_depth_buffer_float */
bool __loadGL_ARB_depth_buffer_float(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_depth_buffer_float = false;
/* GL_ARB_depth_clamp */
bool __loadGL_ARB_depth_clamp(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_depth_clamp = false;
/* GL_ARB_depth_texture */
bool __loadGL_ARB_depth_texture(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_depth_texture = false;
/* GL_ARB_derivative_control */
bool __loadGL_ARB_derivative_control(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_derivative_control = false;
/* GL_ARB_direct_state_access */
bool __loadGL_ARB_direct_state_access(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_direct_state_access = false;
/* GL_ARB_draw_buffers */
PFNGLDRAWBUFFERSARBPROC __glDrawBuffersARB = nullptr; void APIENTRY glDrawBuffersARB (GLsizei n, const GLenum *bufs) { if (__glDrawBuffersARB != 0) (__glDrawBuffersARB)(n, bufs);  }
bool __loadGL_ARB_draw_buffers(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glDrawBuffersARB = (PFNGLDRAWBUFFERSARBPROC)proc((const GLubyte*)"glDrawBuffersARB")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_ARB_draw_buffers = false;
/* GL_ARB_draw_buffers_blend */
PFNGLBLENDEQUATIONSEPARATEIARBPROC __glBlendEquationSeparateiARB = nullptr; void APIENTRY glBlendEquationSeparateiARB (GLuint buf, GLenum modeRGB, GLenum modeAlpha) { if (__glBlendEquationSeparateiARB != 0) (__glBlendEquationSeparateiARB)(buf, modeRGB, modeAlpha);  }
PFNGLBLENDEQUATIONIARBPROC __glBlendEquationiARB = nullptr; void APIENTRY glBlendEquationiARB (GLuint buf, GLenum mode) { if (__glBlendEquationiARB != 0) (__glBlendEquationiARB)(buf, mode);  }
PFNGLBLENDFUNCSEPARATEIARBPROC __glBlendFuncSeparateiARB = nullptr; void APIENTRY glBlendFuncSeparateiARB (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) { if (__glBlendFuncSeparateiARB != 0) (__glBlendFuncSeparateiARB)(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);  }
PFNGLBLENDFUNCIARBPROC __glBlendFunciARB = nullptr; void APIENTRY glBlendFunciARB (GLuint buf, GLenum src, GLenum dst) { if (__glBlendFunciARB != 0) (__glBlendFunciARB)(buf, src, dst);  }
bool __loadGL_ARB_draw_buffers_blend(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glBlendEquationSeparateiARB = (PFNGLBLENDEQUATIONSEPARATEIARBPROC)proc((const GLubyte*)"glBlendEquationSeparateiARB")) != nullptr) || r;
    r = ((__glBlendEquationiARB = (PFNGLBLENDEQUATIONIARBPROC)proc((const GLubyte*)"glBlendEquationiARB")) != nullptr) || r;
    r = ((__glBlendFuncSeparateiARB = (PFNGLBLENDFUNCSEPARATEIARBPROC)proc((const GLubyte*)"glBlendFuncSeparateiARB")) != nullptr) || r;
    r = ((__glBlendFunciARB = (PFNGLBLENDFUNCIARBPROC)proc((const GLubyte*)"glBlendFunciARB")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_ARB_draw_buffers_blend = false;
/* GL_ARB_draw_elements_base_vertex */
bool __loadGL_ARB_draw_elements_base_vertex(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_draw_elements_base_vertex = false;
/* GL_ARB_draw_indirect */
bool __loadGL_ARB_draw_indirect(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_draw_indirect = false;
/* GL_ARB_draw_instanced */
PFNGLDRAWARRAYSINSTANCEDARBPROC __glDrawArraysInstancedARB = nullptr; void APIENTRY glDrawArraysInstancedARB (GLenum mode, GLint first, GLsizei count, GLsizei primcount) { if (__glDrawArraysInstancedARB != 0) (__glDrawArraysInstancedARB)(mode, first, count, primcount);  }
PFNGLDRAWELEMENTSINSTANCEDARBPROC __glDrawElementsInstancedARB = nullptr; void APIENTRY glDrawElementsInstancedARB (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount) { if (__glDrawElementsInstancedARB != 0) (__glDrawElementsInstancedARB)(mode, count, type, indices, primcount);  }
bool __loadGL_ARB_draw_instanced(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glDrawArraysInstancedARB = (PFNGLDRAWARRAYSINSTANCEDARBPROC)proc((const GLubyte*)"glDrawArraysInstancedARB")) != nullptr) || r;
    r = ((__glDrawElementsInstancedARB = (PFNGLDRAWELEMENTSINSTANCEDARBPROC)proc((const GLubyte*)"glDrawElementsInstancedARB")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_ARB_draw_instanced = false;
/* GL_ARB_enhanced_layouts */
bool __loadGL_ARB_enhanced_layouts(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_enhanced_layouts = false;
/* GL_ARB_explicit_attrib_location */
bool __loadGL_ARB_explicit_attrib_location(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_explicit_attrib_location = false;
/* GL_ARB_explicit_uniform_location */
bool __loadGL_ARB_explicit_uniform_location(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_explicit_uniform_location = false;
/* GL_ARB_fragment_coord_conventions */
bool __loadGL_ARB_fragment_coord_conventions(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_fragment_coord_conventions = false;
/* GL_ARB_fragment_layer_viewport */
bool __loadGL_ARB_fragment_layer_viewport(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_fragment_layer_viewport = false;
/* GL_ARB_fragment_program */
PFNGLBINDPROGRAMARBPROC __glBindProgramARB = nullptr; void APIENTRY glBindProgramARB (GLenum target, GLuint program) { if (__glBindProgramARB != 0) (__glBindProgramARB)(target, program);  }
PFNGLDELETEPROGRAMSARBPROC __glDeleteProgramsARB = nullptr; void APIENTRY glDeleteProgramsARB (GLsizei n, const GLuint *programs) { if (__glDeleteProgramsARB != 0) (__glDeleteProgramsARB)(n, programs);  }
PFNGLGENPROGRAMSARBPROC __glGenProgramsARB = nullptr; void APIENTRY glGenProgramsARB (GLsizei n, GLuint *programs) { if (__glGenProgramsARB != 0) (__glGenProgramsARB)(n, programs);  }
PFNGLGETPROGRAMENVPARAMETERDVARBPROC __glGetProgramEnvParameterdvARB = nullptr; void APIENTRY glGetProgramEnvParameterdvARB (GLenum target, GLuint index, GLdouble *params) { if (__glGetProgramEnvParameterdvARB != 0) (__glGetProgramEnvParameterdvARB)(target, index, params);  }
PFNGLGETPROGRAMENVPARAMETERFVARBPROC __glGetProgramEnvParameterfvARB = nullptr; void APIENTRY glGetProgramEnvParameterfvARB (GLenum target, GLuint index, GLfloat *params) { if (__glGetProgramEnvParameterfvARB != 0) (__glGetProgramEnvParameterfvARB)(target, index, params);  }
PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC __glGetProgramLocalParameterdvARB = nullptr; void APIENTRY glGetProgramLocalParameterdvARB (GLenum target, GLuint index, GLdouble *params) { if (__glGetProgramLocalParameterdvARB != 0) (__glGetProgramLocalParameterdvARB)(target, index, params);  }
PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC __glGetProgramLocalParameterfvARB = nullptr; void APIENTRY glGetProgramLocalParameterfvARB (GLenum target, GLuint index, GLfloat *params) { if (__glGetProgramLocalParameterfvARB != 0) (__glGetProgramLocalParameterfvARB)(target, index, params);  }
PFNGLGETPROGRAMSTRINGARBPROC __glGetProgramStringARB = nullptr; void APIENTRY glGetProgramStringARB (GLenum target, GLenum pname, void *string) { if (__glGetProgramStringARB != 0) (__glGetProgramStringARB)(target, pname, string);  }
PFNGLGETPROGRAMIVARBPROC __glGetProgramivARB = nullptr; void APIENTRY glGetProgramivARB (GLenum target, GLenum pname, GLint *params) { if (__glGetProgramivARB != 0) (__glGetProgramivARB)(target, pname, params);  }
PFNGLISPROGRAMARBPROC __glIsProgramARB = nullptr; GLboolean APIENTRY glIsProgramARB (GLuint program) { if (__glIsProgramARB != 0) return (__glIsProgramARB)(program); return 0; }
PFNGLPROGRAMENVPARAMETER4DARBPROC __glProgramEnvParameter4dARB = nullptr; void APIENTRY glProgramEnvParameter4dARB (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { if (__glProgramEnvParameter4dARB != 0) (__glProgramEnvParameter4dARB)(target, index, x, y, z, w);  }
PFNGLPROGRAMENVPARAMETER4DVARBPROC __glProgramEnvParameter4dvARB = nullptr; void APIENTRY glProgramEnvParameter4dvARB (GLenum target, GLuint index, const GLdouble *params) { if (__glProgramEnvParameter4dvARB != 0) (__glProgramEnvParameter4dvARB)(target, index, params);  }
PFNGLPROGRAMENVPARAMETER4FARBPROC __glProgramEnvParameter4fARB = nullptr; void APIENTRY glProgramEnvParameter4fARB (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) { if (__glProgramEnvParameter4fARB != 0) (__glProgramEnvParameter4fARB)(target, index, x, y, z, w);  }
PFNGLPROGRAMENVPARAMETER4FVARBPROC __glProgramEnvParameter4fvARB = nullptr; void APIENTRY glProgramEnvParameter4fvARB (GLenum target, GLuint index, const GLfloat *params) { if (__glProgramEnvParameter4fvARB != 0) (__glProgramEnvParameter4fvARB)(target, index, params);  }
PFNGLPROGRAMLOCALPARAMETER4DARBPROC __glProgramLocalParameter4dARB = nullptr; void APIENTRY glProgramLocalParameter4dARB (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { if (__glProgramLocalParameter4dARB != 0) (__glProgramLocalParameter4dARB)(target, index, x, y, z, w);  }
PFNGLPROGRAMLOCALPARAMETER4DVARBPROC __glProgramLocalParameter4dvARB = nullptr; void APIENTRY glProgramLocalParameter4dvARB (GLenum target, GLuint index, const GLdouble *params) { if (__glProgramLocalParameter4dvARB != 0) (__glProgramLocalParameter4dvARB)(target, index, params);  }
PFNGLPROGRAMLOCALPARAMETER4FARBPROC __glProgramLocalParameter4fARB = nullptr; void APIENTRY glProgramLocalParameter4fARB (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) { if (__glProgramLocalParameter4fARB != 0) (__glProgramLocalParameter4fARB)(target, index, x, y, z, w);  }
PFNGLPROGRAMLOCALPARAMETER4FVARBPROC __glProgramLocalParameter4fvARB = nullptr; void APIENTRY glProgramLocalParameter4fvARB (GLenum target, GLuint index, const GLfloat *params) { if (__glProgramLocalParameter4fvARB != 0) (__glProgramLocalParameter4fvARB)(target, index, params);  }
PFNGLPROGRAMSTRINGARBPROC __glProgramStringARB = nullptr; void APIENTRY glProgramStringARB (GLenum target, GLenum format, GLsizei len, const void *string) { if (__glProgramStringARB != 0) (__glProgramStringARB)(target, format, len, string);  }
bool __loadGL_ARB_fragment_program(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glBindProgramARB = (PFNGLBINDPROGRAMARBPROC)proc((const GLubyte*)"glBindProgramARB")) != nullptr) || r;
    r = ((__glDeleteProgramsARB = (PFNGLDELETEPROGRAMSARBPROC)proc((const GLubyte*)"glDeleteProgramsARB")) != nullptr) || r;
    r = ((__glGenProgramsARB = (PFNGLGENPROGRAMSARBPROC)proc((const GLubyte*)"glGenProgramsARB")) != nullptr) || r;
    r = ((__glGetProgramEnvParameterdvARB = (PFNGLGETPROGRAMENVPARAMETERDVARBPROC)proc((const GLubyte*)"glGetProgramEnvParameterdvARB")) != nullptr) || r;
    r = ((__glGetProgramEnvParameterfvARB = (PFNGLGETPROGRAMENVPARAMETERFVARBPROC)proc((const GLubyte*)"glGetProgramEnvParameterfvARB")) != nullptr) || r;
    r = ((__glGetProgramLocalParameterdvARB = (PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC)proc((const GLubyte*)"glGetProgramLocalParameterdvARB")) != nullptr) || r;
    r = ((__glGetProgramLocalParameterfvARB = (PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC)proc((const GLubyte*)"glGetProgramLocalParameterfvARB")) != nullptr) || r;
    r = ((__glGetProgramStringARB = (PFNGLGETPROGRAMSTRINGARBPROC)proc((const GLubyte*)"glGetProgramStringARB")) != nullptr) || r;
    r = ((__glGetProgramivARB = (PFNGLGETPROGRAMIVARBPROC)proc((const GLubyte*)"glGetProgramivARB")) != nullptr) || r;
    r = ((__glIsProgramARB = (PFNGLISPROGRAMARBPROC)proc((const GLubyte*)"glIsProgramARB")) != nullptr) || r;
    r = ((__glProgramEnvParameter4dARB = (PFNGLPROGRAMENVPARAMETER4DARBPROC)proc((const GLubyte*)"glProgramEnvParameter4dARB")) != nullptr) || r;
    r = ((__glProgramEnvParameter4dvARB = (PFNGLPROGRAMENVPARAMETER4DVARBPROC)proc((const GLubyte*)"glProgramEnvParameter4dvARB")) != nullptr) || r;
    r = ((__glProgramEnvParameter4fARB = (PFNGLPROGRAMENVPARAMETER4FARBPROC)proc((const GLubyte*)"glProgramEnvParameter4fARB")) != nullptr) || r;
    r = ((__glProgramEnvParameter4fvARB = (PFNGLPROGRAMENVPARAMETER4FVARBPROC)proc((const GLubyte*)"glProgramEnvParameter4fvARB")) != nullptr) || r;
    r = ((__glProgramLocalParameter4dARB = (PFNGLPROGRAMLOCALPARAMETER4DARBPROC)proc((const GLubyte*)"glProgramLocalParameter4dARB")) != nullptr) || r;
    r = ((__glProgramLocalParameter4dvARB = (PFNGLPROGRAMLOCALPARAMETER4DVARBPROC)proc((const GLubyte*)"glProgramLocalParameter4dvARB")) != nullptr) || r;
    r = ((__glProgramLocalParameter4fARB = (PFNGLPROGRAMLOCALPARAMETER4FARBPROC)proc((const GLubyte*)"glProgramLocalParameter4fARB")) != nullptr) || r;
    r = ((__glProgramLocalParameter4fvARB = (PFNGLPROGRAMLOCALPARAMETER4FVARBPROC)proc((const GLubyte*)"glProgramLocalParameter4fvARB")) != nullptr) || r;
    r = ((__glProgramStringARB = (PFNGLPROGRAMSTRINGARBPROC)proc((const GLubyte*)"glProgramStringARB")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_ARB_fragment_program = false;
/* GL_ARB_fragment_program_shadow */
bool __loadGL_ARB_fragment_program_shadow(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_fragment_program_shadow = false;
/* GL_ARB_fragment_shader */
bool __loadGL_ARB_fragment_shader(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_fragment_shader = false;
/* GL_ARB_fragment_shader_interlock */
bool __loadGL_ARB_fragment_shader_interlock(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_fragment_shader_interlock = false;
/* GL_ARB_framebuffer_no_attachments */
bool __loadGL_ARB_framebuffer_no_attachments(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_framebuffer_no_attachments = false;
/* GL_ARB_framebuffer_object */
bool __loadGL_ARB_framebuffer_object(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_framebuffer_object = false;
/* GL_ARB_framebuffer_sRGB */
bool __loadGL_ARB_framebuffer_sRGB(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_framebuffer_sRGB = false;
/* GL_ARB_geometry_shader4 */
PFNGLFRAMEBUFFERTEXTUREARBPROC __glFramebufferTextureARB = nullptr; void APIENTRY glFramebufferTextureARB (GLenum target, GLenum attachment, GLuint texture, GLint level) { if (__glFramebufferTextureARB != 0) (__glFramebufferTextureARB)(target, attachment, texture, level);  }
PFNGLFRAMEBUFFERTEXTUREFACEARBPROC __glFramebufferTextureFaceARB = nullptr; void APIENTRY glFramebufferTextureFaceARB (GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face) { if (__glFramebufferTextureFaceARB != 0) (__glFramebufferTextureFaceARB)(target, attachment, texture, level, face);  }
PFNGLFRAMEBUFFERTEXTURELAYERARBPROC __glFramebufferTextureLayerARB = nullptr; void APIENTRY glFramebufferTextureLayerARB (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer) { if (__glFramebufferTextureLayerARB != 0) (__glFramebufferTextureLayerARB)(target, attachment, texture, level, layer);  }
PFNGLPROGRAMPARAMETERIARBPROC __glProgramParameteriARB = nullptr; void APIENTRY glProgramParameteriARB (GLuint program, GLenum pname, GLint value) { if (__glProgramParameteriARB != 0) (__glProgramParameteriARB)(program, pname, value);  }
bool __loadGL_ARB_geometry_shader4(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glFramebufferTextureARB = (PFNGLFRAMEBUFFERTEXTUREARBPROC)proc((const GLubyte*)"glFramebufferTextureARB")) != nullptr) || r;
    r = ((__glFramebufferTextureFaceARB = (PFNGLFRAMEBUFFERTEXTUREFACEARBPROC)proc((const GLubyte*)"glFramebufferTextureFaceARB")) != nullptr) || r;
    r = ((__glFramebufferTextureLayerARB = (PFNGLFRAMEBUFFERTEXTURELAYERARBPROC)proc((const GLubyte*)"glFramebufferTextureLayerARB")) != nullptr) || r;
    r = ((__glProgramParameteriARB = (PFNGLPROGRAMPARAMETERIARBPROC)proc((const GLubyte*)"glProgramParameteriARB")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_ARB_geometry_shader4 = false;
/* GL_ARB_get_program_binary */
bool __loadGL_ARB_get_program_binary(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_get_program_binary = false;
/* GL_ARB_get_texture_sub_image */
bool __loadGL_ARB_get_texture_sub_image(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_get_texture_sub_image = false;
/* GL_ARB_gpu_shader5 */
bool __loadGL_ARB_gpu_shader5(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_gpu_shader5 = false;
/* GL_ARB_gpu_shader_fp64 */
bool __loadGL_ARB_gpu_shader_fp64(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_gpu_shader_fp64 = false;
/* GL_ARB_gpu_shader_int64 */
PFNGLGETUNIFORMI64VARBPROC __glGetUniformi64vARB = nullptr; void APIENTRY glGetUniformi64vARB (GLuint program, GLint location, GLint64 *params) { if (__glGetUniformi64vARB != 0) (__glGetUniformi64vARB)(program, location, params);  }
PFNGLGETUNIFORMUI64VARBPROC __glGetUniformui64vARB = nullptr; void APIENTRY glGetUniformui64vARB (GLuint program, GLint location, GLuint64 *params) { if (__glGetUniformui64vARB != 0) (__glGetUniformui64vARB)(program, location, params);  }
PFNGLGETNUNIFORMI64VARBPROC __glGetnUniformi64vARB = nullptr; void APIENTRY glGetnUniformi64vARB (GLuint program, GLint location, GLsizei bufSize, GLint64 *params) { if (__glGetnUniformi64vARB != 0) (__glGetnUniformi64vARB)(program, location, bufSize, params);  }
PFNGLGETNUNIFORMUI64VARBPROC __glGetnUniformui64vARB = nullptr; void APIENTRY glGetnUniformui64vARB (GLuint program, GLint location, GLsizei bufSize, GLuint64 *params) { if (__glGetnUniformui64vARB != 0) (__glGetnUniformui64vARB)(program, location, bufSize, params);  }
PFNGLPROGRAMUNIFORM1I64ARBPROC __glProgramUniform1i64ARB = nullptr; void APIENTRY glProgramUniform1i64ARB (GLuint program, GLint location, GLint64 x) { if (__glProgramUniform1i64ARB != 0) (__glProgramUniform1i64ARB)(program, location, x);  }
PFNGLPROGRAMUNIFORM1I64VARBPROC __glProgramUniform1i64vARB = nullptr; void APIENTRY glProgramUniform1i64vARB (GLuint program, GLint location, GLsizei count, const GLint64 *value) { if (__glProgramUniform1i64vARB != 0) (__glProgramUniform1i64vARB)(program, location, count, value);  }
PFNGLPROGRAMUNIFORM1UI64ARBPROC __glProgramUniform1ui64ARB = nullptr; void APIENTRY glProgramUniform1ui64ARB (GLuint program, GLint location, GLuint64 x) { if (__glProgramUniform1ui64ARB != 0) (__glProgramUniform1ui64ARB)(program, location, x);  }
PFNGLPROGRAMUNIFORM1UI64VARBPROC __glProgramUniform1ui64vARB = nullptr; void APIENTRY glProgramUniform1ui64vARB (GLuint program, GLint location, GLsizei count, const GLuint64 *value) { if (__glProgramUniform1ui64vARB != 0) (__glProgramUniform1ui64vARB)(program, location, count, value);  }
PFNGLPROGRAMUNIFORM2I64ARBPROC __glProgramUniform2i64ARB = nullptr; void APIENTRY glProgramUniform2i64ARB (GLuint program, GLint location, GLint64 x, GLint64 y) { if (__glProgramUniform2i64ARB != 0) (__glProgramUniform2i64ARB)(program, location, x, y);  }
PFNGLPROGRAMUNIFORM2I64VARBPROC __glProgramUniform2i64vARB = nullptr; void APIENTRY glProgramUniform2i64vARB (GLuint program, GLint location, GLsizei count, const GLint64 *value) { if (__glProgramUniform2i64vARB != 0) (__glProgramUniform2i64vARB)(program, location, count, value);  }
PFNGLPROGRAMUNIFORM2UI64ARBPROC __glProgramUniform2ui64ARB = nullptr; void APIENTRY glProgramUniform2ui64ARB (GLuint program, GLint location, GLuint64 x, GLuint64 y) { if (__glProgramUniform2ui64ARB != 0) (__glProgramUniform2ui64ARB)(program, location, x, y);  }
PFNGLPROGRAMUNIFORM2UI64VARBPROC __glProgramUniform2ui64vARB = nullptr; void APIENTRY glProgramUniform2ui64vARB (GLuint program, GLint location, GLsizei count, const GLuint64 *value) { if (__glProgramUniform2ui64vARB != 0) (__glProgramUniform2ui64vARB)(program, location, count, value);  }
PFNGLPROGRAMUNIFORM3I64ARBPROC __glProgramUniform3i64ARB = nullptr; void APIENTRY glProgramUniform3i64ARB (GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z) { if (__glProgramUniform3i64ARB != 0) (__glProgramUniform3i64ARB)(program, location, x, y, z);  }
PFNGLPROGRAMUNIFORM3I64VARBPROC __glProgramUniform3i64vARB = nullptr; void APIENTRY glProgramUniform3i64vARB (GLuint program, GLint location, GLsizei count, const GLint64 *value) { if (__glProgramUniform3i64vARB != 0) (__glProgramUniform3i64vARB)(program, location, count, value);  }
PFNGLPROGRAMUNIFORM3UI64ARBPROC __glProgramUniform3ui64ARB = nullptr; void APIENTRY glProgramUniform3ui64ARB (GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z) { if (__glProgramUniform3ui64ARB != 0) (__glProgramUniform3ui64ARB)(program, location, x, y, z);  }
PFNGLPROGRAMUNIFORM3UI64VARBPROC __glProgramUniform3ui64vARB = nullptr; void APIENTRY glProgramUniform3ui64vARB (GLuint program, GLint location, GLsizei count, const GLuint64 *value) { if (__glProgramUniform3ui64vARB != 0) (__glProgramUniform3ui64vARB)(program, location, count, value);  }
PFNGLPROGRAMUNIFORM4I64ARBPROC __glProgramUniform4i64ARB = nullptr; void APIENTRY glProgramUniform4i64ARB (GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w) { if (__glProgramUniform4i64ARB != 0) (__glProgramUniform4i64ARB)(program, location, x, y, z, w);  }
PFNGLPROGRAMUNIFORM4I64VARBPROC __glProgramUniform4i64vARB = nullptr; void APIENTRY glProgramUniform4i64vARB (GLuint program, GLint location, GLsizei count, const GLint64 *value) { if (__glProgramUniform4i64vARB != 0) (__glProgramUniform4i64vARB)(program, location, count, value);  }
PFNGLPROGRAMUNIFORM4UI64ARBPROC __glProgramUniform4ui64ARB = nullptr; void APIENTRY glProgramUniform4ui64ARB (GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w) { if (__glProgramUniform4ui64ARB != 0) (__glProgramUniform4ui64ARB)(program, location, x, y, z, w);  }
PFNGLPROGRAMUNIFORM4UI64VARBPROC __glProgramUniform4ui64vARB = nullptr; void APIENTRY glProgramUniform4ui64vARB (GLuint program, GLint location, GLsizei count, const GLuint64 *value) { if (__glProgramUniform4ui64vARB != 0) (__glProgramUniform4ui64vARB)(program, location, count, value);  }
PFNGLUNIFORM1I64ARBPROC __glUniform1i64ARB = nullptr; void APIENTRY glUniform1i64ARB (GLint location, GLint64 x) { if (__glUniform1i64ARB != 0) (__glUniform1i64ARB)(location, x);  }
PFNGLUNIFORM1I64VARBPROC __glUniform1i64vARB = nullptr; void APIENTRY glUniform1i64vARB (GLint location, GLsizei count, const GLint64 *value) { if (__glUniform1i64vARB != 0) (__glUniform1i64vARB)(location, count, value);  }
PFNGLUNIFORM1UI64ARBPROC __glUniform1ui64ARB = nullptr; void APIENTRY glUniform1ui64ARB (GLint location, GLuint64 x) { if (__glUniform1ui64ARB != 0) (__glUniform1ui64ARB)(location, x);  }
PFNGLUNIFORM1UI64VARBPROC __glUniform1ui64vARB = nullptr; void APIENTRY glUniform1ui64vARB (GLint location, GLsizei count, const GLuint64 *value) { if (__glUniform1ui64vARB != 0) (__glUniform1ui64vARB)(location, count, value);  }
PFNGLUNIFORM2I64ARBPROC __glUniform2i64ARB = nullptr; void APIENTRY glUniform2i64ARB (GLint location, GLint64 x, GLint64 y) { if (__glUniform2i64ARB != 0) (__glUniform2i64ARB)(location, x, y);  }
PFNGLUNIFORM2I64VARBPROC __glUniform2i64vARB = nullptr; void APIENTRY glUniform2i64vARB (GLint location, GLsizei count, const GLint64 *value) { if (__glUniform2i64vARB != 0) (__glUniform2i64vARB)(location, count, value);  }
PFNGLUNIFORM2UI64ARBPROC __glUniform2ui64ARB = nullptr; void APIENTRY glUniform2ui64ARB (GLint location, GLuint64 x, GLuint64 y) { if (__glUniform2ui64ARB != 0) (__glUniform2ui64ARB)(location, x, y);  }
PFNGLUNIFORM2UI64VARBPROC __glUniform2ui64vARB = nullptr; void APIENTRY glUniform2ui64vARB (GLint location, GLsizei count, const GLuint64 *value) { if (__glUniform2ui64vARB != 0) (__glUniform2ui64vARB)(location, count, value);  }
PFNGLUNIFORM3I64ARBPROC __glUniform3i64ARB = nullptr; void APIENTRY glUniform3i64ARB (GLint location, GLint64 x, GLint64 y, GLint64 z) { if (__glUniform3i64ARB != 0) (__glUniform3i64ARB)(location, x, y, z);  }
PFNGLUNIFORM3I64VARBPROC __glUniform3i64vARB = nullptr; void APIENTRY glUniform3i64vARB (GLint location, GLsizei count, const GLint64 *value) { if (__glUniform3i64vARB != 0) (__glUniform3i64vARB)(location, count, value);  }
PFNGLUNIFORM3UI64ARBPROC __glUniform3ui64ARB = nullptr; void APIENTRY glUniform3ui64ARB (GLint location, GLuint64 x, GLuint64 y, GLuint64 z) { if (__glUniform3ui64ARB != 0) (__glUniform3ui64ARB)(location, x, y, z);  }
PFNGLUNIFORM3UI64VARBPROC __glUniform3ui64vARB = nullptr; void APIENTRY glUniform3ui64vARB (GLint location, GLsizei count, const GLuint64 *value) { if (__glUniform3ui64vARB != 0) (__glUniform3ui64vARB)(location, count, value);  }
PFNGLUNIFORM4I64ARBPROC __glUniform4i64ARB = nullptr; void APIENTRY glUniform4i64ARB (GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w) { if (__glUniform4i64ARB != 0) (__glUniform4i64ARB)(location, x, y, z, w);  }
PFNGLUNIFORM4I64VARBPROC __glUniform4i64vARB = nullptr; void APIENTRY glUniform4i64vARB (GLint location, GLsizei count, const GLint64 *value) { if (__glUniform4i64vARB != 0) (__glUniform4i64vARB)(location, count, value);  }
PFNGLUNIFORM4UI64ARBPROC __glUniform4ui64ARB = nullptr; void APIENTRY glUniform4ui64ARB (GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w) { if (__glUniform4ui64ARB != 0) (__glUniform4ui64ARB)(location, x, y, z, w);  }
PFNGLUNIFORM4UI64VARBPROC __glUniform4ui64vARB = nullptr; void APIENTRY glUniform4ui64vARB (GLint location, GLsizei count, const GLuint64 *value) { if (__glUniform4ui64vARB != 0) (__glUniform4ui64vARB)(location, count, value);  }
bool __loadGL_ARB_gpu_shader_int64(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glGetUniformi64vARB = (PFNGLGETUNIFORMI64VARBPROC)proc((const GLubyte*)"glGetUniformi64vARB")) != nullptr) || r;
    r = ((__glGetUniformui64vARB = (PFNGLGETUNIFORMUI64VARBPROC)proc((const GLubyte*)"glGetUniformui64vARB")) != nullptr) || r;
    r = ((__glGetnUniformi64vARB = (PFNGLGETNUNIFORMI64VARBPROC)proc((const GLubyte*)"glGetnUniformi64vARB")) != nullptr) || r;
    r = ((__glGetnUniformui64vARB = (PFNGLGETNUNIFORMUI64VARBPROC)proc((const GLubyte*)"glGetnUniformui64vARB")) != nullptr) || r;
    r = ((__glProgramUniform1i64ARB = (PFNGLPROGRAMUNIFORM1I64ARBPROC)proc((const GLubyte*)"glProgramUniform1i64ARB")) != nullptr) || r;
    r = ((__glProgramUniform1i64vARB = (PFNGLPROGRAMUNIFORM1I64VARBPROC)proc((const GLubyte*)"glProgramUniform1i64vARB")) != nullptr) || r;
    r = ((__glProgramUniform1ui64ARB = (PFNGLPROGRAMUNIFORM1UI64ARBPROC)proc((const GLubyte*)"glProgramUniform1ui64ARB")) != nullptr) || r;
    r = ((__glProgramUniform1ui64vARB = (PFNGLPROGRAMUNIFORM1UI64VARBPROC)proc((const GLubyte*)"glProgramUniform1ui64vARB")) != nullptr) || r;
    r = ((__glProgramUniform2i64ARB = (PFNGLPROGRAMUNIFORM2I64ARBPROC)proc((const GLubyte*)"glProgramUniform2i64ARB")) != nullptr) || r;
    r = ((__glProgramUniform2i64vARB = (PFNGLPROGRAMUNIFORM2I64VARBPROC)proc((const GLubyte*)"glProgramUniform2i64vARB")) != nullptr) || r;
    r = ((__glProgramUniform2ui64ARB = (PFNGLPROGRAMUNIFORM2UI64ARBPROC)proc((const GLubyte*)"glProgramUniform2ui64ARB")) != nullptr) || r;
    r = ((__glProgramUniform2ui64vARB = (PFNGLPROGRAMUNIFORM2UI64VARBPROC)proc((const GLubyte*)"glProgramUniform2ui64vARB")) != nullptr) || r;
    r = ((__glProgramUniform3i64ARB = (PFNGLPROGRAMUNIFORM3I64ARBPROC)proc((const GLubyte*)"glProgramUniform3i64ARB")) != nullptr) || r;
    r = ((__glProgramUniform3i64vARB = (PFNGLPROGRAMUNIFORM3I64VARBPROC)proc((const GLubyte*)"glProgramUniform3i64vARB")) != nullptr) || r;
    r = ((__glProgramUniform3ui64ARB = (PFNGLPROGRAMUNIFORM3UI64ARBPROC)proc((const GLubyte*)"glProgramUniform3ui64ARB")) != nullptr) || r;
    r = ((__glProgramUniform3ui64vARB = (PFNGLPROGRAMUNIFORM3UI64VARBPROC)proc((const GLubyte*)"glProgramUniform3ui64vARB")) != nullptr) || r;
    r = ((__glProgramUniform4i64ARB = (PFNGLPROGRAMUNIFORM4I64ARBPROC)proc((const GLubyte*)"glProgramUniform4i64ARB")) != nullptr) || r;
    r = ((__glProgramUniform4i64vARB = (PFNGLPROGRAMUNIFORM4I64VARBPROC)proc((const GLubyte*)"glProgramUniform4i64vARB")) != nullptr) || r;
    r = ((__glProgramUniform4ui64ARB = (PFNGLPROGRAMUNIFORM4UI64ARBPROC)proc((const GLubyte*)"glProgramUniform4ui64ARB")) != nullptr) || r;
    r = ((__glProgramUniform4ui64vARB = (PFNGLPROGRAMUNIFORM4UI64VARBPROC)proc((const GLubyte*)"glProgramUniform4ui64vARB")) != nullptr) || r;
    r = ((__glUniform1i64ARB = (PFNGLUNIFORM1I64ARBPROC)proc((const GLubyte*)"glUniform1i64ARB")) != nullptr) || r;
    r = ((__glUniform1i64vARB = (PFNGLUNIFORM1I64VARBPROC)proc((const GLubyte*)"glUniform1i64vARB")) != nullptr) || r;
    r = ((__glUniform1ui64ARB = (PFNGLUNIFORM1UI64ARBPROC)proc((const GLubyte*)"glUniform1ui64ARB")) != nullptr) || r;
    r = ((__glUniform1ui64vARB = (PFNGLUNIFORM1UI64VARBPROC)proc((const GLubyte*)"glUniform1ui64vARB")) != nullptr) || r;
    r = ((__glUniform2i64ARB = (PFNGLUNIFORM2I64ARBPROC)proc((const GLubyte*)"glUniform2i64ARB")) != nullptr) || r;
    r = ((__glUniform2i64vARB = (PFNGLUNIFORM2I64VARBPROC)proc((const GLubyte*)"glUniform2i64vARB")) != nullptr) || r;
    r = ((__glUniform2ui64ARB = (PFNGLUNIFORM2UI64ARBPROC)proc((const GLubyte*)"glUniform2ui64ARB")) != nullptr) || r;
    r = ((__glUniform2ui64vARB = (PFNGLUNIFORM2UI64VARBPROC)proc((const GLubyte*)"glUniform2ui64vARB")) != nullptr) || r;
    r = ((__glUniform3i64ARB = (PFNGLUNIFORM3I64ARBPROC)proc((const GLubyte*)"glUniform3i64ARB")) != nullptr) || r;
    r = ((__glUniform3i64vARB = (PFNGLUNIFORM3I64VARBPROC)proc((const GLubyte*)"glUniform3i64vARB")) != nullptr) || r;
    r = ((__glUniform3ui64ARB = (PFNGLUNIFORM3UI64ARBPROC)proc((const GLubyte*)"glUniform3ui64ARB")) != nullptr) || r;
    r = ((__glUniform3ui64vARB = (PFNGLUNIFORM3UI64VARBPROC)proc((const GLubyte*)"glUniform3ui64vARB")) != nullptr) || r;
    r = ((__glUniform4i64ARB = (PFNGLUNIFORM4I64ARBPROC)proc((const GLubyte*)"glUniform4i64ARB")) != nullptr) || r;
    r = ((__glUniform4i64vARB = (PFNGLUNIFORM4I64VARBPROC)proc((const GLubyte*)"glUniform4i64vARB")) != nullptr) || r;
    r = ((__glUniform4ui64ARB = (PFNGLUNIFORM4UI64ARBPROC)proc((const GLubyte*)"glUniform4ui64ARB")) != nullptr) || r;
    r = ((__glUniform4ui64vARB = (PFNGLUNIFORM4UI64VARBPROC)proc((const GLubyte*)"glUniform4ui64vARB")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_ARB_gpu_shader_int64 = false;
/* GL_ARB_half_float_pixel */
bool __loadGL_ARB_half_float_pixel(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_half_float_pixel = false;
/* GL_ARB_half_float_vertex */
bool __loadGL_ARB_half_float_vertex(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_half_float_vertex = false;
/* GL_ARB_imaging */
PFNGLCOLORSUBTABLEPROC __glColorSubTable = nullptr; void APIENTRY glColorSubTable (GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const void *data) { if (__glColorSubTable != 0) (__glColorSubTable)(target, start, count, format, type, data);  }
PFNGLCOLORTABLEPROC __glColorTable = nullptr; void APIENTRY glColorTable (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *table) { if (__glColorTable != 0) (__glColorTable)(target, internalformat, width, format, type, table);  }
PFNGLCOLORTABLEPARAMETERFVPROC __glColorTableParameterfv = nullptr; void APIENTRY glColorTableParameterfv (GLenum target, GLenum pname, const GLfloat *params) { if (__glColorTableParameterfv != 0) (__glColorTableParameterfv)(target, pname, params);  }
PFNGLCOLORTABLEPARAMETERIVPROC __glColorTableParameteriv = nullptr; void APIENTRY glColorTableParameteriv (GLenum target, GLenum pname, const GLint *params) { if (__glColorTableParameteriv != 0) (__glColorTableParameteriv)(target, pname, params);  }
PFNGLCONVOLUTIONFILTER1DPROC __glConvolutionFilter1D = nullptr; void APIENTRY glConvolutionFilter1D (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *image) { if (__glConvolutionFilter1D != 0) (__glConvolutionFilter1D)(target, internalformat, width, format, type, image);  }
PFNGLCONVOLUTIONFILTER2DPROC __glConvolutionFilter2D = nullptr; void APIENTRY glConvolutionFilter2D (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *image) { if (__glConvolutionFilter2D != 0) (__glConvolutionFilter2D)(target, internalformat, width, height, format, type, image);  }
PFNGLCONVOLUTIONPARAMETERFPROC __glConvolutionParameterf = nullptr; void APIENTRY glConvolutionParameterf (GLenum target, GLenum pname, GLfloat params) { if (__glConvolutionParameterf != 0) (__glConvolutionParameterf)(target, pname, params);  }
PFNGLCONVOLUTIONPARAMETERFVPROC __glConvolutionParameterfv = nullptr; void APIENTRY glConvolutionParameterfv (GLenum target, GLenum pname, const GLfloat *params) { if (__glConvolutionParameterfv != 0) (__glConvolutionParameterfv)(target, pname, params);  }
PFNGLCONVOLUTIONPARAMETERIPROC __glConvolutionParameteri = nullptr; void APIENTRY glConvolutionParameteri (GLenum target, GLenum pname, GLint params) { if (__glConvolutionParameteri != 0) (__glConvolutionParameteri)(target, pname, params);  }
PFNGLCONVOLUTIONPARAMETERIVPROC __glConvolutionParameteriv = nullptr; void APIENTRY glConvolutionParameteriv (GLenum target, GLenum pname, const GLint *params) { if (__glConvolutionParameteriv != 0) (__glConvolutionParameteriv)(target, pname, params);  }
PFNGLCOPYCOLORSUBTABLEPROC __glCopyColorSubTable = nullptr; void APIENTRY glCopyColorSubTable (GLenum target, GLsizei start, GLint x, GLint y, GLsizei width) { if (__glCopyColorSubTable != 0) (__glCopyColorSubTable)(target, start, x, y, width);  }
PFNGLCOPYCOLORTABLEPROC __glCopyColorTable = nullptr; void APIENTRY glCopyColorTable (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width) { if (__glCopyColorTable != 0) (__glCopyColorTable)(target, internalformat, x, y, width);  }
PFNGLCOPYCONVOLUTIONFILTER1DPROC __glCopyConvolutionFilter1D = nullptr; void APIENTRY glCopyConvolutionFilter1D (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width) { if (__glCopyConvolutionFilter1D != 0) (__glCopyConvolutionFilter1D)(target, internalformat, x, y, width);  }
PFNGLCOPYCONVOLUTIONFILTER2DPROC __glCopyConvolutionFilter2D = nullptr; void APIENTRY glCopyConvolutionFilter2D (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height) { if (__glCopyConvolutionFilter2D != 0) (__glCopyConvolutionFilter2D)(target, internalformat, x, y, width, height);  }
PFNGLGETCOLORTABLEPROC __glGetColorTable = nullptr; void APIENTRY glGetColorTable (GLenum target, GLenum format, GLenum type, void *table) { if (__glGetColorTable != 0) (__glGetColorTable)(target, format, type, table);  }
PFNGLGETCOLORTABLEPARAMETERFVPROC __glGetColorTableParameterfv = nullptr; void APIENTRY glGetColorTableParameterfv (GLenum target, GLenum pname, GLfloat *params) { if (__glGetColorTableParameterfv != 0) (__glGetColorTableParameterfv)(target, pname, params);  }
PFNGLGETCOLORTABLEPARAMETERIVPROC __glGetColorTableParameteriv = nullptr; void APIENTRY glGetColorTableParameteriv (GLenum target, GLenum pname, GLint *params) { if (__glGetColorTableParameteriv != 0) (__glGetColorTableParameteriv)(target, pname, params);  }
PFNGLGETCONVOLUTIONFILTERPROC __glGetConvolutionFilter = nullptr; void APIENTRY glGetConvolutionFilter (GLenum target, GLenum format, GLenum type, void *image) { if (__glGetConvolutionFilter != 0) (__glGetConvolutionFilter)(target, format, type, image);  }
PFNGLGETCONVOLUTIONPARAMETERFVPROC __glGetConvolutionParameterfv = nullptr; void APIENTRY glGetConvolutionParameterfv (GLenum target, GLenum pname, GLfloat *params) { if (__glGetConvolutionParameterfv != 0) (__glGetConvolutionParameterfv)(target, pname, params);  }
PFNGLGETCONVOLUTIONPARAMETERIVPROC __glGetConvolutionParameteriv = nullptr; void APIENTRY glGetConvolutionParameteriv (GLenum target, GLenum pname, GLint *params) { if (__glGetConvolutionParameteriv != 0) (__glGetConvolutionParameteriv)(target, pname, params);  }
PFNGLGETHISTOGRAMPROC __glGetHistogram = nullptr; void APIENTRY glGetHistogram (GLenum target, GLboolean reset, GLenum format, GLenum type, void *values) { if (__glGetHistogram != 0) (__glGetHistogram)(target, reset, format, type, values);  }
PFNGLGETHISTOGRAMPARAMETERFVPROC __glGetHistogramParameterfv = nullptr; void APIENTRY glGetHistogramParameterfv (GLenum target, GLenum pname, GLfloat *params) { if (__glGetHistogramParameterfv != 0) (__glGetHistogramParameterfv)(target, pname, params);  }
PFNGLGETHISTOGRAMPARAMETERIVPROC __glGetHistogramParameteriv = nullptr; void APIENTRY glGetHistogramParameteriv (GLenum target, GLenum pname, GLint *params) { if (__glGetHistogramParameteriv != 0) (__glGetHistogramParameteriv)(target, pname, params);  }
PFNGLGETMINMAXPROC __glGetMinmax = nullptr; void APIENTRY glGetMinmax (GLenum target, GLboolean reset, GLenum format, GLenum type, void *values) { if (__glGetMinmax != 0) (__glGetMinmax)(target, reset, format, type, values);  }
PFNGLGETMINMAXPARAMETERFVPROC __glGetMinmaxParameterfv = nullptr; void APIENTRY glGetMinmaxParameterfv (GLenum target, GLenum pname, GLfloat *params) { if (__glGetMinmaxParameterfv != 0) (__glGetMinmaxParameterfv)(target, pname, params);  }
PFNGLGETMINMAXPARAMETERIVPROC __glGetMinmaxParameteriv = nullptr; void APIENTRY glGetMinmaxParameteriv (GLenum target, GLenum pname, GLint *params) { if (__glGetMinmaxParameteriv != 0) (__glGetMinmaxParameteriv)(target, pname, params);  }
PFNGLGETSEPARABLEFILTERPROC __glGetSeparableFilter = nullptr; void APIENTRY glGetSeparableFilter (GLenum target, GLenum format, GLenum type, void *row, void *column, void *span) { if (__glGetSeparableFilter != 0) (__glGetSeparableFilter)(target, format, type, row, column, span);  }
PFNGLHISTOGRAMPROC __glHistogram = nullptr; void APIENTRY glHistogram (GLenum target, GLsizei width, GLenum internalformat, GLboolean sink) { if (__glHistogram != 0) (__glHistogram)(target, width, internalformat, sink);  }
PFNGLMINMAXPROC __glMinmax = nullptr; void APIENTRY glMinmax (GLenum target, GLenum internalformat, GLboolean sink) { if (__glMinmax != 0) (__glMinmax)(target, internalformat, sink);  }
PFNGLRESETHISTOGRAMPROC __glResetHistogram = nullptr; void APIENTRY glResetHistogram (GLenum target) { if (__glResetHistogram != 0) (__glResetHistogram)(target);  }
PFNGLRESETMINMAXPROC __glResetMinmax = nullptr; void APIENTRY glResetMinmax (GLenum target) { if (__glResetMinmax != 0) (__glResetMinmax)(target);  }
PFNGLSEPARABLEFILTER2DPROC __glSeparableFilter2D = nullptr; void APIENTRY glSeparableFilter2D (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *row, const void *column) { if (__glSeparableFilter2D != 0) (__glSeparableFilter2D)(target, internalformat, width, height, format, type, row, column);  }
bool __loadGL_ARB_imaging(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glColorSubTable = (PFNGLCOLORSUBTABLEPROC)proc((const GLubyte*)"glColorSubTable")) != nullptr) || r;
    r = ((__glColorTable = (PFNGLCOLORTABLEPROC)proc((const GLubyte*)"glColorTable")) != nullptr) || r;
    r = ((__glColorTableParameterfv = (PFNGLCOLORTABLEPARAMETERFVPROC)proc((const GLubyte*)"glColorTableParameterfv")) != nullptr) || r;
    r = ((__glColorTableParameteriv = (PFNGLCOLORTABLEPARAMETERIVPROC)proc((const GLubyte*)"glColorTableParameteriv")) != nullptr) || r;
    r = ((__glConvolutionFilter1D = (PFNGLCONVOLUTIONFILTER1DPROC)proc((const GLubyte*)"glConvolutionFilter1D")) != nullptr) || r;
    r = ((__glConvolutionFilter2D = (PFNGLCONVOLUTIONFILTER2DPROC)proc((const GLubyte*)"glConvolutionFilter2D")) != nullptr) || r;
    r = ((__glConvolutionParameterf = (PFNGLCONVOLUTIONPARAMETERFPROC)proc((const GLubyte*)"glConvolutionParameterf")) != nullptr) || r;
    r = ((__glConvolutionParameterfv = (PFNGLCONVOLUTIONPARAMETERFVPROC)proc((const GLubyte*)"glConvolutionParameterfv")) != nullptr) || r;
    r = ((__glConvolutionParameteri = (PFNGLCONVOLUTIONPARAMETERIPROC)proc((const GLubyte*)"glConvolutionParameteri")) != nullptr) || r;
    r = ((__glConvolutionParameteriv = (PFNGLCONVOLUTIONPARAMETERIVPROC)proc((const GLubyte*)"glConvolutionParameteriv")) != nullptr) || r;
    r = ((__glCopyColorSubTable = (PFNGLCOPYCOLORSUBTABLEPROC)proc((const GLubyte*)"glCopyColorSubTable")) != nullptr) || r;
    r = ((__glCopyColorTable = (PFNGLCOPYCOLORTABLEPROC)proc((const GLubyte*)"glCopyColorTable")) != nullptr) || r;
    r = ((__glCopyConvolutionFilter1D = (PFNGLCOPYCONVOLUTIONFILTER1DPROC)proc((const GLubyte*)"glCopyConvolutionFilter1D")) != nullptr) || r;
    r = ((__glCopyConvolutionFilter2D = (PFNGLCOPYCONVOLUTIONFILTER2DPROC)proc((const GLubyte*)"glCopyConvolutionFilter2D")) != nullptr) || r;
    r = ((__glGetColorTable = (PFNGLGETCOLORTABLEPROC)proc((const GLubyte*)"glGetColorTable")) != nullptr) || r;
    r = ((__glGetColorTableParameterfv = (PFNGLGETCOLORTABLEPARAMETERFVPROC)proc((const GLubyte*)"glGetColorTableParameterfv")) != nullptr) || r;
    r = ((__glGetColorTableParameteriv = (PFNGLGETCOLORTABLEPARAMETERIVPROC)proc((const GLubyte*)"glGetColorTableParameteriv")) != nullptr) || r;
    r = ((__glGetConvolutionFilter = (PFNGLGETCONVOLUTIONFILTERPROC)proc((const GLubyte*)"glGetConvolutionFilter")) != nullptr) || r;
    r = ((__glGetConvolutionParameterfv = (PFNGLGETCONVOLUTIONPARAMETERFVPROC)proc((const GLubyte*)"glGetConvolutionParameterfv")) != nullptr) || r;
    r = ((__glGetConvolutionParameteriv = (PFNGLGETCONVOLUTIONPARAMETERIVPROC)proc((const GLubyte*)"glGetConvolutionParameteriv")) != nullptr) || r;
    r = ((__glGetHistogram = (PFNGLGETHISTOGRAMPROC)proc((const GLubyte*)"glGetHistogram")) != nullptr) || r;
    r = ((__glGetHistogramParameterfv = (PFNGLGETHISTOGRAMPARAMETERFVPROC)proc((const GLubyte*)"glGetHistogramParameterfv")) != nullptr) || r;
    r = ((__glGetHistogramParameteriv = (PFNGLGETHISTOGRAMPARAMETERIVPROC)proc((const GLubyte*)"glGetHistogramParameteriv")) != nullptr) || r;
    r = ((__glGetMinmax = (PFNGLGETMINMAXPROC)proc((const GLubyte*)"glGetMinmax")) != nullptr) || r;
    r = ((__glGetMinmaxParameterfv = (PFNGLGETMINMAXPARAMETERFVPROC)proc((const GLubyte*)"glGetMinmaxParameterfv")) != nullptr) || r;
    r = ((__glGetMinmaxParameteriv = (PFNGLGETMINMAXPARAMETERIVPROC)proc((const GLubyte*)"glGetMinmaxParameteriv")) != nullptr) || r;
    r = ((__glGetSeparableFilter = (PFNGLGETSEPARABLEFILTERPROC)proc((const GLubyte*)"glGetSeparableFilter")) != nullptr) || r;
    r = ((__glHistogram = (PFNGLHISTOGRAMPROC)proc((const GLubyte*)"glHistogram")) != nullptr) || r;
    r = ((__glMinmax = (PFNGLMINMAXPROC)proc((const GLubyte*)"glMinmax")) != nullptr) || r;
    r = ((__glResetHistogram = (PFNGLRESETHISTOGRAMPROC)proc((const GLubyte*)"glResetHistogram")) != nullptr) || r;
    r = ((__glResetMinmax = (PFNGLRESETMINMAXPROC)proc((const GLubyte*)"glResetMinmax")) != nullptr) || r;
    r = ((__glSeparableFilter2D = (PFNGLSEPARABLEFILTER2DPROC)proc((const GLubyte*)"glSeparableFilter2D")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_ARB_imaging = false;
/* GL_ARB_indirect_parameters */
PFNGLMULTIDRAWARRAYSINDIRECTCOUNTARBPROC __glMultiDrawArraysIndirectCountARB = nullptr; void APIENTRY glMultiDrawArraysIndirectCountARB (GLenum mode, GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride) { if (__glMultiDrawArraysIndirectCountARB != 0) (__glMultiDrawArraysIndirectCountARB)(mode, indirect, drawcount, maxdrawcount, stride);  }
PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTARBPROC __glMultiDrawElementsIndirectCountARB = nullptr; void APIENTRY glMultiDrawElementsIndirectCountARB (GLenum mode, GLenum type, GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride) { if (__glMultiDrawElementsIndirectCountARB != 0) (__glMultiDrawElementsIndirectCountARB)(mode, type, indirect, drawcount, maxdrawcount, stride);  }
bool __loadGL_ARB_indirect_parameters(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glMultiDrawArraysIndirectCountARB = (PFNGLMULTIDRAWARRAYSINDIRECTCOUNTARBPROC)proc((const GLubyte*)"glMultiDrawArraysIndirectCountARB")) != nullptr) || r;
    r = ((__glMultiDrawElementsIndirectCountARB = (PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTARBPROC)proc((const GLubyte*)"glMultiDrawElementsIndirectCountARB")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_ARB_indirect_parameters = false;
/* GL_ARB_instanced_arrays */
PFNGLVERTEXATTRIBDIVISORARBPROC __glVertexAttribDivisorARB = nullptr; void APIENTRY glVertexAttribDivisorARB (GLuint index, GLuint divisor) { if (__glVertexAttribDivisorARB != 0) (__glVertexAttribDivisorARB)(index, divisor);  }
bool __loadGL_ARB_instanced_arrays(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glVertexAttribDivisorARB = (PFNGLVERTEXATTRIBDIVISORARBPROC)proc((const GLubyte*)"glVertexAttribDivisorARB")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_ARB_instanced_arrays = false;
/* GL_ARB_internalformat_query */
bool __loadGL_ARB_internalformat_query(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_internalformat_query = false;
/* GL_ARB_internalformat_query2 */
bool __loadGL_ARB_internalformat_query2(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_internalformat_query2 = false;
/* GL_ARB_invalidate_subdata */
bool __loadGL_ARB_invalidate_subdata(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_invalidate_subdata = false;
/* GL_ARB_map_buffer_alignment */
bool __loadGL_ARB_map_buffer_alignment(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_map_buffer_alignment = false;
/* GL_ARB_map_buffer_range */
bool __loadGL_ARB_map_buffer_range(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_map_buffer_range = false;
/* GL_ARB_matrix_palette */
PFNGLCURRENTPALETTEMATRIXARBPROC __glCurrentPaletteMatrixARB = nullptr; void APIENTRY glCurrentPaletteMatrixARB (GLint index) { if (__glCurrentPaletteMatrixARB != 0) (__glCurrentPaletteMatrixARB)(index);  }
PFNGLMATRIXINDEXPOINTERARBPROC __glMatrixIndexPointerARB = nullptr; void APIENTRY glMatrixIndexPointerARB (GLint size, GLenum type, GLsizei stride, const void *pointer) { if (__glMatrixIndexPointerARB != 0) (__glMatrixIndexPointerARB)(size, type, stride, pointer);  }
PFNGLMATRIXINDEXUBVARBPROC __glMatrixIndexubvARB = nullptr; void APIENTRY glMatrixIndexubvARB (GLint size, const GLubyte *indices) { if (__glMatrixIndexubvARB != 0) (__glMatrixIndexubvARB)(size, indices);  }
PFNGLMATRIXINDEXUIVARBPROC __glMatrixIndexuivARB = nullptr; void APIENTRY glMatrixIndexuivARB (GLint size, const GLuint *indices) { if (__glMatrixIndexuivARB != 0) (__glMatrixIndexuivARB)(size, indices);  }
PFNGLMATRIXINDEXUSVARBPROC __glMatrixIndexusvARB = nullptr; void APIENTRY glMatrixIndexusvARB (GLint size, const GLushort *indices) { if (__glMatrixIndexusvARB != 0) (__glMatrixIndexusvARB)(size, indices);  }
bool __loadGL_ARB_matrix_palette(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glCurrentPaletteMatrixARB = (PFNGLCURRENTPALETTEMATRIXARBPROC)proc((const GLubyte*)"glCurrentPaletteMatrixARB")) != nullptr) || r;
    r = ((__glMatrixIndexPointerARB = (PFNGLMATRIXINDEXPOINTERARBPROC)proc((const GLubyte*)"glMatrixIndexPointerARB")) != nullptr) || r;
    r = ((__glMatrixIndexubvARB = (PFNGLMATRIXINDEXUBVARBPROC)proc((const GLubyte*)"glMatrixIndexubvARB")) != nullptr) || r;
    r = ((__glMatrixIndexuivARB = (PFNGLMATRIXINDEXUIVARBPROC)proc((const GLubyte*)"glMatrixIndexuivARB")) != nullptr) || r;
    r = ((__glMatrixIndexusvARB = (PFNGLMATRIXINDEXUSVARBPROC)proc((const GLubyte*)"glMatrixIndexusvARB")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_ARB_matrix_palette = false;
/* GL_ARB_multi_bind */
bool __loadGL_ARB_multi_bind(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_multi_bind = false;
/* GL_ARB_multi_draw_indirect */
bool __loadGL_ARB_multi_draw_indirect(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_multi_draw_indirect = false;
/* GL_ARB_multisample */
PFNGLSAMPLECOVERAGEARBPROC __glSampleCoverageARB = nullptr; void APIENTRY glSampleCoverageARB (GLfloat value, GLboolean invert) { if (__glSampleCoverageARB != 0) (__glSampleCoverageARB)(value, invert);  }
bool __loadGL_ARB_multisample(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glSampleCoverageARB = (PFNGLSAMPLECOVERAGEARBPROC)proc((const GLubyte*)"glSampleCoverageARB")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_ARB_multisample = false;
/* GL_ARB_multitexture */
PFNGLACTIVETEXTUREARBPROC __glActiveTextureARB = nullptr; void APIENTRY glActiveTextureARB (GLenum texture) { if (__glActiveTextureARB != 0) (__glActiveTextureARB)(texture);  }
PFNGLCLIENTACTIVETEXTUREARBPROC __glClientActiveTextureARB = nullptr; void APIENTRY glClientActiveTextureARB (GLenum texture) { if (__glClientActiveTextureARB != 0) (__glClientActiveTextureARB)(texture);  }
PFNGLMULTITEXCOORD1DARBPROC __glMultiTexCoord1dARB = nullptr; void APIENTRY glMultiTexCoord1dARB (GLenum target, GLdouble s) { if (__glMultiTexCoord1dARB != 0) (__glMultiTexCoord1dARB)(target, s);  }
PFNGLMULTITEXCOORD1DVARBPROC __glMultiTexCoord1dvARB = nullptr; void APIENTRY glMultiTexCoord1dvARB (GLenum target, const GLdouble *v) { if (__glMultiTexCoord1dvARB != 0) (__glMultiTexCoord1dvARB)(target, v);  }
PFNGLMULTITEXCOORD1FARBPROC __glMultiTexCoord1fARB = nullptr; void APIENTRY glMultiTexCoord1fARB (GLenum target, GLfloat s) { if (__glMultiTexCoord1fARB != 0) (__glMultiTexCoord1fARB)(target, s);  }
PFNGLMULTITEXCOORD1FVARBPROC __glMultiTexCoord1fvARB = nullptr; void APIENTRY glMultiTexCoord1fvARB (GLenum target, const GLfloat *v) { if (__glMultiTexCoord1fvARB != 0) (__glMultiTexCoord1fvARB)(target, v);  }
PFNGLMULTITEXCOORD1IARBPROC __glMultiTexCoord1iARB = nullptr; void APIENTRY glMultiTexCoord1iARB (GLenum target, GLint s) { if (__glMultiTexCoord1iARB != 0) (__glMultiTexCoord1iARB)(target, s);  }
PFNGLMULTITEXCOORD1IVARBPROC __glMultiTexCoord1ivARB = nullptr; void APIENTRY glMultiTexCoord1ivARB (GLenum target, const GLint *v) { if (__glMultiTexCoord1ivARB != 0) (__glMultiTexCoord1ivARB)(target, v);  }
PFNGLMULTITEXCOORD1SARBPROC __glMultiTexCoord1sARB = nullptr; void APIENTRY glMultiTexCoord1sARB (GLenum target, GLshort s) { if (__glMultiTexCoord1sARB != 0) (__glMultiTexCoord1sARB)(target, s);  }
PFNGLMULTITEXCOORD1SVARBPROC __glMultiTexCoord1svARB = nullptr; void APIENTRY glMultiTexCoord1svARB (GLenum target, const GLshort *v) { if (__glMultiTexCoord1svARB != 0) (__glMultiTexCoord1svARB)(target, v);  }
PFNGLMULTITEXCOORD2DARBPROC __glMultiTexCoord2dARB = nullptr; void APIENTRY glMultiTexCoord2dARB (GLenum target, GLdouble s, GLdouble t) { if (__glMultiTexCoord2dARB != 0) (__glMultiTexCoord2dARB)(target, s, t);  }
PFNGLMULTITEXCOORD2DVARBPROC __glMultiTexCoord2dvARB = nullptr; void APIENTRY glMultiTexCoord2dvARB (GLenum target, const GLdouble *v) { if (__glMultiTexCoord2dvARB != 0) (__glMultiTexCoord2dvARB)(target, v);  }
PFNGLMULTITEXCOORD2FARBPROC __glMultiTexCoord2fARB = nullptr; void APIENTRY glMultiTexCoord2fARB (GLenum target, GLfloat s, GLfloat t) { if (__glMultiTexCoord2fARB != 0) (__glMultiTexCoord2fARB)(target, s, t);  }
PFNGLMULTITEXCOORD2FVARBPROC __glMultiTexCoord2fvARB = nullptr; void APIENTRY glMultiTexCoord2fvARB (GLenum target, const GLfloat *v) { if (__glMultiTexCoord2fvARB != 0) (__glMultiTexCoord2fvARB)(target, v);  }
PFNGLMULTITEXCOORD2IARBPROC __glMultiTexCoord2iARB = nullptr; void APIENTRY glMultiTexCoord2iARB (GLenum target, GLint s, GLint t) { if (__glMultiTexCoord2iARB != 0) (__glMultiTexCoord2iARB)(target, s, t);  }
PFNGLMULTITEXCOORD2IVARBPROC __glMultiTexCoord2ivARB = nullptr; void APIENTRY glMultiTexCoord2ivARB (GLenum target, const GLint *v) { if (__glMultiTexCoord2ivARB != 0) (__glMultiTexCoord2ivARB)(target, v);  }
PFNGLMULTITEXCOORD2SARBPROC __glMultiTexCoord2sARB = nullptr; void APIENTRY glMultiTexCoord2sARB (GLenum target, GLshort s, GLshort t) { if (__glMultiTexCoord2sARB != 0) (__glMultiTexCoord2sARB)(target, s, t);  }
PFNGLMULTITEXCOORD2SVARBPROC __glMultiTexCoord2svARB = nullptr; void APIENTRY glMultiTexCoord2svARB (GLenum target, const GLshort *v) { if (__glMultiTexCoord2svARB != 0) (__glMultiTexCoord2svARB)(target, v);  }
PFNGLMULTITEXCOORD3DARBPROC __glMultiTexCoord3dARB = nullptr; void APIENTRY glMultiTexCoord3dARB (GLenum target, GLdouble s, GLdouble t, GLdouble r) { if (__glMultiTexCoord3dARB != 0) (__glMultiTexCoord3dARB)(target, s, t, r);  }
PFNGLMULTITEXCOORD3DVARBPROC __glMultiTexCoord3dvARB = nullptr; void APIENTRY glMultiTexCoord3dvARB (GLenum target, const GLdouble *v) { if (__glMultiTexCoord3dvARB != 0) (__glMultiTexCoord3dvARB)(target, v);  }
PFNGLMULTITEXCOORD3FARBPROC __glMultiTexCoord3fARB = nullptr; void APIENTRY glMultiTexCoord3fARB (GLenum target, GLfloat s, GLfloat t, GLfloat r) { if (__glMultiTexCoord3fARB != 0) (__glMultiTexCoord3fARB)(target, s, t, r);  }
PFNGLMULTITEXCOORD3FVARBPROC __glMultiTexCoord3fvARB = nullptr; void APIENTRY glMultiTexCoord3fvARB (GLenum target, const GLfloat *v) { if (__glMultiTexCoord3fvARB != 0) (__glMultiTexCoord3fvARB)(target, v);  }
PFNGLMULTITEXCOORD3IARBPROC __glMultiTexCoord3iARB = nullptr; void APIENTRY glMultiTexCoord3iARB (GLenum target, GLint s, GLint t, GLint r) { if (__glMultiTexCoord3iARB != 0) (__glMultiTexCoord3iARB)(target, s, t, r);  }
PFNGLMULTITEXCOORD3IVARBPROC __glMultiTexCoord3ivARB = nullptr; void APIENTRY glMultiTexCoord3ivARB (GLenum target, const GLint *v) { if (__glMultiTexCoord3ivARB != 0) (__glMultiTexCoord3ivARB)(target, v);  }
PFNGLMULTITEXCOORD3SARBPROC __glMultiTexCoord3sARB = nullptr; void APIENTRY glMultiTexCoord3sARB (GLenum target, GLshort s, GLshort t, GLshort r) { if (__glMultiTexCoord3sARB != 0) (__glMultiTexCoord3sARB)(target, s, t, r);  }
PFNGLMULTITEXCOORD3SVARBPROC __glMultiTexCoord3svARB = nullptr; void APIENTRY glMultiTexCoord3svARB (GLenum target, const GLshort *v) { if (__glMultiTexCoord3svARB != 0) (__glMultiTexCoord3svARB)(target, v);  }
PFNGLMULTITEXCOORD4DARBPROC __glMultiTexCoord4dARB = nullptr; void APIENTRY glMultiTexCoord4dARB (GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q) { if (__glMultiTexCoord4dARB != 0) (__glMultiTexCoord4dARB)(target, s, t, r, q);  }
PFNGLMULTITEXCOORD4DVARBPROC __glMultiTexCoord4dvARB = nullptr; void APIENTRY glMultiTexCoord4dvARB (GLenum target, const GLdouble *v) { if (__glMultiTexCoord4dvARB != 0) (__glMultiTexCoord4dvARB)(target, v);  }
PFNGLMULTITEXCOORD4FARBPROC __glMultiTexCoord4fARB = nullptr; void APIENTRY glMultiTexCoord4fARB (GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q) { if (__glMultiTexCoord4fARB != 0) (__glMultiTexCoord4fARB)(target, s, t, r, q);  }
PFNGLMULTITEXCOORD4FVARBPROC __glMultiTexCoord4fvARB = nullptr; void APIENTRY glMultiTexCoord4fvARB (GLenum target, const GLfloat *v) { if (__glMultiTexCoord4fvARB != 0) (__glMultiTexCoord4fvARB)(target, v);  }
PFNGLMULTITEXCOORD4IARBPROC __glMultiTexCoord4iARB = nullptr; void APIENTRY glMultiTexCoord4iARB (GLenum target, GLint s, GLint t, GLint r, GLint q) { if (__glMultiTexCoord4iARB != 0) (__glMultiTexCoord4iARB)(target, s, t, r, q);  }
PFNGLMULTITEXCOORD4IVARBPROC __glMultiTexCoord4ivARB = nullptr; void APIENTRY glMultiTexCoord4ivARB (GLenum target, const GLint *v) { if (__glMultiTexCoord4ivARB != 0) (__glMultiTexCoord4ivARB)(target, v);  }
PFNGLMULTITEXCOORD4SARBPROC __glMultiTexCoord4sARB = nullptr; void APIENTRY glMultiTexCoord4sARB (GLenum target, GLshort s, GLshort t, GLshort r, GLshort q) { if (__glMultiTexCoord4sARB != 0) (__glMultiTexCoord4sARB)(target, s, t, r, q);  }
PFNGLMULTITEXCOORD4SVARBPROC __glMultiTexCoord4svARB = nullptr; void APIENTRY glMultiTexCoord4svARB (GLenum target, const GLshort *v) { if (__glMultiTexCoord4svARB != 0) (__glMultiTexCoord4svARB)(target, v);  }
bool __loadGL_ARB_multitexture(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glActiveTextureARB = (PFNGLACTIVETEXTUREARBPROC)proc((const GLubyte*)"glActiveTextureARB")) != nullptr) || r;
    r = ((__glClientActiveTextureARB = (PFNGLCLIENTACTIVETEXTUREARBPROC)proc((const GLubyte*)"glClientActiveTextureARB")) != nullptr) || r;
    r = ((__glMultiTexCoord1dARB = (PFNGLMULTITEXCOORD1DARBPROC)proc((const GLubyte*)"glMultiTexCoord1dARB")) != nullptr) || r;
    r = ((__glMultiTexCoord1dvARB = (PFNGLMULTITEXCOORD1DVARBPROC)proc((const GLubyte*)"glMultiTexCoord1dvARB")) != nullptr) || r;
    r = ((__glMultiTexCoord1fARB = (PFNGLMULTITEXCOORD1FARBPROC)proc((const GLubyte*)"glMultiTexCoord1fARB")) != nullptr) || r;
    r = ((__glMultiTexCoord1fvARB = (PFNGLMULTITEXCOORD1FVARBPROC)proc((const GLubyte*)"glMultiTexCoord1fvARB")) != nullptr) || r;
    r = ((__glMultiTexCoord1iARB = (PFNGLMULTITEXCOORD1IARBPROC)proc((const GLubyte*)"glMultiTexCoord1iARB")) != nullptr) || r;
    r = ((__glMultiTexCoord1ivARB = (PFNGLMULTITEXCOORD1IVARBPROC)proc((const GLubyte*)"glMultiTexCoord1ivARB")) != nullptr) || r;
    r = ((__glMultiTexCoord1sARB = (PFNGLMULTITEXCOORD1SARBPROC)proc((const GLubyte*)"glMultiTexCoord1sARB")) != nullptr) || r;
    r = ((__glMultiTexCoord1svARB = (PFNGLMULTITEXCOORD1SVARBPROC)proc((const GLubyte*)"glMultiTexCoord1svARB")) != nullptr) || r;
    r = ((__glMultiTexCoord2dARB = (PFNGLMULTITEXCOORD2DARBPROC)proc((const GLubyte*)"glMultiTexCoord2dARB")) != nullptr) || r;
    r = ((__glMultiTexCoord2dvARB = (PFNGLMULTITEXCOORD2DVARBPROC)proc((const GLubyte*)"glMultiTexCoord2dvARB")) != nullptr) || r;
    r = ((__glMultiTexCoord2fARB = (PFNGLMULTITEXCOORD2FARBPROC)proc((const GLubyte*)"glMultiTexCoord2fARB")) != nullptr) || r;
    r = ((__glMultiTexCoord2fvARB = (PFNGLMULTITEXCOORD2FVARBPROC)proc((const GLubyte*)"glMultiTexCoord2fvARB")) != nullptr) || r;
    r = ((__glMultiTexCoord2iARB = (PFNGLMULTITEXCOORD2IARBPROC)proc((const GLubyte*)"glMultiTexCoord2iARB")) != nullptr) || r;
    r = ((__glMultiTexCoord2ivARB = (PFNGLMULTITEXCOORD2IVARBPROC)proc((const GLubyte*)"glMultiTexCoord2ivARB")) != nullptr) || r;
    r = ((__glMultiTexCoord2sARB = (PFNGLMULTITEXCOORD2SARBPROC)proc((const GLubyte*)"glMultiTexCoord2sARB")) != nullptr) || r;
    r = ((__glMultiTexCoord2svARB = (PFNGLMULTITEXCOORD2SVARBPROC)proc((const GLubyte*)"glMultiTexCoord2svARB")) != nullptr) || r;
    r = ((__glMultiTexCoord3dARB = (PFNGLMULTITEXCOORD3DARBPROC)proc((const GLubyte*)"glMultiTexCoord3dARB")) != nullptr) || r;
    r = ((__glMultiTexCoord3dvARB = (PFNGLMULTITEXCOORD3DVARBPROC)proc((const GLubyte*)"glMultiTexCoord3dvARB")) != nullptr) || r;
    r = ((__glMultiTexCoord3fARB = (PFNGLMULTITEXCOORD3FARBPROC)proc((const GLubyte*)"glMultiTexCoord3fARB")) != nullptr) || r;
    r = ((__glMultiTexCoord3fvARB = (PFNGLMULTITEXCOORD3FVARBPROC)proc((const GLubyte*)"glMultiTexCoord3fvARB")) != nullptr) || r;
    r = ((__glMultiTexCoord3iARB = (PFNGLMULTITEXCOORD3IARBPROC)proc((const GLubyte*)"glMultiTexCoord3iARB")) != nullptr) || r;
    r = ((__glMultiTexCoord3ivARB = (PFNGLMULTITEXCOORD3IVARBPROC)proc((const GLubyte*)"glMultiTexCoord3ivARB")) != nullptr) || r;
    r = ((__glMultiTexCoord3sARB = (PFNGLMULTITEXCOORD3SARBPROC)proc((const GLubyte*)"glMultiTexCoord3sARB")) != nullptr) || r;
    r = ((__glMultiTexCoord3svARB = (PFNGLMULTITEXCOORD3SVARBPROC)proc((const GLubyte*)"glMultiTexCoord3svARB")) != nullptr) || r;
    r = ((__glMultiTexCoord4dARB = (PFNGLMULTITEXCOORD4DARBPROC)proc((const GLubyte*)"glMultiTexCoord4dARB")) != nullptr) || r;
    r = ((__glMultiTexCoord4dvARB = (PFNGLMULTITEXCOORD4DVARBPROC)proc((const GLubyte*)"glMultiTexCoord4dvARB")) != nullptr) || r;
    r = ((__glMultiTexCoord4fARB = (PFNGLMULTITEXCOORD4FARBPROC)proc((const GLubyte*)"glMultiTexCoord4fARB")) != nullptr) || r;
    r = ((__glMultiTexCoord4fvARB = (PFNGLMULTITEXCOORD4FVARBPROC)proc((const GLubyte*)"glMultiTexCoord4fvARB")) != nullptr) || r;
    r = ((__glMultiTexCoord4iARB = (PFNGLMULTITEXCOORD4IARBPROC)proc((const GLubyte*)"glMultiTexCoord4iARB")) != nullptr) || r;
    r = ((__glMultiTexCoord4ivARB = (PFNGLMULTITEXCOORD4IVARBPROC)proc((const GLubyte*)"glMultiTexCoord4ivARB")) != nullptr) || r;
    r = ((__glMultiTexCoord4sARB = (PFNGLMULTITEXCOORD4SARBPROC)proc((const GLubyte*)"glMultiTexCoord4sARB")) != nullptr) || r;
    r = ((__glMultiTexCoord4svARB = (PFNGLMULTITEXCOORD4SVARBPROC)proc((const GLubyte*)"glMultiTexCoord4svARB")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_ARB_multitexture = false;
/* GL_ARB_occlusion_query */
PFNGLBEGINQUERYARBPROC __glBeginQueryARB = nullptr; void APIENTRY glBeginQueryARB (GLenum target, GLuint id) { if (__glBeginQueryARB != 0) (__glBeginQueryARB)(target, id);  }
PFNGLDELETEQUERIESARBPROC __glDeleteQueriesARB = nullptr; void APIENTRY glDeleteQueriesARB (GLsizei n, const GLuint *ids) { if (__glDeleteQueriesARB != 0) (__glDeleteQueriesARB)(n, ids);  }
PFNGLENDQUERYARBPROC __glEndQueryARB = nullptr; void APIENTRY glEndQueryARB (GLenum target) { if (__glEndQueryARB != 0) (__glEndQueryARB)(target);  }
PFNGLGENQUERIESARBPROC __glGenQueriesARB = nullptr; void APIENTRY glGenQueriesARB (GLsizei n, GLuint *ids) { if (__glGenQueriesARB != 0) (__glGenQueriesARB)(n, ids);  }
PFNGLGETQUERYOBJECTIVARBPROC __glGetQueryObjectivARB = nullptr; void APIENTRY glGetQueryObjectivARB (GLuint id, GLenum pname, GLint *params) { if (__glGetQueryObjectivARB != 0) (__glGetQueryObjectivARB)(id, pname, params);  }
PFNGLGETQUERYOBJECTUIVARBPROC __glGetQueryObjectuivARB = nullptr; void APIENTRY glGetQueryObjectuivARB (GLuint id, GLenum pname, GLuint *params) { if (__glGetQueryObjectuivARB != 0) (__glGetQueryObjectuivARB)(id, pname, params);  }
PFNGLGETQUERYIVARBPROC __glGetQueryivARB = nullptr; void APIENTRY glGetQueryivARB (GLenum target, GLenum pname, GLint *params) { if (__glGetQueryivARB != 0) (__glGetQueryivARB)(target, pname, params);  }
PFNGLISQUERYARBPROC __glIsQueryARB = nullptr; GLboolean APIENTRY glIsQueryARB (GLuint id) { if (__glIsQueryARB != 0) return (__glIsQueryARB)(id); return 0; }
bool __loadGL_ARB_occlusion_query(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glBeginQueryARB = (PFNGLBEGINQUERYARBPROC)proc((const GLubyte*)"glBeginQueryARB")) != nullptr) || r;
    r = ((__glDeleteQueriesARB = (PFNGLDELETEQUERIESARBPROC)proc((const GLubyte*)"glDeleteQueriesARB")) != nullptr) || r;
    r = ((__glEndQueryARB = (PFNGLENDQUERYARBPROC)proc((const GLubyte*)"glEndQueryARB")) != nullptr) || r;
    r = ((__glGenQueriesARB = (PFNGLGENQUERIESARBPROC)proc((const GLubyte*)"glGenQueriesARB")) != nullptr) || r;
    r = ((__glGetQueryObjectivARB = (PFNGLGETQUERYOBJECTIVARBPROC)proc((const GLubyte*)"glGetQueryObjectivARB")) != nullptr) || r;
    r = ((__glGetQueryObjectuivARB = (PFNGLGETQUERYOBJECTUIVARBPROC)proc((const GLubyte*)"glGetQueryObjectuivARB")) != nullptr) || r;
    r = ((__glGetQueryivARB = (PFNGLGETQUERYIVARBPROC)proc((const GLubyte*)"glGetQueryivARB")) != nullptr) || r;
    r = ((__glIsQueryARB = (PFNGLISQUERYARBPROC)proc((const GLubyte*)"glIsQueryARB")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_ARB_occlusion_query = false;
/* GL_ARB_occlusion_query2 */
bool __loadGL_ARB_occlusion_query2(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_occlusion_query2 = false;
/* GL_ARB_parallel_shader_compile */
PFNGLMAXSHADERCOMPILERTHREADSARBPROC __glMaxShaderCompilerThreadsARB = nullptr; void APIENTRY glMaxShaderCompilerThreadsARB (GLuint count) { if (__glMaxShaderCompilerThreadsARB != 0) (__glMaxShaderCompilerThreadsARB)(count);  }
bool __loadGL_ARB_parallel_shader_compile(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glMaxShaderCompilerThreadsARB = (PFNGLMAXSHADERCOMPILERTHREADSARBPROC)proc((const GLubyte*)"glMaxShaderCompilerThreadsARB")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_ARB_parallel_shader_compile = false;
/* GL_ARB_pipeline_statistics_query */
bool __loadGL_ARB_pipeline_statistics_query(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_pipeline_statistics_query = false;
/* GL_ARB_pixel_buffer_object */
bool __loadGL_ARB_pixel_buffer_object(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_pixel_buffer_object = false;
/* GL_ARB_point_parameters */
PFNGLPOINTPARAMETERFARBPROC __glPointParameterfARB = nullptr; void APIENTRY glPointParameterfARB (GLenum pname, GLfloat param) { if (__glPointParameterfARB != 0) (__glPointParameterfARB)(pname, param);  }
PFNGLPOINTPARAMETERFVARBPROC __glPointParameterfvARB = nullptr; void APIENTRY glPointParameterfvARB (GLenum pname, const GLfloat *params) { if (__glPointParameterfvARB != 0) (__glPointParameterfvARB)(pname, params);  }
bool __loadGL_ARB_point_parameters(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glPointParameterfARB = (PFNGLPOINTPARAMETERFARBPROC)proc((const GLubyte*)"glPointParameterfARB")) != nullptr) || r;
    r = ((__glPointParameterfvARB = (PFNGLPOINTPARAMETERFVARBPROC)proc((const GLubyte*)"glPointParameterfvARB")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_ARB_point_parameters = false;
/* GL_ARB_point_sprite */
bool __loadGL_ARB_point_sprite(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_point_sprite = false;
/* GL_ARB_post_depth_coverage */
bool __loadGL_ARB_post_depth_coverage(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_post_depth_coverage = false;
/* GL_ARB_program_interface_query */
bool __loadGL_ARB_program_interface_query(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_program_interface_query = false;
/* GL_ARB_provoking_vertex */
bool __loadGL_ARB_provoking_vertex(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_provoking_vertex = false;
/* GL_ARB_query_buffer_object */
bool __loadGL_ARB_query_buffer_object(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_query_buffer_object = false;
/* GL_ARB_robust_buffer_access_behavior */
bool __loadGL_ARB_robust_buffer_access_behavior(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_robust_buffer_access_behavior = false;
/* GL_ARB_robustness */
PFNGLGETGRAPHICSRESETSTATUSARBPROC __glGetGraphicsResetStatusARB = nullptr; GLenum APIENTRY glGetGraphicsResetStatusARB () { if (__glGetGraphicsResetStatusARB != 0) return (__glGetGraphicsResetStatusARB)(); return 0; }
PFNGLGETNCOLORTABLEARBPROC __glGetnColorTableARB = nullptr; void APIENTRY glGetnColorTableARB (GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *table) { if (__glGetnColorTableARB != 0) (__glGetnColorTableARB)(target, format, type, bufSize, table);  }
PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC __glGetnCompressedTexImageARB = nullptr; void APIENTRY glGetnCompressedTexImageARB (GLenum target, GLint lod, GLsizei bufSize, void *img) { if (__glGetnCompressedTexImageARB != 0) (__glGetnCompressedTexImageARB)(target, lod, bufSize, img);  }
PFNGLGETNCONVOLUTIONFILTERARBPROC __glGetnConvolutionFilterARB = nullptr; void APIENTRY glGetnConvolutionFilterARB (GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *image) { if (__glGetnConvolutionFilterARB != 0) (__glGetnConvolutionFilterARB)(target, format, type, bufSize, image);  }
PFNGLGETNHISTOGRAMARBPROC __glGetnHistogramARB = nullptr; void APIENTRY glGetnHistogramARB (GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values) { if (__glGetnHistogramARB != 0) (__glGetnHistogramARB)(target, reset, format, type, bufSize, values);  }
PFNGLGETNMAPDVARBPROC __glGetnMapdvARB = nullptr; void APIENTRY glGetnMapdvARB (GLenum target, GLenum query, GLsizei bufSize, GLdouble *v) { if (__glGetnMapdvARB != 0) (__glGetnMapdvARB)(target, query, bufSize, v);  }
PFNGLGETNMAPFVARBPROC __glGetnMapfvARB = nullptr; void APIENTRY glGetnMapfvARB (GLenum target, GLenum query, GLsizei bufSize, GLfloat *v) { if (__glGetnMapfvARB != 0) (__glGetnMapfvARB)(target, query, bufSize, v);  }
PFNGLGETNMAPIVARBPROC __glGetnMapivARB = nullptr; void APIENTRY glGetnMapivARB (GLenum target, GLenum query, GLsizei bufSize, GLint *v) { if (__glGetnMapivARB != 0) (__glGetnMapivARB)(target, query, bufSize, v);  }
PFNGLGETNMINMAXARBPROC __glGetnMinmaxARB = nullptr; void APIENTRY glGetnMinmaxARB (GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values) { if (__glGetnMinmaxARB != 0) (__glGetnMinmaxARB)(target, reset, format, type, bufSize, values);  }
PFNGLGETNPIXELMAPFVARBPROC __glGetnPixelMapfvARB = nullptr; void APIENTRY glGetnPixelMapfvARB (GLenum map, GLsizei bufSize, GLfloat *values) { if (__glGetnPixelMapfvARB != 0) (__glGetnPixelMapfvARB)(map, bufSize, values);  }
PFNGLGETNPIXELMAPUIVARBPROC __glGetnPixelMapuivARB = nullptr; void APIENTRY glGetnPixelMapuivARB (GLenum map, GLsizei bufSize, GLuint *values) { if (__glGetnPixelMapuivARB != 0) (__glGetnPixelMapuivARB)(map, bufSize, values);  }
PFNGLGETNPIXELMAPUSVARBPROC __glGetnPixelMapusvARB = nullptr; void APIENTRY glGetnPixelMapusvARB (GLenum map, GLsizei bufSize, GLushort *values) { if (__glGetnPixelMapusvARB != 0) (__glGetnPixelMapusvARB)(map, bufSize, values);  }
PFNGLGETNPOLYGONSTIPPLEARBPROC __glGetnPolygonStippleARB = nullptr; void APIENTRY glGetnPolygonStippleARB (GLsizei bufSize, GLubyte *pattern) { if (__glGetnPolygonStippleARB != 0) (__glGetnPolygonStippleARB)(bufSize, pattern);  }
PFNGLGETNSEPARABLEFILTERARBPROC __glGetnSeparableFilterARB = nullptr; void APIENTRY glGetnSeparableFilterARB (GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void *row, GLsizei columnBufSize, void *column, void *span) { if (__glGetnSeparableFilterARB != 0) (__glGetnSeparableFilterARB)(target, format, type, rowBufSize, row, columnBufSize, column, span);  }
PFNGLGETNTEXIMAGEARBPROC __glGetnTexImageARB = nullptr; void APIENTRY glGetnTexImageARB (GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *img) { if (__glGetnTexImageARB != 0) (__glGetnTexImageARB)(target, level, format, type, bufSize, img);  }
PFNGLGETNUNIFORMDVARBPROC __glGetnUniformdvARB = nullptr; void APIENTRY glGetnUniformdvARB (GLuint program, GLint location, GLsizei bufSize, GLdouble *params) { if (__glGetnUniformdvARB != 0) (__glGetnUniformdvARB)(program, location, bufSize, params);  }
PFNGLGETNUNIFORMFVARBPROC __glGetnUniformfvARB = nullptr; void APIENTRY glGetnUniformfvARB (GLuint program, GLint location, GLsizei bufSize, GLfloat *params) { if (__glGetnUniformfvARB != 0) (__glGetnUniformfvARB)(program, location, bufSize, params);  }
PFNGLGETNUNIFORMIVARBPROC __glGetnUniformivARB = nullptr; void APIENTRY glGetnUniformivARB (GLuint program, GLint location, GLsizei bufSize, GLint *params) { if (__glGetnUniformivARB != 0) (__glGetnUniformivARB)(program, location, bufSize, params);  }
PFNGLGETNUNIFORMUIVARBPROC __glGetnUniformuivARB = nullptr; void APIENTRY glGetnUniformuivARB (GLuint program, GLint location, GLsizei bufSize, GLuint *params) { if (__glGetnUniformuivARB != 0) (__glGetnUniformuivARB)(program, location, bufSize, params);  }
PFNGLREADNPIXELSARBPROC __glReadnPixelsARB = nullptr; void APIENTRY glReadnPixelsARB (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data) { if (__glReadnPixelsARB != 0) (__glReadnPixelsARB)(x, y, width, height, format, type, bufSize, data);  }
bool __loadGL_ARB_robustness(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glGetGraphicsResetStatusARB = (PFNGLGETGRAPHICSRESETSTATUSARBPROC)proc((const GLubyte*)"glGetGraphicsResetStatusARB")) != nullptr) || r;
    r = ((__glGetnColorTableARB = (PFNGLGETNCOLORTABLEARBPROC)proc((const GLubyte*)"glGetnColorTableARB")) != nullptr) || r;
    r = ((__glGetnCompressedTexImageARB = (PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC)proc((const GLubyte*)"glGetnCompressedTexImageARB")) != nullptr) || r;
    r = ((__glGetnConvolutionFilterARB = (PFNGLGETNCONVOLUTIONFILTERARBPROC)proc((const GLubyte*)"glGetnConvolutionFilterARB")) != nullptr) || r;
    r = ((__glGetnHistogramARB = (PFNGLGETNHISTOGRAMARBPROC)proc((const GLubyte*)"glGetnHistogramARB")) != nullptr) || r;
    r = ((__glGetnMapdvARB = (PFNGLGETNMAPDVARBPROC)proc((const GLubyte*)"glGetnMapdvARB")) != nullptr) || r;
    r = ((__glGetnMapfvARB = (PFNGLGETNMAPFVARBPROC)proc((const GLubyte*)"glGetnMapfvARB")) != nullptr) || r;
    r = ((__glGetnMapivARB = (PFNGLGETNMAPIVARBPROC)proc((const GLubyte*)"glGetnMapivARB")) != nullptr) || r;
    r = ((__glGetnMinmaxARB = (PFNGLGETNMINMAXARBPROC)proc((const GLubyte*)"glGetnMinmaxARB")) != nullptr) || r;
    r = ((__glGetnPixelMapfvARB = (PFNGLGETNPIXELMAPFVARBPROC)proc((const GLubyte*)"glGetnPixelMapfvARB")) != nullptr) || r;
    r = ((__glGetnPixelMapuivARB = (PFNGLGETNPIXELMAPUIVARBPROC)proc((const GLubyte*)"glGetnPixelMapuivARB")) != nullptr) || r;
    r = ((__glGetnPixelMapusvARB = (PFNGLGETNPIXELMAPUSVARBPROC)proc((const GLubyte*)"glGetnPixelMapusvARB")) != nullptr) || r;
    r = ((__glGetnPolygonStippleARB = (PFNGLGETNPOLYGONSTIPPLEARBPROC)proc((const GLubyte*)"glGetnPolygonStippleARB")) != nullptr) || r;
    r = ((__glGetnSeparableFilterARB = (PFNGLGETNSEPARABLEFILTERARBPROC)proc((const GLubyte*)"glGetnSeparableFilterARB")) != nullptr) || r;
    r = ((__glGetnTexImageARB = (PFNGLGETNTEXIMAGEARBPROC)proc((const GLubyte*)"glGetnTexImageARB")) != nullptr) || r;
    r = ((__glGetnUniformdvARB = (PFNGLGETNUNIFORMDVARBPROC)proc((const GLubyte*)"glGetnUniformdvARB")) != nullptr) || r;
    r = ((__glGetnUniformfvARB = (PFNGLGETNUNIFORMFVARBPROC)proc((const GLubyte*)"glGetnUniformfvARB")) != nullptr) || r;
    r = ((__glGetnUniformivARB = (PFNGLGETNUNIFORMIVARBPROC)proc((const GLubyte*)"glGetnUniformivARB")) != nullptr) || r;
    r = ((__glGetnUniformuivARB = (PFNGLGETNUNIFORMUIVARBPROC)proc((const GLubyte*)"glGetnUniformuivARB")) != nullptr) || r;
    r = ((__glReadnPixelsARB = (PFNGLREADNPIXELSARBPROC)proc((const GLubyte*)"glReadnPixelsARB")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_ARB_robustness = false;
/* GL_ARB_robustness_isolation */
bool __loadGL_ARB_robustness_isolation(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_robustness_isolation = false;
/* GL_ARB_sample_locations */
PFNGLEVALUATEDEPTHVALUESARBPROC __glEvaluateDepthValuesARB = nullptr; void APIENTRY glEvaluateDepthValuesARB () { if (__glEvaluateDepthValuesARB != 0) (__glEvaluateDepthValuesARB)();  }
PFNGLFRAMEBUFFERSAMPLELOCATIONSFVARBPROC __glFramebufferSampleLocationsfvARB = nullptr; void APIENTRY glFramebufferSampleLocationsfvARB (GLenum target, GLuint start, GLsizei count, const GLfloat *v) { if (__glFramebufferSampleLocationsfvARB != 0) (__glFramebufferSampleLocationsfvARB)(target, start, count, v);  }
PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVARBPROC __glNamedFramebufferSampleLocationsfvARB = nullptr; void APIENTRY glNamedFramebufferSampleLocationsfvARB (GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *v) { if (__glNamedFramebufferSampleLocationsfvARB != 0) (__glNamedFramebufferSampleLocationsfvARB)(framebuffer, start, count, v);  }
bool __loadGL_ARB_sample_locations(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glEvaluateDepthValuesARB = (PFNGLEVALUATEDEPTHVALUESARBPROC)proc((const GLubyte*)"glEvaluateDepthValuesARB")) != nullptr) || r;
    r = ((__glFramebufferSampleLocationsfvARB = (PFNGLFRAMEBUFFERSAMPLELOCATIONSFVARBPROC)proc((const GLubyte*)"glFramebufferSampleLocationsfvARB")) != nullptr) || r;
    r = ((__glNamedFramebufferSampleLocationsfvARB = (PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVARBPROC)proc((const GLubyte*)"glNamedFramebufferSampleLocationsfvARB")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_ARB_sample_locations = false;
/* GL_ARB_sample_shading */
PFNGLMINSAMPLESHADINGARBPROC __glMinSampleShadingARB = nullptr; void APIENTRY glMinSampleShadingARB (GLfloat value) { if (__glMinSampleShadingARB != 0) (__glMinSampleShadingARB)(value);  }
bool __loadGL_ARB_sample_shading(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glMinSampleShadingARB = (PFNGLMINSAMPLESHADINGARBPROC)proc((const GLubyte*)"glMinSampleShadingARB")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_ARB_sample_shading = false;
/* GL_ARB_sampler_objects */
bool __loadGL_ARB_sampler_objects(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_sampler_objects = false;
/* GL_ARB_seamless_cube_map */
bool __loadGL_ARB_seamless_cube_map(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_seamless_cube_map = false;
/* GL_ARB_seamless_cubemap_per_texture */
bool __loadGL_ARB_seamless_cubemap_per_texture(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_seamless_cubemap_per_texture = false;
/* GL_ARB_separate_shader_objects */
bool __loadGL_ARB_separate_shader_objects(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_separate_shader_objects = false;
/* GL_ARB_shader_atomic_counter_ops */
bool __loadGL_ARB_shader_atomic_counter_ops(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_shader_atomic_counter_ops = false;
/* GL_ARB_shader_atomic_counters */
bool __loadGL_ARB_shader_atomic_counters(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_shader_atomic_counters = false;
/* GL_ARB_shader_ballot */
bool __loadGL_ARB_shader_ballot(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_shader_ballot = false;
/* GL_ARB_shader_bit_encoding */
bool __loadGL_ARB_shader_bit_encoding(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_shader_bit_encoding = false;
/* GL_ARB_shader_clock */
bool __loadGL_ARB_shader_clock(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_shader_clock = false;
/* GL_ARB_shader_draw_parameters */
bool __loadGL_ARB_shader_draw_parameters(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_shader_draw_parameters = false;
/* GL_ARB_shader_group_vote */
bool __loadGL_ARB_shader_group_vote(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_shader_group_vote = false;
/* GL_ARB_shader_image_load_store */
bool __loadGL_ARB_shader_image_load_store(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_shader_image_load_store = false;
/* GL_ARB_shader_image_size */
bool __loadGL_ARB_shader_image_size(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_shader_image_size = false;
/* GL_ARB_shader_objects */
PFNGLATTACHOBJECTARBPROC __glAttachObjectARB = nullptr; void APIENTRY glAttachObjectARB (GLhandleARB containerObj, GLhandleARB obj) { if (__glAttachObjectARB != 0) (__glAttachObjectARB)(containerObj, obj);  }
PFNGLCOMPILESHADERARBPROC __glCompileShaderARB = nullptr; void APIENTRY glCompileShaderARB (GLhandleARB shaderObj) { if (__glCompileShaderARB != 0) (__glCompileShaderARB)(shaderObj);  }
PFNGLCREATEPROGRAMOBJECTARBPROC __glCreateProgramObjectARB = nullptr; GLhandleARB APIENTRY glCreateProgramObjectARB () { if (__glCreateProgramObjectARB != 0) return (__glCreateProgramObjectARB)(); return 0; }
PFNGLCREATESHADEROBJECTARBPROC __glCreateShaderObjectARB = nullptr; GLhandleARB APIENTRY glCreateShaderObjectARB (GLenum shaderType) { if (__glCreateShaderObjectARB != 0) return (__glCreateShaderObjectARB)(shaderType); return 0; }
PFNGLDELETEOBJECTARBPROC __glDeleteObjectARB = nullptr; void APIENTRY glDeleteObjectARB (GLhandleARB obj) { if (__glDeleteObjectARB != 0) (__glDeleteObjectARB)(obj);  }
PFNGLDETACHOBJECTARBPROC __glDetachObjectARB = nullptr; void APIENTRY glDetachObjectARB (GLhandleARB containerObj, GLhandleARB attachedObj) { if (__glDetachObjectARB != 0) (__glDetachObjectARB)(containerObj, attachedObj);  }
PFNGLGETACTIVEUNIFORMARBPROC __glGetActiveUniformARB = nullptr; void APIENTRY glGetActiveUniformARB (GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name) { if (__glGetActiveUniformARB != 0) (__glGetActiveUniformARB)(programObj, index, maxLength, length, size, type, name);  }
PFNGLGETATTACHEDOBJECTSARBPROC __glGetAttachedObjectsARB = nullptr; void APIENTRY glGetAttachedObjectsARB (GLhandleARB containerObj, GLsizei maxCount, GLsizei *count, GLhandleARB *obj) { if (__glGetAttachedObjectsARB != 0) (__glGetAttachedObjectsARB)(containerObj, maxCount, count, obj);  }
PFNGLGETHANDLEARBPROC __glGetHandleARB = nullptr; GLhandleARB APIENTRY glGetHandleARB (GLenum pname) { if (__glGetHandleARB != 0) return (__glGetHandleARB)(pname); return 0; }
PFNGLGETINFOLOGARBPROC __glGetInfoLogARB = nullptr; void APIENTRY glGetInfoLogARB (GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *infoLog) { if (__glGetInfoLogARB != 0) (__glGetInfoLogARB)(obj, maxLength, length, infoLog);  }
PFNGLGETOBJECTPARAMETERFVARBPROC __glGetObjectParameterfvARB = nullptr; void APIENTRY glGetObjectParameterfvARB (GLhandleARB obj, GLenum pname, GLfloat *params) { if (__glGetObjectParameterfvARB != 0) (__glGetObjectParameterfvARB)(obj, pname, params);  }
PFNGLGETOBJECTPARAMETERIVARBPROC __glGetObjectParameterivARB = nullptr; void APIENTRY glGetObjectParameterivARB (GLhandleARB obj, GLenum pname, GLint *params) { if (__glGetObjectParameterivARB != 0) (__glGetObjectParameterivARB)(obj, pname, params);  }
PFNGLGETSHADERSOURCEARBPROC __glGetShaderSourceARB = nullptr; void APIENTRY glGetShaderSourceARB (GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *source) { if (__glGetShaderSourceARB != 0) (__glGetShaderSourceARB)(obj, maxLength, length, source);  }
PFNGLGETUNIFORMLOCATIONARBPROC __glGetUniformLocationARB = nullptr; GLint APIENTRY glGetUniformLocationARB (GLhandleARB programObj, const GLcharARB *name) { if (__glGetUniformLocationARB != 0) return (__glGetUniformLocationARB)(programObj, name); return 0; }
PFNGLGETUNIFORMFVARBPROC __glGetUniformfvARB = nullptr; void APIENTRY glGetUniformfvARB (GLhandleARB programObj, GLint location, GLfloat *params) { if (__glGetUniformfvARB != 0) (__glGetUniformfvARB)(programObj, location, params);  }
PFNGLGETUNIFORMIVARBPROC __glGetUniformivARB = nullptr; void APIENTRY glGetUniformivARB (GLhandleARB programObj, GLint location, GLint *params) { if (__glGetUniformivARB != 0) (__glGetUniformivARB)(programObj, location, params);  }
PFNGLLINKPROGRAMARBPROC __glLinkProgramARB = nullptr; void APIENTRY glLinkProgramARB (GLhandleARB programObj) { if (__glLinkProgramARB != 0) (__glLinkProgramARB)(programObj);  }
PFNGLSHADERSOURCEARBPROC __glShaderSourceARB = nullptr; void APIENTRY glShaderSourceARB (GLhandleARB shaderObj, GLsizei count, const GLcharARB **string, const GLint *length) { if (__glShaderSourceARB != 0) (__glShaderSourceARB)(shaderObj, count, string, length);  }
PFNGLUNIFORM1FARBPROC __glUniform1fARB = nullptr; void APIENTRY glUniform1fARB (GLint location, GLfloat v0) { if (__glUniform1fARB != 0) (__glUniform1fARB)(location, v0);  }
PFNGLUNIFORM1FVARBPROC __glUniform1fvARB = nullptr; void APIENTRY glUniform1fvARB (GLint location, GLsizei count, const GLfloat *value) { if (__glUniform1fvARB != 0) (__glUniform1fvARB)(location, count, value);  }
PFNGLUNIFORM1IARBPROC __glUniform1iARB = nullptr; void APIENTRY glUniform1iARB (GLint location, GLint v0) { if (__glUniform1iARB != 0) (__glUniform1iARB)(location, v0);  }
PFNGLUNIFORM1IVARBPROC __glUniform1ivARB = nullptr; void APIENTRY glUniform1ivARB (GLint location, GLsizei count, const GLint *value) { if (__glUniform1ivARB != 0) (__glUniform1ivARB)(location, count, value);  }
PFNGLUNIFORM2FARBPROC __glUniform2fARB = nullptr; void APIENTRY glUniform2fARB (GLint location, GLfloat v0, GLfloat v1) { if (__glUniform2fARB != 0) (__glUniform2fARB)(location, v0, v1);  }
PFNGLUNIFORM2FVARBPROC __glUniform2fvARB = nullptr; void APIENTRY glUniform2fvARB (GLint location, GLsizei count, const GLfloat *value) { if (__glUniform2fvARB != 0) (__glUniform2fvARB)(location, count, value);  }
PFNGLUNIFORM2IARBPROC __glUniform2iARB = nullptr; void APIENTRY glUniform2iARB (GLint location, GLint v0, GLint v1) { if (__glUniform2iARB != 0) (__glUniform2iARB)(location, v0, v1);  }
PFNGLUNIFORM2IVARBPROC __glUniform2ivARB = nullptr; void APIENTRY glUniform2ivARB (GLint location, GLsizei count, const GLint *value) { if (__glUniform2ivARB != 0) (__glUniform2ivARB)(location, count, value);  }
PFNGLUNIFORM3FARBPROC __glUniform3fARB = nullptr; void APIENTRY glUniform3fARB (GLint location, GLfloat v0, GLfloat v1, GLfloat v2) { if (__glUniform3fARB != 0) (__glUniform3fARB)(location, v0, v1, v2);  }
PFNGLUNIFORM3FVARBPROC __glUniform3fvARB = nullptr; void APIENTRY glUniform3fvARB (GLint location, GLsizei count, const GLfloat *value) { if (__glUniform3fvARB != 0) (__glUniform3fvARB)(location, count, value);  }
PFNGLUNIFORM3IARBPROC __glUniform3iARB = nullptr; void APIENTRY glUniform3iARB (GLint location, GLint v0, GLint v1, GLint v2) { if (__glUniform3iARB != 0) (__glUniform3iARB)(location, v0, v1, v2);  }
PFNGLUNIFORM3IVARBPROC __glUniform3ivARB = nullptr; void APIENTRY glUniform3ivARB (GLint location, GLsizei count, const GLint *value) { if (__glUniform3ivARB != 0) (__glUniform3ivARB)(location, count, value);  }
PFNGLUNIFORM4FARBPROC __glUniform4fARB = nullptr; void APIENTRY glUniform4fARB (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) { if (__glUniform4fARB != 0) (__glUniform4fARB)(location, v0, v1, v2, v3);  }
PFNGLUNIFORM4FVARBPROC __glUniform4fvARB = nullptr; void APIENTRY glUniform4fvARB (GLint location, GLsizei count, const GLfloat *value) { if (__glUniform4fvARB != 0) (__glUniform4fvARB)(location, count, value);  }
PFNGLUNIFORM4IARBPROC __glUniform4iARB = nullptr; void APIENTRY glUniform4iARB (GLint location, GLint v0, GLint v1, GLint v2, GLint v3) { if (__glUniform4iARB != 0) (__glUniform4iARB)(location, v0, v1, v2, v3);  }
PFNGLUNIFORM4IVARBPROC __glUniform4ivARB = nullptr; void APIENTRY glUniform4ivARB (GLint location, GLsizei count, const GLint *value) { if (__glUniform4ivARB != 0) (__glUniform4ivARB)(location, count, value);  }
PFNGLUNIFORMMATRIX2FVARBPROC __glUniformMatrix2fvARB = nullptr; void APIENTRY glUniformMatrix2fvARB (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) { if (__glUniformMatrix2fvARB != 0) (__glUniformMatrix2fvARB)(location, count, transpose, value);  }
PFNGLUNIFORMMATRIX3FVARBPROC __glUniformMatrix3fvARB = nullptr; void APIENTRY glUniformMatrix3fvARB (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) { if (__glUniformMatrix3fvARB != 0) (__glUniformMatrix3fvARB)(location, count, transpose, value);  }
PFNGLUNIFORMMATRIX4FVARBPROC __glUniformMatrix4fvARB = nullptr; void APIENTRY glUniformMatrix4fvARB (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) { if (__glUniformMatrix4fvARB != 0) (__glUniformMatrix4fvARB)(location, count, transpose, value);  }
PFNGLUSEPROGRAMOBJECTARBPROC __glUseProgramObjectARB = nullptr; void APIENTRY glUseProgramObjectARB (GLhandleARB programObj) { if (__glUseProgramObjectARB != 0) (__glUseProgramObjectARB)(programObj);  }
PFNGLVALIDATEPROGRAMARBPROC __glValidateProgramARB = nullptr; void APIENTRY glValidateProgramARB (GLhandleARB programObj) { if (__glValidateProgramARB != 0) (__glValidateProgramARB)(programObj);  }
bool __loadGL_ARB_shader_objects(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glAttachObjectARB = (PFNGLATTACHOBJECTARBPROC)proc((const GLubyte*)"glAttachObjectARB")) != nullptr) || r;
    r = ((__glCompileShaderARB = (PFNGLCOMPILESHADERARBPROC)proc((const GLubyte*)"glCompileShaderARB")) != nullptr) || r;
    r = ((__glCreateProgramObjectARB = (PFNGLCREATEPROGRAMOBJECTARBPROC)proc((const GLubyte*)"glCreateProgramObjectARB")) != nullptr) || r;
    r = ((__glCreateShaderObjectARB = (PFNGLCREATESHADEROBJECTARBPROC)proc((const GLubyte*)"glCreateShaderObjectARB")) != nullptr) || r;
    r = ((__glDeleteObjectARB = (PFNGLDELETEOBJECTARBPROC)proc((const GLubyte*)"glDeleteObjectARB")) != nullptr) || r;
    r = ((__glDetachObjectARB = (PFNGLDETACHOBJECTARBPROC)proc((const GLubyte*)"glDetachObjectARB")) != nullptr) || r;
    r = ((__glGetActiveUniformARB = (PFNGLGETACTIVEUNIFORMARBPROC)proc((const GLubyte*)"glGetActiveUniformARB")) != nullptr) || r;
    r = ((__glGetAttachedObjectsARB = (PFNGLGETATTACHEDOBJECTSARBPROC)proc((const GLubyte*)"glGetAttachedObjectsARB")) != nullptr) || r;
    r = ((__glGetHandleARB = (PFNGLGETHANDLEARBPROC)proc((const GLubyte*)"glGetHandleARB")) != nullptr) || r;
    r = ((__glGetInfoLogARB = (PFNGLGETINFOLOGARBPROC)proc((const GLubyte*)"glGetInfoLogARB")) != nullptr) || r;
    r = ((__glGetObjectParameterfvARB = (PFNGLGETOBJECTPARAMETERFVARBPROC)proc((const GLubyte*)"glGetObjectParameterfvARB")) != nullptr) || r;
    r = ((__glGetObjectParameterivARB = (PFNGLGETOBJECTPARAMETERIVARBPROC)proc((const GLubyte*)"glGetObjectParameterivARB")) != nullptr) || r;
    r = ((__glGetShaderSourceARB = (PFNGLGETSHADERSOURCEARBPROC)proc((const GLubyte*)"glGetShaderSourceARB")) != nullptr) || r;
    r = ((__glGetUniformLocationARB = (PFNGLGETUNIFORMLOCATIONARBPROC)proc((const GLubyte*)"glGetUniformLocationARB")) != nullptr) || r;
    r = ((__glGetUniformfvARB = (PFNGLGETUNIFORMFVARBPROC)proc((const GLubyte*)"glGetUniformfvARB")) != nullptr) || r;
    r = ((__glGetUniformivARB = (PFNGLGETUNIFORMIVARBPROC)proc((const GLubyte*)"glGetUniformivARB")) != nullptr) || r;
    r = ((__glLinkProgramARB = (PFNGLLINKPROGRAMARBPROC)proc((const GLubyte*)"glLinkProgramARB")) != nullptr) || r;
    r = ((__glShaderSourceARB = (PFNGLSHADERSOURCEARBPROC)proc((const GLubyte*)"glShaderSourceARB")) != nullptr) || r;
    r = ((__glUniform1fARB = (PFNGLUNIFORM1FARBPROC)proc((const GLubyte*)"glUniform1fARB")) != nullptr) || r;
    r = ((__glUniform1fvARB = (PFNGLUNIFORM1FVARBPROC)proc((const GLubyte*)"glUniform1fvARB")) != nullptr) || r;
    r = ((__glUniform1iARB = (PFNGLUNIFORM1IARBPROC)proc((const GLubyte*)"glUniform1iARB")) != nullptr) || r;
    r = ((__glUniform1ivARB = (PFNGLUNIFORM1IVARBPROC)proc((const GLubyte*)"glUniform1ivARB")) != nullptr) || r;
    r = ((__glUniform2fARB = (PFNGLUNIFORM2FARBPROC)proc((const GLubyte*)"glUniform2fARB")) != nullptr) || r;
    r = ((__glUniform2fvARB = (PFNGLUNIFORM2FVARBPROC)proc((const GLubyte*)"glUniform2fvARB")) != nullptr) || r;
    r = ((__glUniform2iARB = (PFNGLUNIFORM2IARBPROC)proc((const GLubyte*)"glUniform2iARB")) != nullptr) || r;
    r = ((__glUniform2ivARB = (PFNGLUNIFORM2IVARBPROC)proc((const GLubyte*)"glUniform2ivARB")) != nullptr) || r;
    r = ((__glUniform3fARB = (PFNGLUNIFORM3FARBPROC)proc((const GLubyte*)"glUniform3fARB")) != nullptr) || r;
    r = ((__glUniform3fvARB = (PFNGLUNIFORM3FVARBPROC)proc((const GLubyte*)"glUniform3fvARB")) != nullptr) || r;
    r = ((__glUniform3iARB = (PFNGLUNIFORM3IARBPROC)proc((const GLubyte*)"glUniform3iARB")) != nullptr) || r;
    r = ((__glUniform3ivARB = (PFNGLUNIFORM3IVARBPROC)proc((const GLubyte*)"glUniform3ivARB")) != nullptr) || r;
    r = ((__glUniform4fARB = (PFNGLUNIFORM4FARBPROC)proc((const GLubyte*)"glUniform4fARB")) != nullptr) || r;
    r = ((__glUniform4fvARB = (PFNGLUNIFORM4FVARBPROC)proc((const GLubyte*)"glUniform4fvARB")) != nullptr) || r;
    r = ((__glUniform4iARB = (PFNGLUNIFORM4IARBPROC)proc((const GLubyte*)"glUniform4iARB")) != nullptr) || r;
    r = ((__glUniform4ivARB = (PFNGLUNIFORM4IVARBPROC)proc((const GLubyte*)"glUniform4ivARB")) != nullptr) || r;
    r = ((__glUniformMatrix2fvARB = (PFNGLUNIFORMMATRIX2FVARBPROC)proc((const GLubyte*)"glUniformMatrix2fvARB")) != nullptr) || r;
    r = ((__glUniformMatrix3fvARB = (PFNGLUNIFORMMATRIX3FVARBPROC)proc((const GLubyte*)"glUniformMatrix3fvARB")) != nullptr) || r;
    r = ((__glUniformMatrix4fvARB = (PFNGLUNIFORMMATRIX4FVARBPROC)proc((const GLubyte*)"glUniformMatrix4fvARB")) != nullptr) || r;
    r = ((__glUseProgramObjectARB = (PFNGLUSEPROGRAMOBJECTARBPROC)proc((const GLubyte*)"glUseProgramObjectARB")) != nullptr) || r;
    r = ((__glValidateProgramARB = (PFNGLVALIDATEPROGRAMARBPROC)proc((const GLubyte*)"glValidateProgramARB")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_ARB_shader_objects = false;
/* GL_ARB_shader_precision */
bool __loadGL_ARB_shader_precision(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_shader_precision = false;
/* GL_ARB_shader_stencil_export */
bool __loadGL_ARB_shader_stencil_export(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_shader_stencil_export = false;
/* GL_ARB_shader_storage_buffer_object */
bool __loadGL_ARB_shader_storage_buffer_object(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_shader_storage_buffer_object = false;
/* GL_ARB_shader_subroutine */
bool __loadGL_ARB_shader_subroutine(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_shader_subroutine = false;
/* GL_ARB_shader_texture_image_samples */
bool __loadGL_ARB_shader_texture_image_samples(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_shader_texture_image_samples = false;
/* GL_ARB_shader_texture_lod */
bool __loadGL_ARB_shader_texture_lod(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_shader_texture_lod = false;
/* GL_ARB_shader_viewport_layer_array */
bool __loadGL_ARB_shader_viewport_layer_array(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_shader_viewport_layer_array = false;
/* GL_ARB_shading_language_100 */
bool __loadGL_ARB_shading_language_100(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_shading_language_100 = false;
/* GL_ARB_shading_language_420pack */
bool __loadGL_ARB_shading_language_420pack(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_shading_language_420pack = false;
/* GL_ARB_shading_language_include */
PFNGLCOMPILESHADERINCLUDEARBPROC __glCompileShaderIncludeARB = nullptr; void APIENTRY glCompileShaderIncludeARB (GLuint shader, GLsizei count, const GLchar *const*path, const GLint *length) { if (__glCompileShaderIncludeARB != 0) (__glCompileShaderIncludeARB)(shader, count, path, length);  }
PFNGLDELETENAMEDSTRINGARBPROC __glDeleteNamedStringARB = nullptr; void APIENTRY glDeleteNamedStringARB (GLint namelen, const GLchar *name) { if (__glDeleteNamedStringARB != 0) (__glDeleteNamedStringARB)(namelen, name);  }
PFNGLGETNAMEDSTRINGARBPROC __glGetNamedStringARB = nullptr; void APIENTRY glGetNamedStringARB (GLint namelen, const GLchar *name, GLsizei bufSize, GLint *stringlen, GLchar *string) { if (__glGetNamedStringARB != 0) (__glGetNamedStringARB)(namelen, name, bufSize, stringlen, string);  }
PFNGLGETNAMEDSTRINGIVARBPROC __glGetNamedStringivARB = nullptr; void APIENTRY glGetNamedStringivARB (GLint namelen, const GLchar *name, GLenum pname, GLint *params) { if (__glGetNamedStringivARB != 0) (__glGetNamedStringivARB)(namelen, name, pname, params);  }
PFNGLISNAMEDSTRINGARBPROC __glIsNamedStringARB = nullptr; GLboolean APIENTRY glIsNamedStringARB (GLint namelen, const GLchar *name) { if (__glIsNamedStringARB != 0) return (__glIsNamedStringARB)(namelen, name); return 0; }
PFNGLNAMEDSTRINGARBPROC __glNamedStringARB = nullptr; void APIENTRY glNamedStringARB (GLenum type, GLint namelen, const GLchar *name, GLint stringlen, const GLchar *string) { if (__glNamedStringARB != 0) (__glNamedStringARB)(type, namelen, name, stringlen, string);  }
bool __loadGL_ARB_shading_language_include(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glCompileShaderIncludeARB = (PFNGLCOMPILESHADERINCLUDEARBPROC)proc((const GLubyte*)"glCompileShaderIncludeARB")) != nullptr) || r;
    r = ((__glDeleteNamedStringARB = (PFNGLDELETENAMEDSTRINGARBPROC)proc((const GLubyte*)"glDeleteNamedStringARB")) != nullptr) || r;
    r = ((__glGetNamedStringARB = (PFNGLGETNAMEDSTRINGARBPROC)proc((const GLubyte*)"glGetNamedStringARB")) != nullptr) || r;
    r = ((__glGetNamedStringivARB = (PFNGLGETNAMEDSTRINGIVARBPROC)proc((const GLubyte*)"glGetNamedStringivARB")) != nullptr) || r;
    r = ((__glIsNamedStringARB = (PFNGLISNAMEDSTRINGARBPROC)proc((const GLubyte*)"glIsNamedStringARB")) != nullptr) || r;
    r = ((__glNamedStringARB = (PFNGLNAMEDSTRINGARBPROC)proc((const GLubyte*)"glNamedStringARB")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_ARB_shading_language_include = false;
/* GL_ARB_shading_language_packing */
bool __loadGL_ARB_shading_language_packing(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_shading_language_packing = false;
/* GL_ARB_shadow */
bool __loadGL_ARB_shadow(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_shadow = false;
/* GL_ARB_shadow_ambient */
bool __loadGL_ARB_shadow_ambient(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_shadow_ambient = false;
/* GL_ARB_sparse_buffer */
PFNGLBUFFERPAGECOMMITMENTARBPROC __glBufferPageCommitmentARB = nullptr; void APIENTRY glBufferPageCommitmentARB (GLenum target, GLintptr offset, GLsizeiptr size, GLboolean commit) { if (__glBufferPageCommitmentARB != 0) (__glBufferPageCommitmentARB)(target, offset, size, commit);  }
PFNGLNAMEDBUFFERPAGECOMMITMENTARBPROC __glNamedBufferPageCommitmentARB = nullptr; void APIENTRY glNamedBufferPageCommitmentARB (GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit) { if (__glNamedBufferPageCommitmentARB != 0) (__glNamedBufferPageCommitmentARB)(buffer, offset, size, commit);  }
PFNGLNAMEDBUFFERPAGECOMMITMENTEXTPROC __glNamedBufferPageCommitmentEXT = nullptr; void APIENTRY glNamedBufferPageCommitmentEXT (GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit) { if (__glNamedBufferPageCommitmentEXT != 0) (__glNamedBufferPageCommitmentEXT)(buffer, offset, size, commit);  }
bool __loadGL_ARB_sparse_buffer(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glBufferPageCommitmentARB = (PFNGLBUFFERPAGECOMMITMENTARBPROC)proc((const GLubyte*)"glBufferPageCommitmentARB")) != nullptr) || r;
    r = ((__glNamedBufferPageCommitmentARB = (PFNGLNAMEDBUFFERPAGECOMMITMENTARBPROC)proc((const GLubyte*)"glNamedBufferPageCommitmentARB")) != nullptr) || r;
    r = ((__glNamedBufferPageCommitmentEXT = (PFNGLNAMEDBUFFERPAGECOMMITMENTEXTPROC)proc((const GLubyte*)"glNamedBufferPageCommitmentEXT")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_ARB_sparse_buffer = false;
/* GL_ARB_sparse_texture */
PFNGLTEXPAGECOMMITMENTARBPROC __glTexPageCommitmentARB = nullptr; void APIENTRY glTexPageCommitmentARB (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit) { if (__glTexPageCommitmentARB != 0) (__glTexPageCommitmentARB)(target, level, xoffset, yoffset, zoffset, width, height, depth, commit);  }
bool __loadGL_ARB_sparse_texture(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glTexPageCommitmentARB = (PFNGLTEXPAGECOMMITMENTARBPROC)proc((const GLubyte*)"glTexPageCommitmentARB")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_ARB_sparse_texture = false;
/* GL_ARB_sparse_texture2 */
bool __loadGL_ARB_sparse_texture2(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_sparse_texture2 = false;
/* GL_ARB_sparse_texture_clamp */
bool __loadGL_ARB_sparse_texture_clamp(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_sparse_texture_clamp = false;
/* GL_ARB_stencil_texturing */
bool __loadGL_ARB_stencil_texturing(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_stencil_texturing = false;
/* GL_ARB_sync */
bool __loadGL_ARB_sync(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_sync = false;
/* GL_ARB_tessellation_shader */
bool __loadGL_ARB_tessellation_shader(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_tessellation_shader = false;
/* GL_ARB_texture_barrier */
bool __loadGL_ARB_texture_barrier(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_texture_barrier = false;
/* GL_ARB_texture_border_clamp */
bool __loadGL_ARB_texture_border_clamp(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_texture_border_clamp = false;
/* GL_ARB_texture_buffer_object */
PFNGLTEXBUFFERARBPROC __glTexBufferARB = nullptr; void APIENTRY glTexBufferARB (GLenum target, GLenum internalformat, GLuint buffer) { if (__glTexBufferARB != 0) (__glTexBufferARB)(target, internalformat, buffer);  }
bool __loadGL_ARB_texture_buffer_object(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glTexBufferARB = (PFNGLTEXBUFFERARBPROC)proc((const GLubyte*)"glTexBufferARB")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_ARB_texture_buffer_object = false;
/* GL_ARB_texture_buffer_object_rgb32 */
bool __loadGL_ARB_texture_buffer_object_rgb32(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_texture_buffer_object_rgb32 = false;
/* GL_ARB_texture_buffer_range */
bool __loadGL_ARB_texture_buffer_range(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_texture_buffer_range = false;
/* GL_ARB_texture_compression */
PFNGLCOMPRESSEDTEXIMAGE1DARBPROC __glCompressedTexImage1DARB = nullptr; void APIENTRY glCompressedTexImage1DARB (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data) { if (__glCompressedTexImage1DARB != 0) (__glCompressedTexImage1DARB)(target, level, internalformat, width, border, imageSize, data);  }
PFNGLCOMPRESSEDTEXIMAGE2DARBPROC __glCompressedTexImage2DARB = nullptr; void APIENTRY glCompressedTexImage2DARB (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data) { if (__glCompressedTexImage2DARB != 0) (__glCompressedTexImage2DARB)(target, level, internalformat, width, height, border, imageSize, data);  }
PFNGLCOMPRESSEDTEXIMAGE3DARBPROC __glCompressedTexImage3DARB = nullptr; void APIENTRY glCompressedTexImage3DARB (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data) { if (__glCompressedTexImage3DARB != 0) (__glCompressedTexImage3DARB)(target, level, internalformat, width, height, depth, border, imageSize, data);  }
PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC __glCompressedTexSubImage1DARB = nullptr; void APIENTRY glCompressedTexSubImage1DARB (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data) { if (__glCompressedTexSubImage1DARB != 0) (__glCompressedTexSubImage1DARB)(target, level, xoffset, width, format, imageSize, data);  }
PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC __glCompressedTexSubImage2DARB = nullptr; void APIENTRY glCompressedTexSubImage2DARB (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data) { if (__glCompressedTexSubImage2DARB != 0) (__glCompressedTexSubImage2DARB)(target, level, xoffset, yoffset, width, height, format, imageSize, data);  }
PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC __glCompressedTexSubImage3DARB = nullptr; void APIENTRY glCompressedTexSubImage3DARB (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data) { if (__glCompressedTexSubImage3DARB != 0) (__glCompressedTexSubImage3DARB)(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);  }
PFNGLGETCOMPRESSEDTEXIMAGEARBPROC __glGetCompressedTexImageARB = nullptr; void APIENTRY glGetCompressedTexImageARB (GLenum target, GLint level, void *img) { if (__glGetCompressedTexImageARB != 0) (__glGetCompressedTexImageARB)(target, level, img);  }
bool __loadGL_ARB_texture_compression(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glCompressedTexImage1DARB = (PFNGLCOMPRESSEDTEXIMAGE1DARBPROC)proc((const GLubyte*)"glCompressedTexImage1DARB")) != nullptr) || r;
    r = ((__glCompressedTexImage2DARB = (PFNGLCOMPRESSEDTEXIMAGE2DARBPROC)proc((const GLubyte*)"glCompressedTexImage2DARB")) != nullptr) || r;
    r = ((__glCompressedTexImage3DARB = (PFNGLCOMPRESSEDTEXIMAGE3DARBPROC)proc((const GLubyte*)"glCompressedTexImage3DARB")) != nullptr) || r;
    r = ((__glCompressedTexSubImage1DARB = (PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC)proc((const GLubyte*)"glCompressedTexSubImage1DARB")) != nullptr) || r;
    r = ((__glCompressedTexSubImage2DARB = (PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC)proc((const GLubyte*)"glCompressedTexSubImage2DARB")) != nullptr) || r;
    r = ((__glCompressedTexSubImage3DARB = (PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC)proc((const GLubyte*)"glCompressedTexSubImage3DARB")) != nullptr) || r;
    r = ((__glGetCompressedTexImageARB = (PFNGLGETCOMPRESSEDTEXIMAGEARBPROC)proc((const GLubyte*)"glGetCompressedTexImageARB")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_ARB_texture_compression = false;
/* GL_ARB_texture_compression_bptc */
bool __loadGL_ARB_texture_compression_bptc(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_texture_compression_bptc = false;
/* GL_ARB_texture_compression_rgtc */
bool __loadGL_ARB_texture_compression_rgtc(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_texture_compression_rgtc = false;
/* GL_ARB_texture_cube_map */
bool __loadGL_ARB_texture_cube_map(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_texture_cube_map = false;
/* GL_ARB_texture_cube_map_array */
bool __loadGL_ARB_texture_cube_map_array(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_texture_cube_map_array = false;
/* GL_ARB_texture_env_add */
bool __loadGL_ARB_texture_env_add(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_texture_env_add = false;
/* GL_ARB_texture_env_combine */
bool __loadGL_ARB_texture_env_combine(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_texture_env_combine = false;
/* GL_ARB_texture_env_crossbar */
bool __loadGL_ARB_texture_env_crossbar(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_texture_env_crossbar = false;
/* GL_ARB_texture_env_dot3 */
bool __loadGL_ARB_texture_env_dot3(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_texture_env_dot3 = false;
/* GL_ARB_texture_filter_minmax */
bool __loadGL_ARB_texture_filter_minmax(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_texture_filter_minmax = false;
/* GL_ARB_texture_float */
bool __loadGL_ARB_texture_float(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_texture_float = false;
/* GL_ARB_texture_gather */
bool __loadGL_ARB_texture_gather(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_texture_gather = false;
/* GL_ARB_texture_mirror_clamp_to_edge */
bool __loadGL_ARB_texture_mirror_clamp_to_edge(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_texture_mirror_clamp_to_edge = false;
/* GL_ARB_texture_mirrored_repeat */
bool __loadGL_ARB_texture_mirrored_repeat(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_texture_mirrored_repeat = false;
/* GL_ARB_texture_multisample */
bool __loadGL_ARB_texture_multisample(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_texture_multisample = false;
/* GL_ARB_texture_non_power_of_two */
bool __loadGL_ARB_texture_non_power_of_two(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_texture_non_power_of_two = false;
/* GL_ARB_texture_query_levels */
bool __loadGL_ARB_texture_query_levels(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_texture_query_levels = false;
/* GL_ARB_texture_query_lod */
bool __loadGL_ARB_texture_query_lod(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_texture_query_lod = false;
/* GL_ARB_texture_rectangle */
bool __loadGL_ARB_texture_rectangle(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_texture_rectangle = false;
/* GL_ARB_texture_rg */
bool __loadGL_ARB_texture_rg(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_texture_rg = false;
/* GL_ARB_texture_rgb10_a2ui */
bool __loadGL_ARB_texture_rgb10_a2ui(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_texture_rgb10_a2ui = false;
/* GL_ARB_texture_stencil8 */
bool __loadGL_ARB_texture_stencil8(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_texture_stencil8 = false;
/* GL_ARB_texture_storage */
bool __loadGL_ARB_texture_storage(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_texture_storage = false;
/* GL_ARB_texture_storage_multisample */
bool __loadGL_ARB_texture_storage_multisample(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_texture_storage_multisample = false;
/* GL_ARB_texture_swizzle */
bool __loadGL_ARB_texture_swizzle(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_texture_swizzle = false;
/* GL_ARB_texture_view */
bool __loadGL_ARB_texture_view(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_texture_view = false;
/* GL_ARB_timer_query */
bool __loadGL_ARB_timer_query(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_timer_query = false;
/* GL_ARB_transform_feedback2 */
bool __loadGL_ARB_transform_feedback2(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_transform_feedback2 = false;
/* GL_ARB_transform_feedback3 */
bool __loadGL_ARB_transform_feedback3(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_transform_feedback3 = false;
/* GL_ARB_transform_feedback_instanced */
bool __loadGL_ARB_transform_feedback_instanced(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_transform_feedback_instanced = false;
/* GL_ARB_transform_feedback_overflow_query */
bool __loadGL_ARB_transform_feedback_overflow_query(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_transform_feedback_overflow_query = false;
/* GL_ARB_transpose_matrix */
PFNGLLOADTRANSPOSEMATRIXDARBPROC __glLoadTransposeMatrixdARB = nullptr; void APIENTRY glLoadTransposeMatrixdARB (const GLdouble *m) { if (__glLoadTransposeMatrixdARB != 0) (__glLoadTransposeMatrixdARB)(m);  }
PFNGLLOADTRANSPOSEMATRIXFARBPROC __glLoadTransposeMatrixfARB = nullptr; void APIENTRY glLoadTransposeMatrixfARB (const GLfloat *m) { if (__glLoadTransposeMatrixfARB != 0) (__glLoadTransposeMatrixfARB)(m);  }
PFNGLMULTTRANSPOSEMATRIXDARBPROC __glMultTransposeMatrixdARB = nullptr; void APIENTRY glMultTransposeMatrixdARB (const GLdouble *m) { if (__glMultTransposeMatrixdARB != 0) (__glMultTransposeMatrixdARB)(m);  }
PFNGLMULTTRANSPOSEMATRIXFARBPROC __glMultTransposeMatrixfARB = nullptr; void APIENTRY glMultTransposeMatrixfARB (const GLfloat *m) { if (__glMultTransposeMatrixfARB != 0) (__glMultTransposeMatrixfARB)(m);  }
bool __loadGL_ARB_transpose_matrix(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glLoadTransposeMatrixdARB = (PFNGLLOADTRANSPOSEMATRIXDARBPROC)proc((const GLubyte*)"glLoadTransposeMatrixdARB")) != nullptr) || r;
    r = ((__glLoadTransposeMatrixfARB = (PFNGLLOADTRANSPOSEMATRIXFARBPROC)proc((const GLubyte*)"glLoadTransposeMatrixfARB")) != nullptr) || r;
    r = ((__glMultTransposeMatrixdARB = (PFNGLMULTTRANSPOSEMATRIXDARBPROC)proc((const GLubyte*)"glMultTransposeMatrixdARB")) != nullptr) || r;
    r = ((__glMultTransposeMatrixfARB = (PFNGLMULTTRANSPOSEMATRIXFARBPROC)proc((const GLubyte*)"glMultTransposeMatrixfARB")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_ARB_transpose_matrix = false;
/* GL_ARB_uniform_buffer_object */
bool __loadGL_ARB_uniform_buffer_object(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_uniform_buffer_object = false;
/* GL_ARB_vertex_array_bgra */
bool __loadGL_ARB_vertex_array_bgra(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_vertex_array_bgra = false;
/* GL_ARB_vertex_array_object */
bool __loadGL_ARB_vertex_array_object(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_vertex_array_object = false;
/* GL_ARB_vertex_attrib_64bit */
bool __loadGL_ARB_vertex_attrib_64bit(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_vertex_attrib_64bit = false;
/* GL_ARB_vertex_attrib_binding */
bool __loadGL_ARB_vertex_attrib_binding(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_vertex_attrib_binding = false;
/* GL_ARB_vertex_blend */
PFNGLVERTEXBLENDARBPROC __glVertexBlendARB = nullptr; void APIENTRY glVertexBlendARB (GLint count) { if (__glVertexBlendARB != 0) (__glVertexBlendARB)(count);  }
PFNGLWEIGHTPOINTERARBPROC __glWeightPointerARB = nullptr; void APIENTRY glWeightPointerARB (GLint size, GLenum type, GLsizei stride, const void *pointer) { if (__glWeightPointerARB != 0) (__glWeightPointerARB)(size, type, stride, pointer);  }
PFNGLWEIGHTBVARBPROC __glWeightbvARB = nullptr; void APIENTRY glWeightbvARB (GLint size, const GLbyte *weights) { if (__glWeightbvARB != 0) (__glWeightbvARB)(size, weights);  }
PFNGLWEIGHTDVARBPROC __glWeightdvARB = nullptr; void APIENTRY glWeightdvARB (GLint size, const GLdouble *weights) { if (__glWeightdvARB != 0) (__glWeightdvARB)(size, weights);  }
PFNGLWEIGHTFVARBPROC __glWeightfvARB = nullptr; void APIENTRY glWeightfvARB (GLint size, const GLfloat *weights) { if (__glWeightfvARB != 0) (__glWeightfvARB)(size, weights);  }
PFNGLWEIGHTIVARBPROC __glWeightivARB = nullptr; void APIENTRY glWeightivARB (GLint size, const GLint *weights) { if (__glWeightivARB != 0) (__glWeightivARB)(size, weights);  }
PFNGLWEIGHTSVARBPROC __glWeightsvARB = nullptr; void APIENTRY glWeightsvARB (GLint size, const GLshort *weights) { if (__glWeightsvARB != 0) (__glWeightsvARB)(size, weights);  }
PFNGLWEIGHTUBVARBPROC __glWeightubvARB = nullptr; void APIENTRY glWeightubvARB (GLint size, const GLubyte *weights) { if (__glWeightubvARB != 0) (__glWeightubvARB)(size, weights);  }
PFNGLWEIGHTUIVARBPROC __glWeightuivARB = nullptr; void APIENTRY glWeightuivARB (GLint size, const GLuint *weights) { if (__glWeightuivARB != 0) (__glWeightuivARB)(size, weights);  }
PFNGLWEIGHTUSVARBPROC __glWeightusvARB = nullptr; void APIENTRY glWeightusvARB (GLint size, const GLushort *weights) { if (__glWeightusvARB != 0) (__glWeightusvARB)(size, weights);  }
bool __loadGL_ARB_vertex_blend(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glVertexBlendARB = (PFNGLVERTEXBLENDARBPROC)proc((const GLubyte*)"glVertexBlendARB")) != nullptr) || r;
    r = ((__glWeightPointerARB = (PFNGLWEIGHTPOINTERARBPROC)proc((const GLubyte*)"glWeightPointerARB")) != nullptr) || r;
    r = ((__glWeightbvARB = (PFNGLWEIGHTBVARBPROC)proc((const GLubyte*)"glWeightbvARB")) != nullptr) || r;
    r = ((__glWeightdvARB = (PFNGLWEIGHTDVARBPROC)proc((const GLubyte*)"glWeightdvARB")) != nullptr) || r;
    r = ((__glWeightfvARB = (PFNGLWEIGHTFVARBPROC)proc((const GLubyte*)"glWeightfvARB")) != nullptr) || r;
    r = ((__glWeightivARB = (PFNGLWEIGHTIVARBPROC)proc((const GLubyte*)"glWeightivARB")) != nullptr) || r;
    r = ((__glWeightsvARB = (PFNGLWEIGHTSVARBPROC)proc((const GLubyte*)"glWeightsvARB")) != nullptr) || r;
    r = ((__glWeightubvARB = (PFNGLWEIGHTUBVARBPROC)proc((const GLubyte*)"glWeightubvARB")) != nullptr) || r;
    r = ((__glWeightuivARB = (PFNGLWEIGHTUIVARBPROC)proc((const GLubyte*)"glWeightuivARB")) != nullptr) || r;
    r = ((__glWeightusvARB = (PFNGLWEIGHTUSVARBPROC)proc((const GLubyte*)"glWeightusvARB")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_ARB_vertex_blend = false;
/* GL_ARB_vertex_buffer_object */
PFNGLBINDBUFFERARBPROC __glBindBufferARB = nullptr; void APIENTRY glBindBufferARB (GLenum target, GLuint buffer) { if (__glBindBufferARB != 0) (__glBindBufferARB)(target, buffer);  }
PFNGLBUFFERDATAARBPROC __glBufferDataARB = nullptr; void APIENTRY glBufferDataARB (GLenum target, GLsizeiptrARB size, const void *data, GLenum usage) { if (__glBufferDataARB != 0) (__glBufferDataARB)(target, size, data, usage);  }
PFNGLBUFFERSUBDATAARBPROC __glBufferSubDataARB = nullptr; void APIENTRY glBufferSubDataARB (GLenum target, GLintptrARB offset, GLsizeiptrARB size, const void *data) { if (__glBufferSubDataARB != 0) (__glBufferSubDataARB)(target, offset, size, data);  }
PFNGLDELETEBUFFERSARBPROC __glDeleteBuffersARB = nullptr; void APIENTRY glDeleteBuffersARB (GLsizei n, const GLuint *buffers) { if (__glDeleteBuffersARB != 0) (__glDeleteBuffersARB)(n, buffers);  }
PFNGLGENBUFFERSARBPROC __glGenBuffersARB = nullptr; void APIENTRY glGenBuffersARB (GLsizei n, GLuint *buffers) { if (__glGenBuffersARB != 0) (__glGenBuffersARB)(n, buffers);  }
PFNGLGETBUFFERPARAMETERIVARBPROC __glGetBufferParameterivARB = nullptr; void APIENTRY glGetBufferParameterivARB (GLenum target, GLenum pname, GLint *params) { if (__glGetBufferParameterivARB != 0) (__glGetBufferParameterivARB)(target, pname, params);  }
PFNGLGETBUFFERPOINTERVARBPROC __glGetBufferPointervARB = nullptr; void APIENTRY glGetBufferPointervARB (GLenum target, GLenum pname, void **params) { if (__glGetBufferPointervARB != 0) (__glGetBufferPointervARB)(target, pname, params);  }
PFNGLGETBUFFERSUBDATAARBPROC __glGetBufferSubDataARB = nullptr; void APIENTRY glGetBufferSubDataARB (GLenum target, GLintptrARB offset, GLsizeiptrARB size, void *data) { if (__glGetBufferSubDataARB != 0) (__glGetBufferSubDataARB)(target, offset, size, data);  }
PFNGLISBUFFERARBPROC __glIsBufferARB = nullptr; GLboolean APIENTRY glIsBufferARB (GLuint buffer) { if (__glIsBufferARB != 0) return (__glIsBufferARB)(buffer); return 0; }
PFNGLMAPBUFFERARBPROC __glMapBufferARB = nullptr; void *APIENTRY glMapBufferARB (GLenum target, GLenum access) { if (__glMapBufferARB != 0) return (__glMapBufferARB)(target, access); return 0; }
PFNGLUNMAPBUFFERARBPROC __glUnmapBufferARB = nullptr; GLboolean APIENTRY glUnmapBufferARB (GLenum target) { if (__glUnmapBufferARB != 0) return (__glUnmapBufferARB)(target); return 0; }
bool __loadGL_ARB_vertex_buffer_object(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glBindBufferARB = (PFNGLBINDBUFFERARBPROC)proc((const GLubyte*)"glBindBufferARB")) != nullptr) || r;
    r = ((__glBufferDataARB = (PFNGLBUFFERDATAARBPROC)proc((const GLubyte*)"glBufferDataARB")) != nullptr) || r;
    r = ((__glBufferSubDataARB = (PFNGLBUFFERSUBDATAARBPROC)proc((const GLubyte*)"glBufferSubDataARB")) != nullptr) || r;
    r = ((__glDeleteBuffersARB = (PFNGLDELETEBUFFERSARBPROC)proc((const GLubyte*)"glDeleteBuffersARB")) != nullptr) || r;
    r = ((__glGenBuffersARB = (PFNGLGENBUFFERSARBPROC)proc((const GLubyte*)"glGenBuffersARB")) != nullptr) || r;
    r = ((__glGetBufferParameterivARB = (PFNGLGETBUFFERPARAMETERIVARBPROC)proc((const GLubyte*)"glGetBufferParameterivARB")) != nullptr) || r;
    r = ((__glGetBufferPointervARB = (PFNGLGETBUFFERPOINTERVARBPROC)proc((const GLubyte*)"glGetBufferPointervARB")) != nullptr) || r;
    r = ((__glGetBufferSubDataARB = (PFNGLGETBUFFERSUBDATAARBPROC)proc((const GLubyte*)"glGetBufferSubDataARB")) != nullptr) || r;
    r = ((__glIsBufferARB = (PFNGLISBUFFERARBPROC)proc((const GLubyte*)"glIsBufferARB")) != nullptr) || r;
    r = ((__glMapBufferARB = (PFNGLMAPBUFFERARBPROC)proc((const GLubyte*)"glMapBufferARB")) != nullptr) || r;
    r = ((__glUnmapBufferARB = (PFNGLUNMAPBUFFERARBPROC)proc((const GLubyte*)"glUnmapBufferARB")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_ARB_vertex_buffer_object = false;
/* GL_ARB_vertex_program */
PFNGLDISABLEVERTEXATTRIBARRAYARBPROC __glDisableVertexAttribArrayARB = nullptr; void APIENTRY glDisableVertexAttribArrayARB (GLuint index) { if (__glDisableVertexAttribArrayARB != 0) (__glDisableVertexAttribArrayARB)(index);  }
PFNGLENABLEVERTEXATTRIBARRAYARBPROC __glEnableVertexAttribArrayARB = nullptr; void APIENTRY glEnableVertexAttribArrayARB (GLuint index) { if (__glEnableVertexAttribArrayARB != 0) (__glEnableVertexAttribArrayARB)(index);  }
PFNGLGETVERTEXATTRIBPOINTERVARBPROC __glGetVertexAttribPointervARB = nullptr; void APIENTRY glGetVertexAttribPointervARB (GLuint index, GLenum pname, void **pointer) { if (__glGetVertexAttribPointervARB != 0) (__glGetVertexAttribPointervARB)(index, pname, pointer);  }
PFNGLGETVERTEXATTRIBDVARBPROC __glGetVertexAttribdvARB = nullptr; void APIENTRY glGetVertexAttribdvARB (GLuint index, GLenum pname, GLdouble *params) { if (__glGetVertexAttribdvARB != 0) (__glGetVertexAttribdvARB)(index, pname, params);  }
PFNGLGETVERTEXATTRIBFVARBPROC __glGetVertexAttribfvARB = nullptr; void APIENTRY glGetVertexAttribfvARB (GLuint index, GLenum pname, GLfloat *params) { if (__glGetVertexAttribfvARB != 0) (__glGetVertexAttribfvARB)(index, pname, params);  }
PFNGLGETVERTEXATTRIBIVARBPROC __glGetVertexAttribivARB = nullptr; void APIENTRY glGetVertexAttribivARB (GLuint index, GLenum pname, GLint *params) { if (__glGetVertexAttribivARB != 0) (__glGetVertexAttribivARB)(index, pname, params);  }
PFNGLVERTEXATTRIB1DARBPROC __glVertexAttrib1dARB = nullptr; void APIENTRY glVertexAttrib1dARB (GLuint index, GLdouble x) { if (__glVertexAttrib1dARB != 0) (__glVertexAttrib1dARB)(index, x);  }
PFNGLVERTEXATTRIB1DVARBPROC __glVertexAttrib1dvARB = nullptr; void APIENTRY glVertexAttrib1dvARB (GLuint index, const GLdouble *v) { if (__glVertexAttrib1dvARB != 0) (__glVertexAttrib1dvARB)(index, v);  }
PFNGLVERTEXATTRIB1FARBPROC __glVertexAttrib1fARB = nullptr; void APIENTRY glVertexAttrib1fARB (GLuint index, GLfloat x) { if (__glVertexAttrib1fARB != 0) (__glVertexAttrib1fARB)(index, x);  }
PFNGLVERTEXATTRIB1FVARBPROC __glVertexAttrib1fvARB = nullptr; void APIENTRY glVertexAttrib1fvARB (GLuint index, const GLfloat *v) { if (__glVertexAttrib1fvARB != 0) (__glVertexAttrib1fvARB)(index, v);  }
PFNGLVERTEXATTRIB1SARBPROC __glVertexAttrib1sARB = nullptr; void APIENTRY glVertexAttrib1sARB (GLuint index, GLshort x) { if (__glVertexAttrib1sARB != 0) (__glVertexAttrib1sARB)(index, x);  }
PFNGLVERTEXATTRIB1SVARBPROC __glVertexAttrib1svARB = nullptr; void APIENTRY glVertexAttrib1svARB (GLuint index, const GLshort *v) { if (__glVertexAttrib1svARB != 0) (__glVertexAttrib1svARB)(index, v);  }
PFNGLVERTEXATTRIB2DARBPROC __glVertexAttrib2dARB = nullptr; void APIENTRY glVertexAttrib2dARB (GLuint index, GLdouble x, GLdouble y) { if (__glVertexAttrib2dARB != 0) (__glVertexAttrib2dARB)(index, x, y);  }
PFNGLVERTEXATTRIB2DVARBPROC __glVertexAttrib2dvARB = nullptr; void APIENTRY glVertexAttrib2dvARB (GLuint index, const GLdouble *v) { if (__glVertexAttrib2dvARB != 0) (__glVertexAttrib2dvARB)(index, v);  }
PFNGLVERTEXATTRIB2FARBPROC __glVertexAttrib2fARB = nullptr; void APIENTRY glVertexAttrib2fARB (GLuint index, GLfloat x, GLfloat y) { if (__glVertexAttrib2fARB != 0) (__glVertexAttrib2fARB)(index, x, y);  }
PFNGLVERTEXATTRIB2FVARBPROC __glVertexAttrib2fvARB = nullptr; void APIENTRY glVertexAttrib2fvARB (GLuint index, const GLfloat *v) { if (__glVertexAttrib2fvARB != 0) (__glVertexAttrib2fvARB)(index, v);  }
PFNGLVERTEXATTRIB2SARBPROC __glVertexAttrib2sARB = nullptr; void APIENTRY glVertexAttrib2sARB (GLuint index, GLshort x, GLshort y) { if (__glVertexAttrib2sARB != 0) (__glVertexAttrib2sARB)(index, x, y);  }
PFNGLVERTEXATTRIB2SVARBPROC __glVertexAttrib2svARB = nullptr; void APIENTRY glVertexAttrib2svARB (GLuint index, const GLshort *v) { if (__glVertexAttrib2svARB != 0) (__glVertexAttrib2svARB)(index, v);  }
PFNGLVERTEXATTRIB3DARBPROC __glVertexAttrib3dARB = nullptr; void APIENTRY glVertexAttrib3dARB (GLuint index, GLdouble x, GLdouble y, GLdouble z) { if (__glVertexAttrib3dARB != 0) (__glVertexAttrib3dARB)(index, x, y, z);  }
PFNGLVERTEXATTRIB3DVARBPROC __glVertexAttrib3dvARB = nullptr; void APIENTRY glVertexAttrib3dvARB (GLuint index, const GLdouble *v) { if (__glVertexAttrib3dvARB != 0) (__glVertexAttrib3dvARB)(index, v);  }
PFNGLVERTEXATTRIB3FARBPROC __glVertexAttrib3fARB = nullptr; void APIENTRY glVertexAttrib3fARB (GLuint index, GLfloat x, GLfloat y, GLfloat z) { if (__glVertexAttrib3fARB != 0) (__glVertexAttrib3fARB)(index, x, y, z);  }
PFNGLVERTEXATTRIB3FVARBPROC __glVertexAttrib3fvARB = nullptr; void APIENTRY glVertexAttrib3fvARB (GLuint index, const GLfloat *v) { if (__glVertexAttrib3fvARB != 0) (__glVertexAttrib3fvARB)(index, v);  }
PFNGLVERTEXATTRIB3SARBPROC __glVertexAttrib3sARB = nullptr; void APIENTRY glVertexAttrib3sARB (GLuint index, GLshort x, GLshort y, GLshort z) { if (__glVertexAttrib3sARB != 0) (__glVertexAttrib3sARB)(index, x, y, z);  }
PFNGLVERTEXATTRIB3SVARBPROC __glVertexAttrib3svARB = nullptr; void APIENTRY glVertexAttrib3svARB (GLuint index, const GLshort *v) { if (__glVertexAttrib3svARB != 0) (__glVertexAttrib3svARB)(index, v);  }
PFNGLVERTEXATTRIB4NBVARBPROC __glVertexAttrib4NbvARB = nullptr; void APIENTRY glVertexAttrib4NbvARB (GLuint index, const GLbyte *v) { if (__glVertexAttrib4NbvARB != 0) (__glVertexAttrib4NbvARB)(index, v);  }
PFNGLVERTEXATTRIB4NIVARBPROC __glVertexAttrib4NivARB = nullptr; void APIENTRY glVertexAttrib4NivARB (GLuint index, const GLint *v) { if (__glVertexAttrib4NivARB != 0) (__glVertexAttrib4NivARB)(index, v);  }
PFNGLVERTEXATTRIB4NSVARBPROC __glVertexAttrib4NsvARB = nullptr; void APIENTRY glVertexAttrib4NsvARB (GLuint index, const GLshort *v) { if (__glVertexAttrib4NsvARB != 0) (__glVertexAttrib4NsvARB)(index, v);  }
PFNGLVERTEXATTRIB4NUBARBPROC __glVertexAttrib4NubARB = nullptr; void APIENTRY glVertexAttrib4NubARB (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w) { if (__glVertexAttrib4NubARB != 0) (__glVertexAttrib4NubARB)(index, x, y, z, w);  }
PFNGLVERTEXATTRIB4NUBVARBPROC __glVertexAttrib4NubvARB = nullptr; void APIENTRY glVertexAttrib4NubvARB (GLuint index, const GLubyte *v) { if (__glVertexAttrib4NubvARB != 0) (__glVertexAttrib4NubvARB)(index, v);  }
PFNGLVERTEXATTRIB4NUIVARBPROC __glVertexAttrib4NuivARB = nullptr; void APIENTRY glVertexAttrib4NuivARB (GLuint index, const GLuint *v) { if (__glVertexAttrib4NuivARB != 0) (__glVertexAttrib4NuivARB)(index, v);  }
PFNGLVERTEXATTRIB4NUSVARBPROC __glVertexAttrib4NusvARB = nullptr; void APIENTRY glVertexAttrib4NusvARB (GLuint index, const GLushort *v) { if (__glVertexAttrib4NusvARB != 0) (__glVertexAttrib4NusvARB)(index, v);  }
PFNGLVERTEXATTRIB4BVARBPROC __glVertexAttrib4bvARB = nullptr; void APIENTRY glVertexAttrib4bvARB (GLuint index, const GLbyte *v) { if (__glVertexAttrib4bvARB != 0) (__glVertexAttrib4bvARB)(index, v);  }
PFNGLVERTEXATTRIB4DARBPROC __glVertexAttrib4dARB = nullptr; void APIENTRY glVertexAttrib4dARB (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { if (__glVertexAttrib4dARB != 0) (__glVertexAttrib4dARB)(index, x, y, z, w);  }
PFNGLVERTEXATTRIB4DVARBPROC __glVertexAttrib4dvARB = nullptr; void APIENTRY glVertexAttrib4dvARB (GLuint index, const GLdouble *v) { if (__glVertexAttrib4dvARB != 0) (__glVertexAttrib4dvARB)(index, v);  }
PFNGLVERTEXATTRIB4FARBPROC __glVertexAttrib4fARB = nullptr; void APIENTRY glVertexAttrib4fARB (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) { if (__glVertexAttrib4fARB != 0) (__glVertexAttrib4fARB)(index, x, y, z, w);  }
PFNGLVERTEXATTRIB4FVARBPROC __glVertexAttrib4fvARB = nullptr; void APIENTRY glVertexAttrib4fvARB (GLuint index, const GLfloat *v) { if (__glVertexAttrib4fvARB != 0) (__glVertexAttrib4fvARB)(index, v);  }
PFNGLVERTEXATTRIB4IVARBPROC __glVertexAttrib4ivARB = nullptr; void APIENTRY glVertexAttrib4ivARB (GLuint index, const GLint *v) { if (__glVertexAttrib4ivARB != 0) (__glVertexAttrib4ivARB)(index, v);  }
PFNGLVERTEXATTRIB4SARBPROC __glVertexAttrib4sARB = nullptr; void APIENTRY glVertexAttrib4sARB (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w) { if (__glVertexAttrib4sARB != 0) (__glVertexAttrib4sARB)(index, x, y, z, w);  }
PFNGLVERTEXATTRIB4SVARBPROC __glVertexAttrib4svARB = nullptr; void APIENTRY glVertexAttrib4svARB (GLuint index, const GLshort *v) { if (__glVertexAttrib4svARB != 0) (__glVertexAttrib4svARB)(index, v);  }
PFNGLVERTEXATTRIB4UBVARBPROC __glVertexAttrib4ubvARB = nullptr; void APIENTRY glVertexAttrib4ubvARB (GLuint index, const GLubyte *v) { if (__glVertexAttrib4ubvARB != 0) (__glVertexAttrib4ubvARB)(index, v);  }
PFNGLVERTEXATTRIB4UIVARBPROC __glVertexAttrib4uivARB = nullptr; void APIENTRY glVertexAttrib4uivARB (GLuint index, const GLuint *v) { if (__glVertexAttrib4uivARB != 0) (__glVertexAttrib4uivARB)(index, v);  }
PFNGLVERTEXATTRIB4USVARBPROC __glVertexAttrib4usvARB = nullptr; void APIENTRY glVertexAttrib4usvARB (GLuint index, const GLushort *v) { if (__glVertexAttrib4usvARB != 0) (__glVertexAttrib4usvARB)(index, v);  }
PFNGLVERTEXATTRIBPOINTERARBPROC __glVertexAttribPointerARB = nullptr; void APIENTRY glVertexAttribPointerARB (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer) { if (__glVertexAttribPointerARB != 0) (__glVertexAttribPointerARB)(index, size, type, normalized, stride, pointer);  }
bool __loadGL_ARB_vertex_program(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glDisableVertexAttribArrayARB = (PFNGLDISABLEVERTEXATTRIBARRAYARBPROC)proc((const GLubyte*)"glDisableVertexAttribArrayARB")) != nullptr) || r;
    r = ((__glEnableVertexAttribArrayARB = (PFNGLENABLEVERTEXATTRIBARRAYARBPROC)proc((const GLubyte*)"glEnableVertexAttribArrayARB")) != nullptr) || r;
    r = ((__glGetVertexAttribPointervARB = (PFNGLGETVERTEXATTRIBPOINTERVARBPROC)proc((const GLubyte*)"glGetVertexAttribPointervARB")) != nullptr) || r;
    r = ((__glGetVertexAttribdvARB = (PFNGLGETVERTEXATTRIBDVARBPROC)proc((const GLubyte*)"glGetVertexAttribdvARB")) != nullptr) || r;
    r = ((__glGetVertexAttribfvARB = (PFNGLGETVERTEXATTRIBFVARBPROC)proc((const GLubyte*)"glGetVertexAttribfvARB")) != nullptr) || r;
    r = ((__glGetVertexAttribivARB = (PFNGLGETVERTEXATTRIBIVARBPROC)proc((const GLubyte*)"glGetVertexAttribivARB")) != nullptr) || r;
    r = ((__glVertexAttrib1dARB = (PFNGLVERTEXATTRIB1DARBPROC)proc((const GLubyte*)"glVertexAttrib1dARB")) != nullptr) || r;
    r = ((__glVertexAttrib1dvARB = (PFNGLVERTEXATTRIB1DVARBPROC)proc((const GLubyte*)"glVertexAttrib1dvARB")) != nullptr) || r;
    r = ((__glVertexAttrib1fARB = (PFNGLVERTEXATTRIB1FARBPROC)proc((const GLubyte*)"glVertexAttrib1fARB")) != nullptr) || r;
    r = ((__glVertexAttrib1fvARB = (PFNGLVERTEXATTRIB1FVARBPROC)proc((const GLubyte*)"glVertexAttrib1fvARB")) != nullptr) || r;
    r = ((__glVertexAttrib1sARB = (PFNGLVERTEXATTRIB1SARBPROC)proc((const GLubyte*)"glVertexAttrib1sARB")) != nullptr) || r;
    r = ((__glVertexAttrib1svARB = (PFNGLVERTEXATTRIB1SVARBPROC)proc((const GLubyte*)"glVertexAttrib1svARB")) != nullptr) || r;
    r = ((__glVertexAttrib2dARB = (PFNGLVERTEXATTRIB2DARBPROC)proc((const GLubyte*)"glVertexAttrib2dARB")) != nullptr) || r;
    r = ((__glVertexAttrib2dvARB = (PFNGLVERTEXATTRIB2DVARBPROC)proc((const GLubyte*)"glVertexAttrib2dvARB")) != nullptr) || r;
    r = ((__glVertexAttrib2fARB = (PFNGLVERTEXATTRIB2FARBPROC)proc((const GLubyte*)"glVertexAttrib2fARB")) != nullptr) || r;
    r = ((__glVertexAttrib2fvARB = (PFNGLVERTEXATTRIB2FVARBPROC)proc((const GLubyte*)"glVertexAttrib2fvARB")) != nullptr) || r;
    r = ((__glVertexAttrib2sARB = (PFNGLVERTEXATTRIB2SARBPROC)proc((const GLubyte*)"glVertexAttrib2sARB")) != nullptr) || r;
    r = ((__glVertexAttrib2svARB = (PFNGLVERTEXATTRIB2SVARBPROC)proc((const GLubyte*)"glVertexAttrib2svARB")) != nullptr) || r;
    r = ((__glVertexAttrib3dARB = (PFNGLVERTEXATTRIB3DARBPROC)proc((const GLubyte*)"glVertexAttrib3dARB")) != nullptr) || r;
    r = ((__glVertexAttrib3dvARB = (PFNGLVERTEXATTRIB3DVARBPROC)proc((const GLubyte*)"glVertexAttrib3dvARB")) != nullptr) || r;
    r = ((__glVertexAttrib3fARB = (PFNGLVERTEXATTRIB3FARBPROC)proc((const GLubyte*)"glVertexAttrib3fARB")) != nullptr) || r;
    r = ((__glVertexAttrib3fvARB = (PFNGLVERTEXATTRIB3FVARBPROC)proc((const GLubyte*)"glVertexAttrib3fvARB")) != nullptr) || r;
    r = ((__glVertexAttrib3sARB = (PFNGLVERTEXATTRIB3SARBPROC)proc((const GLubyte*)"glVertexAttrib3sARB")) != nullptr) || r;
    r = ((__glVertexAttrib3svARB = (PFNGLVERTEXATTRIB3SVARBPROC)proc((const GLubyte*)"glVertexAttrib3svARB")) != nullptr) || r;
    r = ((__glVertexAttrib4NbvARB = (PFNGLVERTEXATTRIB4NBVARBPROC)proc((const GLubyte*)"glVertexAttrib4NbvARB")) != nullptr) || r;
    r = ((__glVertexAttrib4NivARB = (PFNGLVERTEXATTRIB4NIVARBPROC)proc((const GLubyte*)"glVertexAttrib4NivARB")) != nullptr) || r;
    r = ((__glVertexAttrib4NsvARB = (PFNGLVERTEXATTRIB4NSVARBPROC)proc((const GLubyte*)"glVertexAttrib4NsvARB")) != nullptr) || r;
    r = ((__glVertexAttrib4NubARB = (PFNGLVERTEXATTRIB4NUBARBPROC)proc((const GLubyte*)"glVertexAttrib4NubARB")) != nullptr) || r;
    r = ((__glVertexAttrib4NubvARB = (PFNGLVERTEXATTRIB4NUBVARBPROC)proc((const GLubyte*)"glVertexAttrib4NubvARB")) != nullptr) || r;
    r = ((__glVertexAttrib4NuivARB = (PFNGLVERTEXATTRIB4NUIVARBPROC)proc((const GLubyte*)"glVertexAttrib4NuivARB")) != nullptr) || r;
    r = ((__glVertexAttrib4NusvARB = (PFNGLVERTEXATTRIB4NUSVARBPROC)proc((const GLubyte*)"glVertexAttrib4NusvARB")) != nullptr) || r;
    r = ((__glVertexAttrib4bvARB = (PFNGLVERTEXATTRIB4BVARBPROC)proc((const GLubyte*)"glVertexAttrib4bvARB")) != nullptr) || r;
    r = ((__glVertexAttrib4dARB = (PFNGLVERTEXATTRIB4DARBPROC)proc((const GLubyte*)"glVertexAttrib4dARB")) != nullptr) || r;
    r = ((__glVertexAttrib4dvARB = (PFNGLVERTEXATTRIB4DVARBPROC)proc((const GLubyte*)"glVertexAttrib4dvARB")) != nullptr) || r;
    r = ((__glVertexAttrib4fARB = (PFNGLVERTEXATTRIB4FARBPROC)proc((const GLubyte*)"glVertexAttrib4fARB")) != nullptr) || r;
    r = ((__glVertexAttrib4fvARB = (PFNGLVERTEXATTRIB4FVARBPROC)proc((const GLubyte*)"glVertexAttrib4fvARB")) != nullptr) || r;
    r = ((__glVertexAttrib4ivARB = (PFNGLVERTEXATTRIB4IVARBPROC)proc((const GLubyte*)"glVertexAttrib4ivARB")) != nullptr) || r;
    r = ((__glVertexAttrib4sARB = (PFNGLVERTEXATTRIB4SARBPROC)proc((const GLubyte*)"glVertexAttrib4sARB")) != nullptr) || r;
    r = ((__glVertexAttrib4svARB = (PFNGLVERTEXATTRIB4SVARBPROC)proc((const GLubyte*)"glVertexAttrib4svARB")) != nullptr) || r;
    r = ((__glVertexAttrib4ubvARB = (PFNGLVERTEXATTRIB4UBVARBPROC)proc((const GLubyte*)"glVertexAttrib4ubvARB")) != nullptr) || r;
    r = ((__glVertexAttrib4uivARB = (PFNGLVERTEXATTRIB4UIVARBPROC)proc((const GLubyte*)"glVertexAttrib4uivARB")) != nullptr) || r;
    r = ((__glVertexAttrib4usvARB = (PFNGLVERTEXATTRIB4USVARBPROC)proc((const GLubyte*)"glVertexAttrib4usvARB")) != nullptr) || r;
    r = ((__glVertexAttribPointerARB = (PFNGLVERTEXATTRIBPOINTERARBPROC)proc((const GLubyte*)"glVertexAttribPointerARB")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_ARB_vertex_program = false;
/* GL_ARB_vertex_shader */
PFNGLBINDATTRIBLOCATIONARBPROC __glBindAttribLocationARB = nullptr; void APIENTRY glBindAttribLocationARB (GLhandleARB programObj, GLuint index, const GLcharARB *name) { if (__glBindAttribLocationARB != 0) (__glBindAttribLocationARB)(programObj, index, name);  }
PFNGLGETACTIVEATTRIBARBPROC __glGetActiveAttribARB = nullptr; void APIENTRY glGetActiveAttribARB (GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name) { if (__glGetActiveAttribARB != 0) (__glGetActiveAttribARB)(programObj, index, maxLength, length, size, type, name);  }
PFNGLGETATTRIBLOCATIONARBPROC __glGetAttribLocationARB = nullptr; GLint APIENTRY glGetAttribLocationARB (GLhandleARB programObj, const GLcharARB *name) { if (__glGetAttribLocationARB != 0) return (__glGetAttribLocationARB)(programObj, name); return 0; }
bool __loadGL_ARB_vertex_shader(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glBindAttribLocationARB = (PFNGLBINDATTRIBLOCATIONARBPROC)proc((const GLubyte*)"glBindAttribLocationARB")) != nullptr) || r;
    r = ((__glGetActiveAttribARB = (PFNGLGETACTIVEATTRIBARBPROC)proc((const GLubyte*)"glGetActiveAttribARB")) != nullptr) || r;
    r = ((__glGetAttribLocationARB = (PFNGLGETATTRIBLOCATIONARBPROC)proc((const GLubyte*)"glGetAttribLocationARB")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_ARB_vertex_shader = false;
/* GL_ARB_vertex_type_10f_11f_11f_rev */
bool __loadGL_ARB_vertex_type_10f_11f_11f_rev(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_vertex_type_10f_11f_11f_rev = false;
/* GL_ARB_vertex_type_2_10_10_10_rev */
bool __loadGL_ARB_vertex_type_2_10_10_10_rev(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_vertex_type_2_10_10_10_rev = false;
/* GL_ARB_viewport_array */
bool __loadGL_ARB_viewport_array(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ARB_viewport_array = false;
/* GL_ARB_window_pos */
PFNGLWINDOWPOS2DARBPROC __glWindowPos2dARB = nullptr; void APIENTRY glWindowPos2dARB (GLdouble x, GLdouble y) { if (__glWindowPos2dARB != 0) (__glWindowPos2dARB)(x, y);  }
PFNGLWINDOWPOS2DVARBPROC __glWindowPos2dvARB = nullptr; void APIENTRY glWindowPos2dvARB (const GLdouble *v) { if (__glWindowPos2dvARB != 0) (__glWindowPos2dvARB)(v);  }
PFNGLWINDOWPOS2FARBPROC __glWindowPos2fARB = nullptr; void APIENTRY glWindowPos2fARB (GLfloat x, GLfloat y) { if (__glWindowPos2fARB != 0) (__glWindowPos2fARB)(x, y);  }
PFNGLWINDOWPOS2FVARBPROC __glWindowPos2fvARB = nullptr; void APIENTRY glWindowPos2fvARB (const GLfloat *v) { if (__glWindowPos2fvARB != 0) (__glWindowPos2fvARB)(v);  }
PFNGLWINDOWPOS2IARBPROC __glWindowPos2iARB = nullptr; void APIENTRY glWindowPos2iARB (GLint x, GLint y) { if (__glWindowPos2iARB != 0) (__glWindowPos2iARB)(x, y);  }
PFNGLWINDOWPOS2IVARBPROC __glWindowPos2ivARB = nullptr; void APIENTRY glWindowPos2ivARB (const GLint *v) { if (__glWindowPos2ivARB != 0) (__glWindowPos2ivARB)(v);  }
PFNGLWINDOWPOS2SARBPROC __glWindowPos2sARB = nullptr; void APIENTRY glWindowPos2sARB (GLshort x, GLshort y) { if (__glWindowPos2sARB != 0) (__glWindowPos2sARB)(x, y);  }
PFNGLWINDOWPOS2SVARBPROC __glWindowPos2svARB = nullptr; void APIENTRY glWindowPos2svARB (const GLshort *v) { if (__glWindowPos2svARB != 0) (__glWindowPos2svARB)(v);  }
PFNGLWINDOWPOS3DARBPROC __glWindowPos3dARB = nullptr; void APIENTRY glWindowPos3dARB (GLdouble x, GLdouble y, GLdouble z) { if (__glWindowPos3dARB != 0) (__glWindowPos3dARB)(x, y, z);  }
PFNGLWINDOWPOS3DVARBPROC __glWindowPos3dvARB = nullptr; void APIENTRY glWindowPos3dvARB (const GLdouble *v) { if (__glWindowPos3dvARB != 0) (__glWindowPos3dvARB)(v);  }
PFNGLWINDOWPOS3FARBPROC __glWindowPos3fARB = nullptr; void APIENTRY glWindowPos3fARB (GLfloat x, GLfloat y, GLfloat z) { if (__glWindowPos3fARB != 0) (__glWindowPos3fARB)(x, y, z);  }
PFNGLWINDOWPOS3FVARBPROC __glWindowPos3fvARB = nullptr; void APIENTRY glWindowPos3fvARB (const GLfloat *v) { if (__glWindowPos3fvARB != 0) (__glWindowPos3fvARB)(v);  }
PFNGLWINDOWPOS3IARBPROC __glWindowPos3iARB = nullptr; void APIENTRY glWindowPos3iARB (GLint x, GLint y, GLint z) { if (__glWindowPos3iARB != 0) (__glWindowPos3iARB)(x, y, z);  }
PFNGLWINDOWPOS3IVARBPROC __glWindowPos3ivARB = nullptr; void APIENTRY glWindowPos3ivARB (const GLint *v) { if (__glWindowPos3ivARB != 0) (__glWindowPos3ivARB)(v);  }
PFNGLWINDOWPOS3SARBPROC __glWindowPos3sARB = nullptr; void APIENTRY glWindowPos3sARB (GLshort x, GLshort y, GLshort z) { if (__glWindowPos3sARB != 0) (__glWindowPos3sARB)(x, y, z);  }
PFNGLWINDOWPOS3SVARBPROC __glWindowPos3svARB = nullptr; void APIENTRY glWindowPos3svARB (const GLshort *v) { if (__glWindowPos3svARB != 0) (__glWindowPos3svARB)(v);  }
bool __loadGL_ARB_window_pos(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glWindowPos2dARB = (PFNGLWINDOWPOS2DARBPROC)proc((const GLubyte*)"glWindowPos2dARB")) != nullptr) || r;
    r = ((__glWindowPos2dvARB = (PFNGLWINDOWPOS2DVARBPROC)proc((const GLubyte*)"glWindowPos2dvARB")) != nullptr) || r;
    r = ((__glWindowPos2fARB = (PFNGLWINDOWPOS2FARBPROC)proc((const GLubyte*)"glWindowPos2fARB")) != nullptr) || r;
    r = ((__glWindowPos2fvARB = (PFNGLWINDOWPOS2FVARBPROC)proc((const GLubyte*)"glWindowPos2fvARB")) != nullptr) || r;
    r = ((__glWindowPos2iARB = (PFNGLWINDOWPOS2IARBPROC)proc((const GLubyte*)"glWindowPos2iARB")) != nullptr) || r;
    r = ((__glWindowPos2ivARB = (PFNGLWINDOWPOS2IVARBPROC)proc((const GLubyte*)"glWindowPos2ivARB")) != nullptr) || r;
    r = ((__glWindowPos2sARB = (PFNGLWINDOWPOS2SARBPROC)proc((const GLubyte*)"glWindowPos2sARB")) != nullptr) || r;
    r = ((__glWindowPos2svARB = (PFNGLWINDOWPOS2SVARBPROC)proc((const GLubyte*)"glWindowPos2svARB")) != nullptr) || r;
    r = ((__glWindowPos3dARB = (PFNGLWINDOWPOS3DARBPROC)proc((const GLubyte*)"glWindowPos3dARB")) != nullptr) || r;
    r = ((__glWindowPos3dvARB = (PFNGLWINDOWPOS3DVARBPROC)proc((const GLubyte*)"glWindowPos3dvARB")) != nullptr) || r;
    r = ((__glWindowPos3fARB = (PFNGLWINDOWPOS3FARBPROC)proc((const GLubyte*)"glWindowPos3fARB")) != nullptr) || r;
    r = ((__glWindowPos3fvARB = (PFNGLWINDOWPOS3FVARBPROC)proc((const GLubyte*)"glWindowPos3fvARB")) != nullptr) || r;
    r = ((__glWindowPos3iARB = (PFNGLWINDOWPOS3IARBPROC)proc((const GLubyte*)"glWindowPos3iARB")) != nullptr) || r;
    r = ((__glWindowPos3ivARB = (PFNGLWINDOWPOS3IVARBPROC)proc((const GLubyte*)"glWindowPos3ivARB")) != nullptr) || r;
    r = ((__glWindowPos3sARB = (PFNGLWINDOWPOS3SARBPROC)proc((const GLubyte*)"glWindowPos3sARB")) != nullptr) || r;
    r = ((__glWindowPos3svARB = (PFNGLWINDOWPOS3SVARBPROC)proc((const GLubyte*)"glWindowPos3svARB")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_ARB_window_pos = false;
/* GL_KHR_blend_equation_advanced */
PFNGLBLENDBARRIERKHRPROC __glBlendBarrierKHR = nullptr; void APIENTRY glBlendBarrierKHR () { if (__glBlendBarrierKHR != 0) (__glBlendBarrierKHR)();  }
bool __loadGL_KHR_blend_equation_advanced(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glBlendBarrierKHR = (PFNGLBLENDBARRIERKHRPROC)proc((const GLubyte*)"glBlendBarrierKHR")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_KHR_blend_equation_advanced = false;
/* GL_KHR_blend_equation_advanced_coherent */
bool __loadGL_KHR_blend_equation_advanced_coherent(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_KHR_blend_equation_advanced_coherent = false;
/* GL_KHR_context_flush_control */
bool __loadGL_KHR_context_flush_control(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_KHR_context_flush_control = false;
/* GL_KHR_debug */
bool __loadGL_KHR_debug(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_KHR_debug = false;
/* GL_KHR_no_error */
bool __loadGL_KHR_no_error(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_KHR_no_error = false;
/* GL_KHR_robust_buffer_access_behavior */
bool __loadGL_KHR_robust_buffer_access_behavior(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_KHR_robust_buffer_access_behavior = false;
/* GL_KHR_robustness */
bool __loadGL_KHR_robustness(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_KHR_robustness = false;
/* GL_KHR_texture_compression_astc_hdr */
bool __loadGL_KHR_texture_compression_astc_hdr(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_KHR_texture_compression_astc_hdr = false;
/* GL_KHR_texture_compression_astc_ldr */
bool __loadGL_KHR_texture_compression_astc_ldr(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_KHR_texture_compression_astc_ldr = false;
/* GL_KHR_texture_compression_astc_sliced_3d */
bool __loadGL_KHR_texture_compression_astc_sliced_3d(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_KHR_texture_compression_astc_sliced_3d = false;
/* GL_OES_byte_coordinates */
PFNGLMULTITEXCOORD1BOESPROC __glMultiTexCoord1bOES = nullptr; void APIENTRY glMultiTexCoord1bOES (GLenum texture, GLbyte s) { if (__glMultiTexCoord1bOES != 0) (__glMultiTexCoord1bOES)(texture, s);  }
PFNGLMULTITEXCOORD1BVOESPROC __glMultiTexCoord1bvOES = nullptr; void APIENTRY glMultiTexCoord1bvOES (GLenum texture, const GLbyte *coords) { if (__glMultiTexCoord1bvOES != 0) (__glMultiTexCoord1bvOES)(texture, coords);  }
PFNGLMULTITEXCOORD2BOESPROC __glMultiTexCoord2bOES = nullptr; void APIENTRY glMultiTexCoord2bOES (GLenum texture, GLbyte s, GLbyte t) { if (__glMultiTexCoord2bOES != 0) (__glMultiTexCoord2bOES)(texture, s, t);  }
PFNGLMULTITEXCOORD2BVOESPROC __glMultiTexCoord2bvOES = nullptr; void APIENTRY glMultiTexCoord2bvOES (GLenum texture, const GLbyte *coords) { if (__glMultiTexCoord2bvOES != 0) (__glMultiTexCoord2bvOES)(texture, coords);  }
PFNGLMULTITEXCOORD3BOESPROC __glMultiTexCoord3bOES = nullptr; void APIENTRY glMultiTexCoord3bOES (GLenum texture, GLbyte s, GLbyte t, GLbyte r) { if (__glMultiTexCoord3bOES != 0) (__glMultiTexCoord3bOES)(texture, s, t, r);  }
PFNGLMULTITEXCOORD3BVOESPROC __glMultiTexCoord3bvOES = nullptr; void APIENTRY glMultiTexCoord3bvOES (GLenum texture, const GLbyte *coords) { if (__glMultiTexCoord3bvOES != 0) (__glMultiTexCoord3bvOES)(texture, coords);  }
PFNGLMULTITEXCOORD4BOESPROC __glMultiTexCoord4bOES = nullptr; void APIENTRY glMultiTexCoord4bOES (GLenum texture, GLbyte s, GLbyte t, GLbyte r, GLbyte q) { if (__glMultiTexCoord4bOES != 0) (__glMultiTexCoord4bOES)(texture, s, t, r, q);  }
PFNGLMULTITEXCOORD4BVOESPROC __glMultiTexCoord4bvOES = nullptr; void APIENTRY glMultiTexCoord4bvOES (GLenum texture, const GLbyte *coords) { if (__glMultiTexCoord4bvOES != 0) (__glMultiTexCoord4bvOES)(texture, coords);  }
PFNGLTEXCOORD1BOESPROC __glTexCoord1bOES = nullptr; void APIENTRY glTexCoord1bOES (GLbyte s) { if (__glTexCoord1bOES != 0) (__glTexCoord1bOES)(s);  }
PFNGLTEXCOORD1BVOESPROC __glTexCoord1bvOES = nullptr; void APIENTRY glTexCoord1bvOES (const GLbyte *coords) { if (__glTexCoord1bvOES != 0) (__glTexCoord1bvOES)(coords);  }
PFNGLTEXCOORD2BOESPROC __glTexCoord2bOES = nullptr; void APIENTRY glTexCoord2bOES (GLbyte s, GLbyte t) { if (__glTexCoord2bOES != 0) (__glTexCoord2bOES)(s, t);  }
PFNGLTEXCOORD2BVOESPROC __glTexCoord2bvOES = nullptr; void APIENTRY glTexCoord2bvOES (const GLbyte *coords) { if (__glTexCoord2bvOES != 0) (__glTexCoord2bvOES)(coords);  }
PFNGLTEXCOORD3BOESPROC __glTexCoord3bOES = nullptr; void APIENTRY glTexCoord3bOES (GLbyte s, GLbyte t, GLbyte r) { if (__glTexCoord3bOES != 0) (__glTexCoord3bOES)(s, t, r);  }
PFNGLTEXCOORD3BVOESPROC __glTexCoord3bvOES = nullptr; void APIENTRY glTexCoord3bvOES (const GLbyte *coords) { if (__glTexCoord3bvOES != 0) (__glTexCoord3bvOES)(coords);  }
PFNGLTEXCOORD4BOESPROC __glTexCoord4bOES = nullptr; void APIENTRY glTexCoord4bOES (GLbyte s, GLbyte t, GLbyte r, GLbyte q) { if (__glTexCoord4bOES != 0) (__glTexCoord4bOES)(s, t, r, q);  }
PFNGLTEXCOORD4BVOESPROC __glTexCoord4bvOES = nullptr; void APIENTRY glTexCoord4bvOES (const GLbyte *coords) { if (__glTexCoord4bvOES != 0) (__glTexCoord4bvOES)(coords);  }
PFNGLVERTEX2BOESPROC __glVertex2bOES = nullptr; void APIENTRY glVertex2bOES (GLbyte x, GLbyte y) { if (__glVertex2bOES != 0) (__glVertex2bOES)(x, y);  }
PFNGLVERTEX2BVOESPROC __glVertex2bvOES = nullptr; void APIENTRY glVertex2bvOES (const GLbyte *coords) { if (__glVertex2bvOES != 0) (__glVertex2bvOES)(coords);  }
PFNGLVERTEX3BOESPROC __glVertex3bOES = nullptr; void APIENTRY glVertex3bOES (GLbyte x, GLbyte y, GLbyte z) { if (__glVertex3bOES != 0) (__glVertex3bOES)(x, y, z);  }
PFNGLVERTEX3BVOESPROC __glVertex3bvOES = nullptr; void APIENTRY glVertex3bvOES (const GLbyte *coords) { if (__glVertex3bvOES != 0) (__glVertex3bvOES)(coords);  }
PFNGLVERTEX4BOESPROC __glVertex4bOES = nullptr; void APIENTRY glVertex4bOES (GLbyte x, GLbyte y, GLbyte z, GLbyte w) { if (__glVertex4bOES != 0) (__glVertex4bOES)(x, y, z, w);  }
PFNGLVERTEX4BVOESPROC __glVertex4bvOES = nullptr; void APIENTRY glVertex4bvOES (const GLbyte *coords) { if (__glVertex4bvOES != 0) (__glVertex4bvOES)(coords);  }
bool __loadGL_OES_byte_coordinates(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glMultiTexCoord1bOES = (PFNGLMULTITEXCOORD1BOESPROC)proc((const GLubyte*)"glMultiTexCoord1bOES")) != nullptr) || r;
    r = ((__glMultiTexCoord1bvOES = (PFNGLMULTITEXCOORD1BVOESPROC)proc((const GLubyte*)"glMultiTexCoord1bvOES")) != nullptr) || r;
    r = ((__glMultiTexCoord2bOES = (PFNGLMULTITEXCOORD2BOESPROC)proc((const GLubyte*)"glMultiTexCoord2bOES")) != nullptr) || r;
    r = ((__glMultiTexCoord2bvOES = (PFNGLMULTITEXCOORD2BVOESPROC)proc((const GLubyte*)"glMultiTexCoord2bvOES")) != nullptr) || r;
    r = ((__glMultiTexCoord3bOES = (PFNGLMULTITEXCOORD3BOESPROC)proc((const GLubyte*)"glMultiTexCoord3bOES")) != nullptr) || r;
    r = ((__glMultiTexCoord3bvOES = (PFNGLMULTITEXCOORD3BVOESPROC)proc((const GLubyte*)"glMultiTexCoord3bvOES")) != nullptr) || r;
    r = ((__glMultiTexCoord4bOES = (PFNGLMULTITEXCOORD4BOESPROC)proc((const GLubyte*)"glMultiTexCoord4bOES")) != nullptr) || r;
    r = ((__glMultiTexCoord4bvOES = (PFNGLMULTITEXCOORD4BVOESPROC)proc((const GLubyte*)"glMultiTexCoord4bvOES")) != nullptr) || r;
    r = ((__glTexCoord1bOES = (PFNGLTEXCOORD1BOESPROC)proc((const GLubyte*)"glTexCoord1bOES")) != nullptr) || r;
    r = ((__glTexCoord1bvOES = (PFNGLTEXCOORD1BVOESPROC)proc((const GLubyte*)"glTexCoord1bvOES")) != nullptr) || r;
    r = ((__glTexCoord2bOES = (PFNGLTEXCOORD2BOESPROC)proc((const GLubyte*)"glTexCoord2bOES")) != nullptr) || r;
    r = ((__glTexCoord2bvOES = (PFNGLTEXCOORD2BVOESPROC)proc((const GLubyte*)"glTexCoord2bvOES")) != nullptr) || r;
    r = ((__glTexCoord3bOES = (PFNGLTEXCOORD3BOESPROC)proc((const GLubyte*)"glTexCoord3bOES")) != nullptr) || r;
    r = ((__glTexCoord3bvOES = (PFNGLTEXCOORD3BVOESPROC)proc((const GLubyte*)"glTexCoord3bvOES")) != nullptr) || r;
    r = ((__glTexCoord4bOES = (PFNGLTEXCOORD4BOESPROC)proc((const GLubyte*)"glTexCoord4bOES")) != nullptr) || r;
    r = ((__glTexCoord4bvOES = (PFNGLTEXCOORD4BVOESPROC)proc((const GLubyte*)"glTexCoord4bvOES")) != nullptr) || r;
    r = ((__glVertex2bOES = (PFNGLVERTEX2BOESPROC)proc((const GLubyte*)"glVertex2bOES")) != nullptr) || r;
    r = ((__glVertex2bvOES = (PFNGLVERTEX2BVOESPROC)proc((const GLubyte*)"glVertex2bvOES")) != nullptr) || r;
    r = ((__glVertex3bOES = (PFNGLVERTEX3BOESPROC)proc((const GLubyte*)"glVertex3bOES")) != nullptr) || r;
    r = ((__glVertex3bvOES = (PFNGLVERTEX3BVOESPROC)proc((const GLubyte*)"glVertex3bvOES")) != nullptr) || r;
    r = ((__glVertex4bOES = (PFNGLVERTEX4BOESPROC)proc((const GLubyte*)"glVertex4bOES")) != nullptr) || r;
    r = ((__glVertex4bvOES = (PFNGLVERTEX4BVOESPROC)proc((const GLubyte*)"glVertex4bvOES")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_OES_byte_coordinates = false;
/* GL_OES_compressed_paletted_texture */
bool __loadGL_OES_compressed_paletted_texture(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_OES_compressed_paletted_texture = false;
/* GL_OES_fixed_point */
PFNGLACCUMXOESPROC __glAccumxOES = nullptr; void APIENTRY glAccumxOES (GLenum op, GLfixed value) { if (__glAccumxOES != 0) (__glAccumxOES)(op, value);  }
PFNGLALPHAFUNCXOESPROC __glAlphaFuncxOES = nullptr; void APIENTRY glAlphaFuncxOES (GLenum func, GLfixed ref) { if (__glAlphaFuncxOES != 0) (__glAlphaFuncxOES)(func, ref);  }
PFNGLBITMAPXOESPROC __glBitmapxOES = nullptr; void APIENTRY glBitmapxOES (GLsizei width, GLsizei height, GLfixed xorig, GLfixed yorig, GLfixed xmove, GLfixed ymove, const GLubyte *bitmap) { if (__glBitmapxOES != 0) (__glBitmapxOES)(width, height, xorig, yorig, xmove, ymove, bitmap);  }
PFNGLBLENDCOLORXOESPROC __glBlendColorxOES = nullptr; void APIENTRY glBlendColorxOES (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha) { if (__glBlendColorxOES != 0) (__glBlendColorxOES)(red, green, blue, alpha);  }
PFNGLCLEARACCUMXOESPROC __glClearAccumxOES = nullptr; void APIENTRY glClearAccumxOES (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha) { if (__glClearAccumxOES != 0) (__glClearAccumxOES)(red, green, blue, alpha);  }
PFNGLCLEARCOLORXOESPROC __glClearColorxOES = nullptr; void APIENTRY glClearColorxOES (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha) { if (__glClearColorxOES != 0) (__glClearColorxOES)(red, green, blue, alpha);  }
PFNGLCLEARDEPTHXOESPROC __glClearDepthxOES = nullptr; void APIENTRY glClearDepthxOES (GLfixed depth) { if (__glClearDepthxOES != 0) (__glClearDepthxOES)(depth);  }
PFNGLCLIPPLANEXOESPROC __glClipPlanexOES = nullptr; void APIENTRY glClipPlanexOES (GLenum plane, const GLfixed *equation) { if (__glClipPlanexOES != 0) (__glClipPlanexOES)(plane, equation);  }
PFNGLCOLOR3XOESPROC __glColor3xOES = nullptr; void APIENTRY glColor3xOES (GLfixed red, GLfixed green, GLfixed blue) { if (__glColor3xOES != 0) (__glColor3xOES)(red, green, blue);  }
PFNGLCOLOR3XVOESPROC __glColor3xvOES = nullptr; void APIENTRY glColor3xvOES (const GLfixed *components) { if (__glColor3xvOES != 0) (__glColor3xvOES)(components);  }
PFNGLCOLOR4XOESPROC __glColor4xOES = nullptr; void APIENTRY glColor4xOES (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha) { if (__glColor4xOES != 0) (__glColor4xOES)(red, green, blue, alpha);  }
PFNGLCOLOR4XVOESPROC __glColor4xvOES = nullptr; void APIENTRY glColor4xvOES (const GLfixed *components) { if (__glColor4xvOES != 0) (__glColor4xvOES)(components);  }
PFNGLCONVOLUTIONPARAMETERXOESPROC __glConvolutionParameterxOES = nullptr; void APIENTRY glConvolutionParameterxOES (GLenum target, GLenum pname, GLfixed param) { if (__glConvolutionParameterxOES != 0) (__glConvolutionParameterxOES)(target, pname, param);  }
PFNGLCONVOLUTIONPARAMETERXVOESPROC __glConvolutionParameterxvOES = nullptr; void APIENTRY glConvolutionParameterxvOES (GLenum target, GLenum pname, const GLfixed *params) { if (__glConvolutionParameterxvOES != 0) (__glConvolutionParameterxvOES)(target, pname, params);  }
PFNGLDEPTHRANGEXOESPROC __glDepthRangexOES = nullptr; void APIENTRY glDepthRangexOES (GLfixed n, GLfixed f) { if (__glDepthRangexOES != 0) (__glDepthRangexOES)(n, f);  }
PFNGLEVALCOORD1XOESPROC __glEvalCoord1xOES = nullptr; void APIENTRY glEvalCoord1xOES (GLfixed u) { if (__glEvalCoord1xOES != 0) (__glEvalCoord1xOES)(u);  }
PFNGLEVALCOORD1XVOESPROC __glEvalCoord1xvOES = nullptr; void APIENTRY glEvalCoord1xvOES (const GLfixed *coords) { if (__glEvalCoord1xvOES != 0) (__glEvalCoord1xvOES)(coords);  }
PFNGLEVALCOORD2XOESPROC __glEvalCoord2xOES = nullptr; void APIENTRY glEvalCoord2xOES (GLfixed u, GLfixed v) { if (__glEvalCoord2xOES != 0) (__glEvalCoord2xOES)(u, v);  }
PFNGLEVALCOORD2XVOESPROC __glEvalCoord2xvOES = nullptr; void APIENTRY glEvalCoord2xvOES (const GLfixed *coords) { if (__glEvalCoord2xvOES != 0) (__glEvalCoord2xvOES)(coords);  }
PFNGLFEEDBACKBUFFERXOESPROC __glFeedbackBufferxOES = nullptr; void APIENTRY glFeedbackBufferxOES (GLsizei n, GLenum type, const GLfixed *buffer) { if (__glFeedbackBufferxOES != 0) (__glFeedbackBufferxOES)(n, type, buffer);  }
PFNGLFOGXOESPROC __glFogxOES = nullptr; void APIENTRY glFogxOES (GLenum pname, GLfixed param) { if (__glFogxOES != 0) (__glFogxOES)(pname, param);  }
PFNGLFOGXVOESPROC __glFogxvOES = nullptr; void APIENTRY glFogxvOES (GLenum pname, const GLfixed *param) { if (__glFogxvOES != 0) (__glFogxvOES)(pname, param);  }
PFNGLFRUSTUMXOESPROC __glFrustumxOES = nullptr; void APIENTRY glFrustumxOES (GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f) { if (__glFrustumxOES != 0) (__glFrustumxOES)(l, r, b, t, n, f);  }
PFNGLGETCLIPPLANEXOESPROC __glGetClipPlanexOES = nullptr; void APIENTRY glGetClipPlanexOES (GLenum plane, GLfixed *equation) { if (__glGetClipPlanexOES != 0) (__glGetClipPlanexOES)(plane, equation);  }
PFNGLGETCONVOLUTIONPARAMETERXVOESPROC __glGetConvolutionParameterxvOES = nullptr; void APIENTRY glGetConvolutionParameterxvOES (GLenum target, GLenum pname, GLfixed *params) { if (__glGetConvolutionParameterxvOES != 0) (__glGetConvolutionParameterxvOES)(target, pname, params);  }
PFNGLGETFIXEDVOESPROC __glGetFixedvOES = nullptr; void APIENTRY glGetFixedvOES (GLenum pname, GLfixed *params) { if (__glGetFixedvOES != 0) (__glGetFixedvOES)(pname, params);  }
PFNGLGETHISTOGRAMPARAMETERXVOESPROC __glGetHistogramParameterxvOES = nullptr; void APIENTRY glGetHistogramParameterxvOES (GLenum target, GLenum pname, GLfixed *params) { if (__glGetHistogramParameterxvOES != 0) (__glGetHistogramParameterxvOES)(target, pname, params);  }
PFNGLGETLIGHTXOESPROC __glGetLightxOES = nullptr; void APIENTRY glGetLightxOES (GLenum light, GLenum pname, GLfixed *params) { if (__glGetLightxOES != 0) (__glGetLightxOES)(light, pname, params);  }
PFNGLGETMAPXVOESPROC __glGetMapxvOES = nullptr; void APIENTRY glGetMapxvOES (GLenum target, GLenum query, GLfixed *v) { if (__glGetMapxvOES != 0) (__glGetMapxvOES)(target, query, v);  }
PFNGLGETMATERIALXOESPROC __glGetMaterialxOES = nullptr; void APIENTRY glGetMaterialxOES (GLenum face, GLenum pname, GLfixed param) { if (__glGetMaterialxOES != 0) (__glGetMaterialxOES)(face, pname, param);  }
PFNGLGETPIXELMAPXVPROC __glGetPixelMapxv = nullptr; void APIENTRY glGetPixelMapxv (GLenum map, GLint size, GLfixed *values) { if (__glGetPixelMapxv != 0) (__glGetPixelMapxv)(map, size, values);  }
PFNGLGETTEXENVXVOESPROC __glGetTexEnvxvOES = nullptr; void APIENTRY glGetTexEnvxvOES (GLenum target, GLenum pname, GLfixed *params) { if (__glGetTexEnvxvOES != 0) (__glGetTexEnvxvOES)(target, pname, params);  }
PFNGLGETTEXGENXVOESPROC __glGetTexGenxvOES = nullptr; void APIENTRY glGetTexGenxvOES (GLenum coord, GLenum pname, GLfixed *params) { if (__glGetTexGenxvOES != 0) (__glGetTexGenxvOES)(coord, pname, params);  }
PFNGLGETTEXLEVELPARAMETERXVOESPROC __glGetTexLevelParameterxvOES = nullptr; void APIENTRY glGetTexLevelParameterxvOES (GLenum target, GLint level, GLenum pname, GLfixed *params) { if (__glGetTexLevelParameterxvOES != 0) (__glGetTexLevelParameterxvOES)(target, level, pname, params);  }
PFNGLGETTEXPARAMETERXVOESPROC __glGetTexParameterxvOES = nullptr; void APIENTRY glGetTexParameterxvOES (GLenum target, GLenum pname, GLfixed *params) { if (__glGetTexParameterxvOES != 0) (__glGetTexParameterxvOES)(target, pname, params);  }
PFNGLINDEXXOESPROC __glIndexxOES = nullptr; void APIENTRY glIndexxOES (GLfixed component) { if (__glIndexxOES != 0) (__glIndexxOES)(component);  }
PFNGLINDEXXVOESPROC __glIndexxvOES = nullptr; void APIENTRY glIndexxvOES (const GLfixed *component) { if (__glIndexxvOES != 0) (__glIndexxvOES)(component);  }
PFNGLLIGHTMODELXOESPROC __glLightModelxOES = nullptr; void APIENTRY glLightModelxOES (GLenum pname, GLfixed param) { if (__glLightModelxOES != 0) (__glLightModelxOES)(pname, param);  }
PFNGLLIGHTMODELXVOESPROC __glLightModelxvOES = nullptr; void APIENTRY glLightModelxvOES (GLenum pname, const GLfixed *param) { if (__glLightModelxvOES != 0) (__glLightModelxvOES)(pname, param);  }
PFNGLLIGHTXOESPROC __glLightxOES = nullptr; void APIENTRY glLightxOES (GLenum light, GLenum pname, GLfixed param) { if (__glLightxOES != 0) (__glLightxOES)(light, pname, param);  }
PFNGLLIGHTXVOESPROC __glLightxvOES = nullptr; void APIENTRY glLightxvOES (GLenum light, GLenum pname, const GLfixed *params) { if (__glLightxvOES != 0) (__glLightxvOES)(light, pname, params);  }
PFNGLLINEWIDTHXOESPROC __glLineWidthxOES = nullptr; void APIENTRY glLineWidthxOES (GLfixed width) { if (__glLineWidthxOES != 0) (__glLineWidthxOES)(width);  }
PFNGLLOADMATRIXXOESPROC __glLoadMatrixxOES = nullptr; void APIENTRY glLoadMatrixxOES (const GLfixed *m) { if (__glLoadMatrixxOES != 0) (__glLoadMatrixxOES)(m);  }
PFNGLLOADTRANSPOSEMATRIXXOESPROC __glLoadTransposeMatrixxOES = nullptr; void APIENTRY glLoadTransposeMatrixxOES (const GLfixed *m) { if (__glLoadTransposeMatrixxOES != 0) (__glLoadTransposeMatrixxOES)(m);  }
PFNGLMAP1XOESPROC __glMap1xOES = nullptr; void APIENTRY glMap1xOES (GLenum target, GLfixed u1, GLfixed u2, GLint stride, GLint order, GLfixed points) { if (__glMap1xOES != 0) (__glMap1xOES)(target, u1, u2, stride, order, points);  }
PFNGLMAP2XOESPROC __glMap2xOES = nullptr; void APIENTRY glMap2xOES (GLenum target, GLfixed u1, GLfixed u2, GLint ustride, GLint uorder, GLfixed v1, GLfixed v2, GLint vstride, GLint vorder, GLfixed points) { if (__glMap2xOES != 0) (__glMap2xOES)(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);  }
PFNGLMAPGRID1XOESPROC __glMapGrid1xOES = nullptr; void APIENTRY glMapGrid1xOES (GLint n, GLfixed u1, GLfixed u2) { if (__glMapGrid1xOES != 0) (__glMapGrid1xOES)(n, u1, u2);  }
PFNGLMAPGRID2XOESPROC __glMapGrid2xOES = nullptr; void APIENTRY glMapGrid2xOES (GLint n, GLfixed u1, GLfixed u2, GLfixed v1, GLfixed v2) { if (__glMapGrid2xOES != 0) (__glMapGrid2xOES)(n, u1, u2, v1, v2);  }
PFNGLMATERIALXOESPROC __glMaterialxOES = nullptr; void APIENTRY glMaterialxOES (GLenum face, GLenum pname, GLfixed param) { if (__glMaterialxOES != 0) (__glMaterialxOES)(face, pname, param);  }
PFNGLMATERIALXVOESPROC __glMaterialxvOES = nullptr; void APIENTRY glMaterialxvOES (GLenum face, GLenum pname, const GLfixed *param) { if (__glMaterialxvOES != 0) (__glMaterialxvOES)(face, pname, param);  }
PFNGLMULTMATRIXXOESPROC __glMultMatrixxOES = nullptr; void APIENTRY glMultMatrixxOES (const GLfixed *m) { if (__glMultMatrixxOES != 0) (__glMultMatrixxOES)(m);  }
PFNGLMULTTRANSPOSEMATRIXXOESPROC __glMultTransposeMatrixxOES = nullptr; void APIENTRY glMultTransposeMatrixxOES (const GLfixed *m) { if (__glMultTransposeMatrixxOES != 0) (__glMultTransposeMatrixxOES)(m);  }
PFNGLMULTITEXCOORD1XOESPROC __glMultiTexCoord1xOES = nullptr; void APIENTRY glMultiTexCoord1xOES (GLenum texture, GLfixed s) { if (__glMultiTexCoord1xOES != 0) (__glMultiTexCoord1xOES)(texture, s);  }
PFNGLMULTITEXCOORD1XVOESPROC __glMultiTexCoord1xvOES = nullptr; void APIENTRY glMultiTexCoord1xvOES (GLenum texture, const GLfixed *coords) { if (__glMultiTexCoord1xvOES != 0) (__glMultiTexCoord1xvOES)(texture, coords);  }
PFNGLMULTITEXCOORD2XOESPROC __glMultiTexCoord2xOES = nullptr; void APIENTRY glMultiTexCoord2xOES (GLenum texture, GLfixed s, GLfixed t) { if (__glMultiTexCoord2xOES != 0) (__glMultiTexCoord2xOES)(texture, s, t);  }
PFNGLMULTITEXCOORD2XVOESPROC __glMultiTexCoord2xvOES = nullptr; void APIENTRY glMultiTexCoord2xvOES (GLenum texture, const GLfixed *coords) { if (__glMultiTexCoord2xvOES != 0) (__glMultiTexCoord2xvOES)(texture, coords);  }
PFNGLMULTITEXCOORD3XOESPROC __glMultiTexCoord3xOES = nullptr; void APIENTRY glMultiTexCoord3xOES (GLenum texture, GLfixed s, GLfixed t, GLfixed r) { if (__glMultiTexCoord3xOES != 0) (__glMultiTexCoord3xOES)(texture, s, t, r);  }
PFNGLMULTITEXCOORD3XVOESPROC __glMultiTexCoord3xvOES = nullptr; void APIENTRY glMultiTexCoord3xvOES (GLenum texture, const GLfixed *coords) { if (__glMultiTexCoord3xvOES != 0) (__glMultiTexCoord3xvOES)(texture, coords);  }
PFNGLMULTITEXCOORD4XOESPROC __glMultiTexCoord4xOES = nullptr; void APIENTRY glMultiTexCoord4xOES (GLenum texture, GLfixed s, GLfixed t, GLfixed r, GLfixed q) { if (__glMultiTexCoord4xOES != 0) (__glMultiTexCoord4xOES)(texture, s, t, r, q);  }
PFNGLMULTITEXCOORD4XVOESPROC __glMultiTexCoord4xvOES = nullptr; void APIENTRY glMultiTexCoord4xvOES (GLenum texture, const GLfixed *coords) { if (__glMultiTexCoord4xvOES != 0) (__glMultiTexCoord4xvOES)(texture, coords);  }
PFNGLNORMAL3XOESPROC __glNormal3xOES = nullptr; void APIENTRY glNormal3xOES (GLfixed nx, GLfixed ny, GLfixed nz) { if (__glNormal3xOES != 0) (__glNormal3xOES)(nx, ny, nz);  }
PFNGLNORMAL3XVOESPROC __glNormal3xvOES = nullptr; void APIENTRY glNormal3xvOES (const GLfixed *coords) { if (__glNormal3xvOES != 0) (__glNormal3xvOES)(coords);  }
PFNGLORTHOXOESPROC __glOrthoxOES = nullptr; void APIENTRY glOrthoxOES (GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f) { if (__glOrthoxOES != 0) (__glOrthoxOES)(l, r, b, t, n, f);  }
PFNGLPASSTHROUGHXOESPROC __glPassThroughxOES = nullptr; void APIENTRY glPassThroughxOES (GLfixed token) { if (__glPassThroughxOES != 0) (__glPassThroughxOES)(token);  }
PFNGLPIXELMAPXPROC __glPixelMapx = nullptr; void APIENTRY glPixelMapx (GLenum map, GLint size, const GLfixed *values) { if (__glPixelMapx != 0) (__glPixelMapx)(map, size, values);  }
PFNGLPIXELSTOREXPROC __glPixelStorex = nullptr; void APIENTRY glPixelStorex (GLenum pname, GLfixed param) { if (__glPixelStorex != 0) (__glPixelStorex)(pname, param);  }
PFNGLPIXELTRANSFERXOESPROC __glPixelTransferxOES = nullptr; void APIENTRY glPixelTransferxOES (GLenum pname, GLfixed param) { if (__glPixelTransferxOES != 0) (__glPixelTransferxOES)(pname, param);  }
PFNGLPIXELZOOMXOESPROC __glPixelZoomxOES = nullptr; void APIENTRY glPixelZoomxOES (GLfixed xfactor, GLfixed yfactor) { if (__glPixelZoomxOES != 0) (__glPixelZoomxOES)(xfactor, yfactor);  }
PFNGLPOINTPARAMETERXVOESPROC __glPointParameterxvOES = nullptr; void APIENTRY glPointParameterxvOES (GLenum pname, const GLfixed *params) { if (__glPointParameterxvOES != 0) (__glPointParameterxvOES)(pname, params);  }
PFNGLPOINTSIZEXOESPROC __glPointSizexOES = nullptr; void APIENTRY glPointSizexOES (GLfixed size) { if (__glPointSizexOES != 0) (__glPointSizexOES)(size);  }
PFNGLPOLYGONOFFSETXOESPROC __glPolygonOffsetxOES = nullptr; void APIENTRY glPolygonOffsetxOES (GLfixed factor, GLfixed units) { if (__glPolygonOffsetxOES != 0) (__glPolygonOffsetxOES)(factor, units);  }
PFNGLPRIORITIZETEXTURESXOESPROC __glPrioritizeTexturesxOES = nullptr; void APIENTRY glPrioritizeTexturesxOES (GLsizei n, const GLuint *textures, const GLfixed *priorities) { if (__glPrioritizeTexturesxOES != 0) (__glPrioritizeTexturesxOES)(n, textures, priorities);  }
PFNGLRASTERPOS2XOESPROC __glRasterPos2xOES = nullptr; void APIENTRY glRasterPos2xOES (GLfixed x, GLfixed y) { if (__glRasterPos2xOES != 0) (__glRasterPos2xOES)(x, y);  }
PFNGLRASTERPOS2XVOESPROC __glRasterPos2xvOES = nullptr; void APIENTRY glRasterPos2xvOES (const GLfixed *coords) { if (__glRasterPos2xvOES != 0) (__glRasterPos2xvOES)(coords);  }
PFNGLRASTERPOS3XOESPROC __glRasterPos3xOES = nullptr; void APIENTRY glRasterPos3xOES (GLfixed x, GLfixed y, GLfixed z) { if (__glRasterPos3xOES != 0) (__glRasterPos3xOES)(x, y, z);  }
PFNGLRASTERPOS3XVOESPROC __glRasterPos3xvOES = nullptr; void APIENTRY glRasterPos3xvOES (const GLfixed *coords) { if (__glRasterPos3xvOES != 0) (__glRasterPos3xvOES)(coords);  }
PFNGLRASTERPOS4XOESPROC __glRasterPos4xOES = nullptr; void APIENTRY glRasterPos4xOES (GLfixed x, GLfixed y, GLfixed z, GLfixed w) { if (__glRasterPos4xOES != 0) (__glRasterPos4xOES)(x, y, z, w);  }
PFNGLRASTERPOS4XVOESPROC __glRasterPos4xvOES = nullptr; void APIENTRY glRasterPos4xvOES (const GLfixed *coords) { if (__glRasterPos4xvOES != 0) (__glRasterPos4xvOES)(coords);  }
PFNGLRECTXOESPROC __glRectxOES = nullptr; void APIENTRY glRectxOES (GLfixed x1, GLfixed y1, GLfixed x2, GLfixed y2) { if (__glRectxOES != 0) (__glRectxOES)(x1, y1, x2, y2);  }
PFNGLRECTXVOESPROC __glRectxvOES = nullptr; void APIENTRY glRectxvOES (const GLfixed *v1, const GLfixed *v2) { if (__glRectxvOES != 0) (__glRectxvOES)(v1, v2);  }
PFNGLROTATEXOESPROC __glRotatexOES = nullptr; void APIENTRY glRotatexOES (GLfixed angle, GLfixed x, GLfixed y, GLfixed z) { if (__glRotatexOES != 0) (__glRotatexOES)(angle, x, y, z);  }
PFNGLSCALEXOESPROC __glScalexOES = nullptr; void APIENTRY glScalexOES (GLfixed x, GLfixed y, GLfixed z) { if (__glScalexOES != 0) (__glScalexOES)(x, y, z);  }
PFNGLTEXCOORD1XOESPROC __glTexCoord1xOES = nullptr; void APIENTRY glTexCoord1xOES (GLfixed s) { if (__glTexCoord1xOES != 0) (__glTexCoord1xOES)(s);  }
PFNGLTEXCOORD1XVOESPROC __glTexCoord1xvOES = nullptr; void APIENTRY glTexCoord1xvOES (const GLfixed *coords) { if (__glTexCoord1xvOES != 0) (__glTexCoord1xvOES)(coords);  }
PFNGLTEXCOORD2XOESPROC __glTexCoord2xOES = nullptr; void APIENTRY glTexCoord2xOES (GLfixed s, GLfixed t) { if (__glTexCoord2xOES != 0) (__glTexCoord2xOES)(s, t);  }
PFNGLTEXCOORD2XVOESPROC __glTexCoord2xvOES = nullptr; void APIENTRY glTexCoord2xvOES (const GLfixed *coords) { if (__glTexCoord2xvOES != 0) (__glTexCoord2xvOES)(coords);  }
PFNGLTEXCOORD3XOESPROC __glTexCoord3xOES = nullptr; void APIENTRY glTexCoord3xOES (GLfixed s, GLfixed t, GLfixed r) { if (__glTexCoord3xOES != 0) (__glTexCoord3xOES)(s, t, r);  }
PFNGLTEXCOORD3XVOESPROC __glTexCoord3xvOES = nullptr; void APIENTRY glTexCoord3xvOES (const GLfixed *coords) { if (__glTexCoord3xvOES != 0) (__glTexCoord3xvOES)(coords);  }
PFNGLTEXCOORD4XOESPROC __glTexCoord4xOES = nullptr; void APIENTRY glTexCoord4xOES (GLfixed s, GLfixed t, GLfixed r, GLfixed q) { if (__glTexCoord4xOES != 0) (__glTexCoord4xOES)(s, t, r, q);  }
PFNGLTEXCOORD4XVOESPROC __glTexCoord4xvOES = nullptr; void APIENTRY glTexCoord4xvOES (const GLfixed *coords) { if (__glTexCoord4xvOES != 0) (__glTexCoord4xvOES)(coords);  }
PFNGLTEXENVXOESPROC __glTexEnvxOES = nullptr; void APIENTRY glTexEnvxOES (GLenum target, GLenum pname, GLfixed param) { if (__glTexEnvxOES != 0) (__glTexEnvxOES)(target, pname, param);  }
PFNGLTEXENVXVOESPROC __glTexEnvxvOES = nullptr; void APIENTRY glTexEnvxvOES (GLenum target, GLenum pname, const GLfixed *params) { if (__glTexEnvxvOES != 0) (__glTexEnvxvOES)(target, pname, params);  }
PFNGLTEXGENXOESPROC __glTexGenxOES = nullptr; void APIENTRY glTexGenxOES (GLenum coord, GLenum pname, GLfixed param) { if (__glTexGenxOES != 0) (__glTexGenxOES)(coord, pname, param);  }
PFNGLTEXGENXVOESPROC __glTexGenxvOES = nullptr; void APIENTRY glTexGenxvOES (GLenum coord, GLenum pname, const GLfixed *params) { if (__glTexGenxvOES != 0) (__glTexGenxvOES)(coord, pname, params);  }
PFNGLTEXPARAMETERXOESPROC __glTexParameterxOES = nullptr; void APIENTRY glTexParameterxOES (GLenum target, GLenum pname, GLfixed param) { if (__glTexParameterxOES != 0) (__glTexParameterxOES)(target, pname, param);  }
PFNGLTEXPARAMETERXVOESPROC __glTexParameterxvOES = nullptr; void APIENTRY glTexParameterxvOES (GLenum target, GLenum pname, const GLfixed *params) { if (__glTexParameterxvOES != 0) (__glTexParameterxvOES)(target, pname, params);  }
PFNGLTRANSLATEXOESPROC __glTranslatexOES = nullptr; void APIENTRY glTranslatexOES (GLfixed x, GLfixed y, GLfixed z) { if (__glTranslatexOES != 0) (__glTranslatexOES)(x, y, z);  }
PFNGLVERTEX2XOESPROC __glVertex2xOES = nullptr; void APIENTRY glVertex2xOES (GLfixed x) { if (__glVertex2xOES != 0) (__glVertex2xOES)(x);  }
PFNGLVERTEX2XVOESPROC __glVertex2xvOES = nullptr; void APIENTRY glVertex2xvOES (const GLfixed *coords) { if (__glVertex2xvOES != 0) (__glVertex2xvOES)(coords);  }
PFNGLVERTEX3XOESPROC __glVertex3xOES = nullptr; void APIENTRY glVertex3xOES (GLfixed x, GLfixed y) { if (__glVertex3xOES != 0) (__glVertex3xOES)(x, y);  }
PFNGLVERTEX3XVOESPROC __glVertex3xvOES = nullptr; void APIENTRY glVertex3xvOES (const GLfixed *coords) { if (__glVertex3xvOES != 0) (__glVertex3xvOES)(coords);  }
PFNGLVERTEX4XOESPROC __glVertex4xOES = nullptr; void APIENTRY glVertex4xOES (GLfixed x, GLfixed y, GLfixed z) { if (__glVertex4xOES != 0) (__glVertex4xOES)(x, y, z);  }
PFNGLVERTEX4XVOESPROC __glVertex4xvOES = nullptr; void APIENTRY glVertex4xvOES (const GLfixed *coords) { if (__glVertex4xvOES != 0) (__glVertex4xvOES)(coords);  }
bool __loadGL_OES_fixed_point(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glAccumxOES = (PFNGLACCUMXOESPROC)proc((const GLubyte*)"glAccumxOES")) != nullptr) || r;
    r = ((__glAlphaFuncxOES = (PFNGLALPHAFUNCXOESPROC)proc((const GLubyte*)"glAlphaFuncxOES")) != nullptr) || r;
    r = ((__glBitmapxOES = (PFNGLBITMAPXOESPROC)proc((const GLubyte*)"glBitmapxOES")) != nullptr) || r;
    r = ((__glBlendColorxOES = (PFNGLBLENDCOLORXOESPROC)proc((const GLubyte*)"glBlendColorxOES")) != nullptr) || r;
    r = ((__glClearAccumxOES = (PFNGLCLEARACCUMXOESPROC)proc((const GLubyte*)"glClearAccumxOES")) != nullptr) || r;
    r = ((__glClearColorxOES = (PFNGLCLEARCOLORXOESPROC)proc((const GLubyte*)"glClearColorxOES")) != nullptr) || r;
    r = ((__glClearDepthxOES = (PFNGLCLEARDEPTHXOESPROC)proc((const GLubyte*)"glClearDepthxOES")) != nullptr) || r;
    r = ((__glClipPlanexOES = (PFNGLCLIPPLANEXOESPROC)proc((const GLubyte*)"glClipPlanexOES")) != nullptr) || r;
    r = ((__glColor3xOES = (PFNGLCOLOR3XOESPROC)proc((const GLubyte*)"glColor3xOES")) != nullptr) || r;
    r = ((__glColor3xvOES = (PFNGLCOLOR3XVOESPROC)proc((const GLubyte*)"glColor3xvOES")) != nullptr) || r;
    r = ((__glColor4xOES = (PFNGLCOLOR4XOESPROC)proc((const GLubyte*)"glColor4xOES")) != nullptr) || r;
    r = ((__glColor4xvOES = (PFNGLCOLOR4XVOESPROC)proc((const GLubyte*)"glColor4xvOES")) != nullptr) || r;
    r = ((__glConvolutionParameterxOES = (PFNGLCONVOLUTIONPARAMETERXOESPROC)proc((const GLubyte*)"glConvolutionParameterxOES")) != nullptr) || r;
    r = ((__glConvolutionParameterxvOES = (PFNGLCONVOLUTIONPARAMETERXVOESPROC)proc((const GLubyte*)"glConvolutionParameterxvOES")) != nullptr) || r;
    r = ((__glDepthRangexOES = (PFNGLDEPTHRANGEXOESPROC)proc((const GLubyte*)"glDepthRangexOES")) != nullptr) || r;
    r = ((__glEvalCoord1xOES = (PFNGLEVALCOORD1XOESPROC)proc((const GLubyte*)"glEvalCoord1xOES")) != nullptr) || r;
    r = ((__glEvalCoord1xvOES = (PFNGLEVALCOORD1XVOESPROC)proc((const GLubyte*)"glEvalCoord1xvOES")) != nullptr) || r;
    r = ((__glEvalCoord2xOES = (PFNGLEVALCOORD2XOESPROC)proc((const GLubyte*)"glEvalCoord2xOES")) != nullptr) || r;
    r = ((__glEvalCoord2xvOES = (PFNGLEVALCOORD2XVOESPROC)proc((const GLubyte*)"glEvalCoord2xvOES")) != nullptr) || r;
    r = ((__glFeedbackBufferxOES = (PFNGLFEEDBACKBUFFERXOESPROC)proc((const GLubyte*)"glFeedbackBufferxOES")) != nullptr) || r;
    r = ((__glFogxOES = (PFNGLFOGXOESPROC)proc((const GLubyte*)"glFogxOES")) != nullptr) || r;
    r = ((__glFogxvOES = (PFNGLFOGXVOESPROC)proc((const GLubyte*)"glFogxvOES")) != nullptr) || r;
    r = ((__glFrustumxOES = (PFNGLFRUSTUMXOESPROC)proc((const GLubyte*)"glFrustumxOES")) != nullptr) || r;
    r = ((__glGetClipPlanexOES = (PFNGLGETCLIPPLANEXOESPROC)proc((const GLubyte*)"glGetClipPlanexOES")) != nullptr) || r;
    r = ((__glGetConvolutionParameterxvOES = (PFNGLGETCONVOLUTIONPARAMETERXVOESPROC)proc((const GLubyte*)"glGetConvolutionParameterxvOES")) != nullptr) || r;
    r = ((__glGetFixedvOES = (PFNGLGETFIXEDVOESPROC)proc((const GLubyte*)"glGetFixedvOES")) != nullptr) || r;
    r = ((__glGetHistogramParameterxvOES = (PFNGLGETHISTOGRAMPARAMETERXVOESPROC)proc((const GLubyte*)"glGetHistogramParameterxvOES")) != nullptr) || r;
    r = ((__glGetLightxOES = (PFNGLGETLIGHTXOESPROC)proc((const GLubyte*)"glGetLightxOES")) != nullptr) || r;
    r = ((__glGetMapxvOES = (PFNGLGETMAPXVOESPROC)proc((const GLubyte*)"glGetMapxvOES")) != nullptr) || r;
    r = ((__glGetMaterialxOES = (PFNGLGETMATERIALXOESPROC)proc((const GLubyte*)"glGetMaterialxOES")) != nullptr) || r;
    r = ((__glGetPixelMapxv = (PFNGLGETPIXELMAPXVPROC)proc((const GLubyte*)"glGetPixelMapxv")) != nullptr) || r;
    r = ((__glGetTexEnvxvOES = (PFNGLGETTEXENVXVOESPROC)proc((const GLubyte*)"glGetTexEnvxvOES")) != nullptr) || r;
    r = ((__glGetTexGenxvOES = (PFNGLGETTEXGENXVOESPROC)proc((const GLubyte*)"glGetTexGenxvOES")) != nullptr) || r;
    r = ((__glGetTexLevelParameterxvOES = (PFNGLGETTEXLEVELPARAMETERXVOESPROC)proc((const GLubyte*)"glGetTexLevelParameterxvOES")) != nullptr) || r;
    r = ((__glGetTexParameterxvOES = (PFNGLGETTEXPARAMETERXVOESPROC)proc((const GLubyte*)"glGetTexParameterxvOES")) != nullptr) || r;
    r = ((__glIndexxOES = (PFNGLINDEXXOESPROC)proc((const GLubyte*)"glIndexxOES")) != nullptr) || r;
    r = ((__glIndexxvOES = (PFNGLINDEXXVOESPROC)proc((const GLubyte*)"glIndexxvOES")) != nullptr) || r;
    r = ((__glLightModelxOES = (PFNGLLIGHTMODELXOESPROC)proc((const GLubyte*)"glLightModelxOES")) != nullptr) || r;
    r = ((__glLightModelxvOES = (PFNGLLIGHTMODELXVOESPROC)proc((const GLubyte*)"glLightModelxvOES")) != nullptr) || r;
    r = ((__glLightxOES = (PFNGLLIGHTXOESPROC)proc((const GLubyte*)"glLightxOES")) != nullptr) || r;
    r = ((__glLightxvOES = (PFNGLLIGHTXVOESPROC)proc((const GLubyte*)"glLightxvOES")) != nullptr) || r;
    r = ((__glLineWidthxOES = (PFNGLLINEWIDTHXOESPROC)proc((const GLubyte*)"glLineWidthxOES")) != nullptr) || r;
    r = ((__glLoadMatrixxOES = (PFNGLLOADMATRIXXOESPROC)proc((const GLubyte*)"glLoadMatrixxOES")) != nullptr) || r;
    r = ((__glLoadTransposeMatrixxOES = (PFNGLLOADTRANSPOSEMATRIXXOESPROC)proc((const GLubyte*)"glLoadTransposeMatrixxOES")) != nullptr) || r;
    r = ((__glMap1xOES = (PFNGLMAP1XOESPROC)proc((const GLubyte*)"glMap1xOES")) != nullptr) || r;
    r = ((__glMap2xOES = (PFNGLMAP2XOESPROC)proc((const GLubyte*)"glMap2xOES")) != nullptr) || r;
    r = ((__glMapGrid1xOES = (PFNGLMAPGRID1XOESPROC)proc((const GLubyte*)"glMapGrid1xOES")) != nullptr) || r;
    r = ((__glMapGrid2xOES = (PFNGLMAPGRID2XOESPROC)proc((const GLubyte*)"glMapGrid2xOES")) != nullptr) || r;
    r = ((__glMaterialxOES = (PFNGLMATERIALXOESPROC)proc((const GLubyte*)"glMaterialxOES")) != nullptr) || r;
    r = ((__glMaterialxvOES = (PFNGLMATERIALXVOESPROC)proc((const GLubyte*)"glMaterialxvOES")) != nullptr) || r;
    r = ((__glMultMatrixxOES = (PFNGLMULTMATRIXXOESPROC)proc((const GLubyte*)"glMultMatrixxOES")) != nullptr) || r;
    r = ((__glMultTransposeMatrixxOES = (PFNGLMULTTRANSPOSEMATRIXXOESPROC)proc((const GLubyte*)"glMultTransposeMatrixxOES")) != nullptr) || r;
    r = ((__glMultiTexCoord1xOES = (PFNGLMULTITEXCOORD1XOESPROC)proc((const GLubyte*)"glMultiTexCoord1xOES")) != nullptr) || r;
    r = ((__glMultiTexCoord1xvOES = (PFNGLMULTITEXCOORD1XVOESPROC)proc((const GLubyte*)"glMultiTexCoord1xvOES")) != nullptr) || r;
    r = ((__glMultiTexCoord2xOES = (PFNGLMULTITEXCOORD2XOESPROC)proc((const GLubyte*)"glMultiTexCoord2xOES")) != nullptr) || r;
    r = ((__glMultiTexCoord2xvOES = (PFNGLMULTITEXCOORD2XVOESPROC)proc((const GLubyte*)"glMultiTexCoord2xvOES")) != nullptr) || r;
    r = ((__glMultiTexCoord3xOES = (PFNGLMULTITEXCOORD3XOESPROC)proc((const GLubyte*)"glMultiTexCoord3xOES")) != nullptr) || r;
    r = ((__glMultiTexCoord3xvOES = (PFNGLMULTITEXCOORD3XVOESPROC)proc((const GLubyte*)"glMultiTexCoord3xvOES")) != nullptr) || r;
    r = ((__glMultiTexCoord4xOES = (PFNGLMULTITEXCOORD4XOESPROC)proc((const GLubyte*)"glMultiTexCoord4xOES")) != nullptr) || r;
    r = ((__glMultiTexCoord4xvOES = (PFNGLMULTITEXCOORD4XVOESPROC)proc((const GLubyte*)"glMultiTexCoord4xvOES")) != nullptr) || r;
    r = ((__glNormal3xOES = (PFNGLNORMAL3XOESPROC)proc((const GLubyte*)"glNormal3xOES")) != nullptr) || r;
    r = ((__glNormal3xvOES = (PFNGLNORMAL3XVOESPROC)proc((const GLubyte*)"glNormal3xvOES")) != nullptr) || r;
    r = ((__glOrthoxOES = (PFNGLORTHOXOESPROC)proc((const GLubyte*)"glOrthoxOES")) != nullptr) || r;
    r = ((__glPassThroughxOES = (PFNGLPASSTHROUGHXOESPROC)proc((const GLubyte*)"glPassThroughxOES")) != nullptr) || r;
    r = ((__glPixelMapx = (PFNGLPIXELMAPXPROC)proc((const GLubyte*)"glPixelMapx")) != nullptr) || r;
    r = ((__glPixelStorex = (PFNGLPIXELSTOREXPROC)proc((const GLubyte*)"glPixelStorex")) != nullptr) || r;
    r = ((__glPixelTransferxOES = (PFNGLPIXELTRANSFERXOESPROC)proc((const GLubyte*)"glPixelTransferxOES")) != nullptr) || r;
    r = ((__glPixelZoomxOES = (PFNGLPIXELZOOMXOESPROC)proc((const GLubyte*)"glPixelZoomxOES")) != nullptr) || r;
    r = ((__glPointParameterxvOES = (PFNGLPOINTPARAMETERXVOESPROC)proc((const GLubyte*)"glPointParameterxvOES")) != nullptr) || r;
    r = ((__glPointSizexOES = (PFNGLPOINTSIZEXOESPROC)proc((const GLubyte*)"glPointSizexOES")) != nullptr) || r;
    r = ((__glPolygonOffsetxOES = (PFNGLPOLYGONOFFSETXOESPROC)proc((const GLubyte*)"glPolygonOffsetxOES")) != nullptr) || r;
    r = ((__glPrioritizeTexturesxOES = (PFNGLPRIORITIZETEXTURESXOESPROC)proc((const GLubyte*)"glPrioritizeTexturesxOES")) != nullptr) || r;
    r = ((__glRasterPos2xOES = (PFNGLRASTERPOS2XOESPROC)proc((const GLubyte*)"glRasterPos2xOES")) != nullptr) || r;
    r = ((__glRasterPos2xvOES = (PFNGLRASTERPOS2XVOESPROC)proc((const GLubyte*)"glRasterPos2xvOES")) != nullptr) || r;
    r = ((__glRasterPos3xOES = (PFNGLRASTERPOS3XOESPROC)proc((const GLubyte*)"glRasterPos3xOES")) != nullptr) || r;
    r = ((__glRasterPos3xvOES = (PFNGLRASTERPOS3XVOESPROC)proc((const GLubyte*)"glRasterPos3xvOES")) != nullptr) || r;
    r = ((__glRasterPos4xOES = (PFNGLRASTERPOS4XOESPROC)proc((const GLubyte*)"glRasterPos4xOES")) != nullptr) || r;
    r = ((__glRasterPos4xvOES = (PFNGLRASTERPOS4XVOESPROC)proc((const GLubyte*)"glRasterPos4xvOES")) != nullptr) || r;
    r = ((__glRectxOES = (PFNGLRECTXOESPROC)proc((const GLubyte*)"glRectxOES")) != nullptr) || r;
    r = ((__glRectxvOES = (PFNGLRECTXVOESPROC)proc((const GLubyte*)"glRectxvOES")) != nullptr) || r;
    r = ((__glRotatexOES = (PFNGLROTATEXOESPROC)proc((const GLubyte*)"glRotatexOES")) != nullptr) || r;
    r = ((__glScalexOES = (PFNGLSCALEXOESPROC)proc((const GLubyte*)"glScalexOES")) != nullptr) || r;
    r = ((__glTexCoord1xOES = (PFNGLTEXCOORD1XOESPROC)proc((const GLubyte*)"glTexCoord1xOES")) != nullptr) || r;
    r = ((__glTexCoord1xvOES = (PFNGLTEXCOORD1XVOESPROC)proc((const GLubyte*)"glTexCoord1xvOES")) != nullptr) || r;
    r = ((__glTexCoord2xOES = (PFNGLTEXCOORD2XOESPROC)proc((const GLubyte*)"glTexCoord2xOES")) != nullptr) || r;
    r = ((__glTexCoord2xvOES = (PFNGLTEXCOORD2XVOESPROC)proc((const GLubyte*)"glTexCoord2xvOES")) != nullptr) || r;
    r = ((__glTexCoord3xOES = (PFNGLTEXCOORD3XOESPROC)proc((const GLubyte*)"glTexCoord3xOES")) != nullptr) || r;
    r = ((__glTexCoord3xvOES = (PFNGLTEXCOORD3XVOESPROC)proc((const GLubyte*)"glTexCoord3xvOES")) != nullptr) || r;
    r = ((__glTexCoord4xOES = (PFNGLTEXCOORD4XOESPROC)proc((const GLubyte*)"glTexCoord4xOES")) != nullptr) || r;
    r = ((__glTexCoord4xvOES = (PFNGLTEXCOORD4XVOESPROC)proc((const GLubyte*)"glTexCoord4xvOES")) != nullptr) || r;
    r = ((__glTexEnvxOES = (PFNGLTEXENVXOESPROC)proc((const GLubyte*)"glTexEnvxOES")) != nullptr) || r;
    r = ((__glTexEnvxvOES = (PFNGLTEXENVXVOESPROC)proc((const GLubyte*)"glTexEnvxvOES")) != nullptr) || r;
    r = ((__glTexGenxOES = (PFNGLTEXGENXOESPROC)proc((const GLubyte*)"glTexGenxOES")) != nullptr) || r;
    r = ((__glTexGenxvOES = (PFNGLTEXGENXVOESPROC)proc((const GLubyte*)"glTexGenxvOES")) != nullptr) || r;
    r = ((__glTexParameterxOES = (PFNGLTEXPARAMETERXOESPROC)proc((const GLubyte*)"glTexParameterxOES")) != nullptr) || r;
    r = ((__glTexParameterxvOES = (PFNGLTEXPARAMETERXVOESPROC)proc((const GLubyte*)"glTexParameterxvOES")) != nullptr) || r;
    r = ((__glTranslatexOES = (PFNGLTRANSLATEXOESPROC)proc((const GLubyte*)"glTranslatexOES")) != nullptr) || r;
    r = ((__glVertex2xOES = (PFNGLVERTEX2XOESPROC)proc((const GLubyte*)"glVertex2xOES")) != nullptr) || r;
    r = ((__glVertex2xvOES = (PFNGLVERTEX2XVOESPROC)proc((const GLubyte*)"glVertex2xvOES")) != nullptr) || r;
    r = ((__glVertex3xOES = (PFNGLVERTEX3XOESPROC)proc((const GLubyte*)"glVertex3xOES")) != nullptr) || r;
    r = ((__glVertex3xvOES = (PFNGLVERTEX3XVOESPROC)proc((const GLubyte*)"glVertex3xvOES")) != nullptr) || r;
    r = ((__glVertex4xOES = (PFNGLVERTEX4XOESPROC)proc((const GLubyte*)"glVertex4xOES")) != nullptr) || r;
    r = ((__glVertex4xvOES = (PFNGLVERTEX4XVOESPROC)proc((const GLubyte*)"glVertex4xvOES")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_OES_fixed_point = false;
/* GL_OES_query_matrix */
PFNGLQUERYMATRIXXOESPROC __glQueryMatrixxOES = nullptr; GLbitfield APIENTRY glQueryMatrixxOES (GLfixed *mantissa, GLint *exponent) { if (__glQueryMatrixxOES != 0) return (__glQueryMatrixxOES)(mantissa, exponent); return 0; }
bool __loadGL_OES_query_matrix(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glQueryMatrixxOES = (PFNGLQUERYMATRIXXOESPROC)proc((const GLubyte*)"glQueryMatrixxOES")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_OES_query_matrix = false;
/* GL_OES_read_format */
bool __loadGL_OES_read_format(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_OES_read_format = false;
/* GL_OES_single_precision */
PFNGLCLEARDEPTHFOESPROC __glClearDepthfOES = nullptr; void APIENTRY glClearDepthfOES (GLclampf depth) { if (__glClearDepthfOES != 0) (__glClearDepthfOES)(depth);  }
PFNGLCLIPPLANEFOESPROC __glClipPlanefOES = nullptr; void APIENTRY glClipPlanefOES (GLenum plane, const GLfloat *equation) { if (__glClipPlanefOES != 0) (__glClipPlanefOES)(plane, equation);  }
PFNGLDEPTHRANGEFOESPROC __glDepthRangefOES = nullptr; void APIENTRY glDepthRangefOES (GLclampf n, GLclampf f) { if (__glDepthRangefOES != 0) (__glDepthRangefOES)(n, f);  }
PFNGLFRUSTUMFOESPROC __glFrustumfOES = nullptr; void APIENTRY glFrustumfOES (GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f) { if (__glFrustumfOES != 0) (__glFrustumfOES)(l, r, b, t, n, f);  }
PFNGLGETCLIPPLANEFOESPROC __glGetClipPlanefOES = nullptr; void APIENTRY glGetClipPlanefOES (GLenum plane, GLfloat *equation) { if (__glGetClipPlanefOES != 0) (__glGetClipPlanefOES)(plane, equation);  }
PFNGLORTHOFOESPROC __glOrthofOES = nullptr; void APIENTRY glOrthofOES (GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f) { if (__glOrthofOES != 0) (__glOrthofOES)(l, r, b, t, n, f);  }
bool __loadGL_OES_single_precision(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glClearDepthfOES = (PFNGLCLEARDEPTHFOESPROC)proc((const GLubyte*)"glClearDepthfOES")) != nullptr) || r;
    r = ((__glClipPlanefOES = (PFNGLCLIPPLANEFOESPROC)proc((const GLubyte*)"glClipPlanefOES")) != nullptr) || r;
    r = ((__glDepthRangefOES = (PFNGLDEPTHRANGEFOESPROC)proc((const GLubyte*)"glDepthRangefOES")) != nullptr) || r;
    r = ((__glFrustumfOES = (PFNGLFRUSTUMFOESPROC)proc((const GLubyte*)"glFrustumfOES")) != nullptr) || r;
    r = ((__glGetClipPlanefOES = (PFNGLGETCLIPPLANEFOESPROC)proc((const GLubyte*)"glGetClipPlanefOES")) != nullptr) || r;
    r = ((__glOrthofOES = (PFNGLORTHOFOESPROC)proc((const GLubyte*)"glOrthofOES")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_OES_single_precision = false;
/* GL_3DFX_multisample */
bool __loadGL_3DFX_multisample(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_3DFX_multisample = false;
/* GL_3DFX_tbuffer */
PFNGLTBUFFERMASK3DFXPROC __glTbufferMask3DFX = nullptr; void APIENTRY glTbufferMask3DFX (GLuint mask) { if (__glTbufferMask3DFX != 0) (__glTbufferMask3DFX)(mask);  }
bool __loadGL_3DFX_tbuffer(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glTbufferMask3DFX = (PFNGLTBUFFERMASK3DFXPROC)proc((const GLubyte*)"glTbufferMask3DFX")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_3DFX_tbuffer = false;
/* GL_3DFX_texture_compression_FXT1 */
bool __loadGL_3DFX_texture_compression_FXT1(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_3DFX_texture_compression_FXT1 = false;
/* GL_AMD_blend_minmax_factor */
bool __loadGL_AMD_blend_minmax_factor(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_AMD_blend_minmax_factor = false;
/* GL_AMD_conservative_depth */
bool __loadGL_AMD_conservative_depth(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_AMD_conservative_depth = false;
/* GL_AMD_debug_output */
PFNGLDEBUGMESSAGECALLBACKAMDPROC __glDebugMessageCallbackAMD = nullptr; void APIENTRY glDebugMessageCallbackAMD (GLDEBUGPROCAMD callback, void *userParam) { if (__glDebugMessageCallbackAMD != 0) (__glDebugMessageCallbackAMD)(callback, userParam);  }
PFNGLDEBUGMESSAGEENABLEAMDPROC __glDebugMessageEnableAMD = nullptr; void APIENTRY glDebugMessageEnableAMD (GLenum category, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled) { if (__glDebugMessageEnableAMD != 0) (__glDebugMessageEnableAMD)(category, severity, count, ids, enabled);  }
PFNGLDEBUGMESSAGEINSERTAMDPROC __glDebugMessageInsertAMD = nullptr; void APIENTRY glDebugMessageInsertAMD (GLenum category, GLenum severity, GLuint id, GLsizei length, const GLchar *buf) { if (__glDebugMessageInsertAMD != 0) (__glDebugMessageInsertAMD)(category, severity, id, length, buf);  }
PFNGLGETDEBUGMESSAGELOGAMDPROC __glGetDebugMessageLogAMD = nullptr; GLuint APIENTRY glGetDebugMessageLogAMD (GLuint count, GLsizei bufsize, GLenum *categories, GLuint *severities, GLuint *ids, GLsizei *lengths, GLchar *message) { if (__glGetDebugMessageLogAMD != 0) return (__glGetDebugMessageLogAMD)(count, bufsize, categories, severities, ids, lengths, message); return 0; }
bool __loadGL_AMD_debug_output(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glDebugMessageCallbackAMD = (PFNGLDEBUGMESSAGECALLBACKAMDPROC)proc((const GLubyte*)"glDebugMessageCallbackAMD")) != nullptr) || r;
    r = ((__glDebugMessageEnableAMD = (PFNGLDEBUGMESSAGEENABLEAMDPROC)proc((const GLubyte*)"glDebugMessageEnableAMD")) != nullptr) || r;
    r = ((__glDebugMessageInsertAMD = (PFNGLDEBUGMESSAGEINSERTAMDPROC)proc((const GLubyte*)"glDebugMessageInsertAMD")) != nullptr) || r;
    r = ((__glGetDebugMessageLogAMD = (PFNGLGETDEBUGMESSAGELOGAMDPROC)proc((const GLubyte*)"glGetDebugMessageLogAMD")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_AMD_debug_output = false;
/* GL_AMD_depth_clamp_separate */
bool __loadGL_AMD_depth_clamp_separate(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_AMD_depth_clamp_separate = false;
/* GL_AMD_draw_buffers_blend */
PFNGLBLENDEQUATIONINDEXEDAMDPROC __glBlendEquationIndexedAMD = nullptr; void APIENTRY glBlendEquationIndexedAMD (GLuint buf, GLenum mode) { if (__glBlendEquationIndexedAMD != 0) (__glBlendEquationIndexedAMD)(buf, mode);  }
PFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC __glBlendEquationSeparateIndexedAMD = nullptr; void APIENTRY glBlendEquationSeparateIndexedAMD (GLuint buf, GLenum modeRGB, GLenum modeAlpha) { if (__glBlendEquationSeparateIndexedAMD != 0) (__glBlendEquationSeparateIndexedAMD)(buf, modeRGB, modeAlpha);  }
PFNGLBLENDFUNCINDEXEDAMDPROC __glBlendFuncIndexedAMD = nullptr; void APIENTRY glBlendFuncIndexedAMD (GLuint buf, GLenum src, GLenum dst) { if (__glBlendFuncIndexedAMD != 0) (__glBlendFuncIndexedAMD)(buf, src, dst);  }
PFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC __glBlendFuncSeparateIndexedAMD = nullptr; void APIENTRY glBlendFuncSeparateIndexedAMD (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) { if (__glBlendFuncSeparateIndexedAMD != 0) (__glBlendFuncSeparateIndexedAMD)(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);  }
bool __loadGL_AMD_draw_buffers_blend(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glBlendEquationIndexedAMD = (PFNGLBLENDEQUATIONINDEXEDAMDPROC)proc((const GLubyte*)"glBlendEquationIndexedAMD")) != nullptr) || r;
    r = ((__glBlendEquationSeparateIndexedAMD = (PFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC)proc((const GLubyte*)"glBlendEquationSeparateIndexedAMD")) != nullptr) || r;
    r = ((__glBlendFuncIndexedAMD = (PFNGLBLENDFUNCINDEXEDAMDPROC)proc((const GLubyte*)"glBlendFuncIndexedAMD")) != nullptr) || r;
    r = ((__glBlendFuncSeparateIndexedAMD = (PFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC)proc((const GLubyte*)"glBlendFuncSeparateIndexedAMD")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_AMD_draw_buffers_blend = false;
/* GL_AMD_gcn_shader */
bool __loadGL_AMD_gcn_shader(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_AMD_gcn_shader = false;
/* GL_AMD_gpu_shader_int64 */
PFNGLGETUNIFORMI64VNVPROC __glGetUniformi64vNV = nullptr; void APIENTRY glGetUniformi64vNV (GLuint program, GLint location, GLint64EXT *params) { if (__glGetUniformi64vNV != 0) (__glGetUniformi64vNV)(program, location, params);  }
PFNGLGETUNIFORMUI64VNVPROC __glGetUniformui64vNV = nullptr; void APIENTRY glGetUniformui64vNV (GLuint program, GLint location, GLuint64EXT *params) { if (__glGetUniformui64vNV != 0) (__glGetUniformui64vNV)(program, location, params);  }
PFNGLPROGRAMUNIFORM1I64NVPROC __glProgramUniform1i64NV = nullptr; void APIENTRY glProgramUniform1i64NV (GLuint program, GLint location, GLint64EXT x) { if (__glProgramUniform1i64NV != 0) (__glProgramUniform1i64NV)(program, location, x);  }
PFNGLPROGRAMUNIFORM1I64VNVPROC __glProgramUniform1i64vNV = nullptr; void APIENTRY glProgramUniform1i64vNV (GLuint program, GLint location, GLsizei count, const GLint64EXT *value) { if (__glProgramUniform1i64vNV != 0) (__glProgramUniform1i64vNV)(program, location, count, value);  }
PFNGLPROGRAMUNIFORM1UI64NVPROC __glProgramUniform1ui64NV = nullptr; void APIENTRY glProgramUniform1ui64NV (GLuint program, GLint location, GLuint64EXT x) { if (__glProgramUniform1ui64NV != 0) (__glProgramUniform1ui64NV)(program, location, x);  }
PFNGLPROGRAMUNIFORM1UI64VNVPROC __glProgramUniform1ui64vNV = nullptr; void APIENTRY glProgramUniform1ui64vNV (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value) { if (__glProgramUniform1ui64vNV != 0) (__glProgramUniform1ui64vNV)(program, location, count, value);  }
PFNGLPROGRAMUNIFORM2I64NVPROC __glProgramUniform2i64NV = nullptr; void APIENTRY glProgramUniform2i64NV (GLuint program, GLint location, GLint64EXT x, GLint64EXT y) { if (__glProgramUniform2i64NV != 0) (__glProgramUniform2i64NV)(program, location, x, y);  }
PFNGLPROGRAMUNIFORM2I64VNVPROC __glProgramUniform2i64vNV = nullptr; void APIENTRY glProgramUniform2i64vNV (GLuint program, GLint location, GLsizei count, const GLint64EXT *value) { if (__glProgramUniform2i64vNV != 0) (__glProgramUniform2i64vNV)(program, location, count, value);  }
PFNGLPROGRAMUNIFORM2UI64NVPROC __glProgramUniform2ui64NV = nullptr; void APIENTRY glProgramUniform2ui64NV (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y) { if (__glProgramUniform2ui64NV != 0) (__glProgramUniform2ui64NV)(program, location, x, y);  }
PFNGLPROGRAMUNIFORM2UI64VNVPROC __glProgramUniform2ui64vNV = nullptr; void APIENTRY glProgramUniform2ui64vNV (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value) { if (__glProgramUniform2ui64vNV != 0) (__glProgramUniform2ui64vNV)(program, location, count, value);  }
PFNGLPROGRAMUNIFORM3I64NVPROC __glProgramUniform3i64NV = nullptr; void APIENTRY glProgramUniform3i64NV (GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z) { if (__glProgramUniform3i64NV != 0) (__glProgramUniform3i64NV)(program, location, x, y, z);  }
PFNGLPROGRAMUNIFORM3I64VNVPROC __glProgramUniform3i64vNV = nullptr; void APIENTRY glProgramUniform3i64vNV (GLuint program, GLint location, GLsizei count, const GLint64EXT *value) { if (__glProgramUniform3i64vNV != 0) (__glProgramUniform3i64vNV)(program, location, count, value);  }
PFNGLPROGRAMUNIFORM3UI64NVPROC __glProgramUniform3ui64NV = nullptr; void APIENTRY glProgramUniform3ui64NV (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z) { if (__glProgramUniform3ui64NV != 0) (__glProgramUniform3ui64NV)(program, location, x, y, z);  }
PFNGLPROGRAMUNIFORM3UI64VNVPROC __glProgramUniform3ui64vNV = nullptr; void APIENTRY glProgramUniform3ui64vNV (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value) { if (__glProgramUniform3ui64vNV != 0) (__glProgramUniform3ui64vNV)(program, location, count, value);  }
PFNGLPROGRAMUNIFORM4I64NVPROC __glProgramUniform4i64NV = nullptr; void APIENTRY glProgramUniform4i64NV (GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w) { if (__glProgramUniform4i64NV != 0) (__glProgramUniform4i64NV)(program, location, x, y, z, w);  }
PFNGLPROGRAMUNIFORM4I64VNVPROC __glProgramUniform4i64vNV = nullptr; void APIENTRY glProgramUniform4i64vNV (GLuint program, GLint location, GLsizei count, const GLint64EXT *value) { if (__glProgramUniform4i64vNV != 0) (__glProgramUniform4i64vNV)(program, location, count, value);  }
PFNGLPROGRAMUNIFORM4UI64NVPROC __glProgramUniform4ui64NV = nullptr; void APIENTRY glProgramUniform4ui64NV (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w) { if (__glProgramUniform4ui64NV != 0) (__glProgramUniform4ui64NV)(program, location, x, y, z, w);  }
PFNGLPROGRAMUNIFORM4UI64VNVPROC __glProgramUniform4ui64vNV = nullptr; void APIENTRY glProgramUniform4ui64vNV (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value) { if (__glProgramUniform4ui64vNV != 0) (__glProgramUniform4ui64vNV)(program, location, count, value);  }
PFNGLUNIFORM1I64NVPROC __glUniform1i64NV = nullptr; void APIENTRY glUniform1i64NV (GLint location, GLint64EXT x) { if (__glUniform1i64NV != 0) (__glUniform1i64NV)(location, x);  }
PFNGLUNIFORM1I64VNVPROC __glUniform1i64vNV = nullptr; void APIENTRY glUniform1i64vNV (GLint location, GLsizei count, const GLint64EXT *value) { if (__glUniform1i64vNV != 0) (__glUniform1i64vNV)(location, count, value);  }
PFNGLUNIFORM1UI64NVPROC __glUniform1ui64NV = nullptr; void APIENTRY glUniform1ui64NV (GLint location, GLuint64EXT x) { if (__glUniform1ui64NV != 0) (__glUniform1ui64NV)(location, x);  }
PFNGLUNIFORM1UI64VNVPROC __glUniform1ui64vNV = nullptr; void APIENTRY glUniform1ui64vNV (GLint location, GLsizei count, const GLuint64EXT *value) { if (__glUniform1ui64vNV != 0) (__glUniform1ui64vNV)(location, count, value);  }
PFNGLUNIFORM2I64NVPROC __glUniform2i64NV = nullptr; void APIENTRY glUniform2i64NV (GLint location, GLint64EXT x, GLint64EXT y) { if (__glUniform2i64NV != 0) (__glUniform2i64NV)(location, x, y);  }
PFNGLUNIFORM2I64VNVPROC __glUniform2i64vNV = nullptr; void APIENTRY glUniform2i64vNV (GLint location, GLsizei count, const GLint64EXT *value) { if (__glUniform2i64vNV != 0) (__glUniform2i64vNV)(location, count, value);  }
PFNGLUNIFORM2UI64NVPROC __glUniform2ui64NV = nullptr; void APIENTRY glUniform2ui64NV (GLint location, GLuint64EXT x, GLuint64EXT y) { if (__glUniform2ui64NV != 0) (__glUniform2ui64NV)(location, x, y);  }
PFNGLUNIFORM2UI64VNVPROC __glUniform2ui64vNV = nullptr; void APIENTRY glUniform2ui64vNV (GLint location, GLsizei count, const GLuint64EXT *value) { if (__glUniform2ui64vNV != 0) (__glUniform2ui64vNV)(location, count, value);  }
PFNGLUNIFORM3I64NVPROC __glUniform3i64NV = nullptr; void APIENTRY glUniform3i64NV (GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z) { if (__glUniform3i64NV != 0) (__glUniform3i64NV)(location, x, y, z);  }
PFNGLUNIFORM3I64VNVPROC __glUniform3i64vNV = nullptr; void APIENTRY glUniform3i64vNV (GLint location, GLsizei count, const GLint64EXT *value) { if (__glUniform3i64vNV != 0) (__glUniform3i64vNV)(location, count, value);  }
PFNGLUNIFORM3UI64NVPROC __glUniform3ui64NV = nullptr; void APIENTRY glUniform3ui64NV (GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z) { if (__glUniform3ui64NV != 0) (__glUniform3ui64NV)(location, x, y, z);  }
PFNGLUNIFORM3UI64VNVPROC __glUniform3ui64vNV = nullptr; void APIENTRY glUniform3ui64vNV (GLint location, GLsizei count, const GLuint64EXT *value) { if (__glUniform3ui64vNV != 0) (__glUniform3ui64vNV)(location, count, value);  }
PFNGLUNIFORM4I64NVPROC __glUniform4i64NV = nullptr; void APIENTRY glUniform4i64NV (GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w) { if (__glUniform4i64NV != 0) (__glUniform4i64NV)(location, x, y, z, w);  }
PFNGLUNIFORM4I64VNVPROC __glUniform4i64vNV = nullptr; void APIENTRY glUniform4i64vNV (GLint location, GLsizei count, const GLint64EXT *value) { if (__glUniform4i64vNV != 0) (__glUniform4i64vNV)(location, count, value);  }
PFNGLUNIFORM4UI64NVPROC __glUniform4ui64NV = nullptr; void APIENTRY glUniform4ui64NV (GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w) { if (__glUniform4ui64NV != 0) (__glUniform4ui64NV)(location, x, y, z, w);  }
PFNGLUNIFORM4UI64VNVPROC __glUniform4ui64vNV = nullptr; void APIENTRY glUniform4ui64vNV (GLint location, GLsizei count, const GLuint64EXT *value) { if (__glUniform4ui64vNV != 0) (__glUniform4ui64vNV)(location, count, value);  }
bool __loadGL_AMD_gpu_shader_int64(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glGetUniformi64vNV = (PFNGLGETUNIFORMI64VNVPROC)proc((const GLubyte*)"glGetUniformi64vNV")) != nullptr) || r;
    r = ((__glGetUniformui64vNV = (PFNGLGETUNIFORMUI64VNVPROC)proc((const GLubyte*)"glGetUniformui64vNV")) != nullptr) || r;
    r = ((__glProgramUniform1i64NV = (PFNGLPROGRAMUNIFORM1I64NVPROC)proc((const GLubyte*)"glProgramUniform1i64NV")) != nullptr) || r;
    r = ((__glProgramUniform1i64vNV = (PFNGLPROGRAMUNIFORM1I64VNVPROC)proc((const GLubyte*)"glProgramUniform1i64vNV")) != nullptr) || r;
    r = ((__glProgramUniform1ui64NV = (PFNGLPROGRAMUNIFORM1UI64NVPROC)proc((const GLubyte*)"glProgramUniform1ui64NV")) != nullptr) || r;
    r = ((__glProgramUniform1ui64vNV = (PFNGLPROGRAMUNIFORM1UI64VNVPROC)proc((const GLubyte*)"glProgramUniform1ui64vNV")) != nullptr) || r;
    r = ((__glProgramUniform2i64NV = (PFNGLPROGRAMUNIFORM2I64NVPROC)proc((const GLubyte*)"glProgramUniform2i64NV")) != nullptr) || r;
    r = ((__glProgramUniform2i64vNV = (PFNGLPROGRAMUNIFORM2I64VNVPROC)proc((const GLubyte*)"glProgramUniform2i64vNV")) != nullptr) || r;
    r = ((__glProgramUniform2ui64NV = (PFNGLPROGRAMUNIFORM2UI64NVPROC)proc((const GLubyte*)"glProgramUniform2ui64NV")) != nullptr) || r;
    r = ((__glProgramUniform2ui64vNV = (PFNGLPROGRAMUNIFORM2UI64VNVPROC)proc((const GLubyte*)"glProgramUniform2ui64vNV")) != nullptr) || r;
    r = ((__glProgramUniform3i64NV = (PFNGLPROGRAMUNIFORM3I64NVPROC)proc((const GLubyte*)"glProgramUniform3i64NV")) != nullptr) || r;
    r = ((__glProgramUniform3i64vNV = (PFNGLPROGRAMUNIFORM3I64VNVPROC)proc((const GLubyte*)"glProgramUniform3i64vNV")) != nullptr) || r;
    r = ((__glProgramUniform3ui64NV = (PFNGLPROGRAMUNIFORM3UI64NVPROC)proc((const GLubyte*)"glProgramUniform3ui64NV")) != nullptr) || r;
    r = ((__glProgramUniform3ui64vNV = (PFNGLPROGRAMUNIFORM3UI64VNVPROC)proc((const GLubyte*)"glProgramUniform3ui64vNV")) != nullptr) || r;
    r = ((__glProgramUniform4i64NV = (PFNGLPROGRAMUNIFORM4I64NVPROC)proc((const GLubyte*)"glProgramUniform4i64NV")) != nullptr) || r;
    r = ((__glProgramUniform4i64vNV = (PFNGLPROGRAMUNIFORM4I64VNVPROC)proc((const GLubyte*)"glProgramUniform4i64vNV")) != nullptr) || r;
    r = ((__glProgramUniform4ui64NV = (PFNGLPROGRAMUNIFORM4UI64NVPROC)proc((const GLubyte*)"glProgramUniform4ui64NV")) != nullptr) || r;
    r = ((__glProgramUniform4ui64vNV = (PFNGLPROGRAMUNIFORM4UI64VNVPROC)proc((const GLubyte*)"glProgramUniform4ui64vNV")) != nullptr) || r;
    r = ((__glUniform1i64NV = (PFNGLUNIFORM1I64NVPROC)proc((const GLubyte*)"glUniform1i64NV")) != nullptr) || r;
    r = ((__glUniform1i64vNV = (PFNGLUNIFORM1I64VNVPROC)proc((const GLubyte*)"glUniform1i64vNV")) != nullptr) || r;
    r = ((__glUniform1ui64NV = (PFNGLUNIFORM1UI64NVPROC)proc((const GLubyte*)"glUniform1ui64NV")) != nullptr) || r;
    r = ((__glUniform1ui64vNV = (PFNGLUNIFORM1UI64VNVPROC)proc((const GLubyte*)"glUniform1ui64vNV")) != nullptr) || r;
    r = ((__glUniform2i64NV = (PFNGLUNIFORM2I64NVPROC)proc((const GLubyte*)"glUniform2i64NV")) != nullptr) || r;
    r = ((__glUniform2i64vNV = (PFNGLUNIFORM2I64VNVPROC)proc((const GLubyte*)"glUniform2i64vNV")) != nullptr) || r;
    r = ((__glUniform2ui64NV = (PFNGLUNIFORM2UI64NVPROC)proc((const GLubyte*)"glUniform2ui64NV")) != nullptr) || r;
    r = ((__glUniform2ui64vNV = (PFNGLUNIFORM2UI64VNVPROC)proc((const GLubyte*)"glUniform2ui64vNV")) != nullptr) || r;
    r = ((__glUniform3i64NV = (PFNGLUNIFORM3I64NVPROC)proc((const GLubyte*)"glUniform3i64NV")) != nullptr) || r;
    r = ((__glUniform3i64vNV = (PFNGLUNIFORM3I64VNVPROC)proc((const GLubyte*)"glUniform3i64vNV")) != nullptr) || r;
    r = ((__glUniform3ui64NV = (PFNGLUNIFORM3UI64NVPROC)proc((const GLubyte*)"glUniform3ui64NV")) != nullptr) || r;
    r = ((__glUniform3ui64vNV = (PFNGLUNIFORM3UI64VNVPROC)proc((const GLubyte*)"glUniform3ui64vNV")) != nullptr) || r;
    r = ((__glUniform4i64NV = (PFNGLUNIFORM4I64NVPROC)proc((const GLubyte*)"glUniform4i64NV")) != nullptr) || r;
    r = ((__glUniform4i64vNV = (PFNGLUNIFORM4I64VNVPROC)proc((const GLubyte*)"glUniform4i64vNV")) != nullptr) || r;
    r = ((__glUniform4ui64NV = (PFNGLUNIFORM4UI64NVPROC)proc((const GLubyte*)"glUniform4ui64NV")) != nullptr) || r;
    r = ((__glUniform4ui64vNV = (PFNGLUNIFORM4UI64VNVPROC)proc((const GLubyte*)"glUniform4ui64vNV")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_AMD_gpu_shader_int64 = false;
/* GL_AMD_interleaved_elements */
PFNGLVERTEXATTRIBPARAMETERIAMDPROC __glVertexAttribParameteriAMD = nullptr; void APIENTRY glVertexAttribParameteriAMD (GLuint index, GLenum pname, GLint param) { if (__glVertexAttribParameteriAMD != 0) (__glVertexAttribParameteriAMD)(index, pname, param);  }
bool __loadGL_AMD_interleaved_elements(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glVertexAttribParameteriAMD = (PFNGLVERTEXATTRIBPARAMETERIAMDPROC)proc((const GLubyte*)"glVertexAttribParameteriAMD")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_AMD_interleaved_elements = false;
/* GL_AMD_multi_draw_indirect */
PFNGLMULTIDRAWARRAYSINDIRECTAMDPROC __glMultiDrawArraysIndirectAMD = nullptr; void APIENTRY glMultiDrawArraysIndirectAMD (GLenum mode, const void *indirect, GLsizei primcount, GLsizei stride) { if (__glMultiDrawArraysIndirectAMD != 0) (__glMultiDrawArraysIndirectAMD)(mode, indirect, primcount, stride);  }
PFNGLMULTIDRAWELEMENTSINDIRECTAMDPROC __glMultiDrawElementsIndirectAMD = nullptr; void APIENTRY glMultiDrawElementsIndirectAMD (GLenum mode, GLenum type, const void *indirect, GLsizei primcount, GLsizei stride) { if (__glMultiDrawElementsIndirectAMD != 0) (__glMultiDrawElementsIndirectAMD)(mode, type, indirect, primcount, stride);  }
bool __loadGL_AMD_multi_draw_indirect(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glMultiDrawArraysIndirectAMD = (PFNGLMULTIDRAWARRAYSINDIRECTAMDPROC)proc((const GLubyte*)"glMultiDrawArraysIndirectAMD")) != nullptr) || r;
    r = ((__glMultiDrawElementsIndirectAMD = (PFNGLMULTIDRAWELEMENTSINDIRECTAMDPROC)proc((const GLubyte*)"glMultiDrawElementsIndirectAMD")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_AMD_multi_draw_indirect = false;
/* GL_AMD_name_gen_delete */
PFNGLDELETENAMESAMDPROC __glDeleteNamesAMD = nullptr; void APIENTRY glDeleteNamesAMD (GLenum identifier, GLuint num, const GLuint *names) { if (__glDeleteNamesAMD != 0) (__glDeleteNamesAMD)(identifier, num, names);  }
PFNGLGENNAMESAMDPROC __glGenNamesAMD = nullptr; void APIENTRY glGenNamesAMD (GLenum identifier, GLuint num, GLuint *names) { if (__glGenNamesAMD != 0) (__glGenNamesAMD)(identifier, num, names);  }
PFNGLISNAMEAMDPROC __glIsNameAMD = nullptr; GLboolean APIENTRY glIsNameAMD (GLenum identifier, GLuint name) { if (__glIsNameAMD != 0) return (__glIsNameAMD)(identifier, name); return 0; }
bool __loadGL_AMD_name_gen_delete(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glDeleteNamesAMD = (PFNGLDELETENAMESAMDPROC)proc((const GLubyte*)"glDeleteNamesAMD")) != nullptr) || r;
    r = ((__glGenNamesAMD = (PFNGLGENNAMESAMDPROC)proc((const GLubyte*)"glGenNamesAMD")) != nullptr) || r;
    r = ((__glIsNameAMD = (PFNGLISNAMEAMDPROC)proc((const GLubyte*)"glIsNameAMD")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_AMD_name_gen_delete = false;
/* GL_AMD_occlusion_query_event */
PFNGLQUERYOBJECTPARAMETERUIAMDPROC __glQueryObjectParameteruiAMD = nullptr; void APIENTRY glQueryObjectParameteruiAMD (GLenum target, GLuint id, GLenum pname, GLuint param) { if (__glQueryObjectParameteruiAMD != 0) (__glQueryObjectParameteruiAMD)(target, id, pname, param);  }
bool __loadGL_AMD_occlusion_query_event(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glQueryObjectParameteruiAMD = (PFNGLQUERYOBJECTPARAMETERUIAMDPROC)proc((const GLubyte*)"glQueryObjectParameteruiAMD")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_AMD_occlusion_query_event = false;
/* GL_AMD_performance_monitor */
PFNGLBEGINPERFMONITORAMDPROC __glBeginPerfMonitorAMD = nullptr; void APIENTRY glBeginPerfMonitorAMD (GLuint monitor) { if (__glBeginPerfMonitorAMD != 0) (__glBeginPerfMonitorAMD)(monitor);  }
PFNGLDELETEPERFMONITORSAMDPROC __glDeletePerfMonitorsAMD = nullptr; void APIENTRY glDeletePerfMonitorsAMD (GLsizei n, GLuint *monitors) { if (__glDeletePerfMonitorsAMD != 0) (__glDeletePerfMonitorsAMD)(n, monitors);  }
PFNGLENDPERFMONITORAMDPROC __glEndPerfMonitorAMD = nullptr; void APIENTRY glEndPerfMonitorAMD (GLuint monitor) { if (__glEndPerfMonitorAMD != 0) (__glEndPerfMonitorAMD)(monitor);  }
PFNGLGENPERFMONITORSAMDPROC __glGenPerfMonitorsAMD = nullptr; void APIENTRY glGenPerfMonitorsAMD (GLsizei n, GLuint *monitors) { if (__glGenPerfMonitorsAMD != 0) (__glGenPerfMonitorsAMD)(n, monitors);  }
PFNGLGETPERFMONITORCOUNTERDATAAMDPROC __glGetPerfMonitorCounterDataAMD = nullptr; void APIENTRY glGetPerfMonitorCounterDataAMD (GLuint monitor, GLenum pname, GLsizei dataSize, GLuint *data, GLint *bytesWritten) { if (__glGetPerfMonitorCounterDataAMD != 0) (__glGetPerfMonitorCounterDataAMD)(monitor, pname, dataSize, data, bytesWritten);  }
PFNGLGETPERFMONITORCOUNTERINFOAMDPROC __glGetPerfMonitorCounterInfoAMD = nullptr; void APIENTRY glGetPerfMonitorCounterInfoAMD (GLuint group, GLuint counter, GLenum pname, void *data) { if (__glGetPerfMonitorCounterInfoAMD != 0) (__glGetPerfMonitorCounterInfoAMD)(group, counter, pname, data);  }
PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC __glGetPerfMonitorCounterStringAMD = nullptr; void APIENTRY glGetPerfMonitorCounterStringAMD (GLuint group, GLuint counter, GLsizei bufSize, GLsizei *length, GLchar *counterString) { if (__glGetPerfMonitorCounterStringAMD != 0) (__glGetPerfMonitorCounterStringAMD)(group, counter, bufSize, length, counterString);  }
PFNGLGETPERFMONITORCOUNTERSAMDPROC __glGetPerfMonitorCountersAMD = nullptr; void APIENTRY glGetPerfMonitorCountersAMD (GLuint group, GLint *numCounters, GLint *maxActiveCounters, GLsizei counterSize, GLuint *counters) { if (__glGetPerfMonitorCountersAMD != 0) (__glGetPerfMonitorCountersAMD)(group, numCounters, maxActiveCounters, counterSize, counters);  }
PFNGLGETPERFMONITORGROUPSTRINGAMDPROC __glGetPerfMonitorGroupStringAMD = nullptr; void APIENTRY glGetPerfMonitorGroupStringAMD (GLuint group, GLsizei bufSize, GLsizei *length, GLchar *groupString) { if (__glGetPerfMonitorGroupStringAMD != 0) (__glGetPerfMonitorGroupStringAMD)(group, bufSize, length, groupString);  }
PFNGLGETPERFMONITORGROUPSAMDPROC __glGetPerfMonitorGroupsAMD = nullptr; void APIENTRY glGetPerfMonitorGroupsAMD (GLint *numGroups, GLsizei groupsSize, GLuint *groups) { if (__glGetPerfMonitorGroupsAMD != 0) (__glGetPerfMonitorGroupsAMD)(numGroups, groupsSize, groups);  }
PFNGLSELECTPERFMONITORCOUNTERSAMDPROC __glSelectPerfMonitorCountersAMD = nullptr; void APIENTRY glSelectPerfMonitorCountersAMD (GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint *counterList) { if (__glSelectPerfMonitorCountersAMD != 0) (__glSelectPerfMonitorCountersAMD)(monitor, enable, group, numCounters, counterList);  }
bool __loadGL_AMD_performance_monitor(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glBeginPerfMonitorAMD = (PFNGLBEGINPERFMONITORAMDPROC)proc((const GLubyte*)"glBeginPerfMonitorAMD")) != nullptr) || r;
    r = ((__glDeletePerfMonitorsAMD = (PFNGLDELETEPERFMONITORSAMDPROC)proc((const GLubyte*)"glDeletePerfMonitorsAMD")) != nullptr) || r;
    r = ((__glEndPerfMonitorAMD = (PFNGLENDPERFMONITORAMDPROC)proc((const GLubyte*)"glEndPerfMonitorAMD")) != nullptr) || r;
    r = ((__glGenPerfMonitorsAMD = (PFNGLGENPERFMONITORSAMDPROC)proc((const GLubyte*)"glGenPerfMonitorsAMD")) != nullptr) || r;
    r = ((__glGetPerfMonitorCounterDataAMD = (PFNGLGETPERFMONITORCOUNTERDATAAMDPROC)proc((const GLubyte*)"glGetPerfMonitorCounterDataAMD")) != nullptr) || r;
    r = ((__glGetPerfMonitorCounterInfoAMD = (PFNGLGETPERFMONITORCOUNTERINFOAMDPROC)proc((const GLubyte*)"glGetPerfMonitorCounterInfoAMD")) != nullptr) || r;
    r = ((__glGetPerfMonitorCounterStringAMD = (PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC)proc((const GLubyte*)"glGetPerfMonitorCounterStringAMD")) != nullptr) || r;
    r = ((__glGetPerfMonitorCountersAMD = (PFNGLGETPERFMONITORCOUNTERSAMDPROC)proc((const GLubyte*)"glGetPerfMonitorCountersAMD")) != nullptr) || r;
    r = ((__glGetPerfMonitorGroupStringAMD = (PFNGLGETPERFMONITORGROUPSTRINGAMDPROC)proc((const GLubyte*)"glGetPerfMonitorGroupStringAMD")) != nullptr) || r;
    r = ((__glGetPerfMonitorGroupsAMD = (PFNGLGETPERFMONITORGROUPSAMDPROC)proc((const GLubyte*)"glGetPerfMonitorGroupsAMD")) != nullptr) || r;
    r = ((__glSelectPerfMonitorCountersAMD = (PFNGLSELECTPERFMONITORCOUNTERSAMDPROC)proc((const GLubyte*)"glSelectPerfMonitorCountersAMD")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_AMD_performance_monitor = false;
/* GL_AMD_pinned_memory */
bool __loadGL_AMD_pinned_memory(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_AMD_pinned_memory = false;
/* GL_AMD_query_buffer_object */
bool __loadGL_AMD_query_buffer_object(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_AMD_query_buffer_object = false;
/* GL_AMD_sample_positions */
PFNGLSETMULTISAMPLEFVAMDPROC __glSetMultisamplefvAMD = nullptr; void APIENTRY glSetMultisamplefvAMD (GLenum pname, GLuint index, const GLfloat *val) { if (__glSetMultisamplefvAMD != 0) (__glSetMultisamplefvAMD)(pname, index, val);  }
bool __loadGL_AMD_sample_positions(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glSetMultisamplefvAMD = (PFNGLSETMULTISAMPLEFVAMDPROC)proc((const GLubyte*)"glSetMultisamplefvAMD")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_AMD_sample_positions = false;
/* GL_AMD_seamless_cubemap_per_texture */
bool __loadGL_AMD_seamless_cubemap_per_texture(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_AMD_seamless_cubemap_per_texture = false;
/* GL_AMD_shader_atomic_counter_ops */
bool __loadGL_AMD_shader_atomic_counter_ops(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_AMD_shader_atomic_counter_ops = false;
/* GL_AMD_shader_stencil_export */
bool __loadGL_AMD_shader_stencil_export(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_AMD_shader_stencil_export = false;
/* GL_AMD_shader_trinary_minmax */
bool __loadGL_AMD_shader_trinary_minmax(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_AMD_shader_trinary_minmax = false;
/* GL_AMD_sparse_texture */
PFNGLTEXSTORAGESPARSEAMDPROC __glTexStorageSparseAMD = nullptr; void APIENTRY glTexStorageSparseAMD (GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags) { if (__glTexStorageSparseAMD != 0) (__glTexStorageSparseAMD)(target, internalFormat, width, height, depth, layers, flags);  }
PFNGLTEXTURESTORAGESPARSEAMDPROC __glTextureStorageSparseAMD = nullptr; void APIENTRY glTextureStorageSparseAMD (GLuint texture, GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags) { if (__glTextureStorageSparseAMD != 0) (__glTextureStorageSparseAMD)(texture, target, internalFormat, width, height, depth, layers, flags);  }
bool __loadGL_AMD_sparse_texture(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glTexStorageSparseAMD = (PFNGLTEXSTORAGESPARSEAMDPROC)proc((const GLubyte*)"glTexStorageSparseAMD")) != nullptr) || r;
    r = ((__glTextureStorageSparseAMD = (PFNGLTEXTURESTORAGESPARSEAMDPROC)proc((const GLubyte*)"glTextureStorageSparseAMD")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_AMD_sparse_texture = false;
/* GL_AMD_stencil_operation_extended */
PFNGLSTENCILOPVALUEAMDPROC __glStencilOpValueAMD = nullptr; void APIENTRY glStencilOpValueAMD (GLenum face, GLuint value) { if (__glStencilOpValueAMD != 0) (__glStencilOpValueAMD)(face, value);  }
bool __loadGL_AMD_stencil_operation_extended(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glStencilOpValueAMD = (PFNGLSTENCILOPVALUEAMDPROC)proc((const GLubyte*)"glStencilOpValueAMD")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_AMD_stencil_operation_extended = false;
/* GL_AMD_texture_texture4 */
bool __loadGL_AMD_texture_texture4(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_AMD_texture_texture4 = false;
/* GL_AMD_transform_feedback3_lines_triangles */
bool __loadGL_AMD_transform_feedback3_lines_triangles(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_AMD_transform_feedback3_lines_triangles = false;
/* GL_AMD_transform_feedback4 */
bool __loadGL_AMD_transform_feedback4(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_AMD_transform_feedback4 = false;
/* GL_AMD_vertex_shader_layer */
bool __loadGL_AMD_vertex_shader_layer(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_AMD_vertex_shader_layer = false;
/* GL_AMD_vertex_shader_tessellator */
PFNGLTESSELLATIONFACTORAMDPROC __glTessellationFactorAMD = nullptr; void APIENTRY glTessellationFactorAMD (GLfloat factor) { if (__glTessellationFactorAMD != 0) (__glTessellationFactorAMD)(factor);  }
PFNGLTESSELLATIONMODEAMDPROC __glTessellationModeAMD = nullptr; void APIENTRY glTessellationModeAMD (GLenum mode) { if (__glTessellationModeAMD != 0) (__glTessellationModeAMD)(mode);  }
bool __loadGL_AMD_vertex_shader_tessellator(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glTessellationFactorAMD = (PFNGLTESSELLATIONFACTORAMDPROC)proc((const GLubyte*)"glTessellationFactorAMD")) != nullptr) || r;
    r = ((__glTessellationModeAMD = (PFNGLTESSELLATIONMODEAMDPROC)proc((const GLubyte*)"glTessellationModeAMD")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_AMD_vertex_shader_tessellator = false;
/* GL_AMD_vertex_shader_viewport_index */
bool __loadGL_AMD_vertex_shader_viewport_index(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_AMD_vertex_shader_viewport_index = false;
/* GL_APPLE_aux_depth_stencil */
bool __loadGL_APPLE_aux_depth_stencil(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_APPLE_aux_depth_stencil = false;
/* GL_APPLE_client_storage */
bool __loadGL_APPLE_client_storage(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_APPLE_client_storage = false;
/* GL_APPLE_element_array */
PFNGLDRAWELEMENTARRAYAPPLEPROC __glDrawElementArrayAPPLE = nullptr; void APIENTRY glDrawElementArrayAPPLE (GLenum mode, GLint first, GLsizei count) { if (__glDrawElementArrayAPPLE != 0) (__glDrawElementArrayAPPLE)(mode, first, count);  }
PFNGLDRAWRANGEELEMENTARRAYAPPLEPROC __glDrawRangeElementArrayAPPLE = nullptr; void APIENTRY glDrawRangeElementArrayAPPLE (GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count) { if (__glDrawRangeElementArrayAPPLE != 0) (__glDrawRangeElementArrayAPPLE)(mode, start, end, first, count);  }
PFNGLELEMENTPOINTERAPPLEPROC __glElementPointerAPPLE = nullptr; void APIENTRY glElementPointerAPPLE (GLenum type, const void *pointer) { if (__glElementPointerAPPLE != 0) (__glElementPointerAPPLE)(type, pointer);  }
PFNGLMULTIDRAWELEMENTARRAYAPPLEPROC __glMultiDrawElementArrayAPPLE = nullptr; void APIENTRY glMultiDrawElementArrayAPPLE (GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount) { if (__glMultiDrawElementArrayAPPLE != 0) (__glMultiDrawElementArrayAPPLE)(mode, first, count, primcount);  }
PFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC __glMultiDrawRangeElementArrayAPPLE = nullptr; void APIENTRY glMultiDrawRangeElementArrayAPPLE (GLenum mode, GLuint start, GLuint end, const GLint *first, const GLsizei *count, GLsizei primcount) { if (__glMultiDrawRangeElementArrayAPPLE != 0) (__glMultiDrawRangeElementArrayAPPLE)(mode, start, end, first, count, primcount);  }
bool __loadGL_APPLE_element_array(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glDrawElementArrayAPPLE = (PFNGLDRAWELEMENTARRAYAPPLEPROC)proc((const GLubyte*)"glDrawElementArrayAPPLE")) != nullptr) || r;
    r = ((__glDrawRangeElementArrayAPPLE = (PFNGLDRAWRANGEELEMENTARRAYAPPLEPROC)proc((const GLubyte*)"glDrawRangeElementArrayAPPLE")) != nullptr) || r;
    r = ((__glElementPointerAPPLE = (PFNGLELEMENTPOINTERAPPLEPROC)proc((const GLubyte*)"glElementPointerAPPLE")) != nullptr) || r;
    r = ((__glMultiDrawElementArrayAPPLE = (PFNGLMULTIDRAWELEMENTARRAYAPPLEPROC)proc((const GLubyte*)"glMultiDrawElementArrayAPPLE")) != nullptr) || r;
    r = ((__glMultiDrawRangeElementArrayAPPLE = (PFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC)proc((const GLubyte*)"glMultiDrawRangeElementArrayAPPLE")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_APPLE_element_array = false;
/* GL_APPLE_fence */
PFNGLDELETEFENCESAPPLEPROC __glDeleteFencesAPPLE = nullptr; void APIENTRY glDeleteFencesAPPLE (GLsizei n, const GLuint *fences) { if (__glDeleteFencesAPPLE != 0) (__glDeleteFencesAPPLE)(n, fences);  }
PFNGLFINISHFENCEAPPLEPROC __glFinishFenceAPPLE = nullptr; void APIENTRY glFinishFenceAPPLE (GLuint fence) { if (__glFinishFenceAPPLE != 0) (__glFinishFenceAPPLE)(fence);  }
PFNGLFINISHOBJECTAPPLEPROC __glFinishObjectAPPLE = nullptr; void APIENTRY glFinishObjectAPPLE (GLenum object, GLint name) { if (__glFinishObjectAPPLE != 0) (__glFinishObjectAPPLE)(object, name);  }
PFNGLGENFENCESAPPLEPROC __glGenFencesAPPLE = nullptr; void APIENTRY glGenFencesAPPLE (GLsizei n, GLuint *fences) { if (__glGenFencesAPPLE != 0) (__glGenFencesAPPLE)(n, fences);  }
PFNGLISFENCEAPPLEPROC __glIsFenceAPPLE = nullptr; GLboolean APIENTRY glIsFenceAPPLE (GLuint fence) { if (__glIsFenceAPPLE != 0) return (__glIsFenceAPPLE)(fence); return 0; }
PFNGLSETFENCEAPPLEPROC __glSetFenceAPPLE = nullptr; void APIENTRY glSetFenceAPPLE (GLuint fence) { if (__glSetFenceAPPLE != 0) (__glSetFenceAPPLE)(fence);  }
PFNGLTESTFENCEAPPLEPROC __glTestFenceAPPLE = nullptr; GLboolean APIENTRY glTestFenceAPPLE (GLuint fence) { if (__glTestFenceAPPLE != 0) return (__glTestFenceAPPLE)(fence); return 0; }
PFNGLTESTOBJECTAPPLEPROC __glTestObjectAPPLE = nullptr; GLboolean APIENTRY glTestObjectAPPLE (GLenum object, GLuint name) { if (__glTestObjectAPPLE != 0) return (__glTestObjectAPPLE)(object, name); return 0; }
bool __loadGL_APPLE_fence(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glDeleteFencesAPPLE = (PFNGLDELETEFENCESAPPLEPROC)proc((const GLubyte*)"glDeleteFencesAPPLE")) != nullptr) || r;
    r = ((__glFinishFenceAPPLE = (PFNGLFINISHFENCEAPPLEPROC)proc((const GLubyte*)"glFinishFenceAPPLE")) != nullptr) || r;
    r = ((__glFinishObjectAPPLE = (PFNGLFINISHOBJECTAPPLEPROC)proc((const GLubyte*)"glFinishObjectAPPLE")) != nullptr) || r;
    r = ((__glGenFencesAPPLE = (PFNGLGENFENCESAPPLEPROC)proc((const GLubyte*)"glGenFencesAPPLE")) != nullptr) || r;
    r = ((__glIsFenceAPPLE = (PFNGLISFENCEAPPLEPROC)proc((const GLubyte*)"glIsFenceAPPLE")) != nullptr) || r;
    r = ((__glSetFenceAPPLE = (PFNGLSETFENCEAPPLEPROC)proc((const GLubyte*)"glSetFenceAPPLE")) != nullptr) || r;
    r = ((__glTestFenceAPPLE = (PFNGLTESTFENCEAPPLEPROC)proc((const GLubyte*)"glTestFenceAPPLE")) != nullptr) || r;
    r = ((__glTestObjectAPPLE = (PFNGLTESTOBJECTAPPLEPROC)proc((const GLubyte*)"glTestObjectAPPLE")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_APPLE_fence = false;
/* GL_APPLE_float_pixels */
bool __loadGL_APPLE_float_pixels(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_APPLE_float_pixels = false;
/* GL_APPLE_flush_buffer_range */
PFNGLBUFFERPARAMETERIAPPLEPROC __glBufferParameteriAPPLE = nullptr; void APIENTRY glBufferParameteriAPPLE (GLenum target, GLenum pname, GLint param) { if (__glBufferParameteriAPPLE != 0) (__glBufferParameteriAPPLE)(target, pname, param);  }
PFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC __glFlushMappedBufferRangeAPPLE = nullptr; void APIENTRY glFlushMappedBufferRangeAPPLE (GLenum target, GLintptr offset, GLsizeiptr size) { if (__glFlushMappedBufferRangeAPPLE != 0) (__glFlushMappedBufferRangeAPPLE)(target, offset, size);  }
bool __loadGL_APPLE_flush_buffer_range(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glBufferParameteriAPPLE = (PFNGLBUFFERPARAMETERIAPPLEPROC)proc((const GLubyte*)"glBufferParameteriAPPLE")) != nullptr) || r;
    r = ((__glFlushMappedBufferRangeAPPLE = (PFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC)proc((const GLubyte*)"glFlushMappedBufferRangeAPPLE")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_APPLE_flush_buffer_range = false;
/* GL_APPLE_object_purgeable */
PFNGLGETOBJECTPARAMETERIVAPPLEPROC __glGetObjectParameterivAPPLE = nullptr; void APIENTRY glGetObjectParameterivAPPLE (GLenum objectType, GLuint name, GLenum pname, GLint *params) { if (__glGetObjectParameterivAPPLE != 0) (__glGetObjectParameterivAPPLE)(objectType, name, pname, params);  }
PFNGLOBJECTPURGEABLEAPPLEPROC __glObjectPurgeableAPPLE = nullptr; GLenum APIENTRY glObjectPurgeableAPPLE (GLenum objectType, GLuint name, GLenum option) { if (__glObjectPurgeableAPPLE != 0) return (__glObjectPurgeableAPPLE)(objectType, name, option); return 0; }
PFNGLOBJECTUNPURGEABLEAPPLEPROC __glObjectUnpurgeableAPPLE = nullptr; GLenum APIENTRY glObjectUnpurgeableAPPLE (GLenum objectType, GLuint name, GLenum option) { if (__glObjectUnpurgeableAPPLE != 0) return (__glObjectUnpurgeableAPPLE)(objectType, name, option); return 0; }
bool __loadGL_APPLE_object_purgeable(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glGetObjectParameterivAPPLE = (PFNGLGETOBJECTPARAMETERIVAPPLEPROC)proc((const GLubyte*)"glGetObjectParameterivAPPLE")) != nullptr) || r;
    r = ((__glObjectPurgeableAPPLE = (PFNGLOBJECTPURGEABLEAPPLEPROC)proc((const GLubyte*)"glObjectPurgeableAPPLE")) != nullptr) || r;
    r = ((__glObjectUnpurgeableAPPLE = (PFNGLOBJECTUNPURGEABLEAPPLEPROC)proc((const GLubyte*)"glObjectUnpurgeableAPPLE")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_APPLE_object_purgeable = false;
/* GL_APPLE_rgb_422 */
bool __loadGL_APPLE_rgb_422(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_APPLE_rgb_422 = false;
/* GL_APPLE_row_bytes */
bool __loadGL_APPLE_row_bytes(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_APPLE_row_bytes = false;
/* GL_APPLE_specular_vector */
bool __loadGL_APPLE_specular_vector(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_APPLE_specular_vector = false;
/* GL_APPLE_texture_range */
PFNGLGETTEXPARAMETERPOINTERVAPPLEPROC __glGetTexParameterPointervAPPLE = nullptr; void APIENTRY glGetTexParameterPointervAPPLE (GLenum target, GLenum pname, void **params) { if (__glGetTexParameterPointervAPPLE != 0) (__glGetTexParameterPointervAPPLE)(target, pname, params);  }
PFNGLTEXTURERANGEAPPLEPROC __glTextureRangeAPPLE = nullptr; void APIENTRY glTextureRangeAPPLE (GLenum target, GLsizei length, const void *pointer) { if (__glTextureRangeAPPLE != 0) (__glTextureRangeAPPLE)(target, length, pointer);  }
bool __loadGL_APPLE_texture_range(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glGetTexParameterPointervAPPLE = (PFNGLGETTEXPARAMETERPOINTERVAPPLEPROC)proc((const GLubyte*)"glGetTexParameterPointervAPPLE")) != nullptr) || r;
    r = ((__glTextureRangeAPPLE = (PFNGLTEXTURERANGEAPPLEPROC)proc((const GLubyte*)"glTextureRangeAPPLE")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_APPLE_texture_range = false;
/* GL_APPLE_transform_hint */
bool __loadGL_APPLE_transform_hint(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_APPLE_transform_hint = false;
/* GL_APPLE_vertex_array_object */
PFNGLBINDVERTEXARRAYAPPLEPROC __glBindVertexArrayAPPLE = nullptr; void APIENTRY glBindVertexArrayAPPLE (GLuint array) { if (__glBindVertexArrayAPPLE != 0) (__glBindVertexArrayAPPLE)(array);  }
PFNGLDELETEVERTEXARRAYSAPPLEPROC __glDeleteVertexArraysAPPLE = nullptr; void APIENTRY glDeleteVertexArraysAPPLE (GLsizei n, const GLuint *arrays) { if (__glDeleteVertexArraysAPPLE != 0) (__glDeleteVertexArraysAPPLE)(n, arrays);  }
PFNGLGENVERTEXARRAYSAPPLEPROC __glGenVertexArraysAPPLE = nullptr; void APIENTRY glGenVertexArraysAPPLE (GLsizei n, GLuint *arrays) { if (__glGenVertexArraysAPPLE != 0) (__glGenVertexArraysAPPLE)(n, arrays);  }
PFNGLISVERTEXARRAYAPPLEPROC __glIsVertexArrayAPPLE = nullptr; GLboolean APIENTRY glIsVertexArrayAPPLE (GLuint array) { if (__glIsVertexArrayAPPLE != 0) return (__glIsVertexArrayAPPLE)(array); return 0; }
bool __loadGL_APPLE_vertex_array_object(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glBindVertexArrayAPPLE = (PFNGLBINDVERTEXARRAYAPPLEPROC)proc((const GLubyte*)"glBindVertexArrayAPPLE")) != nullptr) || r;
    r = ((__glDeleteVertexArraysAPPLE = (PFNGLDELETEVERTEXARRAYSAPPLEPROC)proc((const GLubyte*)"glDeleteVertexArraysAPPLE")) != nullptr) || r;
    r = ((__glGenVertexArraysAPPLE = (PFNGLGENVERTEXARRAYSAPPLEPROC)proc((const GLubyte*)"glGenVertexArraysAPPLE")) != nullptr) || r;
    r = ((__glIsVertexArrayAPPLE = (PFNGLISVERTEXARRAYAPPLEPROC)proc((const GLubyte*)"glIsVertexArrayAPPLE")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_APPLE_vertex_array_object = false;
/* GL_APPLE_vertex_array_range */
PFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC __glFlushVertexArrayRangeAPPLE = nullptr; void APIENTRY glFlushVertexArrayRangeAPPLE (GLsizei length, void *pointer) { if (__glFlushVertexArrayRangeAPPLE != 0) (__glFlushVertexArrayRangeAPPLE)(length, pointer);  }
PFNGLVERTEXARRAYPARAMETERIAPPLEPROC __glVertexArrayParameteriAPPLE = nullptr; void APIENTRY glVertexArrayParameteriAPPLE (GLenum pname, GLint param) { if (__glVertexArrayParameteriAPPLE != 0) (__glVertexArrayParameteriAPPLE)(pname, param);  }
PFNGLVERTEXARRAYRANGEAPPLEPROC __glVertexArrayRangeAPPLE = nullptr; void APIENTRY glVertexArrayRangeAPPLE (GLsizei length, void *pointer) { if (__glVertexArrayRangeAPPLE != 0) (__glVertexArrayRangeAPPLE)(length, pointer);  }
bool __loadGL_APPLE_vertex_array_range(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glFlushVertexArrayRangeAPPLE = (PFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC)proc((const GLubyte*)"glFlushVertexArrayRangeAPPLE")) != nullptr) || r;
    r = ((__glVertexArrayParameteriAPPLE = (PFNGLVERTEXARRAYPARAMETERIAPPLEPROC)proc((const GLubyte*)"glVertexArrayParameteriAPPLE")) != nullptr) || r;
    r = ((__glVertexArrayRangeAPPLE = (PFNGLVERTEXARRAYRANGEAPPLEPROC)proc((const GLubyte*)"glVertexArrayRangeAPPLE")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_APPLE_vertex_array_range = false;
/* GL_APPLE_vertex_program_evaluators */
PFNGLDISABLEVERTEXATTRIBAPPLEPROC __glDisableVertexAttribAPPLE = nullptr; void APIENTRY glDisableVertexAttribAPPLE (GLuint index, GLenum pname) { if (__glDisableVertexAttribAPPLE != 0) (__glDisableVertexAttribAPPLE)(index, pname);  }
PFNGLENABLEVERTEXATTRIBAPPLEPROC __glEnableVertexAttribAPPLE = nullptr; void APIENTRY glEnableVertexAttribAPPLE (GLuint index, GLenum pname) { if (__glEnableVertexAttribAPPLE != 0) (__glEnableVertexAttribAPPLE)(index, pname);  }
PFNGLISVERTEXATTRIBENABLEDAPPLEPROC __glIsVertexAttribEnabledAPPLE = nullptr; GLboolean APIENTRY glIsVertexAttribEnabledAPPLE (GLuint index, GLenum pname) { if (__glIsVertexAttribEnabledAPPLE != 0) return (__glIsVertexAttribEnabledAPPLE)(index, pname); return 0; }
PFNGLMAPVERTEXATTRIB1DAPPLEPROC __glMapVertexAttrib1dAPPLE = nullptr; void APIENTRY glMapVertexAttrib1dAPPLE (GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points) { if (__glMapVertexAttrib1dAPPLE != 0) (__glMapVertexAttrib1dAPPLE)(index, size, u1, u2, stride, order, points);  }
PFNGLMAPVERTEXATTRIB1FAPPLEPROC __glMapVertexAttrib1fAPPLE = nullptr; void APIENTRY glMapVertexAttrib1fAPPLE (GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points) { if (__glMapVertexAttrib1fAPPLE != 0) (__glMapVertexAttrib1fAPPLE)(index, size, u1, u2, stride, order, points);  }
PFNGLMAPVERTEXATTRIB2DAPPLEPROC __glMapVertexAttrib2dAPPLE = nullptr; void APIENTRY glMapVertexAttrib2dAPPLE (GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points) { if (__glMapVertexAttrib2dAPPLE != 0) (__glMapVertexAttrib2dAPPLE)(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);  }
PFNGLMAPVERTEXATTRIB2FAPPLEPROC __glMapVertexAttrib2fAPPLE = nullptr; void APIENTRY glMapVertexAttrib2fAPPLE (GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points) { if (__glMapVertexAttrib2fAPPLE != 0) (__glMapVertexAttrib2fAPPLE)(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);  }
bool __loadGL_APPLE_vertex_program_evaluators(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glDisableVertexAttribAPPLE = (PFNGLDISABLEVERTEXATTRIBAPPLEPROC)proc((const GLubyte*)"glDisableVertexAttribAPPLE")) != nullptr) || r;
    r = ((__glEnableVertexAttribAPPLE = (PFNGLENABLEVERTEXATTRIBAPPLEPROC)proc((const GLubyte*)"glEnableVertexAttribAPPLE")) != nullptr) || r;
    r = ((__glIsVertexAttribEnabledAPPLE = (PFNGLISVERTEXATTRIBENABLEDAPPLEPROC)proc((const GLubyte*)"glIsVertexAttribEnabledAPPLE")) != nullptr) || r;
    r = ((__glMapVertexAttrib1dAPPLE = (PFNGLMAPVERTEXATTRIB1DAPPLEPROC)proc((const GLubyte*)"glMapVertexAttrib1dAPPLE")) != nullptr) || r;
    r = ((__glMapVertexAttrib1fAPPLE = (PFNGLMAPVERTEXATTRIB1FAPPLEPROC)proc((const GLubyte*)"glMapVertexAttrib1fAPPLE")) != nullptr) || r;
    r = ((__glMapVertexAttrib2dAPPLE = (PFNGLMAPVERTEXATTRIB2DAPPLEPROC)proc((const GLubyte*)"glMapVertexAttrib2dAPPLE")) != nullptr) || r;
    r = ((__glMapVertexAttrib2fAPPLE = (PFNGLMAPVERTEXATTRIB2FAPPLEPROC)proc((const GLubyte*)"glMapVertexAttrib2fAPPLE")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_APPLE_vertex_program_evaluators = false;
/* GL_APPLE_ycbcr_422 */
bool __loadGL_APPLE_ycbcr_422(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_APPLE_ycbcr_422 = false;
/* GL_ATI_draw_buffers */
PFNGLDRAWBUFFERSATIPROC __glDrawBuffersATI = nullptr; void APIENTRY glDrawBuffersATI (GLsizei n, const GLenum *bufs) { if (__glDrawBuffersATI != 0) (__glDrawBuffersATI)(n, bufs);  }
bool __loadGL_ATI_draw_buffers(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glDrawBuffersATI = (PFNGLDRAWBUFFERSATIPROC)proc((const GLubyte*)"glDrawBuffersATI")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_ATI_draw_buffers = false;
/* GL_ATI_element_array */
PFNGLDRAWELEMENTARRAYATIPROC __glDrawElementArrayATI = nullptr; void APIENTRY glDrawElementArrayATI (GLenum mode, GLsizei count) { if (__glDrawElementArrayATI != 0) (__glDrawElementArrayATI)(mode, count);  }
PFNGLDRAWRANGEELEMENTARRAYATIPROC __glDrawRangeElementArrayATI = nullptr; void APIENTRY glDrawRangeElementArrayATI (GLenum mode, GLuint start, GLuint end, GLsizei count) { if (__glDrawRangeElementArrayATI != 0) (__glDrawRangeElementArrayATI)(mode, start, end, count);  }
PFNGLELEMENTPOINTERATIPROC __glElementPointerATI = nullptr; void APIENTRY glElementPointerATI (GLenum type, const void *pointer) { if (__glElementPointerATI != 0) (__glElementPointerATI)(type, pointer);  }
bool __loadGL_ATI_element_array(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glDrawElementArrayATI = (PFNGLDRAWELEMENTARRAYATIPROC)proc((const GLubyte*)"glDrawElementArrayATI")) != nullptr) || r;
    r = ((__glDrawRangeElementArrayATI = (PFNGLDRAWRANGEELEMENTARRAYATIPROC)proc((const GLubyte*)"glDrawRangeElementArrayATI")) != nullptr) || r;
    r = ((__glElementPointerATI = (PFNGLELEMENTPOINTERATIPROC)proc((const GLubyte*)"glElementPointerATI")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_ATI_element_array = false;
/* GL_ATI_envmap_bumpmap */
PFNGLGETTEXBUMPPARAMETERFVATIPROC __glGetTexBumpParameterfvATI = nullptr; void APIENTRY glGetTexBumpParameterfvATI (GLenum pname, GLfloat *param) { if (__glGetTexBumpParameterfvATI != 0) (__glGetTexBumpParameterfvATI)(pname, param);  }
PFNGLGETTEXBUMPPARAMETERIVATIPROC __glGetTexBumpParameterivATI = nullptr; void APIENTRY glGetTexBumpParameterivATI (GLenum pname, GLint *param) { if (__glGetTexBumpParameterivATI != 0) (__glGetTexBumpParameterivATI)(pname, param);  }
PFNGLTEXBUMPPARAMETERFVATIPROC __glTexBumpParameterfvATI = nullptr; void APIENTRY glTexBumpParameterfvATI (GLenum pname, const GLfloat *param) { if (__glTexBumpParameterfvATI != 0) (__glTexBumpParameterfvATI)(pname, param);  }
PFNGLTEXBUMPPARAMETERIVATIPROC __glTexBumpParameterivATI = nullptr; void APIENTRY glTexBumpParameterivATI (GLenum pname, const GLint *param) { if (__glTexBumpParameterivATI != 0) (__glTexBumpParameterivATI)(pname, param);  }
bool __loadGL_ATI_envmap_bumpmap(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glGetTexBumpParameterfvATI = (PFNGLGETTEXBUMPPARAMETERFVATIPROC)proc((const GLubyte*)"glGetTexBumpParameterfvATI")) != nullptr) || r;
    r = ((__glGetTexBumpParameterivATI = (PFNGLGETTEXBUMPPARAMETERIVATIPROC)proc((const GLubyte*)"glGetTexBumpParameterivATI")) != nullptr) || r;
    r = ((__glTexBumpParameterfvATI = (PFNGLTEXBUMPPARAMETERFVATIPROC)proc((const GLubyte*)"glTexBumpParameterfvATI")) != nullptr) || r;
    r = ((__glTexBumpParameterivATI = (PFNGLTEXBUMPPARAMETERIVATIPROC)proc((const GLubyte*)"glTexBumpParameterivATI")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_ATI_envmap_bumpmap = false;
/* GL_ATI_fragment_shader */
PFNGLALPHAFRAGMENTOP1ATIPROC __glAlphaFragmentOp1ATI = nullptr; void APIENTRY glAlphaFragmentOp1ATI (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod) { if (__glAlphaFragmentOp1ATI != 0) (__glAlphaFragmentOp1ATI)(op, dst, dstMod, arg1, arg1Rep, arg1Mod);  }
PFNGLALPHAFRAGMENTOP2ATIPROC __glAlphaFragmentOp2ATI = nullptr; void APIENTRY glAlphaFragmentOp2ATI (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod) { if (__glAlphaFragmentOp2ATI != 0) (__glAlphaFragmentOp2ATI)(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod);  }
PFNGLALPHAFRAGMENTOP3ATIPROC __glAlphaFragmentOp3ATI = nullptr; void APIENTRY glAlphaFragmentOp3ATI (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod) { if (__glAlphaFragmentOp3ATI != 0) (__glAlphaFragmentOp3ATI)(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod);  }
PFNGLBEGINFRAGMENTSHADERATIPROC __glBeginFragmentShaderATI = nullptr; void APIENTRY glBeginFragmentShaderATI () { if (__glBeginFragmentShaderATI != 0) (__glBeginFragmentShaderATI)();  }
PFNGLBINDFRAGMENTSHADERATIPROC __glBindFragmentShaderATI = nullptr; void APIENTRY glBindFragmentShaderATI (GLuint id) { if (__glBindFragmentShaderATI != 0) (__glBindFragmentShaderATI)(id);  }
PFNGLCOLORFRAGMENTOP1ATIPROC __glColorFragmentOp1ATI = nullptr; void APIENTRY glColorFragmentOp1ATI (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod) { if (__glColorFragmentOp1ATI != 0) (__glColorFragmentOp1ATI)(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod);  }
PFNGLCOLORFRAGMENTOP2ATIPROC __glColorFragmentOp2ATI = nullptr; void APIENTRY glColorFragmentOp2ATI (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod) { if (__glColorFragmentOp2ATI != 0) (__glColorFragmentOp2ATI)(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod);  }
PFNGLCOLORFRAGMENTOP3ATIPROC __glColorFragmentOp3ATI = nullptr; void APIENTRY glColorFragmentOp3ATI (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod) { if (__glColorFragmentOp3ATI != 0) (__glColorFragmentOp3ATI)(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod);  }
PFNGLDELETEFRAGMENTSHADERATIPROC __glDeleteFragmentShaderATI = nullptr; void APIENTRY glDeleteFragmentShaderATI (GLuint id) { if (__glDeleteFragmentShaderATI != 0) (__glDeleteFragmentShaderATI)(id);  }
PFNGLENDFRAGMENTSHADERATIPROC __glEndFragmentShaderATI = nullptr; void APIENTRY glEndFragmentShaderATI () { if (__glEndFragmentShaderATI != 0) (__glEndFragmentShaderATI)();  }
PFNGLGENFRAGMENTSHADERSATIPROC __glGenFragmentShadersATI = nullptr; GLuint APIENTRY glGenFragmentShadersATI (GLuint range) { if (__glGenFragmentShadersATI != 0) return (__glGenFragmentShadersATI)(range); return 0; }
PFNGLPASSTEXCOORDATIPROC __glPassTexCoordATI = nullptr; void APIENTRY glPassTexCoordATI (GLuint dst, GLuint coord, GLenum swizzle) { if (__glPassTexCoordATI != 0) (__glPassTexCoordATI)(dst, coord, swizzle);  }
PFNGLSAMPLEMAPATIPROC __glSampleMapATI = nullptr; void APIENTRY glSampleMapATI (GLuint dst, GLuint interp, GLenum swizzle) { if (__glSampleMapATI != 0) (__glSampleMapATI)(dst, interp, swizzle);  }
PFNGLSETFRAGMENTSHADERCONSTANTATIPROC __glSetFragmentShaderConstantATI = nullptr; void APIENTRY glSetFragmentShaderConstantATI (GLuint dst, const GLfloat *value) { if (__glSetFragmentShaderConstantATI != 0) (__glSetFragmentShaderConstantATI)(dst, value);  }
bool __loadGL_ATI_fragment_shader(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glAlphaFragmentOp1ATI = (PFNGLALPHAFRAGMENTOP1ATIPROC)proc((const GLubyte*)"glAlphaFragmentOp1ATI")) != nullptr) || r;
    r = ((__glAlphaFragmentOp2ATI = (PFNGLALPHAFRAGMENTOP2ATIPROC)proc((const GLubyte*)"glAlphaFragmentOp2ATI")) != nullptr) || r;
    r = ((__glAlphaFragmentOp3ATI = (PFNGLALPHAFRAGMENTOP3ATIPROC)proc((const GLubyte*)"glAlphaFragmentOp3ATI")) != nullptr) || r;
    r = ((__glBeginFragmentShaderATI = (PFNGLBEGINFRAGMENTSHADERATIPROC)proc((const GLubyte*)"glBeginFragmentShaderATI")) != nullptr) || r;
    r = ((__glBindFragmentShaderATI = (PFNGLBINDFRAGMENTSHADERATIPROC)proc((const GLubyte*)"glBindFragmentShaderATI")) != nullptr) || r;
    r = ((__glColorFragmentOp1ATI = (PFNGLCOLORFRAGMENTOP1ATIPROC)proc((const GLubyte*)"glColorFragmentOp1ATI")) != nullptr) || r;
    r = ((__glColorFragmentOp2ATI = (PFNGLCOLORFRAGMENTOP2ATIPROC)proc((const GLubyte*)"glColorFragmentOp2ATI")) != nullptr) || r;
    r = ((__glColorFragmentOp3ATI = (PFNGLCOLORFRAGMENTOP3ATIPROC)proc((const GLubyte*)"glColorFragmentOp3ATI")) != nullptr) || r;
    r = ((__glDeleteFragmentShaderATI = (PFNGLDELETEFRAGMENTSHADERATIPROC)proc((const GLubyte*)"glDeleteFragmentShaderATI")) != nullptr) || r;
    r = ((__glEndFragmentShaderATI = (PFNGLENDFRAGMENTSHADERATIPROC)proc((const GLubyte*)"glEndFragmentShaderATI")) != nullptr) || r;
    r = ((__glGenFragmentShadersATI = (PFNGLGENFRAGMENTSHADERSATIPROC)proc((const GLubyte*)"glGenFragmentShadersATI")) != nullptr) || r;
    r = ((__glPassTexCoordATI = (PFNGLPASSTEXCOORDATIPROC)proc((const GLubyte*)"glPassTexCoordATI")) != nullptr) || r;
    r = ((__glSampleMapATI = (PFNGLSAMPLEMAPATIPROC)proc((const GLubyte*)"glSampleMapATI")) != nullptr) || r;
    r = ((__glSetFragmentShaderConstantATI = (PFNGLSETFRAGMENTSHADERCONSTANTATIPROC)proc((const GLubyte*)"glSetFragmentShaderConstantATI")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_ATI_fragment_shader = false;
/* GL_ATI_map_object_buffer */
PFNGLMAPOBJECTBUFFERATIPROC __glMapObjectBufferATI = nullptr; void *APIENTRY glMapObjectBufferATI (GLuint buffer) { if (__glMapObjectBufferATI != 0) return (__glMapObjectBufferATI)(buffer); return 0; }
PFNGLUNMAPOBJECTBUFFERATIPROC __glUnmapObjectBufferATI = nullptr; void APIENTRY glUnmapObjectBufferATI (GLuint buffer) { if (__glUnmapObjectBufferATI != 0) (__glUnmapObjectBufferATI)(buffer);  }
bool __loadGL_ATI_map_object_buffer(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glMapObjectBufferATI = (PFNGLMAPOBJECTBUFFERATIPROC)proc((const GLubyte*)"glMapObjectBufferATI")) != nullptr) || r;
    r = ((__glUnmapObjectBufferATI = (PFNGLUNMAPOBJECTBUFFERATIPROC)proc((const GLubyte*)"glUnmapObjectBufferATI")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_ATI_map_object_buffer = false;
/* GL_ATI_meminfo */
bool __loadGL_ATI_meminfo(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ATI_meminfo = false;
/* GL_ATI_pixel_format_float */
bool __loadGL_ATI_pixel_format_float(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ATI_pixel_format_float = false;
/* GL_ATI_pn_triangles */
PFNGLPNTRIANGLESFATIPROC __glPNTrianglesfATI = nullptr; void APIENTRY glPNTrianglesfATI (GLenum pname, GLfloat param) { if (__glPNTrianglesfATI != 0) (__glPNTrianglesfATI)(pname, param);  }
PFNGLPNTRIANGLESIATIPROC __glPNTrianglesiATI = nullptr; void APIENTRY glPNTrianglesiATI (GLenum pname, GLint param) { if (__glPNTrianglesiATI != 0) (__glPNTrianglesiATI)(pname, param);  }
bool __loadGL_ATI_pn_triangles(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glPNTrianglesfATI = (PFNGLPNTRIANGLESFATIPROC)proc((const GLubyte*)"glPNTrianglesfATI")) != nullptr) || r;
    r = ((__glPNTrianglesiATI = (PFNGLPNTRIANGLESIATIPROC)proc((const GLubyte*)"glPNTrianglesiATI")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_ATI_pn_triangles = false;
/* GL_ATI_separate_stencil */
PFNGLSTENCILFUNCSEPARATEATIPROC __glStencilFuncSeparateATI = nullptr; void APIENTRY glStencilFuncSeparateATI (GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask) { if (__glStencilFuncSeparateATI != 0) (__glStencilFuncSeparateATI)(frontfunc, backfunc, ref, mask);  }
PFNGLSTENCILOPSEPARATEATIPROC __glStencilOpSeparateATI = nullptr; void APIENTRY glStencilOpSeparateATI (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass) { if (__glStencilOpSeparateATI != 0) (__glStencilOpSeparateATI)(face, sfail, dpfail, dppass);  }
bool __loadGL_ATI_separate_stencil(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glStencilFuncSeparateATI = (PFNGLSTENCILFUNCSEPARATEATIPROC)proc((const GLubyte*)"glStencilFuncSeparateATI")) != nullptr) || r;
    r = ((__glStencilOpSeparateATI = (PFNGLSTENCILOPSEPARATEATIPROC)proc((const GLubyte*)"glStencilOpSeparateATI")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_ATI_separate_stencil = false;
/* GL_ATI_text_fragment_shader */
bool __loadGL_ATI_text_fragment_shader(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ATI_text_fragment_shader = false;
/* GL_ATI_texture_env_combine3 */
bool __loadGL_ATI_texture_env_combine3(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ATI_texture_env_combine3 = false;
/* GL_ATI_texture_float */
bool __loadGL_ATI_texture_float(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ATI_texture_float = false;
/* GL_ATI_texture_mirror_once */
bool __loadGL_ATI_texture_mirror_once(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_ATI_texture_mirror_once = false;
/* GL_ATI_vertex_array_object */
PFNGLARRAYOBJECTATIPROC __glArrayObjectATI = nullptr; void APIENTRY glArrayObjectATI (GLenum array, GLint size, GLenum type, GLsizei stride, GLuint buffer, GLuint offset) { if (__glArrayObjectATI != 0) (__glArrayObjectATI)(array, size, type, stride, buffer, offset);  }
PFNGLFREEOBJECTBUFFERATIPROC __glFreeObjectBufferATI = nullptr; void APIENTRY glFreeObjectBufferATI (GLuint buffer) { if (__glFreeObjectBufferATI != 0) (__glFreeObjectBufferATI)(buffer);  }
PFNGLGETARRAYOBJECTFVATIPROC __glGetArrayObjectfvATI = nullptr; void APIENTRY glGetArrayObjectfvATI (GLenum array, GLenum pname, GLfloat *params) { if (__glGetArrayObjectfvATI != 0) (__glGetArrayObjectfvATI)(array, pname, params);  }
PFNGLGETARRAYOBJECTIVATIPROC __glGetArrayObjectivATI = nullptr; void APIENTRY glGetArrayObjectivATI (GLenum array, GLenum pname, GLint *params) { if (__glGetArrayObjectivATI != 0) (__glGetArrayObjectivATI)(array, pname, params);  }
PFNGLGETOBJECTBUFFERFVATIPROC __glGetObjectBufferfvATI = nullptr; void APIENTRY glGetObjectBufferfvATI (GLuint buffer, GLenum pname, GLfloat *params) { if (__glGetObjectBufferfvATI != 0) (__glGetObjectBufferfvATI)(buffer, pname, params);  }
PFNGLGETOBJECTBUFFERIVATIPROC __glGetObjectBufferivATI = nullptr; void APIENTRY glGetObjectBufferivATI (GLuint buffer, GLenum pname, GLint *params) { if (__glGetObjectBufferivATI != 0) (__glGetObjectBufferivATI)(buffer, pname, params);  }
PFNGLGETVARIANTARRAYOBJECTFVATIPROC __glGetVariantArrayObjectfvATI = nullptr; void APIENTRY glGetVariantArrayObjectfvATI (GLuint id, GLenum pname, GLfloat *params) { if (__glGetVariantArrayObjectfvATI != 0) (__glGetVariantArrayObjectfvATI)(id, pname, params);  }
PFNGLGETVARIANTARRAYOBJECTIVATIPROC __glGetVariantArrayObjectivATI = nullptr; void APIENTRY glGetVariantArrayObjectivATI (GLuint id, GLenum pname, GLint *params) { if (__glGetVariantArrayObjectivATI != 0) (__glGetVariantArrayObjectivATI)(id, pname, params);  }
PFNGLISOBJECTBUFFERATIPROC __glIsObjectBufferATI = nullptr; GLboolean APIENTRY glIsObjectBufferATI (GLuint buffer) { if (__glIsObjectBufferATI != 0) return (__glIsObjectBufferATI)(buffer); return 0; }
PFNGLNEWOBJECTBUFFERATIPROC __glNewObjectBufferATI = nullptr; GLuint APIENTRY glNewObjectBufferATI (GLsizei size, const void *pointer, GLenum usage) { if (__glNewObjectBufferATI != 0) return (__glNewObjectBufferATI)(size, pointer, usage); return 0; }
PFNGLUPDATEOBJECTBUFFERATIPROC __glUpdateObjectBufferATI = nullptr; void APIENTRY glUpdateObjectBufferATI (GLuint buffer, GLuint offset, GLsizei size, const void *pointer, GLenum preserve) { if (__glUpdateObjectBufferATI != 0) (__glUpdateObjectBufferATI)(buffer, offset, size, pointer, preserve);  }
PFNGLVARIANTARRAYOBJECTATIPROC __glVariantArrayObjectATI = nullptr; void APIENTRY glVariantArrayObjectATI (GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset) { if (__glVariantArrayObjectATI != 0) (__glVariantArrayObjectATI)(id, type, stride, buffer, offset);  }
bool __loadGL_ATI_vertex_array_object(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glArrayObjectATI = (PFNGLARRAYOBJECTATIPROC)proc((const GLubyte*)"glArrayObjectATI")) != nullptr) || r;
    r = ((__glFreeObjectBufferATI = (PFNGLFREEOBJECTBUFFERATIPROC)proc((const GLubyte*)"glFreeObjectBufferATI")) != nullptr) || r;
    r = ((__glGetArrayObjectfvATI = (PFNGLGETARRAYOBJECTFVATIPROC)proc((const GLubyte*)"glGetArrayObjectfvATI")) != nullptr) || r;
    r = ((__glGetArrayObjectivATI = (PFNGLGETARRAYOBJECTIVATIPROC)proc((const GLubyte*)"glGetArrayObjectivATI")) != nullptr) || r;
    r = ((__glGetObjectBufferfvATI = (PFNGLGETOBJECTBUFFERFVATIPROC)proc((const GLubyte*)"glGetObjectBufferfvATI")) != nullptr) || r;
    r = ((__glGetObjectBufferivATI = (PFNGLGETOBJECTBUFFERIVATIPROC)proc((const GLubyte*)"glGetObjectBufferivATI")) != nullptr) || r;
    r = ((__glGetVariantArrayObjectfvATI = (PFNGLGETVARIANTARRAYOBJECTFVATIPROC)proc((const GLubyte*)"glGetVariantArrayObjectfvATI")) != nullptr) || r;
    r = ((__glGetVariantArrayObjectivATI = (PFNGLGETVARIANTARRAYOBJECTIVATIPROC)proc((const GLubyte*)"glGetVariantArrayObjectivATI")) != nullptr) || r;
    r = ((__glIsObjectBufferATI = (PFNGLISOBJECTBUFFERATIPROC)proc((const GLubyte*)"glIsObjectBufferATI")) != nullptr) || r;
    r = ((__glNewObjectBufferATI = (PFNGLNEWOBJECTBUFFERATIPROC)proc((const GLubyte*)"glNewObjectBufferATI")) != nullptr) || r;
    r = ((__glUpdateObjectBufferATI = (PFNGLUPDATEOBJECTBUFFERATIPROC)proc((const GLubyte*)"glUpdateObjectBufferATI")) != nullptr) || r;
    r = ((__glVariantArrayObjectATI = (PFNGLVARIANTARRAYOBJECTATIPROC)proc((const GLubyte*)"glVariantArrayObjectATI")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_ATI_vertex_array_object = false;
/* GL_ATI_vertex_attrib_array_object */
PFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC __glGetVertexAttribArrayObjectfvATI = nullptr; void APIENTRY glGetVertexAttribArrayObjectfvATI (GLuint index, GLenum pname, GLfloat *params) { if (__glGetVertexAttribArrayObjectfvATI != 0) (__glGetVertexAttribArrayObjectfvATI)(index, pname, params);  }
PFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC __glGetVertexAttribArrayObjectivATI = nullptr; void APIENTRY glGetVertexAttribArrayObjectivATI (GLuint index, GLenum pname, GLint *params) { if (__glGetVertexAttribArrayObjectivATI != 0) (__glGetVertexAttribArrayObjectivATI)(index, pname, params);  }
PFNGLVERTEXATTRIBARRAYOBJECTATIPROC __glVertexAttribArrayObjectATI = nullptr; void APIENTRY glVertexAttribArrayObjectATI (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset) { if (__glVertexAttribArrayObjectATI != 0) (__glVertexAttribArrayObjectATI)(index, size, type, normalized, stride, buffer, offset);  }
bool __loadGL_ATI_vertex_attrib_array_object(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glGetVertexAttribArrayObjectfvATI = (PFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC)proc((const GLubyte*)"glGetVertexAttribArrayObjectfvATI")) != nullptr) || r;
    r = ((__glGetVertexAttribArrayObjectivATI = (PFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC)proc((const GLubyte*)"glGetVertexAttribArrayObjectivATI")) != nullptr) || r;
    r = ((__glVertexAttribArrayObjectATI = (PFNGLVERTEXATTRIBARRAYOBJECTATIPROC)proc((const GLubyte*)"glVertexAttribArrayObjectATI")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_ATI_vertex_attrib_array_object = false;
/* GL_ATI_vertex_streams */
PFNGLCLIENTACTIVEVERTEXSTREAMATIPROC __glClientActiveVertexStreamATI = nullptr; void APIENTRY glClientActiveVertexStreamATI (GLenum stream) { if (__glClientActiveVertexStreamATI != 0) (__glClientActiveVertexStreamATI)(stream);  }
PFNGLNORMALSTREAM3BATIPROC __glNormalStream3bATI = nullptr; void APIENTRY glNormalStream3bATI (GLenum stream, GLbyte nx, GLbyte ny, GLbyte nz) { if (__glNormalStream3bATI != 0) (__glNormalStream3bATI)(stream, nx, ny, nz);  }
PFNGLNORMALSTREAM3BVATIPROC __glNormalStream3bvATI = nullptr; void APIENTRY glNormalStream3bvATI (GLenum stream, const GLbyte *coords) { if (__glNormalStream3bvATI != 0) (__glNormalStream3bvATI)(stream, coords);  }
PFNGLNORMALSTREAM3DATIPROC __glNormalStream3dATI = nullptr; void APIENTRY glNormalStream3dATI (GLenum stream, GLdouble nx, GLdouble ny, GLdouble nz) { if (__glNormalStream3dATI != 0) (__glNormalStream3dATI)(stream, nx, ny, nz);  }
PFNGLNORMALSTREAM3DVATIPROC __glNormalStream3dvATI = nullptr; void APIENTRY glNormalStream3dvATI (GLenum stream, const GLdouble *coords) { if (__glNormalStream3dvATI != 0) (__glNormalStream3dvATI)(stream, coords);  }
PFNGLNORMALSTREAM3FATIPROC __glNormalStream3fATI = nullptr; void APIENTRY glNormalStream3fATI (GLenum stream, GLfloat nx, GLfloat ny, GLfloat nz) { if (__glNormalStream3fATI != 0) (__glNormalStream3fATI)(stream, nx, ny, nz);  }
PFNGLNORMALSTREAM3FVATIPROC __glNormalStream3fvATI = nullptr; void APIENTRY glNormalStream3fvATI (GLenum stream, const GLfloat *coords) { if (__glNormalStream3fvATI != 0) (__glNormalStream3fvATI)(stream, coords);  }
PFNGLNORMALSTREAM3IATIPROC __glNormalStream3iATI = nullptr; void APIENTRY glNormalStream3iATI (GLenum stream, GLint nx, GLint ny, GLint nz) { if (__glNormalStream3iATI != 0) (__glNormalStream3iATI)(stream, nx, ny, nz);  }
PFNGLNORMALSTREAM3IVATIPROC __glNormalStream3ivATI = nullptr; void APIENTRY glNormalStream3ivATI (GLenum stream, const GLint *coords) { if (__glNormalStream3ivATI != 0) (__glNormalStream3ivATI)(stream, coords);  }
PFNGLNORMALSTREAM3SATIPROC __glNormalStream3sATI = nullptr; void APIENTRY glNormalStream3sATI (GLenum stream, GLshort nx, GLshort ny, GLshort nz) { if (__glNormalStream3sATI != 0) (__glNormalStream3sATI)(stream, nx, ny, nz);  }
PFNGLNORMALSTREAM3SVATIPROC __glNormalStream3svATI = nullptr; void APIENTRY glNormalStream3svATI (GLenum stream, const GLshort *coords) { if (__glNormalStream3svATI != 0) (__glNormalStream3svATI)(stream, coords);  }
PFNGLVERTEXBLENDENVFATIPROC __glVertexBlendEnvfATI = nullptr; void APIENTRY glVertexBlendEnvfATI (GLenum pname, GLfloat param) { if (__glVertexBlendEnvfATI != 0) (__glVertexBlendEnvfATI)(pname, param);  }
PFNGLVERTEXBLENDENVIATIPROC __glVertexBlendEnviATI = nullptr; void APIENTRY glVertexBlendEnviATI (GLenum pname, GLint param) { if (__glVertexBlendEnviATI != 0) (__glVertexBlendEnviATI)(pname, param);  }
PFNGLVERTEXSTREAM1DATIPROC __glVertexStream1dATI = nullptr; void APIENTRY glVertexStream1dATI (GLenum stream, GLdouble x) { if (__glVertexStream1dATI != 0) (__glVertexStream1dATI)(stream, x);  }
PFNGLVERTEXSTREAM1DVATIPROC __glVertexStream1dvATI = nullptr; void APIENTRY glVertexStream1dvATI (GLenum stream, const GLdouble *coords) { if (__glVertexStream1dvATI != 0) (__glVertexStream1dvATI)(stream, coords);  }
PFNGLVERTEXSTREAM1FATIPROC __glVertexStream1fATI = nullptr; void APIENTRY glVertexStream1fATI (GLenum stream, GLfloat x) { if (__glVertexStream1fATI != 0) (__glVertexStream1fATI)(stream, x);  }
PFNGLVERTEXSTREAM1FVATIPROC __glVertexStream1fvATI = nullptr; void APIENTRY glVertexStream1fvATI (GLenum stream, const GLfloat *coords) { if (__glVertexStream1fvATI != 0) (__glVertexStream1fvATI)(stream, coords);  }
PFNGLVERTEXSTREAM1IATIPROC __glVertexStream1iATI = nullptr; void APIENTRY glVertexStream1iATI (GLenum stream, GLint x) { if (__glVertexStream1iATI != 0) (__glVertexStream1iATI)(stream, x);  }
PFNGLVERTEXSTREAM1IVATIPROC __glVertexStream1ivATI = nullptr; void APIENTRY glVertexStream1ivATI (GLenum stream, const GLint *coords) { if (__glVertexStream1ivATI != 0) (__glVertexStream1ivATI)(stream, coords);  }
PFNGLVERTEXSTREAM1SATIPROC __glVertexStream1sATI = nullptr; void APIENTRY glVertexStream1sATI (GLenum stream, GLshort x) { if (__glVertexStream1sATI != 0) (__glVertexStream1sATI)(stream, x);  }
PFNGLVERTEXSTREAM1SVATIPROC __glVertexStream1svATI = nullptr; void APIENTRY glVertexStream1svATI (GLenum stream, const GLshort *coords) { if (__glVertexStream1svATI != 0) (__glVertexStream1svATI)(stream, coords);  }
PFNGLVERTEXSTREAM2DATIPROC __glVertexStream2dATI = nullptr; void APIENTRY glVertexStream2dATI (GLenum stream, GLdouble x, GLdouble y) { if (__glVertexStream2dATI != 0) (__glVertexStream2dATI)(stream, x, y);  }
PFNGLVERTEXSTREAM2DVATIPROC __glVertexStream2dvATI = nullptr; void APIENTRY glVertexStream2dvATI (GLenum stream, const GLdouble *coords) { if (__glVertexStream2dvATI != 0) (__glVertexStream2dvATI)(stream, coords);  }
PFNGLVERTEXSTREAM2FATIPROC __glVertexStream2fATI = nullptr; void APIENTRY glVertexStream2fATI (GLenum stream, GLfloat x, GLfloat y) { if (__glVertexStream2fATI != 0) (__glVertexStream2fATI)(stream, x, y);  }
PFNGLVERTEXSTREAM2FVATIPROC __glVertexStream2fvATI = nullptr; void APIENTRY glVertexStream2fvATI (GLenum stream, const GLfloat *coords) { if (__glVertexStream2fvATI != 0) (__glVertexStream2fvATI)(stream, coords);  }
PFNGLVERTEXSTREAM2IATIPROC __glVertexStream2iATI = nullptr; void APIENTRY glVertexStream2iATI (GLenum stream, GLint x, GLint y) { if (__glVertexStream2iATI != 0) (__glVertexStream2iATI)(stream, x, y);  }
PFNGLVERTEXSTREAM2IVATIPROC __glVertexStream2ivATI = nullptr; void APIENTRY glVertexStream2ivATI (GLenum stream, const GLint *coords) { if (__glVertexStream2ivATI != 0) (__glVertexStream2ivATI)(stream, coords);  }
PFNGLVERTEXSTREAM2SATIPROC __glVertexStream2sATI = nullptr; void APIENTRY glVertexStream2sATI (GLenum stream, GLshort x, GLshort y) { if (__glVertexStream2sATI != 0) (__glVertexStream2sATI)(stream, x, y);  }
PFNGLVERTEXSTREAM2SVATIPROC __glVertexStream2svATI = nullptr; void APIENTRY glVertexStream2svATI (GLenum stream, const GLshort *coords) { if (__glVertexStream2svATI != 0) (__glVertexStream2svATI)(stream, coords);  }
PFNGLVERTEXSTREAM3DATIPROC __glVertexStream3dATI = nullptr; void APIENTRY glVertexStream3dATI (GLenum stream, GLdouble x, GLdouble y, GLdouble z) { if (__glVertexStream3dATI != 0) (__glVertexStream3dATI)(stream, x, y, z);  }
PFNGLVERTEXSTREAM3DVATIPROC __glVertexStream3dvATI = nullptr; void APIENTRY glVertexStream3dvATI (GLenum stream, const GLdouble *coords) { if (__glVertexStream3dvATI != 0) (__glVertexStream3dvATI)(stream, coords);  }
PFNGLVERTEXSTREAM3FATIPROC __glVertexStream3fATI = nullptr; void APIENTRY glVertexStream3fATI (GLenum stream, GLfloat x, GLfloat y, GLfloat z) { if (__glVertexStream3fATI != 0) (__glVertexStream3fATI)(stream, x, y, z);  }
PFNGLVERTEXSTREAM3FVATIPROC __glVertexStream3fvATI = nullptr; void APIENTRY glVertexStream3fvATI (GLenum stream, const GLfloat *coords) { if (__glVertexStream3fvATI != 0) (__glVertexStream3fvATI)(stream, coords);  }
PFNGLVERTEXSTREAM3IATIPROC __glVertexStream3iATI = nullptr; void APIENTRY glVertexStream3iATI (GLenum stream, GLint x, GLint y, GLint z) { if (__glVertexStream3iATI != 0) (__glVertexStream3iATI)(stream, x, y, z);  }
PFNGLVERTEXSTREAM3IVATIPROC __glVertexStream3ivATI = nullptr; void APIENTRY glVertexStream3ivATI (GLenum stream, const GLint *coords) { if (__glVertexStream3ivATI != 0) (__glVertexStream3ivATI)(stream, coords);  }
PFNGLVERTEXSTREAM3SATIPROC __glVertexStream3sATI = nullptr; void APIENTRY glVertexStream3sATI (GLenum stream, GLshort x, GLshort y, GLshort z) { if (__glVertexStream3sATI != 0) (__glVertexStream3sATI)(stream, x, y, z);  }
PFNGLVERTEXSTREAM3SVATIPROC __glVertexStream3svATI = nullptr; void APIENTRY glVertexStream3svATI (GLenum stream, const GLshort *coords) { if (__glVertexStream3svATI != 0) (__glVertexStream3svATI)(stream, coords);  }
PFNGLVERTEXSTREAM4DATIPROC __glVertexStream4dATI = nullptr; void APIENTRY glVertexStream4dATI (GLenum stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { if (__glVertexStream4dATI != 0) (__glVertexStream4dATI)(stream, x, y, z, w);  }
PFNGLVERTEXSTREAM4DVATIPROC __glVertexStream4dvATI = nullptr; void APIENTRY glVertexStream4dvATI (GLenum stream, const GLdouble *coords) { if (__glVertexStream4dvATI != 0) (__glVertexStream4dvATI)(stream, coords);  }
PFNGLVERTEXSTREAM4FATIPROC __glVertexStream4fATI = nullptr; void APIENTRY glVertexStream4fATI (GLenum stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w) { if (__glVertexStream4fATI != 0) (__glVertexStream4fATI)(stream, x, y, z, w);  }
PFNGLVERTEXSTREAM4FVATIPROC __glVertexStream4fvATI = nullptr; void APIENTRY glVertexStream4fvATI (GLenum stream, const GLfloat *coords) { if (__glVertexStream4fvATI != 0) (__glVertexStream4fvATI)(stream, coords);  }
PFNGLVERTEXSTREAM4IATIPROC __glVertexStream4iATI = nullptr; void APIENTRY glVertexStream4iATI (GLenum stream, GLint x, GLint y, GLint z, GLint w) { if (__glVertexStream4iATI != 0) (__glVertexStream4iATI)(stream, x, y, z, w);  }
PFNGLVERTEXSTREAM4IVATIPROC __glVertexStream4ivATI = nullptr; void APIENTRY glVertexStream4ivATI (GLenum stream, const GLint *coords) { if (__glVertexStream4ivATI != 0) (__glVertexStream4ivATI)(stream, coords);  }
PFNGLVERTEXSTREAM4SATIPROC __glVertexStream4sATI = nullptr; void APIENTRY glVertexStream4sATI (GLenum stream, GLshort x, GLshort y, GLshort z, GLshort w) { if (__glVertexStream4sATI != 0) (__glVertexStream4sATI)(stream, x, y, z, w);  }
PFNGLVERTEXSTREAM4SVATIPROC __glVertexStream4svATI = nullptr; void APIENTRY glVertexStream4svATI (GLenum stream, const GLshort *coords) { if (__glVertexStream4svATI != 0) (__glVertexStream4svATI)(stream, coords);  }
bool __loadGL_ATI_vertex_streams(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glClientActiveVertexStreamATI = (PFNGLCLIENTACTIVEVERTEXSTREAMATIPROC)proc((const GLubyte*)"glClientActiveVertexStreamATI")) != nullptr) || r;
    r = ((__glNormalStream3bATI = (PFNGLNORMALSTREAM3BATIPROC)proc((const GLubyte*)"glNormalStream3bATI")) != nullptr) || r;
    r = ((__glNormalStream3bvATI = (PFNGLNORMALSTREAM3BVATIPROC)proc((const GLubyte*)"glNormalStream3bvATI")) != nullptr) || r;
    r = ((__glNormalStream3dATI = (PFNGLNORMALSTREAM3DATIPROC)proc((const GLubyte*)"glNormalStream3dATI")) != nullptr) || r;
    r = ((__glNormalStream3dvATI = (PFNGLNORMALSTREAM3DVATIPROC)proc((const GLubyte*)"glNormalStream3dvATI")) != nullptr) || r;
    r = ((__glNormalStream3fATI = (PFNGLNORMALSTREAM3FATIPROC)proc((const GLubyte*)"glNormalStream3fATI")) != nullptr) || r;
    r = ((__glNormalStream3fvATI = (PFNGLNORMALSTREAM3FVATIPROC)proc((const GLubyte*)"glNormalStream3fvATI")) != nullptr) || r;
    r = ((__glNormalStream3iATI = (PFNGLNORMALSTREAM3IATIPROC)proc((const GLubyte*)"glNormalStream3iATI")) != nullptr) || r;
    r = ((__glNormalStream3ivATI = (PFNGLNORMALSTREAM3IVATIPROC)proc((const GLubyte*)"glNormalStream3ivATI")) != nullptr) || r;
    r = ((__glNormalStream3sATI = (PFNGLNORMALSTREAM3SATIPROC)proc((const GLubyte*)"glNormalStream3sATI")) != nullptr) || r;
    r = ((__glNormalStream3svATI = (PFNGLNORMALSTREAM3SVATIPROC)proc((const GLubyte*)"glNormalStream3svATI")) != nullptr) || r;
    r = ((__glVertexBlendEnvfATI = (PFNGLVERTEXBLENDENVFATIPROC)proc((const GLubyte*)"glVertexBlendEnvfATI")) != nullptr) || r;
    r = ((__glVertexBlendEnviATI = (PFNGLVERTEXBLENDENVIATIPROC)proc((const GLubyte*)"glVertexBlendEnviATI")) != nullptr) || r;
    r = ((__glVertexStream1dATI = (PFNGLVERTEXSTREAM1DATIPROC)proc((const GLubyte*)"glVertexStream1dATI")) != nullptr) || r;
    r = ((__glVertexStream1dvATI = (PFNGLVERTEXSTREAM1DVATIPROC)proc((const GLubyte*)"glVertexStream1dvATI")) != nullptr) || r;
    r = ((__glVertexStream1fATI = (PFNGLVERTEXSTREAM1FATIPROC)proc((const GLubyte*)"glVertexStream1fATI")) != nullptr) || r;
    r = ((__glVertexStream1fvATI = (PFNGLVERTEXSTREAM1FVATIPROC)proc((const GLubyte*)"glVertexStream1fvATI")) != nullptr) || r;
    r = ((__glVertexStream1iATI = (PFNGLVERTEXSTREAM1IATIPROC)proc((const GLubyte*)"glVertexStream1iATI")) != nullptr) || r;
    r = ((__glVertexStream1ivATI = (PFNGLVERTEXSTREAM1IVATIPROC)proc((const GLubyte*)"glVertexStream1ivATI")) != nullptr) || r;
    r = ((__glVertexStream1sATI = (PFNGLVERTEXSTREAM1SATIPROC)proc((const GLubyte*)"glVertexStream1sATI")) != nullptr) || r;
    r = ((__glVertexStream1svATI = (PFNGLVERTEXSTREAM1SVATIPROC)proc((const GLubyte*)"glVertexStream1svATI")) != nullptr) || r;
    r = ((__glVertexStream2dATI = (PFNGLVERTEXSTREAM2DATIPROC)proc((const GLubyte*)"glVertexStream2dATI")) != nullptr) || r;
    r = ((__glVertexStream2dvATI = (PFNGLVERTEXSTREAM2DVATIPROC)proc((const GLubyte*)"glVertexStream2dvATI")) != nullptr) || r;
    r = ((__glVertexStream2fATI = (PFNGLVERTEXSTREAM2FATIPROC)proc((const GLubyte*)"glVertexStream2fATI")) != nullptr) || r;
    r = ((__glVertexStream2fvATI = (PFNGLVERTEXSTREAM2FVATIPROC)proc((const GLubyte*)"glVertexStream2fvATI")) != nullptr) || r;
    r = ((__glVertexStream2iATI = (PFNGLVERTEXSTREAM2IATIPROC)proc((const GLubyte*)"glVertexStream2iATI")) != nullptr) || r;
    r = ((__glVertexStream2ivATI = (PFNGLVERTEXSTREAM2IVATIPROC)proc((const GLubyte*)"glVertexStream2ivATI")) != nullptr) || r;
    r = ((__glVertexStream2sATI = (PFNGLVERTEXSTREAM2SATIPROC)proc((const GLubyte*)"glVertexStream2sATI")) != nullptr) || r;
    r = ((__glVertexStream2svATI = (PFNGLVERTEXSTREAM2SVATIPROC)proc((const GLubyte*)"glVertexStream2svATI")) != nullptr) || r;
    r = ((__glVertexStream3dATI = (PFNGLVERTEXSTREAM3DATIPROC)proc((const GLubyte*)"glVertexStream3dATI")) != nullptr) || r;
    r = ((__glVertexStream3dvATI = (PFNGLVERTEXSTREAM3DVATIPROC)proc((const GLubyte*)"glVertexStream3dvATI")) != nullptr) || r;
    r = ((__glVertexStream3fATI = (PFNGLVERTEXSTREAM3FATIPROC)proc((const GLubyte*)"glVertexStream3fATI")) != nullptr) || r;
    r = ((__glVertexStream3fvATI = (PFNGLVERTEXSTREAM3FVATIPROC)proc((const GLubyte*)"glVertexStream3fvATI")) != nullptr) || r;
    r = ((__glVertexStream3iATI = (PFNGLVERTEXSTREAM3IATIPROC)proc((const GLubyte*)"glVertexStream3iATI")) != nullptr) || r;
    r = ((__glVertexStream3ivATI = (PFNGLVERTEXSTREAM3IVATIPROC)proc((const GLubyte*)"glVertexStream3ivATI")) != nullptr) || r;
    r = ((__glVertexStream3sATI = (PFNGLVERTEXSTREAM3SATIPROC)proc((const GLubyte*)"glVertexStream3sATI")) != nullptr) || r;
    r = ((__glVertexStream3svATI = (PFNGLVERTEXSTREAM3SVATIPROC)proc((const GLubyte*)"glVertexStream3svATI")) != nullptr) || r;
    r = ((__glVertexStream4dATI = (PFNGLVERTEXSTREAM4DATIPROC)proc((const GLubyte*)"glVertexStream4dATI")) != nullptr) || r;
    r = ((__glVertexStream4dvATI = (PFNGLVERTEXSTREAM4DVATIPROC)proc((const GLubyte*)"glVertexStream4dvATI")) != nullptr) || r;
    r = ((__glVertexStream4fATI = (PFNGLVERTEXSTREAM4FATIPROC)proc((const GLubyte*)"glVertexStream4fATI")) != nullptr) || r;
    r = ((__glVertexStream4fvATI = (PFNGLVERTEXSTREAM4FVATIPROC)proc((const GLubyte*)"glVertexStream4fvATI")) != nullptr) || r;
    r = ((__glVertexStream4iATI = (PFNGLVERTEXSTREAM4IATIPROC)proc((const GLubyte*)"glVertexStream4iATI")) != nullptr) || r;
    r = ((__glVertexStream4ivATI = (PFNGLVERTEXSTREAM4IVATIPROC)proc((const GLubyte*)"glVertexStream4ivATI")) != nullptr) || r;
    r = ((__glVertexStream4sATI = (PFNGLVERTEXSTREAM4SATIPROC)proc((const GLubyte*)"glVertexStream4sATI")) != nullptr) || r;
    r = ((__glVertexStream4svATI = (PFNGLVERTEXSTREAM4SVATIPROC)proc((const GLubyte*)"glVertexStream4svATI")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_ATI_vertex_streams = false;
/* GL_EXT_422_pixels */
bool __loadGL_EXT_422_pixels(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_EXT_422_pixels = false;
/* GL_EXT_abgr */
bool __loadGL_EXT_abgr(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_EXT_abgr = false;
/* GL_EXT_bgra */
bool __loadGL_EXT_bgra(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_EXT_bgra = false;
/* GL_EXT_bindable_uniform */
PFNGLGETUNIFORMBUFFERSIZEEXTPROC __glGetUniformBufferSizeEXT = nullptr; GLint APIENTRY glGetUniformBufferSizeEXT (GLuint program, GLint location) { if (__glGetUniformBufferSizeEXT != 0) return (__glGetUniformBufferSizeEXT)(program, location); return 0; }
PFNGLGETUNIFORMOFFSETEXTPROC __glGetUniformOffsetEXT = nullptr; GLintptr APIENTRY glGetUniformOffsetEXT (GLuint program, GLint location) { if (__glGetUniformOffsetEXT != 0) return (__glGetUniformOffsetEXT)(program, location); return 0; }
PFNGLUNIFORMBUFFEREXTPROC __glUniformBufferEXT = nullptr; void APIENTRY glUniformBufferEXT (GLuint program, GLint location, GLuint buffer) { if (__glUniformBufferEXT != 0) (__glUniformBufferEXT)(program, location, buffer);  }
bool __loadGL_EXT_bindable_uniform(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glGetUniformBufferSizeEXT = (PFNGLGETUNIFORMBUFFERSIZEEXTPROC)proc((const GLubyte*)"glGetUniformBufferSizeEXT")) != nullptr) || r;
    r = ((__glGetUniformOffsetEXT = (PFNGLGETUNIFORMOFFSETEXTPROC)proc((const GLubyte*)"glGetUniformOffsetEXT")) != nullptr) || r;
    r = ((__glUniformBufferEXT = (PFNGLUNIFORMBUFFEREXTPROC)proc((const GLubyte*)"glUniformBufferEXT")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_EXT_bindable_uniform = false;
/* GL_EXT_blend_color */
PFNGLBLENDCOLOREXTPROC __glBlendColorEXT = nullptr; void APIENTRY glBlendColorEXT (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) { if (__glBlendColorEXT != 0) (__glBlendColorEXT)(red, green, blue, alpha);  }
bool __loadGL_EXT_blend_color(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glBlendColorEXT = (PFNGLBLENDCOLOREXTPROC)proc((const GLubyte*)"glBlendColorEXT")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_EXT_blend_color = false;
/* GL_EXT_blend_equation_separate */
PFNGLBLENDEQUATIONSEPARATEEXTPROC __glBlendEquationSeparateEXT = nullptr; void APIENTRY glBlendEquationSeparateEXT (GLenum modeRGB, GLenum modeAlpha) { if (__glBlendEquationSeparateEXT != 0) (__glBlendEquationSeparateEXT)(modeRGB, modeAlpha);  }
bool __loadGL_EXT_blend_equation_separate(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glBlendEquationSeparateEXT = (PFNGLBLENDEQUATIONSEPARATEEXTPROC)proc((const GLubyte*)"glBlendEquationSeparateEXT")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_EXT_blend_equation_separate = false;
/* GL_EXT_blend_func_separate */
PFNGLBLENDFUNCSEPARATEEXTPROC __glBlendFuncSeparateEXT = nullptr; void APIENTRY glBlendFuncSeparateEXT (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha) { if (__glBlendFuncSeparateEXT != 0) (__glBlendFuncSeparateEXT)(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);  }
bool __loadGL_EXT_blend_func_separate(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glBlendFuncSeparateEXT = (PFNGLBLENDFUNCSEPARATEEXTPROC)proc((const GLubyte*)"glBlendFuncSeparateEXT")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_EXT_blend_func_separate = false;
/* GL_EXT_blend_logic_op */
bool __loadGL_EXT_blend_logic_op(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_EXT_blend_logic_op = false;
/* GL_EXT_blend_minmax */
PFNGLBLENDEQUATIONEXTPROC __glBlendEquationEXT = nullptr; void APIENTRY glBlendEquationEXT (GLenum mode) { if (__glBlendEquationEXT != 0) (__glBlendEquationEXT)(mode);  }
bool __loadGL_EXT_blend_minmax(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glBlendEquationEXT = (PFNGLBLENDEQUATIONEXTPROC)proc((const GLubyte*)"glBlendEquationEXT")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_EXT_blend_minmax = false;
/* GL_EXT_blend_subtract */
bool __loadGL_EXT_blend_subtract(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_EXT_blend_subtract = false;
/* GL_EXT_clip_volume_hint */
bool __loadGL_EXT_clip_volume_hint(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_EXT_clip_volume_hint = false;
/* GL_EXT_cmyka */
bool __loadGL_EXT_cmyka(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_EXT_cmyka = false;
/* GL_EXT_color_subtable */
PFNGLCOLORSUBTABLEEXTPROC __glColorSubTableEXT = nullptr; void APIENTRY glColorSubTableEXT (GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const void *data) { if (__glColorSubTableEXT != 0) (__glColorSubTableEXT)(target, start, count, format, type, data);  }
PFNGLCOPYCOLORSUBTABLEEXTPROC __glCopyColorSubTableEXT = nullptr; void APIENTRY glCopyColorSubTableEXT (GLenum target, GLsizei start, GLint x, GLint y, GLsizei width) { if (__glCopyColorSubTableEXT != 0) (__glCopyColorSubTableEXT)(target, start, x, y, width);  }
bool __loadGL_EXT_color_subtable(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glColorSubTableEXT = (PFNGLCOLORSUBTABLEEXTPROC)proc((const GLubyte*)"glColorSubTableEXT")) != nullptr) || r;
    r = ((__glCopyColorSubTableEXT = (PFNGLCOPYCOLORSUBTABLEEXTPROC)proc((const GLubyte*)"glCopyColorSubTableEXT")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_EXT_color_subtable = false;
/* GL_EXT_compiled_vertex_array */
PFNGLLOCKARRAYSEXTPROC __glLockArraysEXT = nullptr; void APIENTRY glLockArraysEXT (GLint first, GLsizei count) { if (__glLockArraysEXT != 0) (__glLockArraysEXT)(first, count);  }
PFNGLUNLOCKARRAYSEXTPROC __glUnlockArraysEXT = nullptr; void APIENTRY glUnlockArraysEXT () { if (__glUnlockArraysEXT != 0) (__glUnlockArraysEXT)();  }
bool __loadGL_EXT_compiled_vertex_array(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glLockArraysEXT = (PFNGLLOCKARRAYSEXTPROC)proc((const GLubyte*)"glLockArraysEXT")) != nullptr) || r;
    r = ((__glUnlockArraysEXT = (PFNGLUNLOCKARRAYSEXTPROC)proc((const GLubyte*)"glUnlockArraysEXT")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_EXT_compiled_vertex_array = false;
/* GL_EXT_convolution */
PFNGLCONVOLUTIONFILTER1DEXTPROC __glConvolutionFilter1DEXT = nullptr; void APIENTRY glConvolutionFilter1DEXT (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *image) { if (__glConvolutionFilter1DEXT != 0) (__glConvolutionFilter1DEXT)(target, internalformat, width, format, type, image);  }
PFNGLCONVOLUTIONFILTER2DEXTPROC __glConvolutionFilter2DEXT = nullptr; void APIENTRY glConvolutionFilter2DEXT (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *image) { if (__glConvolutionFilter2DEXT != 0) (__glConvolutionFilter2DEXT)(target, internalformat, width, height, format, type, image);  }
PFNGLCONVOLUTIONPARAMETERFEXTPROC __glConvolutionParameterfEXT = nullptr; void APIENTRY glConvolutionParameterfEXT (GLenum target, GLenum pname, GLfloat params) { if (__glConvolutionParameterfEXT != 0) (__glConvolutionParameterfEXT)(target, pname, params);  }
PFNGLCONVOLUTIONPARAMETERFVEXTPROC __glConvolutionParameterfvEXT = nullptr; void APIENTRY glConvolutionParameterfvEXT (GLenum target, GLenum pname, const GLfloat *params) { if (__glConvolutionParameterfvEXT != 0) (__glConvolutionParameterfvEXT)(target, pname, params);  }
PFNGLCONVOLUTIONPARAMETERIEXTPROC __glConvolutionParameteriEXT = nullptr; void APIENTRY glConvolutionParameteriEXT (GLenum target, GLenum pname, GLint params) { if (__glConvolutionParameteriEXT != 0) (__glConvolutionParameteriEXT)(target, pname, params);  }
PFNGLCONVOLUTIONPARAMETERIVEXTPROC __glConvolutionParameterivEXT = nullptr; void APIENTRY glConvolutionParameterivEXT (GLenum target, GLenum pname, const GLint *params) { if (__glConvolutionParameterivEXT != 0) (__glConvolutionParameterivEXT)(target, pname, params);  }
PFNGLCOPYCONVOLUTIONFILTER1DEXTPROC __glCopyConvolutionFilter1DEXT = nullptr; void APIENTRY glCopyConvolutionFilter1DEXT (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width) { if (__glCopyConvolutionFilter1DEXT != 0) (__glCopyConvolutionFilter1DEXT)(target, internalformat, x, y, width);  }
PFNGLCOPYCONVOLUTIONFILTER2DEXTPROC __glCopyConvolutionFilter2DEXT = nullptr; void APIENTRY glCopyConvolutionFilter2DEXT (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height) { if (__glCopyConvolutionFilter2DEXT != 0) (__glCopyConvolutionFilter2DEXT)(target, internalformat, x, y, width, height);  }
PFNGLGETCONVOLUTIONFILTEREXTPROC __glGetConvolutionFilterEXT = nullptr; void APIENTRY glGetConvolutionFilterEXT (GLenum target, GLenum format, GLenum type, void *image) { if (__glGetConvolutionFilterEXT != 0) (__glGetConvolutionFilterEXT)(target, format, type, image);  }
PFNGLGETCONVOLUTIONPARAMETERFVEXTPROC __glGetConvolutionParameterfvEXT = nullptr; void APIENTRY glGetConvolutionParameterfvEXT (GLenum target, GLenum pname, GLfloat *params) { if (__glGetConvolutionParameterfvEXT != 0) (__glGetConvolutionParameterfvEXT)(target, pname, params);  }
PFNGLGETCONVOLUTIONPARAMETERIVEXTPROC __glGetConvolutionParameterivEXT = nullptr; void APIENTRY glGetConvolutionParameterivEXT (GLenum target, GLenum pname, GLint *params) { if (__glGetConvolutionParameterivEXT != 0) (__glGetConvolutionParameterivEXT)(target, pname, params);  }
PFNGLGETSEPARABLEFILTEREXTPROC __glGetSeparableFilterEXT = nullptr; void APIENTRY glGetSeparableFilterEXT (GLenum target, GLenum format, GLenum type, void *row, void *column, void *span) { if (__glGetSeparableFilterEXT != 0) (__glGetSeparableFilterEXT)(target, format, type, row, column, span);  }
PFNGLSEPARABLEFILTER2DEXTPROC __glSeparableFilter2DEXT = nullptr; void APIENTRY glSeparableFilter2DEXT (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *row, const void *column) { if (__glSeparableFilter2DEXT != 0) (__glSeparableFilter2DEXT)(target, internalformat, width, height, format, type, row, column);  }
bool __loadGL_EXT_convolution(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glConvolutionFilter1DEXT = (PFNGLCONVOLUTIONFILTER1DEXTPROC)proc((const GLubyte*)"glConvolutionFilter1DEXT")) != nullptr) || r;
    r = ((__glConvolutionFilter2DEXT = (PFNGLCONVOLUTIONFILTER2DEXTPROC)proc((const GLubyte*)"glConvolutionFilter2DEXT")) != nullptr) || r;
    r = ((__glConvolutionParameterfEXT = (PFNGLCONVOLUTIONPARAMETERFEXTPROC)proc((const GLubyte*)"glConvolutionParameterfEXT")) != nullptr) || r;
    r = ((__glConvolutionParameterfvEXT = (PFNGLCONVOLUTIONPARAMETERFVEXTPROC)proc((const GLubyte*)"glConvolutionParameterfvEXT")) != nullptr) || r;
    r = ((__glConvolutionParameteriEXT = (PFNGLCONVOLUTIONPARAMETERIEXTPROC)proc((const GLubyte*)"glConvolutionParameteriEXT")) != nullptr) || r;
    r = ((__glConvolutionParameterivEXT = (PFNGLCONVOLUTIONPARAMETERIVEXTPROC)proc((const GLubyte*)"glConvolutionParameterivEXT")) != nullptr) || r;
    r = ((__glCopyConvolutionFilter1DEXT = (PFNGLCOPYCONVOLUTIONFILTER1DEXTPROC)proc((const GLubyte*)"glCopyConvolutionFilter1DEXT")) != nullptr) || r;
    r = ((__glCopyConvolutionFilter2DEXT = (PFNGLCOPYCONVOLUTIONFILTER2DEXTPROC)proc((const GLubyte*)"glCopyConvolutionFilter2DEXT")) != nullptr) || r;
    r = ((__glGetConvolutionFilterEXT = (PFNGLGETCONVOLUTIONFILTEREXTPROC)proc((const GLubyte*)"glGetConvolutionFilterEXT")) != nullptr) || r;
    r = ((__glGetConvolutionParameterfvEXT = (PFNGLGETCONVOLUTIONPARAMETERFVEXTPROC)proc((const GLubyte*)"glGetConvolutionParameterfvEXT")) != nullptr) || r;
    r = ((__glGetConvolutionParameterivEXT = (PFNGLGETCONVOLUTIONPARAMETERIVEXTPROC)proc((const GLubyte*)"glGetConvolutionParameterivEXT")) != nullptr) || r;
    r = ((__glGetSeparableFilterEXT = (PFNGLGETSEPARABLEFILTEREXTPROC)proc((const GLubyte*)"glGetSeparableFilterEXT")) != nullptr) || r;
    r = ((__glSeparableFilter2DEXT = (PFNGLSEPARABLEFILTER2DEXTPROC)proc((const GLubyte*)"glSeparableFilter2DEXT")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_EXT_convolution = false;
/* GL_EXT_coordinate_frame */
PFNGLBINORMAL3BEXTPROC __glBinormal3bEXT = nullptr; void APIENTRY glBinormal3bEXT (GLbyte bx, GLbyte by, GLbyte bz) { if (__glBinormal3bEXT != 0) (__glBinormal3bEXT)(bx, by, bz);  }
PFNGLBINORMAL3BVEXTPROC __glBinormal3bvEXT = nullptr; void APIENTRY glBinormal3bvEXT (const GLbyte *v) { if (__glBinormal3bvEXT != 0) (__glBinormal3bvEXT)(v);  }
PFNGLBINORMAL3DEXTPROC __glBinormal3dEXT = nullptr; void APIENTRY glBinormal3dEXT (GLdouble bx, GLdouble by, GLdouble bz) { if (__glBinormal3dEXT != 0) (__glBinormal3dEXT)(bx, by, bz);  }
PFNGLBINORMAL3DVEXTPROC __glBinormal3dvEXT = nullptr; void APIENTRY glBinormal3dvEXT (const GLdouble *v) { if (__glBinormal3dvEXT != 0) (__glBinormal3dvEXT)(v);  }
PFNGLBINORMAL3FEXTPROC __glBinormal3fEXT = nullptr; void APIENTRY glBinormal3fEXT (GLfloat bx, GLfloat by, GLfloat bz) { if (__glBinormal3fEXT != 0) (__glBinormal3fEXT)(bx, by, bz);  }
PFNGLBINORMAL3FVEXTPROC __glBinormal3fvEXT = nullptr; void APIENTRY glBinormal3fvEXT (const GLfloat *v) { if (__glBinormal3fvEXT != 0) (__glBinormal3fvEXT)(v);  }
PFNGLBINORMAL3IEXTPROC __glBinormal3iEXT = nullptr; void APIENTRY glBinormal3iEXT (GLint bx, GLint by, GLint bz) { if (__glBinormal3iEXT != 0) (__glBinormal3iEXT)(bx, by, bz);  }
PFNGLBINORMAL3IVEXTPROC __glBinormal3ivEXT = nullptr; void APIENTRY glBinormal3ivEXT (const GLint *v) { if (__glBinormal3ivEXT != 0) (__glBinormal3ivEXT)(v);  }
PFNGLBINORMAL3SEXTPROC __glBinormal3sEXT = nullptr; void APIENTRY glBinormal3sEXT (GLshort bx, GLshort by, GLshort bz) { if (__glBinormal3sEXT != 0) (__glBinormal3sEXT)(bx, by, bz);  }
PFNGLBINORMAL3SVEXTPROC __glBinormal3svEXT = nullptr; void APIENTRY glBinormal3svEXT (const GLshort *v) { if (__glBinormal3svEXT != 0) (__glBinormal3svEXT)(v);  }
PFNGLBINORMALPOINTEREXTPROC __glBinormalPointerEXT = nullptr; void APIENTRY glBinormalPointerEXT (GLenum type, GLsizei stride, const void *pointer) { if (__glBinormalPointerEXT != 0) (__glBinormalPointerEXT)(type, stride, pointer);  }
PFNGLTANGENT3BEXTPROC __glTangent3bEXT = nullptr; void APIENTRY glTangent3bEXT (GLbyte tx, GLbyte ty, GLbyte tz) { if (__glTangent3bEXT != 0) (__glTangent3bEXT)(tx, ty, tz);  }
PFNGLTANGENT3BVEXTPROC __glTangent3bvEXT = nullptr; void APIENTRY glTangent3bvEXT (const GLbyte *v) { if (__glTangent3bvEXT != 0) (__glTangent3bvEXT)(v);  }
PFNGLTANGENT3DEXTPROC __glTangent3dEXT = nullptr; void APIENTRY glTangent3dEXT (GLdouble tx, GLdouble ty, GLdouble tz) { if (__glTangent3dEXT != 0) (__glTangent3dEXT)(tx, ty, tz);  }
PFNGLTANGENT3DVEXTPROC __glTangent3dvEXT = nullptr; void APIENTRY glTangent3dvEXT (const GLdouble *v) { if (__glTangent3dvEXT != 0) (__glTangent3dvEXT)(v);  }
PFNGLTANGENT3FEXTPROC __glTangent3fEXT = nullptr; void APIENTRY glTangent3fEXT (GLfloat tx, GLfloat ty, GLfloat tz) { if (__glTangent3fEXT != 0) (__glTangent3fEXT)(tx, ty, tz);  }
PFNGLTANGENT3FVEXTPROC __glTangent3fvEXT = nullptr; void APIENTRY glTangent3fvEXT (const GLfloat *v) { if (__glTangent3fvEXT != 0) (__glTangent3fvEXT)(v);  }
PFNGLTANGENT3IEXTPROC __glTangent3iEXT = nullptr; void APIENTRY glTangent3iEXT (GLint tx, GLint ty, GLint tz) { if (__glTangent3iEXT != 0) (__glTangent3iEXT)(tx, ty, tz);  }
PFNGLTANGENT3IVEXTPROC __glTangent3ivEXT = nullptr; void APIENTRY glTangent3ivEXT (const GLint *v) { if (__glTangent3ivEXT != 0) (__glTangent3ivEXT)(v);  }
PFNGLTANGENT3SEXTPROC __glTangent3sEXT = nullptr; void APIENTRY glTangent3sEXT (GLshort tx, GLshort ty, GLshort tz) { if (__glTangent3sEXT != 0) (__glTangent3sEXT)(tx, ty, tz);  }
PFNGLTANGENT3SVEXTPROC __glTangent3svEXT = nullptr; void APIENTRY glTangent3svEXT (const GLshort *v) { if (__glTangent3svEXT != 0) (__glTangent3svEXT)(v);  }
PFNGLTANGENTPOINTEREXTPROC __glTangentPointerEXT = nullptr; void APIENTRY glTangentPointerEXT (GLenum type, GLsizei stride, const void *pointer) { if (__glTangentPointerEXT != 0) (__glTangentPointerEXT)(type, stride, pointer);  }
bool __loadGL_EXT_coordinate_frame(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glBinormal3bEXT = (PFNGLBINORMAL3BEXTPROC)proc((const GLubyte*)"glBinormal3bEXT")) != nullptr) || r;
    r = ((__glBinormal3bvEXT = (PFNGLBINORMAL3BVEXTPROC)proc((const GLubyte*)"glBinormal3bvEXT")) != nullptr) || r;
    r = ((__glBinormal3dEXT = (PFNGLBINORMAL3DEXTPROC)proc((const GLubyte*)"glBinormal3dEXT")) != nullptr) || r;
    r = ((__glBinormal3dvEXT = (PFNGLBINORMAL3DVEXTPROC)proc((const GLubyte*)"glBinormal3dvEXT")) != nullptr) || r;
    r = ((__glBinormal3fEXT = (PFNGLBINORMAL3FEXTPROC)proc((const GLubyte*)"glBinormal3fEXT")) != nullptr) || r;
    r = ((__glBinormal3fvEXT = (PFNGLBINORMAL3FVEXTPROC)proc((const GLubyte*)"glBinormal3fvEXT")) != nullptr) || r;
    r = ((__glBinormal3iEXT = (PFNGLBINORMAL3IEXTPROC)proc((const GLubyte*)"glBinormal3iEXT")) != nullptr) || r;
    r = ((__glBinormal3ivEXT = (PFNGLBINORMAL3IVEXTPROC)proc((const GLubyte*)"glBinormal3ivEXT")) != nullptr) || r;
    r = ((__glBinormal3sEXT = (PFNGLBINORMAL3SEXTPROC)proc((const GLubyte*)"glBinormal3sEXT")) != nullptr) || r;
    r = ((__glBinormal3svEXT = (PFNGLBINORMAL3SVEXTPROC)proc((const GLubyte*)"glBinormal3svEXT")) != nullptr) || r;
    r = ((__glBinormalPointerEXT = (PFNGLBINORMALPOINTEREXTPROC)proc((const GLubyte*)"glBinormalPointerEXT")) != nullptr) || r;
    r = ((__glTangent3bEXT = (PFNGLTANGENT3BEXTPROC)proc((const GLubyte*)"glTangent3bEXT")) != nullptr) || r;
    r = ((__glTangent3bvEXT = (PFNGLTANGENT3BVEXTPROC)proc((const GLubyte*)"glTangent3bvEXT")) != nullptr) || r;
    r = ((__glTangent3dEXT = (PFNGLTANGENT3DEXTPROC)proc((const GLubyte*)"glTangent3dEXT")) != nullptr) || r;
    r = ((__glTangent3dvEXT = (PFNGLTANGENT3DVEXTPROC)proc((const GLubyte*)"glTangent3dvEXT")) != nullptr) || r;
    r = ((__glTangent3fEXT = (PFNGLTANGENT3FEXTPROC)proc((const GLubyte*)"glTangent3fEXT")) != nullptr) || r;
    r = ((__glTangent3fvEXT = (PFNGLTANGENT3FVEXTPROC)proc((const GLubyte*)"glTangent3fvEXT")) != nullptr) || r;
    r = ((__glTangent3iEXT = (PFNGLTANGENT3IEXTPROC)proc((const GLubyte*)"glTangent3iEXT")) != nullptr) || r;
    r = ((__glTangent3ivEXT = (PFNGLTANGENT3IVEXTPROC)proc((const GLubyte*)"glTangent3ivEXT")) != nullptr) || r;
    r = ((__glTangent3sEXT = (PFNGLTANGENT3SEXTPROC)proc((const GLubyte*)"glTangent3sEXT")) != nullptr) || r;
    r = ((__glTangent3svEXT = (PFNGLTANGENT3SVEXTPROC)proc((const GLubyte*)"glTangent3svEXT")) != nullptr) || r;
    r = ((__glTangentPointerEXT = (PFNGLTANGENTPOINTEREXTPROC)proc((const GLubyte*)"glTangentPointerEXT")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_EXT_coordinate_frame = false;
/* GL_EXT_copy_texture */
PFNGLCOPYTEXIMAGE1DEXTPROC __glCopyTexImage1DEXT = nullptr; void APIENTRY glCopyTexImage1DEXT (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border) { if (__glCopyTexImage1DEXT != 0) (__glCopyTexImage1DEXT)(target, level, internalformat, x, y, width, border);  }
PFNGLCOPYTEXIMAGE2DEXTPROC __glCopyTexImage2DEXT = nullptr; void APIENTRY glCopyTexImage2DEXT (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) { if (__glCopyTexImage2DEXT != 0) (__glCopyTexImage2DEXT)(target, level, internalformat, x, y, width, height, border);  }
PFNGLCOPYTEXSUBIMAGE1DEXTPROC __glCopyTexSubImage1DEXT = nullptr; void APIENTRY glCopyTexSubImage1DEXT (GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) { if (__glCopyTexSubImage1DEXT != 0) (__glCopyTexSubImage1DEXT)(target, level, xoffset, x, y, width);  }
PFNGLCOPYTEXSUBIMAGE2DEXTPROC __glCopyTexSubImage2DEXT = nullptr; void APIENTRY glCopyTexSubImage2DEXT (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) { if (__glCopyTexSubImage2DEXT != 0) (__glCopyTexSubImage2DEXT)(target, level, xoffset, yoffset, x, y, width, height);  }
PFNGLCOPYTEXSUBIMAGE3DEXTPROC __glCopyTexSubImage3DEXT = nullptr; void APIENTRY glCopyTexSubImage3DEXT (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) { if (__glCopyTexSubImage3DEXT != 0) (__glCopyTexSubImage3DEXT)(target, level, xoffset, yoffset, zoffset, x, y, width, height);  }
bool __loadGL_EXT_copy_texture(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glCopyTexImage1DEXT = (PFNGLCOPYTEXIMAGE1DEXTPROC)proc((const GLubyte*)"glCopyTexImage1DEXT")) != nullptr) || r;
    r = ((__glCopyTexImage2DEXT = (PFNGLCOPYTEXIMAGE2DEXTPROC)proc((const GLubyte*)"glCopyTexImage2DEXT")) != nullptr) || r;
    r = ((__glCopyTexSubImage1DEXT = (PFNGLCOPYTEXSUBIMAGE1DEXTPROC)proc((const GLubyte*)"glCopyTexSubImage1DEXT")) != nullptr) || r;
    r = ((__glCopyTexSubImage2DEXT = (PFNGLCOPYTEXSUBIMAGE2DEXTPROC)proc((const GLubyte*)"glCopyTexSubImage2DEXT")) != nullptr) || r;
    r = ((__glCopyTexSubImage3DEXT = (PFNGLCOPYTEXSUBIMAGE3DEXTPROC)proc((const GLubyte*)"glCopyTexSubImage3DEXT")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_EXT_copy_texture = false;
/* GL_EXT_cull_vertex */
PFNGLCULLPARAMETERDVEXTPROC __glCullParameterdvEXT = nullptr; void APIENTRY glCullParameterdvEXT (GLenum pname, GLdouble *params) { if (__glCullParameterdvEXT != 0) (__glCullParameterdvEXT)(pname, params);  }
PFNGLCULLPARAMETERFVEXTPROC __glCullParameterfvEXT = nullptr; void APIENTRY glCullParameterfvEXT (GLenum pname, GLfloat *params) { if (__glCullParameterfvEXT != 0) (__glCullParameterfvEXT)(pname, params);  }
bool __loadGL_EXT_cull_vertex(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glCullParameterdvEXT = (PFNGLCULLPARAMETERDVEXTPROC)proc((const GLubyte*)"glCullParameterdvEXT")) != nullptr) || r;
    r = ((__glCullParameterfvEXT = (PFNGLCULLPARAMETERFVEXTPROC)proc((const GLubyte*)"glCullParameterfvEXT")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_EXT_cull_vertex = false;
/* GL_EXT_debug_label */
PFNGLGETOBJECTLABELEXTPROC __glGetObjectLabelEXT = nullptr; void APIENTRY glGetObjectLabelEXT (GLenum type, GLuint object, GLsizei bufSize, GLsizei *length, GLchar *label) { if (__glGetObjectLabelEXT != 0) (__glGetObjectLabelEXT)(type, object, bufSize, length, label);  }
PFNGLLABELOBJECTEXTPROC __glLabelObjectEXT = nullptr; void APIENTRY glLabelObjectEXT (GLenum type, GLuint object, GLsizei length, const GLchar *label) { if (__glLabelObjectEXT != 0) (__glLabelObjectEXT)(type, object, length, label);  }
bool __loadGL_EXT_debug_label(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glGetObjectLabelEXT = (PFNGLGETOBJECTLABELEXTPROC)proc((const GLubyte*)"glGetObjectLabelEXT")) != nullptr) || r;
    r = ((__glLabelObjectEXT = (PFNGLLABELOBJECTEXTPROC)proc((const GLubyte*)"glLabelObjectEXT")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_EXT_debug_label = false;
/* GL_EXT_debug_marker */
PFNGLINSERTEVENTMARKEREXTPROC __glInsertEventMarkerEXT = nullptr; void APIENTRY glInsertEventMarkerEXT (GLsizei length, const GLchar *marker) { if (__glInsertEventMarkerEXT != 0) (__glInsertEventMarkerEXT)(length, marker);  }
PFNGLPOPGROUPMARKEREXTPROC __glPopGroupMarkerEXT = nullptr; void APIENTRY glPopGroupMarkerEXT () { if (__glPopGroupMarkerEXT != 0) (__glPopGroupMarkerEXT)();  }
PFNGLPUSHGROUPMARKEREXTPROC __glPushGroupMarkerEXT = nullptr; void APIENTRY glPushGroupMarkerEXT (GLsizei length, const GLchar *marker) { if (__glPushGroupMarkerEXT != 0) (__glPushGroupMarkerEXT)(length, marker);  }
bool __loadGL_EXT_debug_marker(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glInsertEventMarkerEXT = (PFNGLINSERTEVENTMARKEREXTPROC)proc((const GLubyte*)"glInsertEventMarkerEXT")) != nullptr) || r;
    r = ((__glPopGroupMarkerEXT = (PFNGLPOPGROUPMARKEREXTPROC)proc((const GLubyte*)"glPopGroupMarkerEXT")) != nullptr) || r;
    r = ((__glPushGroupMarkerEXT = (PFNGLPUSHGROUPMARKEREXTPROC)proc((const GLubyte*)"glPushGroupMarkerEXT")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_EXT_debug_marker = false;
/* GL_EXT_depth_bounds_test */
PFNGLDEPTHBOUNDSEXTPROC __glDepthBoundsEXT = nullptr; void APIENTRY glDepthBoundsEXT (GLclampd zmin, GLclampd zmax) { if (__glDepthBoundsEXT != 0) (__glDepthBoundsEXT)(zmin, zmax);  }
bool __loadGL_EXT_depth_bounds_test(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glDepthBoundsEXT = (PFNGLDEPTHBOUNDSEXTPROC)proc((const GLubyte*)"glDepthBoundsEXT")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_EXT_depth_bounds_test = false;
/* GL_EXT_direct_state_access */
PFNGLBINDMULTITEXTUREEXTPROC __glBindMultiTextureEXT = nullptr; void APIENTRY glBindMultiTextureEXT (GLenum texunit, GLenum target, GLuint texture) { if (__glBindMultiTextureEXT != 0) (__glBindMultiTextureEXT)(texunit, target, texture);  }
PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC __glCheckNamedFramebufferStatusEXT = nullptr; GLenum APIENTRY glCheckNamedFramebufferStatusEXT (GLuint framebuffer, GLenum target) { if (__glCheckNamedFramebufferStatusEXT != 0) return (__glCheckNamedFramebufferStatusEXT)(framebuffer, target); return 0; }
PFNGLCLEARNAMEDBUFFERDATAEXTPROC __glClearNamedBufferDataEXT = nullptr; void APIENTRY glClearNamedBufferDataEXT (GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data) { if (__glClearNamedBufferDataEXT != 0) (__glClearNamedBufferDataEXT)(buffer, internalformat, format, type, data);  }
PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC __glClearNamedBufferSubDataEXT = nullptr; void APIENTRY glClearNamedBufferSubDataEXT (GLuint buffer, GLenum internalformat, GLsizeiptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data) { if (__glClearNamedBufferSubDataEXT != 0) (__glClearNamedBufferSubDataEXT)(buffer, internalformat, offset, size, format, type, data);  }
PFNGLCLIENTATTRIBDEFAULTEXTPROC __glClientAttribDefaultEXT = nullptr; void APIENTRY glClientAttribDefaultEXT (GLbitfield mask) { if (__glClientAttribDefaultEXT != 0) (__glClientAttribDefaultEXT)(mask);  }
PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC __glCompressedMultiTexImage1DEXT = nullptr; void APIENTRY glCompressedMultiTexImage1DEXT (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *bits) { if (__glCompressedMultiTexImage1DEXT != 0) (__glCompressedMultiTexImage1DEXT)(texunit, target, level, internalformat, width, border, imageSize, bits);  }
PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC __glCompressedMultiTexImage2DEXT = nullptr; void APIENTRY glCompressedMultiTexImage2DEXT (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *bits) { if (__glCompressedMultiTexImage2DEXT != 0) (__glCompressedMultiTexImage2DEXT)(texunit, target, level, internalformat, width, height, border, imageSize, bits);  }
PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC __glCompressedMultiTexImage3DEXT = nullptr; void APIENTRY glCompressedMultiTexImage3DEXT (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *bits) { if (__glCompressedMultiTexImage3DEXT != 0) (__glCompressedMultiTexImage3DEXT)(texunit, target, level, internalformat, width, height, depth, border, imageSize, bits);  }
PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC __glCompressedMultiTexSubImage1DEXT = nullptr; void APIENTRY glCompressedMultiTexSubImage1DEXT (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *bits) { if (__glCompressedMultiTexSubImage1DEXT != 0) (__glCompressedMultiTexSubImage1DEXT)(texunit, target, level, xoffset, width, format, imageSize, bits);  }
PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC __glCompressedMultiTexSubImage2DEXT = nullptr; void APIENTRY glCompressedMultiTexSubImage2DEXT (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *bits) { if (__glCompressedMultiTexSubImage2DEXT != 0) (__glCompressedMultiTexSubImage2DEXT)(texunit, target, level, xoffset, yoffset, width, height, format, imageSize, bits);  }
PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC __glCompressedMultiTexSubImage3DEXT = nullptr; void APIENTRY glCompressedMultiTexSubImage3DEXT (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *bits) { if (__glCompressedMultiTexSubImage3DEXT != 0) (__glCompressedMultiTexSubImage3DEXT)(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits);  }
PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC __glCompressedTextureImage1DEXT = nullptr; void APIENTRY glCompressedTextureImage1DEXT (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *bits) { if (__glCompressedTextureImage1DEXT != 0) (__glCompressedTextureImage1DEXT)(texture, target, level, internalformat, width, border, imageSize, bits);  }
PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC __glCompressedTextureImage2DEXT = nullptr; void APIENTRY glCompressedTextureImage2DEXT (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *bits) { if (__glCompressedTextureImage2DEXT != 0) (__glCompressedTextureImage2DEXT)(texture, target, level, internalformat, width, height, border, imageSize, bits);  }
PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC __glCompressedTextureImage3DEXT = nullptr; void APIENTRY glCompressedTextureImage3DEXT (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *bits) { if (__glCompressedTextureImage3DEXT != 0) (__glCompressedTextureImage3DEXT)(texture, target, level, internalformat, width, height, depth, border, imageSize, bits);  }
PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC __glCompressedTextureSubImage1DEXT = nullptr; void APIENTRY glCompressedTextureSubImage1DEXT (GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *bits) { if (__glCompressedTextureSubImage1DEXT != 0) (__glCompressedTextureSubImage1DEXT)(texture, target, level, xoffset, width, format, imageSize, bits);  }
PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC __glCompressedTextureSubImage2DEXT = nullptr; void APIENTRY glCompressedTextureSubImage2DEXT (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *bits) { if (__glCompressedTextureSubImage2DEXT != 0) (__glCompressedTextureSubImage2DEXT)(texture, target, level, xoffset, yoffset, width, height, format, imageSize, bits);  }
PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC __glCompressedTextureSubImage3DEXT = nullptr; void APIENTRY glCompressedTextureSubImage3DEXT (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *bits) { if (__glCompressedTextureSubImage3DEXT != 0) (__glCompressedTextureSubImage3DEXT)(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits);  }
PFNGLCOPYMULTITEXIMAGE1DEXTPROC __glCopyMultiTexImage1DEXT = nullptr; void APIENTRY glCopyMultiTexImage1DEXT (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border) { if (__glCopyMultiTexImage1DEXT != 0) (__glCopyMultiTexImage1DEXT)(texunit, target, level, internalformat, x, y, width, border);  }
PFNGLCOPYMULTITEXIMAGE2DEXTPROC __glCopyMultiTexImage2DEXT = nullptr; void APIENTRY glCopyMultiTexImage2DEXT (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) { if (__glCopyMultiTexImage2DEXT != 0) (__glCopyMultiTexImage2DEXT)(texunit, target, level, internalformat, x, y, width, height, border);  }
PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC __glCopyMultiTexSubImage1DEXT = nullptr; void APIENTRY glCopyMultiTexSubImage1DEXT (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) { if (__glCopyMultiTexSubImage1DEXT != 0) (__glCopyMultiTexSubImage1DEXT)(texunit, target, level, xoffset, x, y, width);  }
PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC __glCopyMultiTexSubImage2DEXT = nullptr; void APIENTRY glCopyMultiTexSubImage2DEXT (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) { if (__glCopyMultiTexSubImage2DEXT != 0) (__glCopyMultiTexSubImage2DEXT)(texunit, target, level, xoffset, yoffset, x, y, width, height);  }
PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC __glCopyMultiTexSubImage3DEXT = nullptr; void APIENTRY glCopyMultiTexSubImage3DEXT (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) { if (__glCopyMultiTexSubImage3DEXT != 0) (__glCopyMultiTexSubImage3DEXT)(texunit, target, level, xoffset, yoffset, zoffset, x, y, width, height);  }
PFNGLCOPYTEXTUREIMAGE1DEXTPROC __glCopyTextureImage1DEXT = nullptr; void APIENTRY glCopyTextureImage1DEXT (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border) { if (__glCopyTextureImage1DEXT != 0) (__glCopyTextureImage1DEXT)(texture, target, level, internalformat, x, y, width, border);  }
PFNGLCOPYTEXTUREIMAGE2DEXTPROC __glCopyTextureImage2DEXT = nullptr; void APIENTRY glCopyTextureImage2DEXT (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) { if (__glCopyTextureImage2DEXT != 0) (__glCopyTextureImage2DEXT)(texture, target, level, internalformat, x, y, width, height, border);  }
PFNGLCOPYTEXTURESUBIMAGE1DEXTPROC __glCopyTextureSubImage1DEXT = nullptr; void APIENTRY glCopyTextureSubImage1DEXT (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) { if (__glCopyTextureSubImage1DEXT != 0) (__glCopyTextureSubImage1DEXT)(texture, target, level, xoffset, x, y, width);  }
PFNGLCOPYTEXTURESUBIMAGE2DEXTPROC __glCopyTextureSubImage2DEXT = nullptr; void APIENTRY glCopyTextureSubImage2DEXT (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) { if (__glCopyTextureSubImage2DEXT != 0) (__glCopyTextureSubImage2DEXT)(texture, target, level, xoffset, yoffset, x, y, width, height);  }
PFNGLCOPYTEXTURESUBIMAGE3DEXTPROC __glCopyTextureSubImage3DEXT = nullptr; void APIENTRY glCopyTextureSubImage3DEXT (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) { if (__glCopyTextureSubImage3DEXT != 0) (__glCopyTextureSubImage3DEXT)(texture, target, level, xoffset, yoffset, zoffset, x, y, width, height);  }
PFNGLDISABLECLIENTSTATEINDEXEDEXTPROC __glDisableClientStateIndexedEXT = nullptr; void APIENTRY glDisableClientStateIndexedEXT (GLenum array, GLuint index) { if (__glDisableClientStateIndexedEXT != 0) (__glDisableClientStateIndexedEXT)(array, index);  }
PFNGLDISABLECLIENTSTATEIEXTPROC __glDisableClientStateiEXT = nullptr; void APIENTRY glDisableClientStateiEXT (GLenum array, GLuint index) { if (__glDisableClientStateiEXT != 0) (__glDisableClientStateiEXT)(array, index);  }
PFNGLDISABLEINDEXEDEXTPROC __glDisableIndexedEXT = nullptr; void APIENTRY glDisableIndexedEXT (GLenum target, GLuint index) { if (__glDisableIndexedEXT != 0) (__glDisableIndexedEXT)(target, index);  }
PFNGLDISABLEVERTEXARRAYATTRIBEXTPROC __glDisableVertexArrayAttribEXT = nullptr; void APIENTRY glDisableVertexArrayAttribEXT (GLuint vaobj, GLuint index) { if (__glDisableVertexArrayAttribEXT != 0) (__glDisableVertexArrayAttribEXT)(vaobj, index);  }
PFNGLDISABLEVERTEXARRAYEXTPROC __glDisableVertexArrayEXT = nullptr; void APIENTRY glDisableVertexArrayEXT (GLuint vaobj, GLenum array) { if (__glDisableVertexArrayEXT != 0) (__glDisableVertexArrayEXT)(vaobj, array);  }
PFNGLENABLECLIENTSTATEINDEXEDEXTPROC __glEnableClientStateIndexedEXT = nullptr; void APIENTRY glEnableClientStateIndexedEXT (GLenum array, GLuint index) { if (__glEnableClientStateIndexedEXT != 0) (__glEnableClientStateIndexedEXT)(array, index);  }
PFNGLENABLECLIENTSTATEIEXTPROC __glEnableClientStateiEXT = nullptr; void APIENTRY glEnableClientStateiEXT (GLenum array, GLuint index) { if (__glEnableClientStateiEXT != 0) (__glEnableClientStateiEXT)(array, index);  }
PFNGLENABLEINDEXEDEXTPROC __glEnableIndexedEXT = nullptr; void APIENTRY glEnableIndexedEXT (GLenum target, GLuint index) { if (__glEnableIndexedEXT != 0) (__glEnableIndexedEXT)(target, index);  }
PFNGLENABLEVERTEXARRAYATTRIBEXTPROC __glEnableVertexArrayAttribEXT = nullptr; void APIENTRY glEnableVertexArrayAttribEXT (GLuint vaobj, GLuint index) { if (__glEnableVertexArrayAttribEXT != 0) (__glEnableVertexArrayAttribEXT)(vaobj, index);  }
PFNGLENABLEVERTEXARRAYEXTPROC __glEnableVertexArrayEXT = nullptr; void APIENTRY glEnableVertexArrayEXT (GLuint vaobj, GLenum array) { if (__glEnableVertexArrayEXT != 0) (__glEnableVertexArrayEXT)(vaobj, array);  }
PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC __glFlushMappedNamedBufferRangeEXT = nullptr; void APIENTRY glFlushMappedNamedBufferRangeEXT (GLuint buffer, GLintptr offset, GLsizeiptr length) { if (__glFlushMappedNamedBufferRangeEXT != 0) (__glFlushMappedNamedBufferRangeEXT)(buffer, offset, length);  }
PFNGLFRAMEBUFFERDRAWBUFFEREXTPROC __glFramebufferDrawBufferEXT = nullptr; void APIENTRY glFramebufferDrawBufferEXT (GLuint framebuffer, GLenum mode) { if (__glFramebufferDrawBufferEXT != 0) (__glFramebufferDrawBufferEXT)(framebuffer, mode);  }
PFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC __glFramebufferDrawBuffersEXT = nullptr; void APIENTRY glFramebufferDrawBuffersEXT (GLuint framebuffer, GLsizei n, const GLenum *bufs) { if (__glFramebufferDrawBuffersEXT != 0) (__glFramebufferDrawBuffersEXT)(framebuffer, n, bufs);  }
PFNGLFRAMEBUFFERREADBUFFEREXTPROC __glFramebufferReadBufferEXT = nullptr; void APIENTRY glFramebufferReadBufferEXT (GLuint framebuffer, GLenum mode) { if (__glFramebufferReadBufferEXT != 0) (__glFramebufferReadBufferEXT)(framebuffer, mode);  }
PFNGLGENERATEMULTITEXMIPMAPEXTPROC __glGenerateMultiTexMipmapEXT = nullptr; void APIENTRY glGenerateMultiTexMipmapEXT (GLenum texunit, GLenum target) { if (__glGenerateMultiTexMipmapEXT != 0) (__glGenerateMultiTexMipmapEXT)(texunit, target);  }
PFNGLGENERATETEXTUREMIPMAPEXTPROC __glGenerateTextureMipmapEXT = nullptr; void APIENTRY glGenerateTextureMipmapEXT (GLuint texture, GLenum target) { if (__glGenerateTextureMipmapEXT != 0) (__glGenerateTextureMipmapEXT)(texture, target);  }
PFNGLGETBOOLEANINDEXEDVEXTPROC __glGetBooleanIndexedvEXT = nullptr; void APIENTRY glGetBooleanIndexedvEXT (GLenum target, GLuint index, GLboolean *data) { if (__glGetBooleanIndexedvEXT != 0) (__glGetBooleanIndexedvEXT)(target, index, data);  }
PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC __glGetCompressedMultiTexImageEXT = nullptr; void APIENTRY glGetCompressedMultiTexImageEXT (GLenum texunit, GLenum target, GLint lod, void *img) { if (__glGetCompressedMultiTexImageEXT != 0) (__glGetCompressedMultiTexImageEXT)(texunit, target, lod, img);  }
PFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC __glGetCompressedTextureImageEXT = nullptr; void APIENTRY glGetCompressedTextureImageEXT (GLuint texture, GLenum target, GLint lod, void *img) { if (__glGetCompressedTextureImageEXT != 0) (__glGetCompressedTextureImageEXT)(texture, target, lod, img);  }
PFNGLGETDOUBLEINDEXEDVEXTPROC __glGetDoubleIndexedvEXT = nullptr; void APIENTRY glGetDoubleIndexedvEXT (GLenum target, GLuint index, GLdouble *data) { if (__glGetDoubleIndexedvEXT != 0) (__glGetDoubleIndexedvEXT)(target, index, data);  }
PFNGLGETDOUBLEI_VEXTPROC __glGetDoublei_vEXT = nullptr; void APIENTRY glGetDoublei_vEXT (GLenum pname, GLuint index, GLdouble *params) { if (__glGetDoublei_vEXT != 0) (__glGetDoublei_vEXT)(pname, index, params);  }
PFNGLGETFLOATINDEXEDVEXTPROC __glGetFloatIndexedvEXT = nullptr; void APIENTRY glGetFloatIndexedvEXT (GLenum target, GLuint index, GLfloat *data) { if (__glGetFloatIndexedvEXT != 0) (__glGetFloatIndexedvEXT)(target, index, data);  }
PFNGLGETFLOATI_VEXTPROC __glGetFloati_vEXT = nullptr; void APIENTRY glGetFloati_vEXT (GLenum pname, GLuint index, GLfloat *params) { if (__glGetFloati_vEXT != 0) (__glGetFloati_vEXT)(pname, index, params);  }
PFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC __glGetFramebufferParameterivEXT = nullptr; void APIENTRY glGetFramebufferParameterivEXT (GLuint framebuffer, GLenum pname, GLint *params) { if (__glGetFramebufferParameterivEXT != 0) (__glGetFramebufferParameterivEXT)(framebuffer, pname, params);  }
PFNGLGETINTEGERINDEXEDVEXTPROC __glGetIntegerIndexedvEXT = nullptr; void APIENTRY glGetIntegerIndexedvEXT (GLenum target, GLuint index, GLint *data) { if (__glGetIntegerIndexedvEXT != 0) (__glGetIntegerIndexedvEXT)(target, index, data);  }
PFNGLGETMULTITEXENVFVEXTPROC __glGetMultiTexEnvfvEXT = nullptr; void APIENTRY glGetMultiTexEnvfvEXT (GLenum texunit, GLenum target, GLenum pname, GLfloat *params) { if (__glGetMultiTexEnvfvEXT != 0) (__glGetMultiTexEnvfvEXT)(texunit, target, pname, params);  }
PFNGLGETMULTITEXENVIVEXTPROC __glGetMultiTexEnvivEXT = nullptr; void APIENTRY glGetMultiTexEnvivEXT (GLenum texunit, GLenum target, GLenum pname, GLint *params) { if (__glGetMultiTexEnvivEXT != 0) (__glGetMultiTexEnvivEXT)(texunit, target, pname, params);  }
PFNGLGETMULTITEXGENDVEXTPROC __glGetMultiTexGendvEXT = nullptr; void APIENTRY glGetMultiTexGendvEXT (GLenum texunit, GLenum coord, GLenum pname, GLdouble *params) { if (__glGetMultiTexGendvEXT != 0) (__glGetMultiTexGendvEXT)(texunit, coord, pname, params);  }
PFNGLGETMULTITEXGENFVEXTPROC __glGetMultiTexGenfvEXT = nullptr; void APIENTRY glGetMultiTexGenfvEXT (GLenum texunit, GLenum coord, GLenum pname, GLfloat *params) { if (__glGetMultiTexGenfvEXT != 0) (__glGetMultiTexGenfvEXT)(texunit, coord, pname, params);  }
PFNGLGETMULTITEXGENIVEXTPROC __glGetMultiTexGenivEXT = nullptr; void APIENTRY glGetMultiTexGenivEXT (GLenum texunit, GLenum coord, GLenum pname, GLint *params) { if (__glGetMultiTexGenivEXT != 0) (__glGetMultiTexGenivEXT)(texunit, coord, pname, params);  }
PFNGLGETMULTITEXIMAGEEXTPROC __glGetMultiTexImageEXT = nullptr; void APIENTRY glGetMultiTexImageEXT (GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, void *pixels) { if (__glGetMultiTexImageEXT != 0) (__glGetMultiTexImageEXT)(texunit, target, level, format, type, pixels);  }
PFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC __glGetMultiTexLevelParameterfvEXT = nullptr; void APIENTRY glGetMultiTexLevelParameterfvEXT (GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat *params) { if (__glGetMultiTexLevelParameterfvEXT != 0) (__glGetMultiTexLevelParameterfvEXT)(texunit, target, level, pname, params);  }
PFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC __glGetMultiTexLevelParameterivEXT = nullptr; void APIENTRY glGetMultiTexLevelParameterivEXT (GLenum texunit, GLenum target, GLint level, GLenum pname, GLint *params) { if (__glGetMultiTexLevelParameterivEXT != 0) (__glGetMultiTexLevelParameterivEXT)(texunit, target, level, pname, params);  }
PFNGLGETMULTITEXPARAMETERIIVEXTPROC __glGetMultiTexParameterIivEXT = nullptr; void APIENTRY glGetMultiTexParameterIivEXT (GLenum texunit, GLenum target, GLenum pname, GLint *params) { if (__glGetMultiTexParameterIivEXT != 0) (__glGetMultiTexParameterIivEXT)(texunit, target, pname, params);  }
PFNGLGETMULTITEXPARAMETERIUIVEXTPROC __glGetMultiTexParameterIuivEXT = nullptr; void APIENTRY glGetMultiTexParameterIuivEXT (GLenum texunit, GLenum target, GLenum pname, GLuint *params) { if (__glGetMultiTexParameterIuivEXT != 0) (__glGetMultiTexParameterIuivEXT)(texunit, target, pname, params);  }
PFNGLGETMULTITEXPARAMETERFVEXTPROC __glGetMultiTexParameterfvEXT = nullptr; void APIENTRY glGetMultiTexParameterfvEXT (GLenum texunit, GLenum target, GLenum pname, GLfloat *params) { if (__glGetMultiTexParameterfvEXT != 0) (__glGetMultiTexParameterfvEXT)(texunit, target, pname, params);  }
PFNGLGETMULTITEXPARAMETERIVEXTPROC __glGetMultiTexParameterivEXT = nullptr; void APIENTRY glGetMultiTexParameterivEXT (GLenum texunit, GLenum target, GLenum pname, GLint *params) { if (__glGetMultiTexParameterivEXT != 0) (__glGetMultiTexParameterivEXT)(texunit, target, pname, params);  }
PFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC __glGetNamedBufferParameterivEXT = nullptr; void APIENTRY glGetNamedBufferParameterivEXT (GLuint buffer, GLenum pname, GLint *params) { if (__glGetNamedBufferParameterivEXT != 0) (__glGetNamedBufferParameterivEXT)(buffer, pname, params);  }
PFNGLGETNAMEDBUFFERPOINTERVEXTPROC __glGetNamedBufferPointervEXT = nullptr; void APIENTRY glGetNamedBufferPointervEXT (GLuint buffer, GLenum pname, void **params) { if (__glGetNamedBufferPointervEXT != 0) (__glGetNamedBufferPointervEXT)(buffer, pname, params);  }
PFNGLGETNAMEDBUFFERSUBDATAEXTPROC __glGetNamedBufferSubDataEXT = nullptr; void APIENTRY glGetNamedBufferSubDataEXT (GLuint buffer, GLintptr offset, GLsizeiptr size, void *data) { if (__glGetNamedBufferSubDataEXT != 0) (__glGetNamedBufferSubDataEXT)(buffer, offset, size, data);  }
PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC __glGetNamedFramebufferAttachmentParameterivEXT = nullptr; void APIENTRY glGetNamedFramebufferAttachmentParameterivEXT (GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params) { if (__glGetNamedFramebufferAttachmentParameterivEXT != 0) (__glGetNamedFramebufferAttachmentParameterivEXT)(framebuffer, attachment, pname, params);  }
PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC __glGetNamedFramebufferParameterivEXT = nullptr; void APIENTRY glGetNamedFramebufferParameterivEXT (GLuint framebuffer, GLenum pname, GLint *params) { if (__glGetNamedFramebufferParameterivEXT != 0) (__glGetNamedFramebufferParameterivEXT)(framebuffer, pname, params);  }
PFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC __glGetNamedProgramLocalParameterIivEXT = nullptr; void APIENTRY glGetNamedProgramLocalParameterIivEXT (GLuint program, GLenum target, GLuint index, GLint *params) { if (__glGetNamedProgramLocalParameterIivEXT != 0) (__glGetNamedProgramLocalParameterIivEXT)(program, target, index, params);  }
PFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC __glGetNamedProgramLocalParameterIuivEXT = nullptr; void APIENTRY glGetNamedProgramLocalParameterIuivEXT (GLuint program, GLenum target, GLuint index, GLuint *params) { if (__glGetNamedProgramLocalParameterIuivEXT != 0) (__glGetNamedProgramLocalParameterIuivEXT)(program, target, index, params);  }
PFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC __glGetNamedProgramLocalParameterdvEXT = nullptr; void APIENTRY glGetNamedProgramLocalParameterdvEXT (GLuint program, GLenum target, GLuint index, GLdouble *params) { if (__glGetNamedProgramLocalParameterdvEXT != 0) (__glGetNamedProgramLocalParameterdvEXT)(program, target, index, params);  }
PFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC __glGetNamedProgramLocalParameterfvEXT = nullptr; void APIENTRY glGetNamedProgramLocalParameterfvEXT (GLuint program, GLenum target, GLuint index, GLfloat *params) { if (__glGetNamedProgramLocalParameterfvEXT != 0) (__glGetNamedProgramLocalParameterfvEXT)(program, target, index, params);  }
PFNGLGETNAMEDPROGRAMSTRINGEXTPROC __glGetNamedProgramStringEXT = nullptr; void APIENTRY glGetNamedProgramStringEXT (GLuint program, GLenum target, GLenum pname, void *string) { if (__glGetNamedProgramStringEXT != 0) (__glGetNamedProgramStringEXT)(program, target, pname, string);  }
PFNGLGETNAMEDPROGRAMIVEXTPROC __glGetNamedProgramivEXT = nullptr; void APIENTRY glGetNamedProgramivEXT (GLuint program, GLenum target, GLenum pname, GLint *params) { if (__glGetNamedProgramivEXT != 0) (__glGetNamedProgramivEXT)(program, target, pname, params);  }
PFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC __glGetNamedRenderbufferParameterivEXT = nullptr; void APIENTRY glGetNamedRenderbufferParameterivEXT (GLuint renderbuffer, GLenum pname, GLint *params) { if (__glGetNamedRenderbufferParameterivEXT != 0) (__glGetNamedRenderbufferParameterivEXT)(renderbuffer, pname, params);  }
PFNGLGETPOINTERINDEXEDVEXTPROC __glGetPointerIndexedvEXT = nullptr; void APIENTRY glGetPointerIndexedvEXT (GLenum target, GLuint index, void **data) { if (__glGetPointerIndexedvEXT != 0) (__glGetPointerIndexedvEXT)(target, index, data);  }
PFNGLGETPOINTERI_VEXTPROC __glGetPointeri_vEXT = nullptr; void APIENTRY glGetPointeri_vEXT (GLenum pname, GLuint index, void **params) { if (__glGetPointeri_vEXT != 0) (__glGetPointeri_vEXT)(pname, index, params);  }
PFNGLGETTEXTUREIMAGEEXTPROC __glGetTextureImageEXT = nullptr; void APIENTRY glGetTextureImageEXT (GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, void *pixels) { if (__glGetTextureImageEXT != 0) (__glGetTextureImageEXT)(texture, target, level, format, type, pixels);  }
PFNGLGETTEXTURELEVELPARAMETERFVEXTPROC __glGetTextureLevelParameterfvEXT = nullptr; void APIENTRY glGetTextureLevelParameterfvEXT (GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat *params) { if (__glGetTextureLevelParameterfvEXT != 0) (__glGetTextureLevelParameterfvEXT)(texture, target, level, pname, params);  }
PFNGLGETTEXTURELEVELPARAMETERIVEXTPROC __glGetTextureLevelParameterivEXT = nullptr; void APIENTRY glGetTextureLevelParameterivEXT (GLuint texture, GLenum target, GLint level, GLenum pname, GLint *params) { if (__glGetTextureLevelParameterivEXT != 0) (__glGetTextureLevelParameterivEXT)(texture, target, level, pname, params);  }
PFNGLGETTEXTUREPARAMETERIIVEXTPROC __glGetTextureParameterIivEXT = nullptr; void APIENTRY glGetTextureParameterIivEXT (GLuint texture, GLenum target, GLenum pname, GLint *params) { if (__glGetTextureParameterIivEXT != 0) (__glGetTextureParameterIivEXT)(texture, target, pname, params);  }
PFNGLGETTEXTUREPARAMETERIUIVEXTPROC __glGetTextureParameterIuivEXT = nullptr; void APIENTRY glGetTextureParameterIuivEXT (GLuint texture, GLenum target, GLenum pname, GLuint *params) { if (__glGetTextureParameterIuivEXT != 0) (__glGetTextureParameterIuivEXT)(texture, target, pname, params);  }
PFNGLGETTEXTUREPARAMETERFVEXTPROC __glGetTextureParameterfvEXT = nullptr; void APIENTRY glGetTextureParameterfvEXT (GLuint texture, GLenum target, GLenum pname, GLfloat *params) { if (__glGetTextureParameterfvEXT != 0) (__glGetTextureParameterfvEXT)(texture, target, pname, params);  }
PFNGLGETTEXTUREPARAMETERIVEXTPROC __glGetTextureParameterivEXT = nullptr; void APIENTRY glGetTextureParameterivEXT (GLuint texture, GLenum target, GLenum pname, GLint *params) { if (__glGetTextureParameterivEXT != 0) (__glGetTextureParameterivEXT)(texture, target, pname, params);  }
PFNGLGETVERTEXARRAYINTEGERI_VEXTPROC __glGetVertexArrayIntegeri_vEXT = nullptr; void APIENTRY glGetVertexArrayIntegeri_vEXT (GLuint vaobj, GLuint index, GLenum pname, GLint *param) { if (__glGetVertexArrayIntegeri_vEXT != 0) (__glGetVertexArrayIntegeri_vEXT)(vaobj, index, pname, param);  }
PFNGLGETVERTEXARRAYINTEGERVEXTPROC __glGetVertexArrayIntegervEXT = nullptr; void APIENTRY glGetVertexArrayIntegervEXT (GLuint vaobj, GLenum pname, GLint *param) { if (__glGetVertexArrayIntegervEXT != 0) (__glGetVertexArrayIntegervEXT)(vaobj, pname, param);  }
PFNGLGETVERTEXARRAYPOINTERI_VEXTPROC __glGetVertexArrayPointeri_vEXT = nullptr; void APIENTRY glGetVertexArrayPointeri_vEXT (GLuint vaobj, GLuint index, GLenum pname, void **param) { if (__glGetVertexArrayPointeri_vEXT != 0) (__glGetVertexArrayPointeri_vEXT)(vaobj, index, pname, param);  }
PFNGLGETVERTEXARRAYPOINTERVEXTPROC __glGetVertexArrayPointervEXT = nullptr; void APIENTRY glGetVertexArrayPointervEXT (GLuint vaobj, GLenum pname, void **param) { if (__glGetVertexArrayPointervEXT != 0) (__glGetVertexArrayPointervEXT)(vaobj, pname, param);  }
PFNGLISENABLEDINDEXEDEXTPROC __glIsEnabledIndexedEXT = nullptr; GLboolean APIENTRY glIsEnabledIndexedEXT (GLenum target, GLuint index) { if (__glIsEnabledIndexedEXT != 0) return (__glIsEnabledIndexedEXT)(target, index); return 0; }
PFNGLMAPNAMEDBUFFEREXTPROC __glMapNamedBufferEXT = nullptr; void *APIENTRY glMapNamedBufferEXT (GLuint buffer, GLenum access) { if (__glMapNamedBufferEXT != 0) return (__glMapNamedBufferEXT)(buffer, access); return 0; }
PFNGLMAPNAMEDBUFFERRANGEEXTPROC __glMapNamedBufferRangeEXT = nullptr; void *APIENTRY glMapNamedBufferRangeEXT (GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access) { if (__glMapNamedBufferRangeEXT != 0) return (__glMapNamedBufferRangeEXT)(buffer, offset, length, access); return 0; }
PFNGLMATRIXFRUSTUMEXTPROC __glMatrixFrustumEXT = nullptr; void APIENTRY glMatrixFrustumEXT (GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) { if (__glMatrixFrustumEXT != 0) (__glMatrixFrustumEXT)(mode, left, right, bottom, top, zNear, zFar);  }
PFNGLMATRIXLOADIDENTITYEXTPROC __glMatrixLoadIdentityEXT = nullptr; void APIENTRY glMatrixLoadIdentityEXT (GLenum mode) { if (__glMatrixLoadIdentityEXT != 0) (__glMatrixLoadIdentityEXT)(mode);  }
PFNGLMATRIXLOADTRANSPOSEDEXTPROC __glMatrixLoadTransposedEXT = nullptr; void APIENTRY glMatrixLoadTransposedEXT (GLenum mode, const GLdouble *m) { if (__glMatrixLoadTransposedEXT != 0) (__glMatrixLoadTransposedEXT)(mode, m);  }
PFNGLMATRIXLOADTRANSPOSEFEXTPROC __glMatrixLoadTransposefEXT = nullptr; void APIENTRY glMatrixLoadTransposefEXT (GLenum mode, const GLfloat *m) { if (__glMatrixLoadTransposefEXT != 0) (__glMatrixLoadTransposefEXT)(mode, m);  }
PFNGLMATRIXLOADDEXTPROC __glMatrixLoaddEXT = nullptr; void APIENTRY glMatrixLoaddEXT (GLenum mode, const GLdouble *m) { if (__glMatrixLoaddEXT != 0) (__glMatrixLoaddEXT)(mode, m);  }
PFNGLMATRIXLOADFEXTPROC __glMatrixLoadfEXT = nullptr; void APIENTRY glMatrixLoadfEXT (GLenum mode, const GLfloat *m) { if (__glMatrixLoadfEXT != 0) (__glMatrixLoadfEXT)(mode, m);  }
PFNGLMATRIXMULTTRANSPOSEDEXTPROC __glMatrixMultTransposedEXT = nullptr; void APIENTRY glMatrixMultTransposedEXT (GLenum mode, const GLdouble *m) { if (__glMatrixMultTransposedEXT != 0) (__glMatrixMultTransposedEXT)(mode, m);  }
PFNGLMATRIXMULTTRANSPOSEFEXTPROC __glMatrixMultTransposefEXT = nullptr; void APIENTRY glMatrixMultTransposefEXT (GLenum mode, const GLfloat *m) { if (__glMatrixMultTransposefEXT != 0) (__glMatrixMultTransposefEXT)(mode, m);  }
PFNGLMATRIXMULTDEXTPROC __glMatrixMultdEXT = nullptr; void APIENTRY glMatrixMultdEXT (GLenum mode, const GLdouble *m) { if (__glMatrixMultdEXT != 0) (__glMatrixMultdEXT)(mode, m);  }
PFNGLMATRIXMULTFEXTPROC __glMatrixMultfEXT = nullptr; void APIENTRY glMatrixMultfEXT (GLenum mode, const GLfloat *m) { if (__glMatrixMultfEXT != 0) (__glMatrixMultfEXT)(mode, m);  }
PFNGLMATRIXORTHOEXTPROC __glMatrixOrthoEXT = nullptr; void APIENTRY glMatrixOrthoEXT (GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) { if (__glMatrixOrthoEXT != 0) (__glMatrixOrthoEXT)(mode, left, right, bottom, top, zNear, zFar);  }
PFNGLMATRIXPOPEXTPROC __glMatrixPopEXT = nullptr; void APIENTRY glMatrixPopEXT (GLenum mode) { if (__glMatrixPopEXT != 0) (__glMatrixPopEXT)(mode);  }
PFNGLMATRIXPUSHEXTPROC __glMatrixPushEXT = nullptr; void APIENTRY glMatrixPushEXT (GLenum mode) { if (__glMatrixPushEXT != 0) (__glMatrixPushEXT)(mode);  }
PFNGLMATRIXROTATEDEXTPROC __glMatrixRotatedEXT = nullptr; void APIENTRY glMatrixRotatedEXT (GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z) { if (__glMatrixRotatedEXT != 0) (__glMatrixRotatedEXT)(mode, angle, x, y, z);  }
PFNGLMATRIXROTATEFEXTPROC __glMatrixRotatefEXT = nullptr; void APIENTRY glMatrixRotatefEXT (GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z) { if (__glMatrixRotatefEXT != 0) (__glMatrixRotatefEXT)(mode, angle, x, y, z);  }
PFNGLMATRIXSCALEDEXTPROC __glMatrixScaledEXT = nullptr; void APIENTRY glMatrixScaledEXT (GLenum mode, GLdouble x, GLdouble y, GLdouble z) { if (__glMatrixScaledEXT != 0) (__glMatrixScaledEXT)(mode, x, y, z);  }
PFNGLMATRIXSCALEFEXTPROC __glMatrixScalefEXT = nullptr; void APIENTRY glMatrixScalefEXT (GLenum mode, GLfloat x, GLfloat y, GLfloat z) { if (__glMatrixScalefEXT != 0) (__glMatrixScalefEXT)(mode, x, y, z);  }
PFNGLMATRIXTRANSLATEDEXTPROC __glMatrixTranslatedEXT = nullptr; void APIENTRY glMatrixTranslatedEXT (GLenum mode, GLdouble x, GLdouble y, GLdouble z) { if (__glMatrixTranslatedEXT != 0) (__glMatrixTranslatedEXT)(mode, x, y, z);  }
PFNGLMATRIXTRANSLATEFEXTPROC __glMatrixTranslatefEXT = nullptr; void APIENTRY glMatrixTranslatefEXT (GLenum mode, GLfloat x, GLfloat y, GLfloat z) { if (__glMatrixTranslatefEXT != 0) (__glMatrixTranslatefEXT)(mode, x, y, z);  }
PFNGLMULTITEXBUFFEREXTPROC __glMultiTexBufferEXT = nullptr; void APIENTRY glMultiTexBufferEXT (GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer) { if (__glMultiTexBufferEXT != 0) (__glMultiTexBufferEXT)(texunit, target, internalformat, buffer);  }
PFNGLMULTITEXCOORDPOINTEREXTPROC __glMultiTexCoordPointerEXT = nullptr; void APIENTRY glMultiTexCoordPointerEXT (GLenum texunit, GLint size, GLenum type, GLsizei stride, const void *pointer) { if (__glMultiTexCoordPointerEXT != 0) (__glMultiTexCoordPointerEXT)(texunit, size, type, stride, pointer);  }
PFNGLMULTITEXENVFEXTPROC __glMultiTexEnvfEXT = nullptr; void APIENTRY glMultiTexEnvfEXT (GLenum texunit, GLenum target, GLenum pname, GLfloat param) { if (__glMultiTexEnvfEXT != 0) (__glMultiTexEnvfEXT)(texunit, target, pname, param);  }
PFNGLMULTITEXENVFVEXTPROC __glMultiTexEnvfvEXT = nullptr; void APIENTRY glMultiTexEnvfvEXT (GLenum texunit, GLenum target, GLenum pname, const GLfloat *params) { if (__glMultiTexEnvfvEXT != 0) (__glMultiTexEnvfvEXT)(texunit, target, pname, params);  }
PFNGLMULTITEXENVIEXTPROC __glMultiTexEnviEXT = nullptr; void APIENTRY glMultiTexEnviEXT (GLenum texunit, GLenum target, GLenum pname, GLint param) { if (__glMultiTexEnviEXT != 0) (__glMultiTexEnviEXT)(texunit, target, pname, param);  }
PFNGLMULTITEXENVIVEXTPROC __glMultiTexEnvivEXT = nullptr; void APIENTRY glMultiTexEnvivEXT (GLenum texunit, GLenum target, GLenum pname, const GLint *params) { if (__glMultiTexEnvivEXT != 0) (__glMultiTexEnvivEXT)(texunit, target, pname, params);  }
PFNGLMULTITEXGENDEXTPROC __glMultiTexGendEXT = nullptr; void APIENTRY glMultiTexGendEXT (GLenum texunit, GLenum coord, GLenum pname, GLdouble param) { if (__glMultiTexGendEXT != 0) (__glMultiTexGendEXT)(texunit, coord, pname, param);  }
PFNGLMULTITEXGENDVEXTPROC __glMultiTexGendvEXT = nullptr; void APIENTRY glMultiTexGendvEXT (GLenum texunit, GLenum coord, GLenum pname, const GLdouble *params) { if (__glMultiTexGendvEXT != 0) (__glMultiTexGendvEXT)(texunit, coord, pname, params);  }
PFNGLMULTITEXGENFEXTPROC __glMultiTexGenfEXT = nullptr; void APIENTRY glMultiTexGenfEXT (GLenum texunit, GLenum coord, GLenum pname, GLfloat param) { if (__glMultiTexGenfEXT != 0) (__glMultiTexGenfEXT)(texunit, coord, pname, param);  }
PFNGLMULTITEXGENFVEXTPROC __glMultiTexGenfvEXT = nullptr; void APIENTRY glMultiTexGenfvEXT (GLenum texunit, GLenum coord, GLenum pname, const GLfloat *params) { if (__glMultiTexGenfvEXT != 0) (__glMultiTexGenfvEXT)(texunit, coord, pname, params);  }
PFNGLMULTITEXGENIEXTPROC __glMultiTexGeniEXT = nullptr; void APIENTRY glMultiTexGeniEXT (GLenum texunit, GLenum coord, GLenum pname, GLint param) { if (__glMultiTexGeniEXT != 0) (__glMultiTexGeniEXT)(texunit, coord, pname, param);  }
PFNGLMULTITEXGENIVEXTPROC __glMultiTexGenivEXT = nullptr; void APIENTRY glMultiTexGenivEXT (GLenum texunit, GLenum coord, GLenum pname, const GLint *params) { if (__glMultiTexGenivEXT != 0) (__glMultiTexGenivEXT)(texunit, coord, pname, params);  }
PFNGLMULTITEXIMAGE1DEXTPROC __glMultiTexImage1DEXT = nullptr; void APIENTRY glMultiTexImage1DEXT (GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels) { if (__glMultiTexImage1DEXT != 0) (__glMultiTexImage1DEXT)(texunit, target, level, internalformat, width, border, format, type, pixels);  }
PFNGLMULTITEXIMAGE2DEXTPROC __glMultiTexImage2DEXT = nullptr; void APIENTRY glMultiTexImage2DEXT (GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels) { if (__glMultiTexImage2DEXT != 0) (__glMultiTexImage2DEXT)(texunit, target, level, internalformat, width, height, border, format, type, pixels);  }
PFNGLMULTITEXIMAGE3DEXTPROC __glMultiTexImage3DEXT = nullptr; void APIENTRY glMultiTexImage3DEXT (GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels) { if (__glMultiTexImage3DEXT != 0) (__glMultiTexImage3DEXT)(texunit, target, level, internalformat, width, height, depth, border, format, type, pixels);  }
PFNGLMULTITEXPARAMETERIIVEXTPROC __glMultiTexParameterIivEXT = nullptr; void APIENTRY glMultiTexParameterIivEXT (GLenum texunit, GLenum target, GLenum pname, const GLint *params) { if (__glMultiTexParameterIivEXT != 0) (__glMultiTexParameterIivEXT)(texunit, target, pname, params);  }
PFNGLMULTITEXPARAMETERIUIVEXTPROC __glMultiTexParameterIuivEXT = nullptr; void APIENTRY glMultiTexParameterIuivEXT (GLenum texunit, GLenum target, GLenum pname, const GLuint *params) { if (__glMultiTexParameterIuivEXT != 0) (__glMultiTexParameterIuivEXT)(texunit, target, pname, params);  }
PFNGLMULTITEXPARAMETERFEXTPROC __glMultiTexParameterfEXT = nullptr; void APIENTRY glMultiTexParameterfEXT (GLenum texunit, GLenum target, GLenum pname, GLfloat param) { if (__glMultiTexParameterfEXT != 0) (__glMultiTexParameterfEXT)(texunit, target, pname, param);  }
PFNGLMULTITEXPARAMETERFVEXTPROC __glMultiTexParameterfvEXT = nullptr; void APIENTRY glMultiTexParameterfvEXT (GLenum texunit, GLenum target, GLenum pname, const GLfloat *params) { if (__glMultiTexParameterfvEXT != 0) (__glMultiTexParameterfvEXT)(texunit, target, pname, params);  }
PFNGLMULTITEXPARAMETERIEXTPROC __glMultiTexParameteriEXT = nullptr; void APIENTRY glMultiTexParameteriEXT (GLenum texunit, GLenum target, GLenum pname, GLint param) { if (__glMultiTexParameteriEXT != 0) (__glMultiTexParameteriEXT)(texunit, target, pname, param);  }
PFNGLMULTITEXPARAMETERIVEXTPROC __glMultiTexParameterivEXT = nullptr; void APIENTRY glMultiTexParameterivEXT (GLenum texunit, GLenum target, GLenum pname, const GLint *params) { if (__glMultiTexParameterivEXT != 0) (__glMultiTexParameterivEXT)(texunit, target, pname, params);  }
PFNGLMULTITEXRENDERBUFFEREXTPROC __glMultiTexRenderbufferEXT = nullptr; void APIENTRY glMultiTexRenderbufferEXT (GLenum texunit, GLenum target, GLuint renderbuffer) { if (__glMultiTexRenderbufferEXT != 0) (__glMultiTexRenderbufferEXT)(texunit, target, renderbuffer);  }
PFNGLMULTITEXSUBIMAGE1DEXTPROC __glMultiTexSubImage1DEXT = nullptr; void APIENTRY glMultiTexSubImage1DEXT (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels) { if (__glMultiTexSubImage1DEXT != 0) (__glMultiTexSubImage1DEXT)(texunit, target, level, xoffset, width, format, type, pixels);  }
PFNGLMULTITEXSUBIMAGE2DEXTPROC __glMultiTexSubImage2DEXT = nullptr; void APIENTRY glMultiTexSubImage2DEXT (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels) { if (__glMultiTexSubImage2DEXT != 0) (__glMultiTexSubImage2DEXT)(texunit, target, level, xoffset, yoffset, width, height, format, type, pixels);  }
PFNGLMULTITEXSUBIMAGE3DEXTPROC __glMultiTexSubImage3DEXT = nullptr; void APIENTRY glMultiTexSubImage3DEXT (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels) { if (__glMultiTexSubImage3DEXT != 0) (__glMultiTexSubImage3DEXT)(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);  }
PFNGLNAMEDBUFFERDATAEXTPROC __glNamedBufferDataEXT = nullptr; void APIENTRY glNamedBufferDataEXT (GLuint buffer, GLsizeiptr size, const void *data, GLenum usage) { if (__glNamedBufferDataEXT != 0) (__glNamedBufferDataEXT)(buffer, size, data, usage);  }
PFNGLNAMEDBUFFERSTORAGEEXTPROC __glNamedBufferStorageEXT = nullptr; void APIENTRY glNamedBufferStorageEXT (GLuint buffer, GLsizeiptr size, const void *data, GLbitfield flags) { if (__glNamedBufferStorageEXT != 0) (__glNamedBufferStorageEXT)(buffer, size, data, flags);  }
PFNGLNAMEDBUFFERSUBDATAEXTPROC __glNamedBufferSubDataEXT = nullptr; void APIENTRY glNamedBufferSubDataEXT (GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data) { if (__glNamedBufferSubDataEXT != 0) (__glNamedBufferSubDataEXT)(buffer, offset, size, data);  }
PFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC __glNamedCopyBufferSubDataEXT = nullptr; void APIENTRY glNamedCopyBufferSubDataEXT (GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) { if (__glNamedCopyBufferSubDataEXT != 0) (__glNamedCopyBufferSubDataEXT)(readBuffer, writeBuffer, readOffset, writeOffset, size);  }
PFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC __glNamedFramebufferParameteriEXT = nullptr; void APIENTRY glNamedFramebufferParameteriEXT (GLuint framebuffer, GLenum pname, GLint param) { if (__glNamedFramebufferParameteriEXT != 0) (__glNamedFramebufferParameteriEXT)(framebuffer, pname, param);  }
PFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC __glNamedFramebufferRenderbufferEXT = nullptr; void APIENTRY glNamedFramebufferRenderbufferEXT (GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) { if (__glNamedFramebufferRenderbufferEXT != 0) (__glNamedFramebufferRenderbufferEXT)(framebuffer, attachment, renderbuffertarget, renderbuffer);  }
PFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC __glNamedFramebufferTexture1DEXT = nullptr; void APIENTRY glNamedFramebufferTexture1DEXT (GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level) { if (__glNamedFramebufferTexture1DEXT != 0) (__glNamedFramebufferTexture1DEXT)(framebuffer, attachment, textarget, texture, level);  }
PFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC __glNamedFramebufferTexture2DEXT = nullptr; void APIENTRY glNamedFramebufferTexture2DEXT (GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level) { if (__glNamedFramebufferTexture2DEXT != 0) (__glNamedFramebufferTexture2DEXT)(framebuffer, attachment, textarget, texture, level);  }
PFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC __glNamedFramebufferTexture3DEXT = nullptr; void APIENTRY glNamedFramebufferTexture3DEXT (GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset) { if (__glNamedFramebufferTexture3DEXT != 0) (__glNamedFramebufferTexture3DEXT)(framebuffer, attachment, textarget, texture, level, zoffset);  }
PFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC __glNamedFramebufferTextureEXT = nullptr; void APIENTRY glNamedFramebufferTextureEXT (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level) { if (__glNamedFramebufferTextureEXT != 0) (__glNamedFramebufferTextureEXT)(framebuffer, attachment, texture, level);  }
PFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC __glNamedFramebufferTextureFaceEXT = nullptr; void APIENTRY glNamedFramebufferTextureFaceEXT (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face) { if (__glNamedFramebufferTextureFaceEXT != 0) (__glNamedFramebufferTextureFaceEXT)(framebuffer, attachment, texture, level, face);  }
PFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC __glNamedFramebufferTextureLayerEXT = nullptr; void APIENTRY glNamedFramebufferTextureLayerEXT (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer) { if (__glNamedFramebufferTextureLayerEXT != 0) (__glNamedFramebufferTextureLayerEXT)(framebuffer, attachment, texture, level, layer);  }
PFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC __glNamedProgramLocalParameter4dEXT = nullptr; void APIENTRY glNamedProgramLocalParameter4dEXT (GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { if (__glNamedProgramLocalParameter4dEXT != 0) (__glNamedProgramLocalParameter4dEXT)(program, target, index, x, y, z, w);  }
PFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC __glNamedProgramLocalParameter4dvEXT = nullptr; void APIENTRY glNamedProgramLocalParameter4dvEXT (GLuint program, GLenum target, GLuint index, const GLdouble *params) { if (__glNamedProgramLocalParameter4dvEXT != 0) (__glNamedProgramLocalParameter4dvEXT)(program, target, index, params);  }
PFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC __glNamedProgramLocalParameter4fEXT = nullptr; void APIENTRY glNamedProgramLocalParameter4fEXT (GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) { if (__glNamedProgramLocalParameter4fEXT != 0) (__glNamedProgramLocalParameter4fEXT)(program, target, index, x, y, z, w);  }
PFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC __glNamedProgramLocalParameter4fvEXT = nullptr; void APIENTRY glNamedProgramLocalParameter4fvEXT (GLuint program, GLenum target, GLuint index, const GLfloat *params) { if (__glNamedProgramLocalParameter4fvEXT != 0) (__glNamedProgramLocalParameter4fvEXT)(program, target, index, params);  }
PFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC __glNamedProgramLocalParameterI4iEXT = nullptr; void APIENTRY glNamedProgramLocalParameterI4iEXT (GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w) { if (__glNamedProgramLocalParameterI4iEXT != 0) (__glNamedProgramLocalParameterI4iEXT)(program, target, index, x, y, z, w);  }
PFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC __glNamedProgramLocalParameterI4ivEXT = nullptr; void APIENTRY glNamedProgramLocalParameterI4ivEXT (GLuint program, GLenum target, GLuint index, const GLint *params) { if (__glNamedProgramLocalParameterI4ivEXT != 0) (__glNamedProgramLocalParameterI4ivEXT)(program, target, index, params);  }
PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC __glNamedProgramLocalParameterI4uiEXT = nullptr; void APIENTRY glNamedProgramLocalParameterI4uiEXT (GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) { if (__glNamedProgramLocalParameterI4uiEXT != 0) (__glNamedProgramLocalParameterI4uiEXT)(program, target, index, x, y, z, w);  }
PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC __glNamedProgramLocalParameterI4uivEXT = nullptr; void APIENTRY glNamedProgramLocalParameterI4uivEXT (GLuint program, GLenum target, GLuint index, const GLuint *params) { if (__glNamedProgramLocalParameterI4uivEXT != 0) (__glNamedProgramLocalParameterI4uivEXT)(program, target, index, params);  }
PFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC __glNamedProgramLocalParameters4fvEXT = nullptr; void APIENTRY glNamedProgramLocalParameters4fvEXT (GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat *params) { if (__glNamedProgramLocalParameters4fvEXT != 0) (__glNamedProgramLocalParameters4fvEXT)(program, target, index, count, params);  }
PFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC __glNamedProgramLocalParametersI4ivEXT = nullptr; void APIENTRY glNamedProgramLocalParametersI4ivEXT (GLuint program, GLenum target, GLuint index, GLsizei count, const GLint *params) { if (__glNamedProgramLocalParametersI4ivEXT != 0) (__glNamedProgramLocalParametersI4ivEXT)(program, target, index, count, params);  }
PFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC __glNamedProgramLocalParametersI4uivEXT = nullptr; void APIENTRY glNamedProgramLocalParametersI4uivEXT (GLuint program, GLenum target, GLuint index, GLsizei count, const GLuint *params) { if (__glNamedProgramLocalParametersI4uivEXT != 0) (__glNamedProgramLocalParametersI4uivEXT)(program, target, index, count, params);  }
PFNGLNAMEDPROGRAMSTRINGEXTPROC __glNamedProgramStringEXT = nullptr; void APIENTRY glNamedProgramStringEXT (GLuint program, GLenum target, GLenum format, GLsizei len, const void *string) { if (__glNamedProgramStringEXT != 0) (__glNamedProgramStringEXT)(program, target, format, len, string);  }
PFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC __glNamedRenderbufferStorageEXT = nullptr; void APIENTRY glNamedRenderbufferStorageEXT (GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height) { if (__glNamedRenderbufferStorageEXT != 0) (__glNamedRenderbufferStorageEXT)(renderbuffer, internalformat, width, height);  }
PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC __glNamedRenderbufferStorageMultisampleCoverageEXT = nullptr; void APIENTRY glNamedRenderbufferStorageMultisampleCoverageEXT (GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height) { if (__glNamedRenderbufferStorageMultisampleCoverageEXT != 0) (__glNamedRenderbufferStorageMultisampleCoverageEXT)(renderbuffer, coverageSamples, colorSamples, internalformat, width, height);  }
PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC __glNamedRenderbufferStorageMultisampleEXT = nullptr; void APIENTRY glNamedRenderbufferStorageMultisampleEXT (GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) { if (__glNamedRenderbufferStorageMultisampleEXT != 0) (__glNamedRenderbufferStorageMultisampleEXT)(renderbuffer, samples, internalformat, width, height);  }
PFNGLPROGRAMUNIFORM1DEXTPROC __glProgramUniform1dEXT = nullptr; void APIENTRY glProgramUniform1dEXT (GLuint program, GLint location, GLdouble x) { if (__glProgramUniform1dEXT != 0) (__glProgramUniform1dEXT)(program, location, x);  }
PFNGLPROGRAMUNIFORM1DVEXTPROC __glProgramUniform1dvEXT = nullptr; void APIENTRY glProgramUniform1dvEXT (GLuint program, GLint location, GLsizei count, const GLdouble *value) { if (__glProgramUniform1dvEXT != 0) (__glProgramUniform1dvEXT)(program, location, count, value);  }
PFNGLPROGRAMUNIFORM1FEXTPROC __glProgramUniform1fEXT = nullptr; void APIENTRY glProgramUniform1fEXT (GLuint program, GLint location, GLfloat v0) { if (__glProgramUniform1fEXT != 0) (__glProgramUniform1fEXT)(program, location, v0);  }
PFNGLPROGRAMUNIFORM1FVEXTPROC __glProgramUniform1fvEXT = nullptr; void APIENTRY glProgramUniform1fvEXT (GLuint program, GLint location, GLsizei count, const GLfloat *value) { if (__glProgramUniform1fvEXT != 0) (__glProgramUniform1fvEXT)(program, location, count, value);  }
PFNGLPROGRAMUNIFORM1IEXTPROC __glProgramUniform1iEXT = nullptr; void APIENTRY glProgramUniform1iEXT (GLuint program, GLint location, GLint v0) { if (__glProgramUniform1iEXT != 0) (__glProgramUniform1iEXT)(program, location, v0);  }
PFNGLPROGRAMUNIFORM1IVEXTPROC __glProgramUniform1ivEXT = nullptr; void APIENTRY glProgramUniform1ivEXT (GLuint program, GLint location, GLsizei count, const GLint *value) { if (__glProgramUniform1ivEXT != 0) (__glProgramUniform1ivEXT)(program, location, count, value);  }
PFNGLPROGRAMUNIFORM1UIEXTPROC __glProgramUniform1uiEXT = nullptr; void APIENTRY glProgramUniform1uiEXT (GLuint program, GLint location, GLuint v0) { if (__glProgramUniform1uiEXT != 0) (__glProgramUniform1uiEXT)(program, location, v0);  }
PFNGLPROGRAMUNIFORM1UIVEXTPROC __glProgramUniform1uivEXT = nullptr; void APIENTRY glProgramUniform1uivEXT (GLuint program, GLint location, GLsizei count, const GLuint *value) { if (__glProgramUniform1uivEXT != 0) (__glProgramUniform1uivEXT)(program, location, count, value);  }
PFNGLPROGRAMUNIFORM2DEXTPROC __glProgramUniform2dEXT = nullptr; void APIENTRY glProgramUniform2dEXT (GLuint program, GLint location, GLdouble x, GLdouble y) { if (__glProgramUniform2dEXT != 0) (__glProgramUniform2dEXT)(program, location, x, y);  }
PFNGLPROGRAMUNIFORM2DVEXTPROC __glProgramUniform2dvEXT = nullptr; void APIENTRY glProgramUniform2dvEXT (GLuint program, GLint location, GLsizei count, const GLdouble *value) { if (__glProgramUniform2dvEXT != 0) (__glProgramUniform2dvEXT)(program, location, count, value);  }
PFNGLPROGRAMUNIFORM2FEXTPROC __glProgramUniform2fEXT = nullptr; void APIENTRY glProgramUniform2fEXT (GLuint program, GLint location, GLfloat v0, GLfloat v1) { if (__glProgramUniform2fEXT != 0) (__glProgramUniform2fEXT)(program, location, v0, v1);  }
PFNGLPROGRAMUNIFORM2FVEXTPROC __glProgramUniform2fvEXT = nullptr; void APIENTRY glProgramUniform2fvEXT (GLuint program, GLint location, GLsizei count, const GLfloat *value) { if (__glProgramUniform2fvEXT != 0) (__glProgramUniform2fvEXT)(program, location, count, value);  }
PFNGLPROGRAMUNIFORM2IEXTPROC __glProgramUniform2iEXT = nullptr; void APIENTRY glProgramUniform2iEXT (GLuint program, GLint location, GLint v0, GLint v1) { if (__glProgramUniform2iEXT != 0) (__glProgramUniform2iEXT)(program, location, v0, v1);  }
PFNGLPROGRAMUNIFORM2IVEXTPROC __glProgramUniform2ivEXT = nullptr; void APIENTRY glProgramUniform2ivEXT (GLuint program, GLint location, GLsizei count, const GLint *value) { if (__glProgramUniform2ivEXT != 0) (__glProgramUniform2ivEXT)(program, location, count, value);  }
PFNGLPROGRAMUNIFORM2UIEXTPROC __glProgramUniform2uiEXT = nullptr; void APIENTRY glProgramUniform2uiEXT (GLuint program, GLint location, GLuint v0, GLuint v1) { if (__glProgramUniform2uiEXT != 0) (__glProgramUniform2uiEXT)(program, location, v0, v1);  }
PFNGLPROGRAMUNIFORM2UIVEXTPROC __glProgramUniform2uivEXT = nullptr; void APIENTRY glProgramUniform2uivEXT (GLuint program, GLint location, GLsizei count, const GLuint *value) { if (__glProgramUniform2uivEXT != 0) (__glProgramUniform2uivEXT)(program, location, count, value);  }
PFNGLPROGRAMUNIFORM3DEXTPROC __glProgramUniform3dEXT = nullptr; void APIENTRY glProgramUniform3dEXT (GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z) { if (__glProgramUniform3dEXT != 0) (__glProgramUniform3dEXT)(program, location, x, y, z);  }
PFNGLPROGRAMUNIFORM3DVEXTPROC __glProgramUniform3dvEXT = nullptr; void APIENTRY glProgramUniform3dvEXT (GLuint program, GLint location, GLsizei count, const GLdouble *value) { if (__glProgramUniform3dvEXT != 0) (__glProgramUniform3dvEXT)(program, location, count, value);  }
PFNGLPROGRAMUNIFORM3FEXTPROC __glProgramUniform3fEXT = nullptr; void APIENTRY glProgramUniform3fEXT (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2) { if (__glProgramUniform3fEXT != 0) (__glProgramUniform3fEXT)(program, location, v0, v1, v2);  }
PFNGLPROGRAMUNIFORM3FVEXTPROC __glProgramUniform3fvEXT = nullptr; void APIENTRY glProgramUniform3fvEXT (GLuint program, GLint location, GLsizei count, const GLfloat *value) { if (__glProgramUniform3fvEXT != 0) (__glProgramUniform3fvEXT)(program, location, count, value);  }
PFNGLPROGRAMUNIFORM3IEXTPROC __glProgramUniform3iEXT = nullptr; void APIENTRY glProgramUniform3iEXT (GLuint program, GLint location, GLint v0, GLint v1, GLint v2) { if (__glProgramUniform3iEXT != 0) (__glProgramUniform3iEXT)(program, location, v0, v1, v2);  }
PFNGLPROGRAMUNIFORM3IVEXTPROC __glProgramUniform3ivEXT = nullptr; void APIENTRY glProgramUniform3ivEXT (GLuint program, GLint location, GLsizei count, const GLint *value) { if (__glProgramUniform3ivEXT != 0) (__glProgramUniform3ivEXT)(program, location, count, value);  }
PFNGLPROGRAMUNIFORM3UIEXTPROC __glProgramUniform3uiEXT = nullptr; void APIENTRY glProgramUniform3uiEXT (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2) { if (__glProgramUniform3uiEXT != 0) (__glProgramUniform3uiEXT)(program, location, v0, v1, v2);  }
PFNGLPROGRAMUNIFORM3UIVEXTPROC __glProgramUniform3uivEXT = nullptr; void APIENTRY glProgramUniform3uivEXT (GLuint program, GLint location, GLsizei count, const GLuint *value) { if (__glProgramUniform3uivEXT != 0) (__glProgramUniform3uivEXT)(program, location, count, value);  }
PFNGLPROGRAMUNIFORM4DEXTPROC __glProgramUniform4dEXT = nullptr; void APIENTRY glProgramUniform4dEXT (GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { if (__glProgramUniform4dEXT != 0) (__glProgramUniform4dEXT)(program, location, x, y, z, w);  }
PFNGLPROGRAMUNIFORM4DVEXTPROC __glProgramUniform4dvEXT = nullptr; void APIENTRY glProgramUniform4dvEXT (GLuint program, GLint location, GLsizei count, const GLdouble *value) { if (__glProgramUniform4dvEXT != 0) (__glProgramUniform4dvEXT)(program, location, count, value);  }
PFNGLPROGRAMUNIFORM4FEXTPROC __glProgramUniform4fEXT = nullptr; void APIENTRY glProgramUniform4fEXT (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) { if (__glProgramUniform4fEXT != 0) (__glProgramUniform4fEXT)(program, location, v0, v1, v2, v3);  }
PFNGLPROGRAMUNIFORM4FVEXTPROC __glProgramUniform4fvEXT = nullptr; void APIENTRY glProgramUniform4fvEXT (GLuint program, GLint location, GLsizei count, const GLfloat *value) { if (__glProgramUniform4fvEXT != 0) (__glProgramUniform4fvEXT)(program, location, count, value);  }
PFNGLPROGRAMUNIFORM4IEXTPROC __glProgramUniform4iEXT = nullptr; void APIENTRY glProgramUniform4iEXT (GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3) { if (__glProgramUniform4iEXT != 0) (__glProgramUniform4iEXT)(program, location, v0, v1, v2, v3);  }
PFNGLPROGRAMUNIFORM4IVEXTPROC __glProgramUniform4ivEXT = nullptr; void APIENTRY glProgramUniform4ivEXT (GLuint program, GLint location, GLsizei count, const GLint *value) { if (__glProgramUniform4ivEXT != 0) (__glProgramUniform4ivEXT)(program, location, count, value);  }
PFNGLPROGRAMUNIFORM4UIEXTPROC __glProgramUniform4uiEXT = nullptr; void APIENTRY glProgramUniform4uiEXT (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) { if (__glProgramUniform4uiEXT != 0) (__glProgramUniform4uiEXT)(program, location, v0, v1, v2, v3);  }
PFNGLPROGRAMUNIFORM4UIVEXTPROC __glProgramUniform4uivEXT = nullptr; void APIENTRY glProgramUniform4uivEXT (GLuint program, GLint location, GLsizei count, const GLuint *value) { if (__glProgramUniform4uivEXT != 0) (__glProgramUniform4uivEXT)(program, location, count, value);  }
PFNGLPROGRAMUNIFORMMATRIX2DVEXTPROC __glProgramUniformMatrix2dvEXT = nullptr; void APIENTRY glProgramUniformMatrix2dvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) { if (__glProgramUniformMatrix2dvEXT != 0) (__glProgramUniformMatrix2dvEXT)(program, location, count, transpose, value);  }
PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC __glProgramUniformMatrix2fvEXT = nullptr; void APIENTRY glProgramUniformMatrix2fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) { if (__glProgramUniformMatrix2fvEXT != 0) (__glProgramUniformMatrix2fvEXT)(program, location, count, transpose, value);  }
PFNGLPROGRAMUNIFORMMATRIX2X3DVEXTPROC __glProgramUniformMatrix2x3dvEXT = nullptr; void APIENTRY glProgramUniformMatrix2x3dvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) { if (__glProgramUniformMatrix2x3dvEXT != 0) (__glProgramUniformMatrix2x3dvEXT)(program, location, count, transpose, value);  }
PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC __glProgramUniformMatrix2x3fvEXT = nullptr; void APIENTRY glProgramUniformMatrix2x3fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) { if (__glProgramUniformMatrix2x3fvEXT != 0) (__glProgramUniformMatrix2x3fvEXT)(program, location, count, transpose, value);  }
PFNGLPROGRAMUNIFORMMATRIX2X4DVEXTPROC __glProgramUniformMatrix2x4dvEXT = nullptr; void APIENTRY glProgramUniformMatrix2x4dvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) { if (__glProgramUniformMatrix2x4dvEXT != 0) (__glProgramUniformMatrix2x4dvEXT)(program, location, count, transpose, value);  }
PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC __glProgramUniformMatrix2x4fvEXT = nullptr; void APIENTRY glProgramUniformMatrix2x4fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) { if (__glProgramUniformMatrix2x4fvEXT != 0) (__glProgramUniformMatrix2x4fvEXT)(program, location, count, transpose, value);  }
PFNGLPROGRAMUNIFORMMATRIX3DVEXTPROC __glProgramUniformMatrix3dvEXT = nullptr; void APIENTRY glProgramUniformMatrix3dvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) { if (__glProgramUniformMatrix3dvEXT != 0) (__glProgramUniformMatrix3dvEXT)(program, location, count, transpose, value);  }
PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC __glProgramUniformMatrix3fvEXT = nullptr; void APIENTRY glProgramUniformMatrix3fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) { if (__glProgramUniformMatrix3fvEXT != 0) (__glProgramUniformMatrix3fvEXT)(program, location, count, transpose, value);  }
PFNGLPROGRAMUNIFORMMATRIX3X2DVEXTPROC __glProgramUniformMatrix3x2dvEXT = nullptr; void APIENTRY glProgramUniformMatrix3x2dvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) { if (__glProgramUniformMatrix3x2dvEXT != 0) (__glProgramUniformMatrix3x2dvEXT)(program, location, count, transpose, value);  }
PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC __glProgramUniformMatrix3x2fvEXT = nullptr; void APIENTRY glProgramUniformMatrix3x2fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) { if (__glProgramUniformMatrix3x2fvEXT != 0) (__glProgramUniformMatrix3x2fvEXT)(program, location, count, transpose, value);  }
PFNGLPROGRAMUNIFORMMATRIX3X4DVEXTPROC __glProgramUniformMatrix3x4dvEXT = nullptr; void APIENTRY glProgramUniformMatrix3x4dvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) { if (__glProgramUniformMatrix3x4dvEXT != 0) (__glProgramUniformMatrix3x4dvEXT)(program, location, count, transpose, value);  }
PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC __glProgramUniformMatrix3x4fvEXT = nullptr; void APIENTRY glProgramUniformMatrix3x4fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) { if (__glProgramUniformMatrix3x4fvEXT != 0) (__glProgramUniformMatrix3x4fvEXT)(program, location, count, transpose, value);  }
PFNGLPROGRAMUNIFORMMATRIX4DVEXTPROC __glProgramUniformMatrix4dvEXT = nullptr; void APIENTRY glProgramUniformMatrix4dvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) { if (__glProgramUniformMatrix4dvEXT != 0) (__glProgramUniformMatrix4dvEXT)(program, location, count, transpose, value);  }
PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC __glProgramUniformMatrix4fvEXT = nullptr; void APIENTRY glProgramUniformMatrix4fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) { if (__glProgramUniformMatrix4fvEXT != 0) (__glProgramUniformMatrix4fvEXT)(program, location, count, transpose, value);  }
PFNGLPROGRAMUNIFORMMATRIX4X2DVEXTPROC __glProgramUniformMatrix4x2dvEXT = nullptr; void APIENTRY glProgramUniformMatrix4x2dvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) { if (__glProgramUniformMatrix4x2dvEXT != 0) (__glProgramUniformMatrix4x2dvEXT)(program, location, count, transpose, value);  }
PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC __glProgramUniformMatrix4x2fvEXT = nullptr; void APIENTRY glProgramUniformMatrix4x2fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) { if (__glProgramUniformMatrix4x2fvEXT != 0) (__glProgramUniformMatrix4x2fvEXT)(program, location, count, transpose, value);  }
PFNGLPROGRAMUNIFORMMATRIX4X3DVEXTPROC __glProgramUniformMatrix4x3dvEXT = nullptr; void APIENTRY glProgramUniformMatrix4x3dvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) { if (__glProgramUniformMatrix4x3dvEXT != 0) (__glProgramUniformMatrix4x3dvEXT)(program, location, count, transpose, value);  }
PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC __glProgramUniformMatrix4x3fvEXT = nullptr; void APIENTRY glProgramUniformMatrix4x3fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) { if (__glProgramUniformMatrix4x3fvEXT != 0) (__glProgramUniformMatrix4x3fvEXT)(program, location, count, transpose, value);  }
PFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC __glPushClientAttribDefaultEXT = nullptr; void APIENTRY glPushClientAttribDefaultEXT (GLbitfield mask) { if (__glPushClientAttribDefaultEXT != 0) (__glPushClientAttribDefaultEXT)(mask);  }
PFNGLTEXTUREBUFFEREXTPROC __glTextureBufferEXT = nullptr; void APIENTRY glTextureBufferEXT (GLuint texture, GLenum target, GLenum internalformat, GLuint buffer) { if (__glTextureBufferEXT != 0) (__glTextureBufferEXT)(texture, target, internalformat, buffer);  }
PFNGLTEXTUREBUFFERRANGEEXTPROC __glTextureBufferRangeEXT = nullptr; void APIENTRY glTextureBufferRangeEXT (GLuint texture, GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size) { if (__glTextureBufferRangeEXT != 0) (__glTextureBufferRangeEXT)(texture, target, internalformat, buffer, offset, size);  }
PFNGLTEXTUREIMAGE1DEXTPROC __glTextureImage1DEXT = nullptr; void APIENTRY glTextureImage1DEXT (GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels) { if (__glTextureImage1DEXT != 0) (__glTextureImage1DEXT)(texture, target, level, internalformat, width, border, format, type, pixels);  }
PFNGLTEXTUREIMAGE2DEXTPROC __glTextureImage2DEXT = nullptr; void APIENTRY glTextureImage2DEXT (GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels) { if (__glTextureImage2DEXT != 0) (__glTextureImage2DEXT)(texture, target, level, internalformat, width, height, border, format, type, pixels);  }
PFNGLTEXTUREIMAGE3DEXTPROC __glTextureImage3DEXT = nullptr; void APIENTRY glTextureImage3DEXT (GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels) { if (__glTextureImage3DEXT != 0) (__glTextureImage3DEXT)(texture, target, level, internalformat, width, height, depth, border, format, type, pixels);  }
PFNGLTEXTUREPAGECOMMITMENTEXTPROC __glTexturePageCommitmentEXT = nullptr; void APIENTRY glTexturePageCommitmentEXT (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit) { if (__glTexturePageCommitmentEXT != 0) (__glTexturePageCommitmentEXT)(texture, level, xoffset, yoffset, zoffset, width, height, depth, commit);  }
PFNGLTEXTUREPARAMETERIIVEXTPROC __glTextureParameterIivEXT = nullptr; void APIENTRY glTextureParameterIivEXT (GLuint texture, GLenum target, GLenum pname, const GLint *params) { if (__glTextureParameterIivEXT != 0) (__glTextureParameterIivEXT)(texture, target, pname, params);  }
PFNGLTEXTUREPARAMETERIUIVEXTPROC __glTextureParameterIuivEXT = nullptr; void APIENTRY glTextureParameterIuivEXT (GLuint texture, GLenum target, GLenum pname, const GLuint *params) { if (__glTextureParameterIuivEXT != 0) (__glTextureParameterIuivEXT)(texture, target, pname, params);  }
PFNGLTEXTUREPARAMETERFEXTPROC __glTextureParameterfEXT = nullptr; void APIENTRY glTextureParameterfEXT (GLuint texture, GLenum target, GLenum pname, GLfloat param) { if (__glTextureParameterfEXT != 0) (__glTextureParameterfEXT)(texture, target, pname, param);  }
PFNGLTEXTUREPARAMETERFVEXTPROC __glTextureParameterfvEXT = nullptr; void APIENTRY glTextureParameterfvEXT (GLuint texture, GLenum target, GLenum pname, const GLfloat *params) { if (__glTextureParameterfvEXT != 0) (__glTextureParameterfvEXT)(texture, target, pname, params);  }
PFNGLTEXTUREPARAMETERIEXTPROC __glTextureParameteriEXT = nullptr; void APIENTRY glTextureParameteriEXT (GLuint texture, GLenum target, GLenum pname, GLint param) { if (__glTextureParameteriEXT != 0) (__glTextureParameteriEXT)(texture, target, pname, param);  }
PFNGLTEXTUREPARAMETERIVEXTPROC __glTextureParameterivEXT = nullptr; void APIENTRY glTextureParameterivEXT (GLuint texture, GLenum target, GLenum pname, const GLint *params) { if (__glTextureParameterivEXT != 0) (__glTextureParameterivEXT)(texture, target, pname, params);  }
PFNGLTEXTURERENDERBUFFEREXTPROC __glTextureRenderbufferEXT = nullptr; void APIENTRY glTextureRenderbufferEXT (GLuint texture, GLenum target, GLuint renderbuffer) { if (__glTextureRenderbufferEXT != 0) (__glTextureRenderbufferEXT)(texture, target, renderbuffer);  }
PFNGLTEXTURESTORAGE1DEXTPROC __glTextureStorage1DEXT = nullptr; void APIENTRY glTextureStorage1DEXT (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width) { if (__glTextureStorage1DEXT != 0) (__glTextureStorage1DEXT)(texture, target, levels, internalformat, width);  }
PFNGLTEXTURESTORAGE2DEXTPROC __glTextureStorage2DEXT = nullptr; void APIENTRY glTextureStorage2DEXT (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height) { if (__glTextureStorage2DEXT != 0) (__glTextureStorage2DEXT)(texture, target, levels, internalformat, width, height);  }
PFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC __glTextureStorage2DMultisampleEXT = nullptr; void APIENTRY glTextureStorage2DMultisampleEXT (GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) { if (__glTextureStorage2DMultisampleEXT != 0) (__glTextureStorage2DMultisampleEXT)(texture, target, samples, internalformat, width, height, fixedsamplelocations);  }
PFNGLTEXTURESTORAGE3DEXTPROC __glTextureStorage3DEXT = nullptr; void APIENTRY glTextureStorage3DEXT (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth) { if (__glTextureStorage3DEXT != 0) (__glTextureStorage3DEXT)(texture, target, levels, internalformat, width, height, depth);  }
PFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC __glTextureStorage3DMultisampleEXT = nullptr; void APIENTRY glTextureStorage3DMultisampleEXT (GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) { if (__glTextureStorage3DMultisampleEXT != 0) (__glTextureStorage3DMultisampleEXT)(texture, target, samples, internalformat, width, height, depth, fixedsamplelocations);  }
PFNGLTEXTURESUBIMAGE1DEXTPROC __glTextureSubImage1DEXT = nullptr; void APIENTRY glTextureSubImage1DEXT (GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels) { if (__glTextureSubImage1DEXT != 0) (__glTextureSubImage1DEXT)(texture, target, level, xoffset, width, format, type, pixels);  }
PFNGLTEXTURESUBIMAGE2DEXTPROC __glTextureSubImage2DEXT = nullptr; void APIENTRY glTextureSubImage2DEXT (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels) { if (__glTextureSubImage2DEXT != 0) (__glTextureSubImage2DEXT)(texture, target, level, xoffset, yoffset, width, height, format, type, pixels);  }
PFNGLTEXTURESUBIMAGE3DEXTPROC __glTextureSubImage3DEXT = nullptr; void APIENTRY glTextureSubImage3DEXT (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels) { if (__glTextureSubImage3DEXT != 0) (__glTextureSubImage3DEXT)(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);  }
PFNGLUNMAPNAMEDBUFFEREXTPROC __glUnmapNamedBufferEXT = nullptr; GLboolean APIENTRY glUnmapNamedBufferEXT (GLuint buffer) { if (__glUnmapNamedBufferEXT != 0) return (__glUnmapNamedBufferEXT)(buffer); return 0; }
PFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC __glVertexArrayBindVertexBufferEXT = nullptr; void APIENTRY glVertexArrayBindVertexBufferEXT (GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride) { if (__glVertexArrayBindVertexBufferEXT != 0) (__glVertexArrayBindVertexBufferEXT)(vaobj, bindingindex, buffer, offset, stride);  }
PFNGLVERTEXARRAYCOLOROFFSETEXTPROC __glVertexArrayColorOffsetEXT = nullptr; void APIENTRY glVertexArrayColorOffsetEXT (GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset) { if (__glVertexArrayColorOffsetEXT != 0) (__glVertexArrayColorOffsetEXT)(vaobj, buffer, size, type, stride, offset);  }
PFNGLVERTEXARRAYEDGEFLAGOFFSETEXTPROC __glVertexArrayEdgeFlagOffsetEXT = nullptr; void APIENTRY glVertexArrayEdgeFlagOffsetEXT (GLuint vaobj, GLuint buffer, GLsizei stride, GLintptr offset) { if (__glVertexArrayEdgeFlagOffsetEXT != 0) (__glVertexArrayEdgeFlagOffsetEXT)(vaobj, buffer, stride, offset);  }
PFNGLVERTEXARRAYFOGCOORDOFFSETEXTPROC __glVertexArrayFogCoordOffsetEXT = nullptr; void APIENTRY glVertexArrayFogCoordOffsetEXT (GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset) { if (__glVertexArrayFogCoordOffsetEXT != 0) (__glVertexArrayFogCoordOffsetEXT)(vaobj, buffer, type, stride, offset);  }
PFNGLVERTEXARRAYINDEXOFFSETEXTPROC __glVertexArrayIndexOffsetEXT = nullptr; void APIENTRY glVertexArrayIndexOffsetEXT (GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset) { if (__glVertexArrayIndexOffsetEXT != 0) (__glVertexArrayIndexOffsetEXT)(vaobj, buffer, type, stride, offset);  }
PFNGLVERTEXARRAYMULTITEXCOORDOFFSETEXTPROC __glVertexArrayMultiTexCoordOffsetEXT = nullptr; void APIENTRY glVertexArrayMultiTexCoordOffsetEXT (GLuint vaobj, GLuint buffer, GLenum texunit, GLint size, GLenum type, GLsizei stride, GLintptr offset) { if (__glVertexArrayMultiTexCoordOffsetEXT != 0) (__glVertexArrayMultiTexCoordOffsetEXT)(vaobj, buffer, texunit, size, type, stride, offset);  }
PFNGLVERTEXARRAYNORMALOFFSETEXTPROC __glVertexArrayNormalOffsetEXT = nullptr; void APIENTRY glVertexArrayNormalOffsetEXT (GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset) { if (__glVertexArrayNormalOffsetEXT != 0) (__glVertexArrayNormalOffsetEXT)(vaobj, buffer, type, stride, offset);  }
PFNGLVERTEXARRAYSECONDARYCOLOROFFSETEXTPROC __glVertexArraySecondaryColorOffsetEXT = nullptr; void APIENTRY glVertexArraySecondaryColorOffsetEXT (GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset) { if (__glVertexArraySecondaryColorOffsetEXT != 0) (__glVertexArraySecondaryColorOffsetEXT)(vaobj, buffer, size, type, stride, offset);  }
PFNGLVERTEXARRAYTEXCOORDOFFSETEXTPROC __glVertexArrayTexCoordOffsetEXT = nullptr; void APIENTRY glVertexArrayTexCoordOffsetEXT (GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset) { if (__glVertexArrayTexCoordOffsetEXT != 0) (__glVertexArrayTexCoordOffsetEXT)(vaobj, buffer, size, type, stride, offset);  }
PFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC __glVertexArrayVertexAttribBindingEXT = nullptr; void APIENTRY glVertexArrayVertexAttribBindingEXT (GLuint vaobj, GLuint attribindex, GLuint bindingindex) { if (__glVertexArrayVertexAttribBindingEXT != 0) (__glVertexArrayVertexAttribBindingEXT)(vaobj, attribindex, bindingindex);  }
PFNGLVERTEXARRAYVERTEXATTRIBDIVISOREXTPROC __glVertexArrayVertexAttribDivisorEXT = nullptr; void APIENTRY glVertexArrayVertexAttribDivisorEXT (GLuint vaobj, GLuint index, GLuint divisor) { if (__glVertexArrayVertexAttribDivisorEXT != 0) (__glVertexArrayVertexAttribDivisorEXT)(vaobj, index, divisor);  }
PFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC __glVertexArrayVertexAttribFormatEXT = nullptr; void APIENTRY glVertexArrayVertexAttribFormatEXT (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset) { if (__glVertexArrayVertexAttribFormatEXT != 0) (__glVertexArrayVertexAttribFormatEXT)(vaobj, attribindex, size, type, normalized, relativeoffset);  }
PFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC __glVertexArrayVertexAttribIFormatEXT = nullptr; void APIENTRY glVertexArrayVertexAttribIFormatEXT (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) { if (__glVertexArrayVertexAttribIFormatEXT != 0) (__glVertexArrayVertexAttribIFormatEXT)(vaobj, attribindex, size, type, relativeoffset);  }
PFNGLVERTEXARRAYVERTEXATTRIBIOFFSETEXTPROC __glVertexArrayVertexAttribIOffsetEXT = nullptr; void APIENTRY glVertexArrayVertexAttribIOffsetEXT (GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset) { if (__glVertexArrayVertexAttribIOffsetEXT != 0) (__glVertexArrayVertexAttribIOffsetEXT)(vaobj, buffer, index, size, type, stride, offset);  }
PFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC __glVertexArrayVertexAttribLFormatEXT = nullptr; void APIENTRY glVertexArrayVertexAttribLFormatEXT (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) { if (__glVertexArrayVertexAttribLFormatEXT != 0) (__glVertexArrayVertexAttribLFormatEXT)(vaobj, attribindex, size, type, relativeoffset);  }
PFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC __glVertexArrayVertexAttribLOffsetEXT = nullptr; void APIENTRY glVertexArrayVertexAttribLOffsetEXT (GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset) { if (__glVertexArrayVertexAttribLOffsetEXT != 0) (__glVertexArrayVertexAttribLOffsetEXT)(vaobj, buffer, index, size, type, stride, offset);  }
PFNGLVERTEXARRAYVERTEXATTRIBOFFSETEXTPROC __glVertexArrayVertexAttribOffsetEXT = nullptr; void APIENTRY glVertexArrayVertexAttribOffsetEXT (GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLintptr offset) { if (__glVertexArrayVertexAttribOffsetEXT != 0) (__glVertexArrayVertexAttribOffsetEXT)(vaobj, buffer, index, size, type, normalized, stride, offset);  }
PFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC __glVertexArrayVertexBindingDivisorEXT = nullptr; void APIENTRY glVertexArrayVertexBindingDivisorEXT (GLuint vaobj, GLuint bindingindex, GLuint divisor) { if (__glVertexArrayVertexBindingDivisorEXT != 0) (__glVertexArrayVertexBindingDivisorEXT)(vaobj, bindingindex, divisor);  }
PFNGLVERTEXARRAYVERTEXOFFSETEXTPROC __glVertexArrayVertexOffsetEXT = nullptr; void APIENTRY glVertexArrayVertexOffsetEXT (GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset) { if (__glVertexArrayVertexOffsetEXT != 0) (__glVertexArrayVertexOffsetEXT)(vaobj, buffer, size, type, stride, offset);  }
bool __loadGL_EXT_direct_state_access(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glBindMultiTextureEXT = (PFNGLBINDMULTITEXTUREEXTPROC)proc((const GLubyte*)"glBindMultiTextureEXT")) != nullptr) || r;
    r = ((__glCheckNamedFramebufferStatusEXT = (PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC)proc((const GLubyte*)"glCheckNamedFramebufferStatusEXT")) != nullptr) || r;
    r = ((__glClearNamedBufferDataEXT = (PFNGLCLEARNAMEDBUFFERDATAEXTPROC)proc((const GLubyte*)"glClearNamedBufferDataEXT")) != nullptr) || r;
    r = ((__glClearNamedBufferSubDataEXT = (PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC)proc((const GLubyte*)"glClearNamedBufferSubDataEXT")) != nullptr) || r;
    r = ((__glClientAttribDefaultEXT = (PFNGLCLIENTATTRIBDEFAULTEXTPROC)proc((const GLubyte*)"glClientAttribDefaultEXT")) != nullptr) || r;
    r = ((__glCompressedMultiTexImage1DEXT = (PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC)proc((const GLubyte*)"glCompressedMultiTexImage1DEXT")) != nullptr) || r;
    r = ((__glCompressedMultiTexImage2DEXT = (PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC)proc((const GLubyte*)"glCompressedMultiTexImage2DEXT")) != nullptr) || r;
    r = ((__glCompressedMultiTexImage3DEXT = (PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC)proc((const GLubyte*)"glCompressedMultiTexImage3DEXT")) != nullptr) || r;
    r = ((__glCompressedMultiTexSubImage1DEXT = (PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC)proc((const GLubyte*)"glCompressedMultiTexSubImage1DEXT")) != nullptr) || r;
    r = ((__glCompressedMultiTexSubImage2DEXT = (PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC)proc((const GLubyte*)"glCompressedMultiTexSubImage2DEXT")) != nullptr) || r;
    r = ((__glCompressedMultiTexSubImage3DEXT = (PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC)proc((const GLubyte*)"glCompressedMultiTexSubImage3DEXT")) != nullptr) || r;
    r = ((__glCompressedTextureImage1DEXT = (PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC)proc((const GLubyte*)"glCompressedTextureImage1DEXT")) != nullptr) || r;
    r = ((__glCompressedTextureImage2DEXT = (PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC)proc((const GLubyte*)"glCompressedTextureImage2DEXT")) != nullptr) || r;
    r = ((__glCompressedTextureImage3DEXT = (PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC)proc((const GLubyte*)"glCompressedTextureImage3DEXT")) != nullptr) || r;
    r = ((__glCompressedTextureSubImage1DEXT = (PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC)proc((const GLubyte*)"glCompressedTextureSubImage1DEXT")) != nullptr) || r;
    r = ((__glCompressedTextureSubImage2DEXT = (PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC)proc((const GLubyte*)"glCompressedTextureSubImage2DEXT")) != nullptr) || r;
    r = ((__glCompressedTextureSubImage3DEXT = (PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC)proc((const GLubyte*)"glCompressedTextureSubImage3DEXT")) != nullptr) || r;
    r = ((__glCopyMultiTexImage1DEXT = (PFNGLCOPYMULTITEXIMAGE1DEXTPROC)proc((const GLubyte*)"glCopyMultiTexImage1DEXT")) != nullptr) || r;
    r = ((__glCopyMultiTexImage2DEXT = (PFNGLCOPYMULTITEXIMAGE2DEXTPROC)proc((const GLubyte*)"glCopyMultiTexImage2DEXT")) != nullptr) || r;
    r = ((__glCopyMultiTexSubImage1DEXT = (PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC)proc((const GLubyte*)"glCopyMultiTexSubImage1DEXT")) != nullptr) || r;
    r = ((__glCopyMultiTexSubImage2DEXT = (PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC)proc((const GLubyte*)"glCopyMultiTexSubImage2DEXT")) != nullptr) || r;
    r = ((__glCopyMultiTexSubImage3DEXT = (PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC)proc((const GLubyte*)"glCopyMultiTexSubImage3DEXT")) != nullptr) || r;
    r = ((__glCopyTextureImage1DEXT = (PFNGLCOPYTEXTUREIMAGE1DEXTPROC)proc((const GLubyte*)"glCopyTextureImage1DEXT")) != nullptr) || r;
    r = ((__glCopyTextureImage2DEXT = (PFNGLCOPYTEXTUREIMAGE2DEXTPROC)proc((const GLubyte*)"glCopyTextureImage2DEXT")) != nullptr) || r;
    r = ((__glCopyTextureSubImage1DEXT = (PFNGLCOPYTEXTURESUBIMAGE1DEXTPROC)proc((const GLubyte*)"glCopyTextureSubImage1DEXT")) != nullptr) || r;
    r = ((__glCopyTextureSubImage2DEXT = (PFNGLCOPYTEXTURESUBIMAGE2DEXTPROC)proc((const GLubyte*)"glCopyTextureSubImage2DEXT")) != nullptr) || r;
    r = ((__glCopyTextureSubImage3DEXT = (PFNGLCOPYTEXTURESUBIMAGE3DEXTPROC)proc((const GLubyte*)"glCopyTextureSubImage3DEXT")) != nullptr) || r;
    r = ((__glDisableClientStateIndexedEXT = (PFNGLDISABLECLIENTSTATEINDEXEDEXTPROC)proc((const GLubyte*)"glDisableClientStateIndexedEXT")) != nullptr) || r;
    r = ((__glDisableClientStateiEXT = (PFNGLDISABLECLIENTSTATEIEXTPROC)proc((const GLubyte*)"glDisableClientStateiEXT")) != nullptr) || r;
    r = ((__glDisableIndexedEXT = (PFNGLDISABLEINDEXEDEXTPROC)proc((const GLubyte*)"glDisableIndexedEXT")) != nullptr) || r;
    r = ((__glDisableVertexArrayAttribEXT = (PFNGLDISABLEVERTEXARRAYATTRIBEXTPROC)proc((const GLubyte*)"glDisableVertexArrayAttribEXT")) != nullptr) || r;
    r = ((__glDisableVertexArrayEXT = (PFNGLDISABLEVERTEXARRAYEXTPROC)proc((const GLubyte*)"glDisableVertexArrayEXT")) != nullptr) || r;
    r = ((__glEnableClientStateIndexedEXT = (PFNGLENABLECLIENTSTATEINDEXEDEXTPROC)proc((const GLubyte*)"glEnableClientStateIndexedEXT")) != nullptr) || r;
    r = ((__glEnableClientStateiEXT = (PFNGLENABLECLIENTSTATEIEXTPROC)proc((const GLubyte*)"glEnableClientStateiEXT")) != nullptr) || r;
    r = ((__glEnableIndexedEXT = (PFNGLENABLEINDEXEDEXTPROC)proc((const GLubyte*)"glEnableIndexedEXT")) != nullptr) || r;
    r = ((__glEnableVertexArrayAttribEXT = (PFNGLENABLEVERTEXARRAYATTRIBEXTPROC)proc((const GLubyte*)"glEnableVertexArrayAttribEXT")) != nullptr) || r;
    r = ((__glEnableVertexArrayEXT = (PFNGLENABLEVERTEXARRAYEXTPROC)proc((const GLubyte*)"glEnableVertexArrayEXT")) != nullptr) || r;
    r = ((__glFlushMappedNamedBufferRangeEXT = (PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC)proc((const GLubyte*)"glFlushMappedNamedBufferRangeEXT")) != nullptr) || r;
    r = ((__glFramebufferDrawBufferEXT = (PFNGLFRAMEBUFFERDRAWBUFFEREXTPROC)proc((const GLubyte*)"glFramebufferDrawBufferEXT")) != nullptr) || r;
    r = ((__glFramebufferDrawBuffersEXT = (PFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC)proc((const GLubyte*)"glFramebufferDrawBuffersEXT")) != nullptr) || r;
    r = ((__glFramebufferReadBufferEXT = (PFNGLFRAMEBUFFERREADBUFFEREXTPROC)proc((const GLubyte*)"glFramebufferReadBufferEXT")) != nullptr) || r;
    r = ((__glGenerateMultiTexMipmapEXT = (PFNGLGENERATEMULTITEXMIPMAPEXTPROC)proc((const GLubyte*)"glGenerateMultiTexMipmapEXT")) != nullptr) || r;
    r = ((__glGenerateTextureMipmapEXT = (PFNGLGENERATETEXTUREMIPMAPEXTPROC)proc((const GLubyte*)"glGenerateTextureMipmapEXT")) != nullptr) || r;
    r = ((__glGetBooleanIndexedvEXT = (PFNGLGETBOOLEANINDEXEDVEXTPROC)proc((const GLubyte*)"glGetBooleanIndexedvEXT")) != nullptr) || r;
    r = ((__glGetCompressedMultiTexImageEXT = (PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC)proc((const GLubyte*)"glGetCompressedMultiTexImageEXT")) != nullptr) || r;
    r = ((__glGetCompressedTextureImageEXT = (PFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC)proc((const GLubyte*)"glGetCompressedTextureImageEXT")) != nullptr) || r;
    r = ((__glGetDoubleIndexedvEXT = (PFNGLGETDOUBLEINDEXEDVEXTPROC)proc((const GLubyte*)"glGetDoubleIndexedvEXT")) != nullptr) || r;
    r = ((__glGetDoublei_vEXT = (PFNGLGETDOUBLEI_VEXTPROC)proc((const GLubyte*)"glGetDoublei_vEXT")) != nullptr) || r;
    r = ((__glGetFloatIndexedvEXT = (PFNGLGETFLOATINDEXEDVEXTPROC)proc((const GLubyte*)"glGetFloatIndexedvEXT")) != nullptr) || r;
    r = ((__glGetFloati_vEXT = (PFNGLGETFLOATI_VEXTPROC)proc((const GLubyte*)"glGetFloati_vEXT")) != nullptr) || r;
    r = ((__glGetFramebufferParameterivEXT = (PFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC)proc((const GLubyte*)"glGetFramebufferParameterivEXT")) != nullptr) || r;
    r = ((__glGetIntegerIndexedvEXT = (PFNGLGETINTEGERINDEXEDVEXTPROC)proc((const GLubyte*)"glGetIntegerIndexedvEXT")) != nullptr) || r;
    r = ((__glGetMultiTexEnvfvEXT = (PFNGLGETMULTITEXENVFVEXTPROC)proc((const GLubyte*)"glGetMultiTexEnvfvEXT")) != nullptr) || r;
    r = ((__glGetMultiTexEnvivEXT = (PFNGLGETMULTITEXENVIVEXTPROC)proc((const GLubyte*)"glGetMultiTexEnvivEXT")) != nullptr) || r;
    r = ((__glGetMultiTexGendvEXT = (PFNGLGETMULTITEXGENDVEXTPROC)proc((const GLubyte*)"glGetMultiTexGendvEXT")) != nullptr) || r;
    r = ((__glGetMultiTexGenfvEXT = (PFNGLGETMULTITEXGENFVEXTPROC)proc((const GLubyte*)"glGetMultiTexGenfvEXT")) != nullptr) || r;
    r = ((__glGetMultiTexGenivEXT = (PFNGLGETMULTITEXGENIVEXTPROC)proc((const GLubyte*)"glGetMultiTexGenivEXT")) != nullptr) || r;
    r = ((__glGetMultiTexImageEXT = (PFNGLGETMULTITEXIMAGEEXTPROC)proc((const GLubyte*)"glGetMultiTexImageEXT")) != nullptr) || r;
    r = ((__glGetMultiTexLevelParameterfvEXT = (PFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC)proc((const GLubyte*)"glGetMultiTexLevelParameterfvEXT")) != nullptr) || r;
    r = ((__glGetMultiTexLevelParameterivEXT = (PFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC)proc((const GLubyte*)"glGetMultiTexLevelParameterivEXT")) != nullptr) || r;
    r = ((__glGetMultiTexParameterIivEXT = (PFNGLGETMULTITEXPARAMETERIIVEXTPROC)proc((const GLubyte*)"glGetMultiTexParameterIivEXT")) != nullptr) || r;
    r = ((__glGetMultiTexParameterIuivEXT = (PFNGLGETMULTITEXPARAMETERIUIVEXTPROC)proc((const GLubyte*)"glGetMultiTexParameterIuivEXT")) != nullptr) || r;
    r = ((__glGetMultiTexParameterfvEXT = (PFNGLGETMULTITEXPARAMETERFVEXTPROC)proc((const GLubyte*)"glGetMultiTexParameterfvEXT")) != nullptr) || r;
    r = ((__glGetMultiTexParameterivEXT = (PFNGLGETMULTITEXPARAMETERIVEXTPROC)proc((const GLubyte*)"glGetMultiTexParameterivEXT")) != nullptr) || r;
    r = ((__glGetNamedBufferParameterivEXT = (PFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC)proc((const GLubyte*)"glGetNamedBufferParameterivEXT")) != nullptr) || r;
    r = ((__glGetNamedBufferPointervEXT = (PFNGLGETNAMEDBUFFERPOINTERVEXTPROC)proc((const GLubyte*)"glGetNamedBufferPointervEXT")) != nullptr) || r;
    r = ((__glGetNamedBufferSubDataEXT = (PFNGLGETNAMEDBUFFERSUBDATAEXTPROC)proc((const GLubyte*)"glGetNamedBufferSubDataEXT")) != nullptr) || r;
    r = ((__glGetNamedFramebufferAttachmentParameterivEXT = (PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC)proc((const GLubyte*)"glGetNamedFramebufferAttachmentParameterivEXT")) != nullptr) || r;
    r = ((__glGetNamedFramebufferParameterivEXT = (PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC)proc((const GLubyte*)"glGetNamedFramebufferParameterivEXT")) != nullptr) || r;
    r = ((__glGetNamedProgramLocalParameterIivEXT = (PFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC)proc((const GLubyte*)"glGetNamedProgramLocalParameterIivEXT")) != nullptr) || r;
    r = ((__glGetNamedProgramLocalParameterIuivEXT = (PFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC)proc((const GLubyte*)"glGetNamedProgramLocalParameterIuivEXT")) != nullptr) || r;
    r = ((__glGetNamedProgramLocalParameterdvEXT = (PFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC)proc((const GLubyte*)"glGetNamedProgramLocalParameterdvEXT")) != nullptr) || r;
    r = ((__glGetNamedProgramLocalParameterfvEXT = (PFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC)proc((const GLubyte*)"glGetNamedProgramLocalParameterfvEXT")) != nullptr) || r;
    r = ((__glGetNamedProgramStringEXT = (PFNGLGETNAMEDPROGRAMSTRINGEXTPROC)proc((const GLubyte*)"glGetNamedProgramStringEXT")) != nullptr) || r;
    r = ((__glGetNamedProgramivEXT = (PFNGLGETNAMEDPROGRAMIVEXTPROC)proc((const GLubyte*)"glGetNamedProgramivEXT")) != nullptr) || r;
    r = ((__glGetNamedRenderbufferParameterivEXT = (PFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC)proc((const GLubyte*)"glGetNamedRenderbufferParameterivEXT")) != nullptr) || r;
    r = ((__glGetPointerIndexedvEXT = (PFNGLGETPOINTERINDEXEDVEXTPROC)proc((const GLubyte*)"glGetPointerIndexedvEXT")) != nullptr) || r;
    r = ((__glGetPointeri_vEXT = (PFNGLGETPOINTERI_VEXTPROC)proc((const GLubyte*)"glGetPointeri_vEXT")) != nullptr) || r;
    r = ((__glGetTextureImageEXT = (PFNGLGETTEXTUREIMAGEEXTPROC)proc((const GLubyte*)"glGetTextureImageEXT")) != nullptr) || r;
    r = ((__glGetTextureLevelParameterfvEXT = (PFNGLGETTEXTURELEVELPARAMETERFVEXTPROC)proc((const GLubyte*)"glGetTextureLevelParameterfvEXT")) != nullptr) || r;
    r = ((__glGetTextureLevelParameterivEXT = (PFNGLGETTEXTURELEVELPARAMETERIVEXTPROC)proc((const GLubyte*)"glGetTextureLevelParameterivEXT")) != nullptr) || r;
    r = ((__glGetTextureParameterIivEXT = (PFNGLGETTEXTUREPARAMETERIIVEXTPROC)proc((const GLubyte*)"glGetTextureParameterIivEXT")) != nullptr) || r;
    r = ((__glGetTextureParameterIuivEXT = (PFNGLGETTEXTUREPARAMETERIUIVEXTPROC)proc((const GLubyte*)"glGetTextureParameterIuivEXT")) != nullptr) || r;
    r = ((__glGetTextureParameterfvEXT = (PFNGLGETTEXTUREPARAMETERFVEXTPROC)proc((const GLubyte*)"glGetTextureParameterfvEXT")) != nullptr) || r;
    r = ((__glGetTextureParameterivEXT = (PFNGLGETTEXTUREPARAMETERIVEXTPROC)proc((const GLubyte*)"glGetTextureParameterivEXT")) != nullptr) || r;
    r = ((__glGetVertexArrayIntegeri_vEXT = (PFNGLGETVERTEXARRAYINTEGERI_VEXTPROC)proc((const GLubyte*)"glGetVertexArrayIntegeri_vEXT")) != nullptr) || r;
    r = ((__glGetVertexArrayIntegervEXT = (PFNGLGETVERTEXARRAYINTEGERVEXTPROC)proc((const GLubyte*)"glGetVertexArrayIntegervEXT")) != nullptr) || r;
    r = ((__glGetVertexArrayPointeri_vEXT = (PFNGLGETVERTEXARRAYPOINTERI_VEXTPROC)proc((const GLubyte*)"glGetVertexArrayPointeri_vEXT")) != nullptr) || r;
    r = ((__glGetVertexArrayPointervEXT = (PFNGLGETVERTEXARRAYPOINTERVEXTPROC)proc((const GLubyte*)"glGetVertexArrayPointervEXT")) != nullptr) || r;
    r = ((__glIsEnabledIndexedEXT = (PFNGLISENABLEDINDEXEDEXTPROC)proc((const GLubyte*)"glIsEnabledIndexedEXT")) != nullptr) || r;
    r = ((__glMapNamedBufferEXT = (PFNGLMAPNAMEDBUFFEREXTPROC)proc((const GLubyte*)"glMapNamedBufferEXT")) != nullptr) || r;
    r = ((__glMapNamedBufferRangeEXT = (PFNGLMAPNAMEDBUFFERRANGEEXTPROC)proc((const GLubyte*)"glMapNamedBufferRangeEXT")) != nullptr) || r;
    r = ((__glMatrixFrustumEXT = (PFNGLMATRIXFRUSTUMEXTPROC)proc((const GLubyte*)"glMatrixFrustumEXT")) != nullptr) || r;
    r = ((__glMatrixLoadIdentityEXT = (PFNGLMATRIXLOADIDENTITYEXTPROC)proc((const GLubyte*)"glMatrixLoadIdentityEXT")) != nullptr) || r;
    r = ((__glMatrixLoadTransposedEXT = (PFNGLMATRIXLOADTRANSPOSEDEXTPROC)proc((const GLubyte*)"glMatrixLoadTransposedEXT")) != nullptr) || r;
    r = ((__glMatrixLoadTransposefEXT = (PFNGLMATRIXLOADTRANSPOSEFEXTPROC)proc((const GLubyte*)"glMatrixLoadTransposefEXT")) != nullptr) || r;
    r = ((__glMatrixLoaddEXT = (PFNGLMATRIXLOADDEXTPROC)proc((const GLubyte*)"glMatrixLoaddEXT")) != nullptr) || r;
    r = ((__glMatrixLoadfEXT = (PFNGLMATRIXLOADFEXTPROC)proc((const GLubyte*)"glMatrixLoadfEXT")) != nullptr) || r;
    r = ((__glMatrixMultTransposedEXT = (PFNGLMATRIXMULTTRANSPOSEDEXTPROC)proc((const GLubyte*)"glMatrixMultTransposedEXT")) != nullptr) || r;
    r = ((__glMatrixMultTransposefEXT = (PFNGLMATRIXMULTTRANSPOSEFEXTPROC)proc((const GLubyte*)"glMatrixMultTransposefEXT")) != nullptr) || r;
    r = ((__glMatrixMultdEXT = (PFNGLMATRIXMULTDEXTPROC)proc((const GLubyte*)"glMatrixMultdEXT")) != nullptr) || r;
    r = ((__glMatrixMultfEXT = (PFNGLMATRIXMULTFEXTPROC)proc((const GLubyte*)"glMatrixMultfEXT")) != nullptr) || r;
    r = ((__glMatrixOrthoEXT = (PFNGLMATRIXORTHOEXTPROC)proc((const GLubyte*)"glMatrixOrthoEXT")) != nullptr) || r;
    r = ((__glMatrixPopEXT = (PFNGLMATRIXPOPEXTPROC)proc((const GLubyte*)"glMatrixPopEXT")) != nullptr) || r;
    r = ((__glMatrixPushEXT = (PFNGLMATRIXPUSHEXTPROC)proc((const GLubyte*)"glMatrixPushEXT")) != nullptr) || r;
    r = ((__glMatrixRotatedEXT = (PFNGLMATRIXROTATEDEXTPROC)proc((const GLubyte*)"glMatrixRotatedEXT")) != nullptr) || r;
    r = ((__glMatrixRotatefEXT = (PFNGLMATRIXROTATEFEXTPROC)proc((const GLubyte*)"glMatrixRotatefEXT")) != nullptr) || r;
    r = ((__glMatrixScaledEXT = (PFNGLMATRIXSCALEDEXTPROC)proc((const GLubyte*)"glMatrixScaledEXT")) != nullptr) || r;
    r = ((__glMatrixScalefEXT = (PFNGLMATRIXSCALEFEXTPROC)proc((const GLubyte*)"glMatrixScalefEXT")) != nullptr) || r;
    r = ((__glMatrixTranslatedEXT = (PFNGLMATRIXTRANSLATEDEXTPROC)proc((const GLubyte*)"glMatrixTranslatedEXT")) != nullptr) || r;
    r = ((__glMatrixTranslatefEXT = (PFNGLMATRIXTRANSLATEFEXTPROC)proc((const GLubyte*)"glMatrixTranslatefEXT")) != nullptr) || r;
    r = ((__glMultiTexBufferEXT = (PFNGLMULTITEXBUFFEREXTPROC)proc((const GLubyte*)"glMultiTexBufferEXT")) != nullptr) || r;
    r = ((__glMultiTexCoordPointerEXT = (PFNGLMULTITEXCOORDPOINTEREXTPROC)proc((const GLubyte*)"glMultiTexCoordPointerEXT")) != nullptr) || r;
    r = ((__glMultiTexEnvfEXT = (PFNGLMULTITEXENVFEXTPROC)proc((const GLubyte*)"glMultiTexEnvfEXT")) != nullptr) || r;
    r = ((__glMultiTexEnvfvEXT = (PFNGLMULTITEXENVFVEXTPROC)proc((const GLubyte*)"glMultiTexEnvfvEXT")) != nullptr) || r;
    r = ((__glMultiTexEnviEXT = (PFNGLMULTITEXENVIEXTPROC)proc((const GLubyte*)"glMultiTexEnviEXT")) != nullptr) || r;
    r = ((__glMultiTexEnvivEXT = (PFNGLMULTITEXENVIVEXTPROC)proc((const GLubyte*)"glMultiTexEnvivEXT")) != nullptr) || r;
    r = ((__glMultiTexGendEXT = (PFNGLMULTITEXGENDEXTPROC)proc((const GLubyte*)"glMultiTexGendEXT")) != nullptr) || r;
    r = ((__glMultiTexGendvEXT = (PFNGLMULTITEXGENDVEXTPROC)proc((const GLubyte*)"glMultiTexGendvEXT")) != nullptr) || r;
    r = ((__glMultiTexGenfEXT = (PFNGLMULTITEXGENFEXTPROC)proc((const GLubyte*)"glMultiTexGenfEXT")) != nullptr) || r;
    r = ((__glMultiTexGenfvEXT = (PFNGLMULTITEXGENFVEXTPROC)proc((const GLubyte*)"glMultiTexGenfvEXT")) != nullptr) || r;
    r = ((__glMultiTexGeniEXT = (PFNGLMULTITEXGENIEXTPROC)proc((const GLubyte*)"glMultiTexGeniEXT")) != nullptr) || r;
    r = ((__glMultiTexGenivEXT = (PFNGLMULTITEXGENIVEXTPROC)proc((const GLubyte*)"glMultiTexGenivEXT")) != nullptr) || r;
    r = ((__glMultiTexImage1DEXT = (PFNGLMULTITEXIMAGE1DEXTPROC)proc((const GLubyte*)"glMultiTexImage1DEXT")) != nullptr) || r;
    r = ((__glMultiTexImage2DEXT = (PFNGLMULTITEXIMAGE2DEXTPROC)proc((const GLubyte*)"glMultiTexImage2DEXT")) != nullptr) || r;
    r = ((__glMultiTexImage3DEXT = (PFNGLMULTITEXIMAGE3DEXTPROC)proc((const GLubyte*)"glMultiTexImage3DEXT")) != nullptr) || r;
    r = ((__glMultiTexParameterIivEXT = (PFNGLMULTITEXPARAMETERIIVEXTPROC)proc((const GLubyte*)"glMultiTexParameterIivEXT")) != nullptr) || r;
    r = ((__glMultiTexParameterIuivEXT = (PFNGLMULTITEXPARAMETERIUIVEXTPROC)proc((const GLubyte*)"glMultiTexParameterIuivEXT")) != nullptr) || r;
    r = ((__glMultiTexParameterfEXT = (PFNGLMULTITEXPARAMETERFEXTPROC)proc((const GLubyte*)"glMultiTexParameterfEXT")) != nullptr) || r;
    r = ((__glMultiTexParameterfvEXT = (PFNGLMULTITEXPARAMETERFVEXTPROC)proc((const GLubyte*)"glMultiTexParameterfvEXT")) != nullptr) || r;
    r = ((__glMultiTexParameteriEXT = (PFNGLMULTITEXPARAMETERIEXTPROC)proc((const GLubyte*)"glMultiTexParameteriEXT")) != nullptr) || r;
    r = ((__glMultiTexParameterivEXT = (PFNGLMULTITEXPARAMETERIVEXTPROC)proc((const GLubyte*)"glMultiTexParameterivEXT")) != nullptr) || r;
    r = ((__glMultiTexRenderbufferEXT = (PFNGLMULTITEXRENDERBUFFEREXTPROC)proc((const GLubyte*)"glMultiTexRenderbufferEXT")) != nullptr) || r;
    r = ((__glMultiTexSubImage1DEXT = (PFNGLMULTITEXSUBIMAGE1DEXTPROC)proc((const GLubyte*)"glMultiTexSubImage1DEXT")) != nullptr) || r;
    r = ((__glMultiTexSubImage2DEXT = (PFNGLMULTITEXSUBIMAGE2DEXTPROC)proc((const GLubyte*)"glMultiTexSubImage2DEXT")) != nullptr) || r;
    r = ((__glMultiTexSubImage3DEXT = (PFNGLMULTITEXSUBIMAGE3DEXTPROC)proc((const GLubyte*)"glMultiTexSubImage3DEXT")) != nullptr) || r;
    r = ((__glNamedBufferDataEXT = (PFNGLNAMEDBUFFERDATAEXTPROC)proc((const GLubyte*)"glNamedBufferDataEXT")) != nullptr) || r;
    r = ((__glNamedBufferStorageEXT = (PFNGLNAMEDBUFFERSTORAGEEXTPROC)proc((const GLubyte*)"glNamedBufferStorageEXT")) != nullptr) || r;
    r = ((__glNamedBufferSubDataEXT = (PFNGLNAMEDBUFFERSUBDATAEXTPROC)proc((const GLubyte*)"glNamedBufferSubDataEXT")) != nullptr) || r;
    r = ((__glNamedCopyBufferSubDataEXT = (PFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC)proc((const GLubyte*)"glNamedCopyBufferSubDataEXT")) != nullptr) || r;
    r = ((__glNamedFramebufferParameteriEXT = (PFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC)proc((const GLubyte*)"glNamedFramebufferParameteriEXT")) != nullptr) || r;
    r = ((__glNamedFramebufferRenderbufferEXT = (PFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC)proc((const GLubyte*)"glNamedFramebufferRenderbufferEXT")) != nullptr) || r;
    r = ((__glNamedFramebufferTexture1DEXT = (PFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC)proc((const GLubyte*)"glNamedFramebufferTexture1DEXT")) != nullptr) || r;
    r = ((__glNamedFramebufferTexture2DEXT = (PFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC)proc((const GLubyte*)"glNamedFramebufferTexture2DEXT")) != nullptr) || r;
    r = ((__glNamedFramebufferTexture3DEXT = (PFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC)proc((const GLubyte*)"glNamedFramebufferTexture3DEXT")) != nullptr) || r;
    r = ((__glNamedFramebufferTextureEXT = (PFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC)proc((const GLubyte*)"glNamedFramebufferTextureEXT")) != nullptr) || r;
    r = ((__glNamedFramebufferTextureFaceEXT = (PFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC)proc((const GLubyte*)"glNamedFramebufferTextureFaceEXT")) != nullptr) || r;
    r = ((__glNamedFramebufferTextureLayerEXT = (PFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC)proc((const GLubyte*)"glNamedFramebufferTextureLayerEXT")) != nullptr) || r;
    r = ((__glNamedProgramLocalParameter4dEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC)proc((const GLubyte*)"glNamedProgramLocalParameter4dEXT")) != nullptr) || r;
    r = ((__glNamedProgramLocalParameter4dvEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC)proc((const GLubyte*)"glNamedProgramLocalParameter4dvEXT")) != nullptr) || r;
    r = ((__glNamedProgramLocalParameter4fEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC)proc((const GLubyte*)"glNamedProgramLocalParameter4fEXT")) != nullptr) || r;
    r = ((__glNamedProgramLocalParameter4fvEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC)proc((const GLubyte*)"glNamedProgramLocalParameter4fvEXT")) != nullptr) || r;
    r = ((__glNamedProgramLocalParameterI4iEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC)proc((const GLubyte*)"glNamedProgramLocalParameterI4iEXT")) != nullptr) || r;
    r = ((__glNamedProgramLocalParameterI4ivEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC)proc((const GLubyte*)"glNamedProgramLocalParameterI4ivEXT")) != nullptr) || r;
    r = ((__glNamedProgramLocalParameterI4uiEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC)proc((const GLubyte*)"glNamedProgramLocalParameterI4uiEXT")) != nullptr) || r;
    r = ((__glNamedProgramLocalParameterI4uivEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC)proc((const GLubyte*)"glNamedProgramLocalParameterI4uivEXT")) != nullptr) || r;
    r = ((__glNamedProgramLocalParameters4fvEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC)proc((const GLubyte*)"glNamedProgramLocalParameters4fvEXT")) != nullptr) || r;
    r = ((__glNamedProgramLocalParametersI4ivEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC)proc((const GLubyte*)"glNamedProgramLocalParametersI4ivEXT")) != nullptr) || r;
    r = ((__glNamedProgramLocalParametersI4uivEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC)proc((const GLubyte*)"glNamedProgramLocalParametersI4uivEXT")) != nullptr) || r;
    r = ((__glNamedProgramStringEXT = (PFNGLNAMEDPROGRAMSTRINGEXTPROC)proc((const GLubyte*)"glNamedProgramStringEXT")) != nullptr) || r;
    r = ((__glNamedRenderbufferStorageEXT = (PFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC)proc((const GLubyte*)"glNamedRenderbufferStorageEXT")) != nullptr) || r;
    r = ((__glNamedRenderbufferStorageMultisampleCoverageEXT = (PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC)proc((const GLubyte*)"glNamedRenderbufferStorageMultisampleCoverageEXT")) != nullptr) || r;
    r = ((__glNamedRenderbufferStorageMultisampleEXT = (PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC)proc((const GLubyte*)"glNamedRenderbufferStorageMultisampleEXT")) != nullptr) || r;
    r = ((__glProgramUniform1dEXT = (PFNGLPROGRAMUNIFORM1DEXTPROC)proc((const GLubyte*)"glProgramUniform1dEXT")) != nullptr) || r;
    r = ((__glProgramUniform1dvEXT = (PFNGLPROGRAMUNIFORM1DVEXTPROC)proc((const GLubyte*)"glProgramUniform1dvEXT")) != nullptr) || r;
    r = ((__glProgramUniform1fEXT = (PFNGLPROGRAMUNIFORM1FEXTPROC)proc((const GLubyte*)"glProgramUniform1fEXT")) != nullptr) || r;
    r = ((__glProgramUniform1fvEXT = (PFNGLPROGRAMUNIFORM1FVEXTPROC)proc((const GLubyte*)"glProgramUniform1fvEXT")) != nullptr) || r;
    r = ((__glProgramUniform1iEXT = (PFNGLPROGRAMUNIFORM1IEXTPROC)proc((const GLubyte*)"glProgramUniform1iEXT")) != nullptr) || r;
    r = ((__glProgramUniform1ivEXT = (PFNGLPROGRAMUNIFORM1IVEXTPROC)proc((const GLubyte*)"glProgramUniform1ivEXT")) != nullptr) || r;
    r = ((__glProgramUniform1uiEXT = (PFNGLPROGRAMUNIFORM1UIEXTPROC)proc((const GLubyte*)"glProgramUniform1uiEXT")) != nullptr) || r;
    r = ((__glProgramUniform1uivEXT = (PFNGLPROGRAMUNIFORM1UIVEXTPROC)proc((const GLubyte*)"glProgramUniform1uivEXT")) != nullptr) || r;
    r = ((__glProgramUniform2dEXT = (PFNGLPROGRAMUNIFORM2DEXTPROC)proc((const GLubyte*)"glProgramUniform2dEXT")) != nullptr) || r;
    r = ((__glProgramUniform2dvEXT = (PFNGLPROGRAMUNIFORM2DVEXTPROC)proc((const GLubyte*)"glProgramUniform2dvEXT")) != nullptr) || r;
    r = ((__glProgramUniform2fEXT = (PFNGLPROGRAMUNIFORM2FEXTPROC)proc((const GLubyte*)"glProgramUniform2fEXT")) != nullptr) || r;
    r = ((__glProgramUniform2fvEXT = (PFNGLPROGRAMUNIFORM2FVEXTPROC)proc((const GLubyte*)"glProgramUniform2fvEXT")) != nullptr) || r;
    r = ((__glProgramUniform2iEXT = (PFNGLPROGRAMUNIFORM2IEXTPROC)proc((const GLubyte*)"glProgramUniform2iEXT")) != nullptr) || r;
    r = ((__glProgramUniform2ivEXT = (PFNGLPROGRAMUNIFORM2IVEXTPROC)proc((const GLubyte*)"glProgramUniform2ivEXT")) != nullptr) || r;
    r = ((__glProgramUniform2uiEXT = (PFNGLPROGRAMUNIFORM2UIEXTPROC)proc((const GLubyte*)"glProgramUniform2uiEXT")) != nullptr) || r;
    r = ((__glProgramUniform2uivEXT = (PFNGLPROGRAMUNIFORM2UIVEXTPROC)proc((const GLubyte*)"glProgramUniform2uivEXT")) != nullptr) || r;
    r = ((__glProgramUniform3dEXT = (PFNGLPROGRAMUNIFORM3DEXTPROC)proc((const GLubyte*)"glProgramUniform3dEXT")) != nullptr) || r;
    r = ((__glProgramUniform3dvEXT = (PFNGLPROGRAMUNIFORM3DVEXTPROC)proc((const GLubyte*)"glProgramUniform3dvEXT")) != nullptr) || r;
    r = ((__glProgramUniform3fEXT = (PFNGLPROGRAMUNIFORM3FEXTPROC)proc((const GLubyte*)"glProgramUniform3fEXT")) != nullptr) || r;
    r = ((__glProgramUniform3fvEXT = (PFNGLPROGRAMUNIFORM3FVEXTPROC)proc((const GLubyte*)"glProgramUniform3fvEXT")) != nullptr) || r;
    r = ((__glProgramUniform3iEXT = (PFNGLPROGRAMUNIFORM3IEXTPROC)proc((const GLubyte*)"glProgramUniform3iEXT")) != nullptr) || r;
    r = ((__glProgramUniform3ivEXT = (PFNGLPROGRAMUNIFORM3IVEXTPROC)proc((const GLubyte*)"glProgramUniform3ivEXT")) != nullptr) || r;
    r = ((__glProgramUniform3uiEXT = (PFNGLPROGRAMUNIFORM3UIEXTPROC)proc((const GLubyte*)"glProgramUniform3uiEXT")) != nullptr) || r;
    r = ((__glProgramUniform3uivEXT = (PFNGLPROGRAMUNIFORM3UIVEXTPROC)proc((const GLubyte*)"glProgramUniform3uivEXT")) != nullptr) || r;
    r = ((__glProgramUniform4dEXT = (PFNGLPROGRAMUNIFORM4DEXTPROC)proc((const GLubyte*)"glProgramUniform4dEXT")) != nullptr) || r;
    r = ((__glProgramUniform4dvEXT = (PFNGLPROGRAMUNIFORM4DVEXTPROC)proc((const GLubyte*)"glProgramUniform4dvEXT")) != nullptr) || r;
    r = ((__glProgramUniform4fEXT = (PFNGLPROGRAMUNIFORM4FEXTPROC)proc((const GLubyte*)"glProgramUniform4fEXT")) != nullptr) || r;
    r = ((__glProgramUniform4fvEXT = (PFNGLPROGRAMUNIFORM4FVEXTPROC)proc((const GLubyte*)"glProgramUniform4fvEXT")) != nullptr) || r;
    r = ((__glProgramUniform4iEXT = (PFNGLPROGRAMUNIFORM4IEXTPROC)proc((const GLubyte*)"glProgramUniform4iEXT")) != nullptr) || r;
    r = ((__glProgramUniform4ivEXT = (PFNGLPROGRAMUNIFORM4IVEXTPROC)proc((const GLubyte*)"glProgramUniform4ivEXT")) != nullptr) || r;
    r = ((__glProgramUniform4uiEXT = (PFNGLPROGRAMUNIFORM4UIEXTPROC)proc((const GLubyte*)"glProgramUniform4uiEXT")) != nullptr) || r;
    r = ((__glProgramUniform4uivEXT = (PFNGLPROGRAMUNIFORM4UIVEXTPROC)proc((const GLubyte*)"glProgramUniform4uivEXT")) != nullptr) || r;
    r = ((__glProgramUniformMatrix2dvEXT = (PFNGLPROGRAMUNIFORMMATRIX2DVEXTPROC)proc((const GLubyte*)"glProgramUniformMatrix2dvEXT")) != nullptr) || r;
    r = ((__glProgramUniformMatrix2fvEXT = (PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC)proc((const GLubyte*)"glProgramUniformMatrix2fvEXT")) != nullptr) || r;
    r = ((__glProgramUniformMatrix2x3dvEXT = (PFNGLPROGRAMUNIFORMMATRIX2X3DVEXTPROC)proc((const GLubyte*)"glProgramUniformMatrix2x3dvEXT")) != nullptr) || r;
    r = ((__glProgramUniformMatrix2x3fvEXT = (PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC)proc((const GLubyte*)"glProgramUniformMatrix2x3fvEXT")) != nullptr) || r;
    r = ((__glProgramUniformMatrix2x4dvEXT = (PFNGLPROGRAMUNIFORMMATRIX2X4DVEXTPROC)proc((const GLubyte*)"glProgramUniformMatrix2x4dvEXT")) != nullptr) || r;
    r = ((__glProgramUniformMatrix2x4fvEXT = (PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC)proc((const GLubyte*)"glProgramUniformMatrix2x4fvEXT")) != nullptr) || r;
    r = ((__glProgramUniformMatrix3dvEXT = (PFNGLPROGRAMUNIFORMMATRIX3DVEXTPROC)proc((const GLubyte*)"glProgramUniformMatrix3dvEXT")) != nullptr) || r;
    r = ((__glProgramUniformMatrix3fvEXT = (PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC)proc((const GLubyte*)"glProgramUniformMatrix3fvEXT")) != nullptr) || r;
    r = ((__glProgramUniformMatrix3x2dvEXT = (PFNGLPROGRAMUNIFORMMATRIX3X2DVEXTPROC)proc((const GLubyte*)"glProgramUniformMatrix3x2dvEXT")) != nullptr) || r;
    r = ((__glProgramUniformMatrix3x2fvEXT = (PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC)proc((const GLubyte*)"glProgramUniformMatrix3x2fvEXT")) != nullptr) || r;
    r = ((__glProgramUniformMatrix3x4dvEXT = (PFNGLPROGRAMUNIFORMMATRIX3X4DVEXTPROC)proc((const GLubyte*)"glProgramUniformMatrix3x4dvEXT")) != nullptr) || r;
    r = ((__glProgramUniformMatrix3x4fvEXT = (PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC)proc((const GLubyte*)"glProgramUniformMatrix3x4fvEXT")) != nullptr) || r;
    r = ((__glProgramUniformMatrix4dvEXT = (PFNGLPROGRAMUNIFORMMATRIX4DVEXTPROC)proc((const GLubyte*)"glProgramUniformMatrix4dvEXT")) != nullptr) || r;
    r = ((__glProgramUniformMatrix4fvEXT = (PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC)proc((const GLubyte*)"glProgramUniformMatrix4fvEXT")) != nullptr) || r;
    r = ((__glProgramUniformMatrix4x2dvEXT = (PFNGLPROGRAMUNIFORMMATRIX4X2DVEXTPROC)proc((const GLubyte*)"glProgramUniformMatrix4x2dvEXT")) != nullptr) || r;
    r = ((__glProgramUniformMatrix4x2fvEXT = (PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC)proc((const GLubyte*)"glProgramUniformMatrix4x2fvEXT")) != nullptr) || r;
    r = ((__glProgramUniformMatrix4x3dvEXT = (PFNGLPROGRAMUNIFORMMATRIX4X3DVEXTPROC)proc((const GLubyte*)"glProgramUniformMatrix4x3dvEXT")) != nullptr) || r;
    r = ((__glProgramUniformMatrix4x3fvEXT = (PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC)proc((const GLubyte*)"glProgramUniformMatrix4x3fvEXT")) != nullptr) || r;
    r = ((__glPushClientAttribDefaultEXT = (PFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC)proc((const GLubyte*)"glPushClientAttribDefaultEXT")) != nullptr) || r;
    r = ((__glTextureBufferEXT = (PFNGLTEXTUREBUFFEREXTPROC)proc((const GLubyte*)"glTextureBufferEXT")) != nullptr) || r;
    r = ((__glTextureBufferRangeEXT = (PFNGLTEXTUREBUFFERRANGEEXTPROC)proc((const GLubyte*)"glTextureBufferRangeEXT")) != nullptr) || r;
    r = ((__glTextureImage1DEXT = (PFNGLTEXTUREIMAGE1DEXTPROC)proc((const GLubyte*)"glTextureImage1DEXT")) != nullptr) || r;
    r = ((__glTextureImage2DEXT = (PFNGLTEXTUREIMAGE2DEXTPROC)proc((const GLubyte*)"glTextureImage2DEXT")) != nullptr) || r;
    r = ((__glTextureImage3DEXT = (PFNGLTEXTUREIMAGE3DEXTPROC)proc((const GLubyte*)"glTextureImage3DEXT")) != nullptr) || r;
    r = ((__glTexturePageCommitmentEXT = (PFNGLTEXTUREPAGECOMMITMENTEXTPROC)proc((const GLubyte*)"glTexturePageCommitmentEXT")) != nullptr) || r;
    r = ((__glTextureParameterIivEXT = (PFNGLTEXTUREPARAMETERIIVEXTPROC)proc((const GLubyte*)"glTextureParameterIivEXT")) != nullptr) || r;
    r = ((__glTextureParameterIuivEXT = (PFNGLTEXTUREPARAMETERIUIVEXTPROC)proc((const GLubyte*)"glTextureParameterIuivEXT")) != nullptr) || r;
    r = ((__glTextureParameterfEXT = (PFNGLTEXTUREPARAMETERFEXTPROC)proc((const GLubyte*)"glTextureParameterfEXT")) != nullptr) || r;
    r = ((__glTextureParameterfvEXT = (PFNGLTEXTUREPARAMETERFVEXTPROC)proc((const GLubyte*)"glTextureParameterfvEXT")) != nullptr) || r;
    r = ((__glTextureParameteriEXT = (PFNGLTEXTUREPARAMETERIEXTPROC)proc((const GLubyte*)"glTextureParameteriEXT")) != nullptr) || r;
    r = ((__glTextureParameterivEXT = (PFNGLTEXTUREPARAMETERIVEXTPROC)proc((const GLubyte*)"glTextureParameterivEXT")) != nullptr) || r;
    r = ((__glTextureRenderbufferEXT = (PFNGLTEXTURERENDERBUFFEREXTPROC)proc((const GLubyte*)"glTextureRenderbufferEXT")) != nullptr) || r;
    r = ((__glTextureStorage1DEXT = (PFNGLTEXTURESTORAGE1DEXTPROC)proc((const GLubyte*)"glTextureStorage1DEXT")) != nullptr) || r;
    r = ((__glTextureStorage2DEXT = (PFNGLTEXTURESTORAGE2DEXTPROC)proc((const GLubyte*)"glTextureStorage2DEXT")) != nullptr) || r;
    r = ((__glTextureStorage2DMultisampleEXT = (PFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC)proc((const GLubyte*)"glTextureStorage2DMultisampleEXT")) != nullptr) || r;
    r = ((__glTextureStorage3DEXT = (PFNGLTEXTURESTORAGE3DEXTPROC)proc((const GLubyte*)"glTextureStorage3DEXT")) != nullptr) || r;
    r = ((__glTextureStorage3DMultisampleEXT = (PFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC)proc((const GLubyte*)"glTextureStorage3DMultisampleEXT")) != nullptr) || r;
    r = ((__glTextureSubImage1DEXT = (PFNGLTEXTURESUBIMAGE1DEXTPROC)proc((const GLubyte*)"glTextureSubImage1DEXT")) != nullptr) || r;
    r = ((__glTextureSubImage2DEXT = (PFNGLTEXTURESUBIMAGE2DEXTPROC)proc((const GLubyte*)"glTextureSubImage2DEXT")) != nullptr) || r;
    r = ((__glTextureSubImage3DEXT = (PFNGLTEXTURESUBIMAGE3DEXTPROC)proc((const GLubyte*)"glTextureSubImage3DEXT")) != nullptr) || r;
    r = ((__glUnmapNamedBufferEXT = (PFNGLUNMAPNAMEDBUFFEREXTPROC)proc((const GLubyte*)"glUnmapNamedBufferEXT")) != nullptr) || r;
    r = ((__glVertexArrayBindVertexBufferEXT = (PFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC)proc((const GLubyte*)"glVertexArrayBindVertexBufferEXT")) != nullptr) || r;
    r = ((__glVertexArrayColorOffsetEXT = (PFNGLVERTEXARRAYCOLOROFFSETEXTPROC)proc((const GLubyte*)"glVertexArrayColorOffsetEXT")) != nullptr) || r;
    r = ((__glVertexArrayEdgeFlagOffsetEXT = (PFNGLVERTEXARRAYEDGEFLAGOFFSETEXTPROC)proc((const GLubyte*)"glVertexArrayEdgeFlagOffsetEXT")) != nullptr) || r;
    r = ((__glVertexArrayFogCoordOffsetEXT = (PFNGLVERTEXARRAYFOGCOORDOFFSETEXTPROC)proc((const GLubyte*)"glVertexArrayFogCoordOffsetEXT")) != nullptr) || r;
    r = ((__glVertexArrayIndexOffsetEXT = (PFNGLVERTEXARRAYINDEXOFFSETEXTPROC)proc((const GLubyte*)"glVertexArrayIndexOffsetEXT")) != nullptr) || r;
    r = ((__glVertexArrayMultiTexCoordOffsetEXT = (PFNGLVERTEXARRAYMULTITEXCOORDOFFSETEXTPROC)proc((const GLubyte*)"glVertexArrayMultiTexCoordOffsetEXT")) != nullptr) || r;
    r = ((__glVertexArrayNormalOffsetEXT = (PFNGLVERTEXARRAYNORMALOFFSETEXTPROC)proc((const GLubyte*)"glVertexArrayNormalOffsetEXT")) != nullptr) || r;
    r = ((__glVertexArraySecondaryColorOffsetEXT = (PFNGLVERTEXARRAYSECONDARYCOLOROFFSETEXTPROC)proc((const GLubyte*)"glVertexArraySecondaryColorOffsetEXT")) != nullptr) || r;
    r = ((__glVertexArrayTexCoordOffsetEXT = (PFNGLVERTEXARRAYTEXCOORDOFFSETEXTPROC)proc((const GLubyte*)"glVertexArrayTexCoordOffsetEXT")) != nullptr) || r;
    r = ((__glVertexArrayVertexAttribBindingEXT = (PFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC)proc((const GLubyte*)"glVertexArrayVertexAttribBindingEXT")) != nullptr) || r;
    r = ((__glVertexArrayVertexAttribDivisorEXT = (PFNGLVERTEXARRAYVERTEXATTRIBDIVISOREXTPROC)proc((const GLubyte*)"glVertexArrayVertexAttribDivisorEXT")) != nullptr) || r;
    r = ((__glVertexArrayVertexAttribFormatEXT = (PFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC)proc((const GLubyte*)"glVertexArrayVertexAttribFormatEXT")) != nullptr) || r;
    r = ((__glVertexArrayVertexAttribIFormatEXT = (PFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC)proc((const GLubyte*)"glVertexArrayVertexAttribIFormatEXT")) != nullptr) || r;
    r = ((__glVertexArrayVertexAttribIOffsetEXT = (PFNGLVERTEXARRAYVERTEXATTRIBIOFFSETEXTPROC)proc((const GLubyte*)"glVertexArrayVertexAttribIOffsetEXT")) != nullptr) || r;
    r = ((__glVertexArrayVertexAttribLFormatEXT = (PFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC)proc((const GLubyte*)"glVertexArrayVertexAttribLFormatEXT")) != nullptr) || r;
    r = ((__glVertexArrayVertexAttribLOffsetEXT = (PFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC)proc((const GLubyte*)"glVertexArrayVertexAttribLOffsetEXT")) != nullptr) || r;
    r = ((__glVertexArrayVertexAttribOffsetEXT = (PFNGLVERTEXARRAYVERTEXATTRIBOFFSETEXTPROC)proc((const GLubyte*)"glVertexArrayVertexAttribOffsetEXT")) != nullptr) || r;
    r = ((__glVertexArrayVertexBindingDivisorEXT = (PFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC)proc((const GLubyte*)"glVertexArrayVertexBindingDivisorEXT")) != nullptr) || r;
    r = ((__glVertexArrayVertexOffsetEXT = (PFNGLVERTEXARRAYVERTEXOFFSETEXTPROC)proc((const GLubyte*)"glVertexArrayVertexOffsetEXT")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_EXT_direct_state_access = false;
/* GL_EXT_draw_buffers2 */
PFNGLCOLORMASKINDEXEDEXTPROC __glColorMaskIndexedEXT = nullptr; void APIENTRY glColorMaskIndexedEXT (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a) { if (__glColorMaskIndexedEXT != 0) (__glColorMaskIndexedEXT)(index, r, g, b, a);  }
bool __loadGL_EXT_draw_buffers2(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glColorMaskIndexedEXT = (PFNGLCOLORMASKINDEXEDEXTPROC)proc((const GLubyte*)"glColorMaskIndexedEXT")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_EXT_draw_buffers2 = false;
/* GL_EXT_draw_instanced */
PFNGLDRAWARRAYSINSTANCEDEXTPROC __glDrawArraysInstancedEXT = nullptr; void APIENTRY glDrawArraysInstancedEXT (GLenum mode, GLint start, GLsizei count, GLsizei primcount) { if (__glDrawArraysInstancedEXT != 0) (__glDrawArraysInstancedEXT)(mode, start, count, primcount);  }
PFNGLDRAWELEMENTSINSTANCEDEXTPROC __glDrawElementsInstancedEXT = nullptr; void APIENTRY glDrawElementsInstancedEXT (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount) { if (__glDrawElementsInstancedEXT != 0) (__glDrawElementsInstancedEXT)(mode, count, type, indices, primcount);  }
bool __loadGL_EXT_draw_instanced(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glDrawArraysInstancedEXT = (PFNGLDRAWARRAYSINSTANCEDEXTPROC)proc((const GLubyte*)"glDrawArraysInstancedEXT")) != nullptr) || r;
    r = ((__glDrawElementsInstancedEXT = (PFNGLDRAWELEMENTSINSTANCEDEXTPROC)proc((const GLubyte*)"glDrawElementsInstancedEXT")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_EXT_draw_instanced = false;
/* GL_EXT_draw_range_elements */
PFNGLDRAWRANGEELEMENTSEXTPROC __glDrawRangeElementsEXT = nullptr; void APIENTRY glDrawRangeElementsEXT (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices) { if (__glDrawRangeElementsEXT != 0) (__glDrawRangeElementsEXT)(mode, start, end, count, type, indices);  }
bool __loadGL_EXT_draw_range_elements(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glDrawRangeElementsEXT = (PFNGLDRAWRANGEELEMENTSEXTPROC)proc((const GLubyte*)"glDrawRangeElementsEXT")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_EXT_draw_range_elements = false;
/* GL_EXT_fog_coord */
PFNGLFOGCOORDPOINTEREXTPROC __glFogCoordPointerEXT = nullptr; void APIENTRY glFogCoordPointerEXT (GLenum type, GLsizei stride, const void *pointer) { if (__glFogCoordPointerEXT != 0) (__glFogCoordPointerEXT)(type, stride, pointer);  }
PFNGLFOGCOORDDEXTPROC __glFogCoorddEXT = nullptr; void APIENTRY glFogCoorddEXT (GLdouble coord) { if (__glFogCoorddEXT != 0) (__glFogCoorddEXT)(coord);  }
PFNGLFOGCOORDDVEXTPROC __glFogCoorddvEXT = nullptr; void APIENTRY glFogCoorddvEXT (const GLdouble *coord) { if (__glFogCoorddvEXT != 0) (__glFogCoorddvEXT)(coord);  }
PFNGLFOGCOORDFEXTPROC __glFogCoordfEXT = nullptr; void APIENTRY glFogCoordfEXT (GLfloat coord) { if (__glFogCoordfEXT != 0) (__glFogCoordfEXT)(coord);  }
PFNGLFOGCOORDFVEXTPROC __glFogCoordfvEXT = nullptr; void APIENTRY glFogCoordfvEXT (const GLfloat *coord) { if (__glFogCoordfvEXT != 0) (__glFogCoordfvEXT)(coord);  }
bool __loadGL_EXT_fog_coord(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glFogCoordPointerEXT = (PFNGLFOGCOORDPOINTEREXTPROC)proc((const GLubyte*)"glFogCoordPointerEXT")) != nullptr) || r;
    r = ((__glFogCoorddEXT = (PFNGLFOGCOORDDEXTPROC)proc((const GLubyte*)"glFogCoorddEXT")) != nullptr) || r;
    r = ((__glFogCoorddvEXT = (PFNGLFOGCOORDDVEXTPROC)proc((const GLubyte*)"glFogCoorddvEXT")) != nullptr) || r;
    r = ((__glFogCoordfEXT = (PFNGLFOGCOORDFEXTPROC)proc((const GLubyte*)"glFogCoordfEXT")) != nullptr) || r;
    r = ((__glFogCoordfvEXT = (PFNGLFOGCOORDFVEXTPROC)proc((const GLubyte*)"glFogCoordfvEXT")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_EXT_fog_coord = false;
/* GL_EXT_framebuffer_blit */
PFNGLBLITFRAMEBUFFEREXTPROC __glBlitFramebufferEXT = nullptr; void APIENTRY glBlitFramebufferEXT (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) { if (__glBlitFramebufferEXT != 0) (__glBlitFramebufferEXT)(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);  }
bool __loadGL_EXT_framebuffer_blit(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glBlitFramebufferEXT = (PFNGLBLITFRAMEBUFFEREXTPROC)proc((const GLubyte*)"glBlitFramebufferEXT")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_EXT_framebuffer_blit = false;
/* GL_EXT_framebuffer_multisample */
PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC __glRenderbufferStorageMultisampleEXT = nullptr; void APIENTRY glRenderbufferStorageMultisampleEXT (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) { if (__glRenderbufferStorageMultisampleEXT != 0) (__glRenderbufferStorageMultisampleEXT)(target, samples, internalformat, width, height);  }
bool __loadGL_EXT_framebuffer_multisample(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glRenderbufferStorageMultisampleEXT = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC)proc((const GLubyte*)"glRenderbufferStorageMultisampleEXT")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_EXT_framebuffer_multisample = false;
/* GL_EXT_framebuffer_multisample_blit_scaled */
bool __loadGL_EXT_framebuffer_multisample_blit_scaled(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_EXT_framebuffer_multisample_blit_scaled = false;
/* GL_EXT_framebuffer_object */
PFNGLBINDFRAMEBUFFEREXTPROC __glBindFramebufferEXT = nullptr; void APIENTRY glBindFramebufferEXT (GLenum target, GLuint framebuffer) { if (__glBindFramebufferEXT != 0) (__glBindFramebufferEXT)(target, framebuffer);  }
PFNGLBINDRENDERBUFFEREXTPROC __glBindRenderbufferEXT = nullptr; void APIENTRY glBindRenderbufferEXT (GLenum target, GLuint renderbuffer) { if (__glBindRenderbufferEXT != 0) (__glBindRenderbufferEXT)(target, renderbuffer);  }
PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC __glCheckFramebufferStatusEXT = nullptr; GLenum APIENTRY glCheckFramebufferStatusEXT (GLenum target) { if (__glCheckFramebufferStatusEXT != 0) return (__glCheckFramebufferStatusEXT)(target); return 0; }
PFNGLDELETEFRAMEBUFFERSEXTPROC __glDeleteFramebuffersEXT = nullptr; void APIENTRY glDeleteFramebuffersEXT (GLsizei n, const GLuint *framebuffers) { if (__glDeleteFramebuffersEXT != 0) (__glDeleteFramebuffersEXT)(n, framebuffers);  }
PFNGLDELETERENDERBUFFERSEXTPROC __glDeleteRenderbuffersEXT = nullptr; void APIENTRY glDeleteRenderbuffersEXT (GLsizei n, const GLuint *renderbuffers) { if (__glDeleteRenderbuffersEXT != 0) (__glDeleteRenderbuffersEXT)(n, renderbuffers);  }
PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC __glFramebufferRenderbufferEXT = nullptr; void APIENTRY glFramebufferRenderbufferEXT (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) { if (__glFramebufferRenderbufferEXT != 0) (__glFramebufferRenderbufferEXT)(target, attachment, renderbuffertarget, renderbuffer);  }
PFNGLFRAMEBUFFERTEXTURE1DEXTPROC __glFramebufferTexture1DEXT = nullptr; void APIENTRY glFramebufferTexture1DEXT (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) { if (__glFramebufferTexture1DEXT != 0) (__glFramebufferTexture1DEXT)(target, attachment, textarget, texture, level);  }
PFNGLFRAMEBUFFERTEXTURE2DEXTPROC __glFramebufferTexture2DEXT = nullptr; void APIENTRY glFramebufferTexture2DEXT (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) { if (__glFramebufferTexture2DEXT != 0) (__glFramebufferTexture2DEXT)(target, attachment, textarget, texture, level);  }
PFNGLFRAMEBUFFERTEXTURE3DEXTPROC __glFramebufferTexture3DEXT = nullptr; void APIENTRY glFramebufferTexture3DEXT (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset) { if (__glFramebufferTexture3DEXT != 0) (__glFramebufferTexture3DEXT)(target, attachment, textarget, texture, level, zoffset);  }
PFNGLGENFRAMEBUFFERSEXTPROC __glGenFramebuffersEXT = nullptr; void APIENTRY glGenFramebuffersEXT (GLsizei n, GLuint *framebuffers) { if (__glGenFramebuffersEXT != 0) (__glGenFramebuffersEXT)(n, framebuffers);  }
PFNGLGENRENDERBUFFERSEXTPROC __glGenRenderbuffersEXT = nullptr; void APIENTRY glGenRenderbuffersEXT (GLsizei n, GLuint *renderbuffers) { if (__glGenRenderbuffersEXT != 0) (__glGenRenderbuffersEXT)(n, renderbuffers);  }
PFNGLGENERATEMIPMAPEXTPROC __glGenerateMipmapEXT = nullptr; void APIENTRY glGenerateMipmapEXT (GLenum target) { if (__glGenerateMipmapEXT != 0) (__glGenerateMipmapEXT)(target);  }
PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC __glGetFramebufferAttachmentParameterivEXT = nullptr; void APIENTRY glGetFramebufferAttachmentParameterivEXT (GLenum target, GLenum attachment, GLenum pname, GLint *params) { if (__glGetFramebufferAttachmentParameterivEXT != 0) (__glGetFramebufferAttachmentParameterivEXT)(target, attachment, pname, params);  }
PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC __glGetRenderbufferParameterivEXT = nullptr; void APIENTRY glGetRenderbufferParameterivEXT (GLenum target, GLenum pname, GLint *params) { if (__glGetRenderbufferParameterivEXT != 0) (__glGetRenderbufferParameterivEXT)(target, pname, params);  }
PFNGLISFRAMEBUFFEREXTPROC __glIsFramebufferEXT = nullptr; GLboolean APIENTRY glIsFramebufferEXT (GLuint framebuffer) { if (__glIsFramebufferEXT != 0) return (__glIsFramebufferEXT)(framebuffer); return 0; }
PFNGLISRENDERBUFFEREXTPROC __glIsRenderbufferEXT = nullptr; GLboolean APIENTRY glIsRenderbufferEXT (GLuint renderbuffer) { if (__glIsRenderbufferEXT != 0) return (__glIsRenderbufferEXT)(renderbuffer); return 0; }
PFNGLRENDERBUFFERSTORAGEEXTPROC __glRenderbufferStorageEXT = nullptr; void APIENTRY glRenderbufferStorageEXT (GLenum target, GLenum internalformat, GLsizei width, GLsizei height) { if (__glRenderbufferStorageEXT != 0) (__glRenderbufferStorageEXT)(target, internalformat, width, height);  }
bool __loadGL_EXT_framebuffer_object(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glBindFramebufferEXT = (PFNGLBINDFRAMEBUFFEREXTPROC)proc((const GLubyte*)"glBindFramebufferEXT")) != nullptr) || r;
    r = ((__glBindRenderbufferEXT = (PFNGLBINDRENDERBUFFEREXTPROC)proc((const GLubyte*)"glBindRenderbufferEXT")) != nullptr) || r;
    r = ((__glCheckFramebufferStatusEXT = (PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC)proc((const GLubyte*)"glCheckFramebufferStatusEXT")) != nullptr) || r;
    r = ((__glDeleteFramebuffersEXT = (PFNGLDELETEFRAMEBUFFERSEXTPROC)proc((const GLubyte*)"glDeleteFramebuffersEXT")) != nullptr) || r;
    r = ((__glDeleteRenderbuffersEXT = (PFNGLDELETERENDERBUFFERSEXTPROC)proc((const GLubyte*)"glDeleteRenderbuffersEXT")) != nullptr) || r;
    r = ((__glFramebufferRenderbufferEXT = (PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC)proc((const GLubyte*)"glFramebufferRenderbufferEXT")) != nullptr) || r;
    r = ((__glFramebufferTexture1DEXT = (PFNGLFRAMEBUFFERTEXTURE1DEXTPROC)proc((const GLubyte*)"glFramebufferTexture1DEXT")) != nullptr) || r;
    r = ((__glFramebufferTexture2DEXT = (PFNGLFRAMEBUFFERTEXTURE2DEXTPROC)proc((const GLubyte*)"glFramebufferTexture2DEXT")) != nullptr) || r;
    r = ((__glFramebufferTexture3DEXT = (PFNGLFRAMEBUFFERTEXTURE3DEXTPROC)proc((const GLubyte*)"glFramebufferTexture3DEXT")) != nullptr) || r;
    r = ((__glGenFramebuffersEXT = (PFNGLGENFRAMEBUFFERSEXTPROC)proc((const GLubyte*)"glGenFramebuffersEXT")) != nullptr) || r;
    r = ((__glGenRenderbuffersEXT = (PFNGLGENRENDERBUFFERSEXTPROC)proc((const GLubyte*)"glGenRenderbuffersEXT")) != nullptr) || r;
    r = ((__glGenerateMipmapEXT = (PFNGLGENERATEMIPMAPEXTPROC)proc((const GLubyte*)"glGenerateMipmapEXT")) != nullptr) || r;
    r = ((__glGetFramebufferAttachmentParameterivEXT = (PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC)proc((const GLubyte*)"glGetFramebufferAttachmentParameterivEXT")) != nullptr) || r;
    r = ((__glGetRenderbufferParameterivEXT = (PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC)proc((const GLubyte*)"glGetRenderbufferParameterivEXT")) != nullptr) || r;
    r = ((__glIsFramebufferEXT = (PFNGLISFRAMEBUFFEREXTPROC)proc((const GLubyte*)"glIsFramebufferEXT")) != nullptr) || r;
    r = ((__glIsRenderbufferEXT = (PFNGLISRENDERBUFFEREXTPROC)proc((const GLubyte*)"glIsRenderbufferEXT")) != nullptr) || r;
    r = ((__glRenderbufferStorageEXT = (PFNGLRENDERBUFFERSTORAGEEXTPROC)proc((const GLubyte*)"glRenderbufferStorageEXT")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_EXT_framebuffer_object = false;
/* GL_EXT_framebuffer_sRGB */
bool __loadGL_EXT_framebuffer_sRGB(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_EXT_framebuffer_sRGB = false;
/* GL_EXT_geometry_shader4 */
PFNGLPROGRAMPARAMETERIEXTPROC __glProgramParameteriEXT = nullptr; void APIENTRY glProgramParameteriEXT (GLuint program, GLenum pname, GLint value) { if (__glProgramParameteriEXT != 0) (__glProgramParameteriEXT)(program, pname, value);  }
bool __loadGL_EXT_geometry_shader4(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glProgramParameteriEXT = (PFNGLPROGRAMPARAMETERIEXTPROC)proc((const GLubyte*)"glProgramParameteriEXT")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_EXT_geometry_shader4 = false;
/* GL_EXT_gpu_program_parameters */
PFNGLPROGRAMENVPARAMETERS4FVEXTPROC __glProgramEnvParameters4fvEXT = nullptr; void APIENTRY glProgramEnvParameters4fvEXT (GLenum target, GLuint index, GLsizei count, const GLfloat *params) { if (__glProgramEnvParameters4fvEXT != 0) (__glProgramEnvParameters4fvEXT)(target, index, count, params);  }
PFNGLPROGRAMLOCALPARAMETERS4FVEXTPROC __glProgramLocalParameters4fvEXT = nullptr; void APIENTRY glProgramLocalParameters4fvEXT (GLenum target, GLuint index, GLsizei count, const GLfloat *params) { if (__glProgramLocalParameters4fvEXT != 0) (__glProgramLocalParameters4fvEXT)(target, index, count, params);  }
bool __loadGL_EXT_gpu_program_parameters(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glProgramEnvParameters4fvEXT = (PFNGLPROGRAMENVPARAMETERS4FVEXTPROC)proc((const GLubyte*)"glProgramEnvParameters4fvEXT")) != nullptr) || r;
    r = ((__glProgramLocalParameters4fvEXT = (PFNGLPROGRAMLOCALPARAMETERS4FVEXTPROC)proc((const GLubyte*)"glProgramLocalParameters4fvEXT")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_EXT_gpu_program_parameters = false;
/* GL_EXT_gpu_shader4 */
PFNGLBINDFRAGDATALOCATIONEXTPROC __glBindFragDataLocationEXT = nullptr; void APIENTRY glBindFragDataLocationEXT (GLuint program, GLuint color, const GLchar *name) { if (__glBindFragDataLocationEXT != 0) (__glBindFragDataLocationEXT)(program, color, name);  }
PFNGLGETFRAGDATALOCATIONEXTPROC __glGetFragDataLocationEXT = nullptr; GLint APIENTRY glGetFragDataLocationEXT (GLuint program, const GLchar *name) { if (__glGetFragDataLocationEXT != 0) return (__glGetFragDataLocationEXT)(program, name); return 0; }
PFNGLGETUNIFORMUIVEXTPROC __glGetUniformuivEXT = nullptr; void APIENTRY glGetUniformuivEXT (GLuint program, GLint location, GLuint *params) { if (__glGetUniformuivEXT != 0) (__glGetUniformuivEXT)(program, location, params);  }
PFNGLUNIFORM1UIEXTPROC __glUniform1uiEXT = nullptr; void APIENTRY glUniform1uiEXT (GLint location, GLuint v0) { if (__glUniform1uiEXT != 0) (__glUniform1uiEXT)(location, v0);  }
PFNGLUNIFORM1UIVEXTPROC __glUniform1uivEXT = nullptr; void APIENTRY glUniform1uivEXT (GLint location, GLsizei count, const GLuint *value) { if (__glUniform1uivEXT != 0) (__glUniform1uivEXT)(location, count, value);  }
PFNGLUNIFORM2UIEXTPROC __glUniform2uiEXT = nullptr; void APIENTRY glUniform2uiEXT (GLint location, GLuint v0, GLuint v1) { if (__glUniform2uiEXT != 0) (__glUniform2uiEXT)(location, v0, v1);  }
PFNGLUNIFORM2UIVEXTPROC __glUniform2uivEXT = nullptr; void APIENTRY glUniform2uivEXT (GLint location, GLsizei count, const GLuint *value) { if (__glUniform2uivEXT != 0) (__glUniform2uivEXT)(location, count, value);  }
PFNGLUNIFORM3UIEXTPROC __glUniform3uiEXT = nullptr; void APIENTRY glUniform3uiEXT (GLint location, GLuint v0, GLuint v1, GLuint v2) { if (__glUniform3uiEXT != 0) (__glUniform3uiEXT)(location, v0, v1, v2);  }
PFNGLUNIFORM3UIVEXTPROC __glUniform3uivEXT = nullptr; void APIENTRY glUniform3uivEXT (GLint location, GLsizei count, const GLuint *value) { if (__glUniform3uivEXT != 0) (__glUniform3uivEXT)(location, count, value);  }
PFNGLUNIFORM4UIEXTPROC __glUniform4uiEXT = nullptr; void APIENTRY glUniform4uiEXT (GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) { if (__glUniform4uiEXT != 0) (__glUniform4uiEXT)(location, v0, v1, v2, v3);  }
PFNGLUNIFORM4UIVEXTPROC __glUniform4uivEXT = nullptr; void APIENTRY glUniform4uivEXT (GLint location, GLsizei count, const GLuint *value) { if (__glUniform4uivEXT != 0) (__glUniform4uivEXT)(location, count, value);  }
bool __loadGL_EXT_gpu_shader4(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glBindFragDataLocationEXT = (PFNGLBINDFRAGDATALOCATIONEXTPROC)proc((const GLubyte*)"glBindFragDataLocationEXT")) != nullptr) || r;
    r = ((__glGetFragDataLocationEXT = (PFNGLGETFRAGDATALOCATIONEXTPROC)proc((const GLubyte*)"glGetFragDataLocationEXT")) != nullptr) || r;
    r = ((__glGetUniformuivEXT = (PFNGLGETUNIFORMUIVEXTPROC)proc((const GLubyte*)"glGetUniformuivEXT")) != nullptr) || r;
    r = ((__glUniform1uiEXT = (PFNGLUNIFORM1UIEXTPROC)proc((const GLubyte*)"glUniform1uiEXT")) != nullptr) || r;
    r = ((__glUniform1uivEXT = (PFNGLUNIFORM1UIVEXTPROC)proc((const GLubyte*)"glUniform1uivEXT")) != nullptr) || r;
    r = ((__glUniform2uiEXT = (PFNGLUNIFORM2UIEXTPROC)proc((const GLubyte*)"glUniform2uiEXT")) != nullptr) || r;
    r = ((__glUniform2uivEXT = (PFNGLUNIFORM2UIVEXTPROC)proc((const GLubyte*)"glUniform2uivEXT")) != nullptr) || r;
    r = ((__glUniform3uiEXT = (PFNGLUNIFORM3UIEXTPROC)proc((const GLubyte*)"glUniform3uiEXT")) != nullptr) || r;
    r = ((__glUniform3uivEXT = (PFNGLUNIFORM3UIVEXTPROC)proc((const GLubyte*)"glUniform3uivEXT")) != nullptr) || r;
    r = ((__glUniform4uiEXT = (PFNGLUNIFORM4UIEXTPROC)proc((const GLubyte*)"glUniform4uiEXT")) != nullptr) || r;
    r = ((__glUniform4uivEXT = (PFNGLUNIFORM4UIVEXTPROC)proc((const GLubyte*)"glUniform4uivEXT")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_EXT_gpu_shader4 = false;
/* GL_EXT_histogram */
PFNGLGETHISTOGRAMEXTPROC __glGetHistogramEXT = nullptr; void APIENTRY glGetHistogramEXT (GLenum target, GLboolean reset, GLenum format, GLenum type, void *values) { if (__glGetHistogramEXT != 0) (__glGetHistogramEXT)(target, reset, format, type, values);  }
PFNGLGETHISTOGRAMPARAMETERFVEXTPROC __glGetHistogramParameterfvEXT = nullptr; void APIENTRY glGetHistogramParameterfvEXT (GLenum target, GLenum pname, GLfloat *params) { if (__glGetHistogramParameterfvEXT != 0) (__glGetHistogramParameterfvEXT)(target, pname, params);  }
PFNGLGETHISTOGRAMPARAMETERIVEXTPROC __glGetHistogramParameterivEXT = nullptr; void APIENTRY glGetHistogramParameterivEXT (GLenum target, GLenum pname, GLint *params) { if (__glGetHistogramParameterivEXT != 0) (__glGetHistogramParameterivEXT)(target, pname, params);  }
PFNGLGETMINMAXEXTPROC __glGetMinmaxEXT = nullptr; void APIENTRY glGetMinmaxEXT (GLenum target, GLboolean reset, GLenum format, GLenum type, void *values) { if (__glGetMinmaxEXT != 0) (__glGetMinmaxEXT)(target, reset, format, type, values);  }
PFNGLGETMINMAXPARAMETERFVEXTPROC __glGetMinmaxParameterfvEXT = nullptr; void APIENTRY glGetMinmaxParameterfvEXT (GLenum target, GLenum pname, GLfloat *params) { if (__glGetMinmaxParameterfvEXT != 0) (__glGetMinmaxParameterfvEXT)(target, pname, params);  }
PFNGLGETMINMAXPARAMETERIVEXTPROC __glGetMinmaxParameterivEXT = nullptr; void APIENTRY glGetMinmaxParameterivEXT (GLenum target, GLenum pname, GLint *params) { if (__glGetMinmaxParameterivEXT != 0) (__glGetMinmaxParameterivEXT)(target, pname, params);  }
PFNGLHISTOGRAMEXTPROC __glHistogramEXT = nullptr; void APIENTRY glHistogramEXT (GLenum target, GLsizei width, GLenum internalformat, GLboolean sink) { if (__glHistogramEXT != 0) (__glHistogramEXT)(target, width, internalformat, sink);  }
PFNGLMINMAXEXTPROC __glMinmaxEXT = nullptr; void APIENTRY glMinmaxEXT (GLenum target, GLenum internalformat, GLboolean sink) { if (__glMinmaxEXT != 0) (__glMinmaxEXT)(target, internalformat, sink);  }
PFNGLRESETHISTOGRAMEXTPROC __glResetHistogramEXT = nullptr; void APIENTRY glResetHistogramEXT (GLenum target) { if (__glResetHistogramEXT != 0) (__glResetHistogramEXT)(target);  }
PFNGLRESETMINMAXEXTPROC __glResetMinmaxEXT = nullptr; void APIENTRY glResetMinmaxEXT (GLenum target) { if (__glResetMinmaxEXT != 0) (__glResetMinmaxEXT)(target);  }
bool __loadGL_EXT_histogram(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glGetHistogramEXT = (PFNGLGETHISTOGRAMEXTPROC)proc((const GLubyte*)"glGetHistogramEXT")) != nullptr) || r;
    r = ((__glGetHistogramParameterfvEXT = (PFNGLGETHISTOGRAMPARAMETERFVEXTPROC)proc((const GLubyte*)"glGetHistogramParameterfvEXT")) != nullptr) || r;
    r = ((__glGetHistogramParameterivEXT = (PFNGLGETHISTOGRAMPARAMETERIVEXTPROC)proc((const GLubyte*)"glGetHistogramParameterivEXT")) != nullptr) || r;
    r = ((__glGetMinmaxEXT = (PFNGLGETMINMAXEXTPROC)proc((const GLubyte*)"glGetMinmaxEXT")) != nullptr) || r;
    r = ((__glGetMinmaxParameterfvEXT = (PFNGLGETMINMAXPARAMETERFVEXTPROC)proc((const GLubyte*)"glGetMinmaxParameterfvEXT")) != nullptr) || r;
    r = ((__glGetMinmaxParameterivEXT = (PFNGLGETMINMAXPARAMETERIVEXTPROC)proc((const GLubyte*)"glGetMinmaxParameterivEXT")) != nullptr) || r;
    r = ((__glHistogramEXT = (PFNGLHISTOGRAMEXTPROC)proc((const GLubyte*)"glHistogramEXT")) != nullptr) || r;
    r = ((__glMinmaxEXT = (PFNGLMINMAXEXTPROC)proc((const GLubyte*)"glMinmaxEXT")) != nullptr) || r;
    r = ((__glResetHistogramEXT = (PFNGLRESETHISTOGRAMEXTPROC)proc((const GLubyte*)"glResetHistogramEXT")) != nullptr) || r;
    r = ((__glResetMinmaxEXT = (PFNGLRESETMINMAXEXTPROC)proc((const GLubyte*)"glResetMinmaxEXT")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_EXT_histogram = false;
/* GL_EXT_index_array_formats */
bool __loadGL_EXT_index_array_formats(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_EXT_index_array_formats = false;
/* GL_EXT_index_func */
PFNGLINDEXFUNCEXTPROC __glIndexFuncEXT = nullptr; void APIENTRY glIndexFuncEXT (GLenum func, GLclampf ref) { if (__glIndexFuncEXT != 0) (__glIndexFuncEXT)(func, ref);  }
bool __loadGL_EXT_index_func(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glIndexFuncEXT = (PFNGLINDEXFUNCEXTPROC)proc((const GLubyte*)"glIndexFuncEXT")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_EXT_index_func = false;
/* GL_EXT_index_material */
PFNGLINDEXMATERIALEXTPROC __glIndexMaterialEXT = nullptr; void APIENTRY glIndexMaterialEXT (GLenum face, GLenum mode) { if (__glIndexMaterialEXT != 0) (__glIndexMaterialEXT)(face, mode);  }
bool __loadGL_EXT_index_material(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glIndexMaterialEXT = (PFNGLINDEXMATERIALEXTPROC)proc((const GLubyte*)"glIndexMaterialEXT")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_EXT_index_material = false;
/* GL_EXT_index_texture */
bool __loadGL_EXT_index_texture(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_EXT_index_texture = false;
/* GL_EXT_light_texture */
PFNGLAPPLYTEXTUREEXTPROC __glApplyTextureEXT = nullptr; void APIENTRY glApplyTextureEXT (GLenum mode) { if (__glApplyTextureEXT != 0) (__glApplyTextureEXT)(mode);  }
PFNGLTEXTURELIGHTEXTPROC __glTextureLightEXT = nullptr; void APIENTRY glTextureLightEXT (GLenum pname) { if (__glTextureLightEXT != 0) (__glTextureLightEXT)(pname);  }
PFNGLTEXTUREMATERIALEXTPROC __glTextureMaterialEXT = nullptr; void APIENTRY glTextureMaterialEXT (GLenum face, GLenum mode) { if (__glTextureMaterialEXT != 0) (__glTextureMaterialEXT)(face, mode);  }
bool __loadGL_EXT_light_texture(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glApplyTextureEXT = (PFNGLAPPLYTEXTUREEXTPROC)proc((const GLubyte*)"glApplyTextureEXT")) != nullptr) || r;
    r = ((__glTextureLightEXT = (PFNGLTEXTURELIGHTEXTPROC)proc((const GLubyte*)"glTextureLightEXT")) != nullptr) || r;
    r = ((__glTextureMaterialEXT = (PFNGLTEXTUREMATERIALEXTPROC)proc((const GLubyte*)"glTextureMaterialEXT")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_EXT_light_texture = false;
/* GL_EXT_misc_attribute */
bool __loadGL_EXT_misc_attribute(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_EXT_misc_attribute = false;
/* GL_EXT_multi_draw_arrays */
PFNGLMULTIDRAWARRAYSEXTPROC __glMultiDrawArraysEXT = nullptr; void APIENTRY glMultiDrawArraysEXT (GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount) { if (__glMultiDrawArraysEXT != 0) (__glMultiDrawArraysEXT)(mode, first, count, primcount);  }
PFNGLMULTIDRAWELEMENTSEXTPROC __glMultiDrawElementsEXT = nullptr; void APIENTRY glMultiDrawElementsEXT (GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei primcount) { if (__glMultiDrawElementsEXT != 0) (__glMultiDrawElementsEXT)(mode, count, type, indices, primcount);  }
bool __loadGL_EXT_multi_draw_arrays(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glMultiDrawArraysEXT = (PFNGLMULTIDRAWARRAYSEXTPROC)proc((const GLubyte*)"glMultiDrawArraysEXT")) != nullptr) || r;
    r = ((__glMultiDrawElementsEXT = (PFNGLMULTIDRAWELEMENTSEXTPROC)proc((const GLubyte*)"glMultiDrawElementsEXT")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_EXT_multi_draw_arrays = false;
/* GL_EXT_multisample */
PFNGLSAMPLEMASKEXTPROC __glSampleMaskEXT = nullptr; void APIENTRY glSampleMaskEXT (GLclampf value, GLboolean invert) { if (__glSampleMaskEXT != 0) (__glSampleMaskEXT)(value, invert);  }
PFNGLSAMPLEPATTERNEXTPROC __glSamplePatternEXT = nullptr; void APIENTRY glSamplePatternEXT (GLenum pattern) { if (__glSamplePatternEXT != 0) (__glSamplePatternEXT)(pattern);  }
bool __loadGL_EXT_multisample(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glSampleMaskEXT = (PFNGLSAMPLEMASKEXTPROC)proc((const GLubyte*)"glSampleMaskEXT")) != nullptr) || r;
    r = ((__glSamplePatternEXT = (PFNGLSAMPLEPATTERNEXTPROC)proc((const GLubyte*)"glSamplePatternEXT")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_EXT_multisample = false;
/* GL_EXT_packed_depth_stencil */
bool __loadGL_EXT_packed_depth_stencil(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_EXT_packed_depth_stencil = false;
/* GL_EXT_packed_float */
bool __loadGL_EXT_packed_float(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_EXT_packed_float = false;
/* GL_EXT_packed_pixels */
bool __loadGL_EXT_packed_pixels(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_EXT_packed_pixels = false;
/* GL_EXT_paletted_texture */
PFNGLCOLORTABLEEXTPROC __glColorTableEXT = nullptr; void APIENTRY glColorTableEXT (GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, const void *table) { if (__glColorTableEXT != 0) (__glColorTableEXT)(target, internalFormat, width, format, type, table);  }
PFNGLGETCOLORTABLEEXTPROC __glGetColorTableEXT = nullptr; void APIENTRY glGetColorTableEXT (GLenum target, GLenum format, GLenum type, void *data) { if (__glGetColorTableEXT != 0) (__glGetColorTableEXT)(target, format, type, data);  }
PFNGLGETCOLORTABLEPARAMETERFVEXTPROC __glGetColorTableParameterfvEXT = nullptr; void APIENTRY glGetColorTableParameterfvEXT (GLenum target, GLenum pname, GLfloat *params) { if (__glGetColorTableParameterfvEXT != 0) (__glGetColorTableParameterfvEXT)(target, pname, params);  }
PFNGLGETCOLORTABLEPARAMETERIVEXTPROC __glGetColorTableParameterivEXT = nullptr; void APIENTRY glGetColorTableParameterivEXT (GLenum target, GLenum pname, GLint *params) { if (__glGetColorTableParameterivEXT != 0) (__glGetColorTableParameterivEXT)(target, pname, params);  }
bool __loadGL_EXT_paletted_texture(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glColorTableEXT = (PFNGLCOLORTABLEEXTPROC)proc((const GLubyte*)"glColorTableEXT")) != nullptr) || r;
    r = ((__glGetColorTableEXT = (PFNGLGETCOLORTABLEEXTPROC)proc((const GLubyte*)"glGetColorTableEXT")) != nullptr) || r;
    r = ((__glGetColorTableParameterfvEXT = (PFNGLGETCOLORTABLEPARAMETERFVEXTPROC)proc((const GLubyte*)"glGetColorTableParameterfvEXT")) != nullptr) || r;
    r = ((__glGetColorTableParameterivEXT = (PFNGLGETCOLORTABLEPARAMETERIVEXTPROC)proc((const GLubyte*)"glGetColorTableParameterivEXT")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_EXT_paletted_texture = false;
/* GL_EXT_pixel_buffer_object */
bool __loadGL_EXT_pixel_buffer_object(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_EXT_pixel_buffer_object = false;
/* GL_EXT_pixel_transform */
PFNGLGETPIXELTRANSFORMPARAMETERFVEXTPROC __glGetPixelTransformParameterfvEXT = nullptr; void APIENTRY glGetPixelTransformParameterfvEXT (GLenum target, GLenum pname, GLfloat *params) { if (__glGetPixelTransformParameterfvEXT != 0) (__glGetPixelTransformParameterfvEXT)(target, pname, params);  }
PFNGLGETPIXELTRANSFORMPARAMETERIVEXTPROC __glGetPixelTransformParameterivEXT = nullptr; void APIENTRY glGetPixelTransformParameterivEXT (GLenum target, GLenum pname, GLint *params) { if (__glGetPixelTransformParameterivEXT != 0) (__glGetPixelTransformParameterivEXT)(target, pname, params);  }
PFNGLPIXELTRANSFORMPARAMETERFEXTPROC __glPixelTransformParameterfEXT = nullptr; void APIENTRY glPixelTransformParameterfEXT (GLenum target, GLenum pname, GLfloat param) { if (__glPixelTransformParameterfEXT != 0) (__glPixelTransformParameterfEXT)(target, pname, param);  }
PFNGLPIXELTRANSFORMPARAMETERFVEXTPROC __glPixelTransformParameterfvEXT = nullptr; void APIENTRY glPixelTransformParameterfvEXT (GLenum target, GLenum pname, const GLfloat *params) { if (__glPixelTransformParameterfvEXT != 0) (__glPixelTransformParameterfvEXT)(target, pname, params);  }
PFNGLPIXELTRANSFORMPARAMETERIEXTPROC __glPixelTransformParameteriEXT = nullptr; void APIENTRY glPixelTransformParameteriEXT (GLenum target, GLenum pname, GLint param) { if (__glPixelTransformParameteriEXT != 0) (__glPixelTransformParameteriEXT)(target, pname, param);  }
PFNGLPIXELTRANSFORMPARAMETERIVEXTPROC __glPixelTransformParameterivEXT = nullptr; void APIENTRY glPixelTransformParameterivEXT (GLenum target, GLenum pname, const GLint *params) { if (__glPixelTransformParameterivEXT != 0) (__glPixelTransformParameterivEXT)(target, pname, params);  }
bool __loadGL_EXT_pixel_transform(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glGetPixelTransformParameterfvEXT = (PFNGLGETPIXELTRANSFORMPARAMETERFVEXTPROC)proc((const GLubyte*)"glGetPixelTransformParameterfvEXT")) != nullptr) || r;
    r = ((__glGetPixelTransformParameterivEXT = (PFNGLGETPIXELTRANSFORMPARAMETERIVEXTPROC)proc((const GLubyte*)"glGetPixelTransformParameterivEXT")) != nullptr) || r;
    r = ((__glPixelTransformParameterfEXT = (PFNGLPIXELTRANSFORMPARAMETERFEXTPROC)proc((const GLubyte*)"glPixelTransformParameterfEXT")) != nullptr) || r;
    r = ((__glPixelTransformParameterfvEXT = (PFNGLPIXELTRANSFORMPARAMETERFVEXTPROC)proc((const GLubyte*)"glPixelTransformParameterfvEXT")) != nullptr) || r;
    r = ((__glPixelTransformParameteriEXT = (PFNGLPIXELTRANSFORMPARAMETERIEXTPROC)proc((const GLubyte*)"glPixelTransformParameteriEXT")) != nullptr) || r;
    r = ((__glPixelTransformParameterivEXT = (PFNGLPIXELTRANSFORMPARAMETERIVEXTPROC)proc((const GLubyte*)"glPixelTransformParameterivEXT")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_EXT_pixel_transform = false;
/* GL_EXT_pixel_transform_color_table */
bool __loadGL_EXT_pixel_transform_color_table(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_EXT_pixel_transform_color_table = false;
/* GL_EXT_point_parameters */
PFNGLPOINTPARAMETERFEXTPROC __glPointParameterfEXT = nullptr; void APIENTRY glPointParameterfEXT (GLenum pname, GLfloat param) { if (__glPointParameterfEXT != 0) (__glPointParameterfEXT)(pname, param);  }
PFNGLPOINTPARAMETERFVEXTPROC __glPointParameterfvEXT = nullptr; void APIENTRY glPointParameterfvEXT (GLenum pname, const GLfloat *params) { if (__glPointParameterfvEXT != 0) (__glPointParameterfvEXT)(pname, params);  }
bool __loadGL_EXT_point_parameters(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glPointParameterfEXT = (PFNGLPOINTPARAMETERFEXTPROC)proc((const GLubyte*)"glPointParameterfEXT")) != nullptr) || r;
    r = ((__glPointParameterfvEXT = (PFNGLPOINTPARAMETERFVEXTPROC)proc((const GLubyte*)"glPointParameterfvEXT")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_EXT_point_parameters = false;
/* GL_EXT_polygon_offset */
PFNGLPOLYGONOFFSETEXTPROC __glPolygonOffsetEXT = nullptr; void APIENTRY glPolygonOffsetEXT (GLfloat factor, GLfloat bias) { if (__glPolygonOffsetEXT != 0) (__glPolygonOffsetEXT)(factor, bias);  }
bool __loadGL_EXT_polygon_offset(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glPolygonOffsetEXT = (PFNGLPOLYGONOFFSETEXTPROC)proc((const GLubyte*)"glPolygonOffsetEXT")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_EXT_polygon_offset = false;
/* GL_EXT_polygon_offset_clamp */
PFNGLPOLYGONOFFSETCLAMPEXTPROC __glPolygonOffsetClampEXT = nullptr; void APIENTRY glPolygonOffsetClampEXT (GLfloat factor, GLfloat units, GLfloat clamp) { if (__glPolygonOffsetClampEXT != 0) (__glPolygonOffsetClampEXT)(factor, units, clamp);  }
bool __loadGL_EXT_polygon_offset_clamp(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glPolygonOffsetClampEXT = (PFNGLPOLYGONOFFSETCLAMPEXTPROC)proc((const GLubyte*)"glPolygonOffsetClampEXT")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_EXT_polygon_offset_clamp = false;
/* GL_EXT_post_depth_coverage */
bool __loadGL_EXT_post_depth_coverage(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_EXT_post_depth_coverage = false;
/* GL_EXT_provoking_vertex */
PFNGLPROVOKINGVERTEXEXTPROC __glProvokingVertexEXT = nullptr; void APIENTRY glProvokingVertexEXT (GLenum mode) { if (__glProvokingVertexEXT != 0) (__glProvokingVertexEXT)(mode);  }
bool __loadGL_EXT_provoking_vertex(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glProvokingVertexEXT = (PFNGLPROVOKINGVERTEXEXTPROC)proc((const GLubyte*)"glProvokingVertexEXT")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_EXT_provoking_vertex = false;
/* GL_EXT_raster_multisample */
PFNGLRASTERSAMPLESEXTPROC __glRasterSamplesEXT = nullptr; void APIENTRY glRasterSamplesEXT (GLuint samples, GLboolean fixedsamplelocations) { if (__glRasterSamplesEXT != 0) (__glRasterSamplesEXT)(samples, fixedsamplelocations);  }
bool __loadGL_EXT_raster_multisample(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glRasterSamplesEXT = (PFNGLRASTERSAMPLESEXTPROC)proc((const GLubyte*)"glRasterSamplesEXT")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_EXT_raster_multisample = false;
/* GL_EXT_rescale_normal */
bool __loadGL_EXT_rescale_normal(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_EXT_rescale_normal = false;
/* GL_EXT_secondary_color */
PFNGLSECONDARYCOLOR3BEXTPROC __glSecondaryColor3bEXT = nullptr; void APIENTRY glSecondaryColor3bEXT (GLbyte red, GLbyte green, GLbyte blue) { if (__glSecondaryColor3bEXT != 0) (__glSecondaryColor3bEXT)(red, green, blue);  }
PFNGLSECONDARYCOLOR3BVEXTPROC __glSecondaryColor3bvEXT = nullptr; void APIENTRY glSecondaryColor3bvEXT (const GLbyte *v) { if (__glSecondaryColor3bvEXT != 0) (__glSecondaryColor3bvEXT)(v);  }
PFNGLSECONDARYCOLOR3DEXTPROC __glSecondaryColor3dEXT = nullptr; void APIENTRY glSecondaryColor3dEXT (GLdouble red, GLdouble green, GLdouble blue) { if (__glSecondaryColor3dEXT != 0) (__glSecondaryColor3dEXT)(red, green, blue);  }
PFNGLSECONDARYCOLOR3DVEXTPROC __glSecondaryColor3dvEXT = nullptr; void APIENTRY glSecondaryColor3dvEXT (const GLdouble *v) { if (__glSecondaryColor3dvEXT != 0) (__glSecondaryColor3dvEXT)(v);  }
PFNGLSECONDARYCOLOR3FEXTPROC __glSecondaryColor3fEXT = nullptr; void APIENTRY glSecondaryColor3fEXT (GLfloat red, GLfloat green, GLfloat blue) { if (__glSecondaryColor3fEXT != 0) (__glSecondaryColor3fEXT)(red, green, blue);  }
PFNGLSECONDARYCOLOR3FVEXTPROC __glSecondaryColor3fvEXT = nullptr; void APIENTRY glSecondaryColor3fvEXT (const GLfloat *v) { if (__glSecondaryColor3fvEXT != 0) (__glSecondaryColor3fvEXT)(v);  }
PFNGLSECONDARYCOLOR3IEXTPROC __glSecondaryColor3iEXT = nullptr; void APIENTRY glSecondaryColor3iEXT (GLint red, GLint green, GLint blue) { if (__glSecondaryColor3iEXT != 0) (__glSecondaryColor3iEXT)(red, green, blue);  }
PFNGLSECONDARYCOLOR3IVEXTPROC __glSecondaryColor3ivEXT = nullptr; void APIENTRY glSecondaryColor3ivEXT (const GLint *v) { if (__glSecondaryColor3ivEXT != 0) (__glSecondaryColor3ivEXT)(v);  }
PFNGLSECONDARYCOLOR3SEXTPROC __glSecondaryColor3sEXT = nullptr; void APIENTRY glSecondaryColor3sEXT (GLshort red, GLshort green, GLshort blue) { if (__glSecondaryColor3sEXT != 0) (__glSecondaryColor3sEXT)(red, green, blue);  }
PFNGLSECONDARYCOLOR3SVEXTPROC __glSecondaryColor3svEXT = nullptr; void APIENTRY glSecondaryColor3svEXT (const GLshort *v) { if (__glSecondaryColor3svEXT != 0) (__glSecondaryColor3svEXT)(v);  }
PFNGLSECONDARYCOLOR3UBEXTPROC __glSecondaryColor3ubEXT = nullptr; void APIENTRY glSecondaryColor3ubEXT (GLubyte red, GLubyte green, GLubyte blue) { if (__glSecondaryColor3ubEXT != 0) (__glSecondaryColor3ubEXT)(red, green, blue);  }
PFNGLSECONDARYCOLOR3UBVEXTPROC __glSecondaryColor3ubvEXT = nullptr; void APIENTRY glSecondaryColor3ubvEXT (const GLubyte *v) { if (__glSecondaryColor3ubvEXT != 0) (__glSecondaryColor3ubvEXT)(v);  }
PFNGLSECONDARYCOLOR3UIEXTPROC __glSecondaryColor3uiEXT = nullptr; void APIENTRY glSecondaryColor3uiEXT (GLuint red, GLuint green, GLuint blue) { if (__glSecondaryColor3uiEXT != 0) (__glSecondaryColor3uiEXT)(red, green, blue);  }
PFNGLSECONDARYCOLOR3UIVEXTPROC __glSecondaryColor3uivEXT = nullptr; void APIENTRY glSecondaryColor3uivEXT (const GLuint *v) { if (__glSecondaryColor3uivEXT != 0) (__glSecondaryColor3uivEXT)(v);  }
PFNGLSECONDARYCOLOR3USEXTPROC __glSecondaryColor3usEXT = nullptr; void APIENTRY glSecondaryColor3usEXT (GLushort red, GLushort green, GLushort blue) { if (__glSecondaryColor3usEXT != 0) (__glSecondaryColor3usEXT)(red, green, blue);  }
PFNGLSECONDARYCOLOR3USVEXTPROC __glSecondaryColor3usvEXT = nullptr; void APIENTRY glSecondaryColor3usvEXT (const GLushort *v) { if (__glSecondaryColor3usvEXT != 0) (__glSecondaryColor3usvEXT)(v);  }
PFNGLSECONDARYCOLORPOINTEREXTPROC __glSecondaryColorPointerEXT = nullptr; void APIENTRY glSecondaryColorPointerEXT (GLint size, GLenum type, GLsizei stride, const void *pointer) { if (__glSecondaryColorPointerEXT != 0) (__glSecondaryColorPointerEXT)(size, type, stride, pointer);  }
bool __loadGL_EXT_secondary_color(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glSecondaryColor3bEXT = (PFNGLSECONDARYCOLOR3BEXTPROC)proc((const GLubyte*)"glSecondaryColor3bEXT")) != nullptr) || r;
    r = ((__glSecondaryColor3bvEXT = (PFNGLSECONDARYCOLOR3BVEXTPROC)proc((const GLubyte*)"glSecondaryColor3bvEXT")) != nullptr) || r;
    r = ((__glSecondaryColor3dEXT = (PFNGLSECONDARYCOLOR3DEXTPROC)proc((const GLubyte*)"glSecondaryColor3dEXT")) != nullptr) || r;
    r = ((__glSecondaryColor3dvEXT = (PFNGLSECONDARYCOLOR3DVEXTPROC)proc((const GLubyte*)"glSecondaryColor3dvEXT")) != nullptr) || r;
    r = ((__glSecondaryColor3fEXT = (PFNGLSECONDARYCOLOR3FEXTPROC)proc((const GLubyte*)"glSecondaryColor3fEXT")) != nullptr) || r;
    r = ((__glSecondaryColor3fvEXT = (PFNGLSECONDARYCOLOR3FVEXTPROC)proc((const GLubyte*)"glSecondaryColor3fvEXT")) != nullptr) || r;
    r = ((__glSecondaryColor3iEXT = (PFNGLSECONDARYCOLOR3IEXTPROC)proc((const GLubyte*)"glSecondaryColor3iEXT")) != nullptr) || r;
    r = ((__glSecondaryColor3ivEXT = (PFNGLSECONDARYCOLOR3IVEXTPROC)proc((const GLubyte*)"glSecondaryColor3ivEXT")) != nullptr) || r;
    r = ((__glSecondaryColor3sEXT = (PFNGLSECONDARYCOLOR3SEXTPROC)proc((const GLubyte*)"glSecondaryColor3sEXT")) != nullptr) || r;
    r = ((__glSecondaryColor3svEXT = (PFNGLSECONDARYCOLOR3SVEXTPROC)proc((const GLubyte*)"glSecondaryColor3svEXT")) != nullptr) || r;
    r = ((__glSecondaryColor3ubEXT = (PFNGLSECONDARYCOLOR3UBEXTPROC)proc((const GLubyte*)"glSecondaryColor3ubEXT")) != nullptr) || r;
    r = ((__glSecondaryColor3ubvEXT = (PFNGLSECONDARYCOLOR3UBVEXTPROC)proc((const GLubyte*)"glSecondaryColor3ubvEXT")) != nullptr) || r;
    r = ((__glSecondaryColor3uiEXT = (PFNGLSECONDARYCOLOR3UIEXTPROC)proc((const GLubyte*)"glSecondaryColor3uiEXT")) != nullptr) || r;
    r = ((__glSecondaryColor3uivEXT = (PFNGLSECONDARYCOLOR3UIVEXTPROC)proc((const GLubyte*)"glSecondaryColor3uivEXT")) != nullptr) || r;
    r = ((__glSecondaryColor3usEXT = (PFNGLSECONDARYCOLOR3USEXTPROC)proc((const GLubyte*)"glSecondaryColor3usEXT")) != nullptr) || r;
    r = ((__glSecondaryColor3usvEXT = (PFNGLSECONDARYCOLOR3USVEXTPROC)proc((const GLubyte*)"glSecondaryColor3usvEXT")) != nullptr) || r;
    r = ((__glSecondaryColorPointerEXT = (PFNGLSECONDARYCOLORPOINTEREXTPROC)proc((const GLubyte*)"glSecondaryColorPointerEXT")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_EXT_secondary_color = false;
/* GL_EXT_separate_shader_objects */
PFNGLACTIVEPROGRAMEXTPROC __glActiveProgramEXT = nullptr; void APIENTRY glActiveProgramEXT (GLuint program) { if (__glActiveProgramEXT != 0) (__glActiveProgramEXT)(program);  }
PFNGLCREATESHADERPROGRAMEXTPROC __glCreateShaderProgramEXT = nullptr; GLuint APIENTRY glCreateShaderProgramEXT (GLenum type, const GLchar *string) { if (__glCreateShaderProgramEXT != 0) return (__glCreateShaderProgramEXT)(type, string); return 0; }
PFNGLUSESHADERPROGRAMEXTPROC __glUseShaderProgramEXT = nullptr; void APIENTRY glUseShaderProgramEXT (GLenum type, GLuint program) { if (__glUseShaderProgramEXT != 0) (__glUseShaderProgramEXT)(type, program);  }
bool __loadGL_EXT_separate_shader_objects(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glActiveProgramEXT = (PFNGLACTIVEPROGRAMEXTPROC)proc((const GLubyte*)"glActiveProgramEXT")) != nullptr) || r;
    r = ((__glCreateShaderProgramEXT = (PFNGLCREATESHADERPROGRAMEXTPROC)proc((const GLubyte*)"glCreateShaderProgramEXT")) != nullptr) || r;
    r = ((__glUseShaderProgramEXT = (PFNGLUSESHADERPROGRAMEXTPROC)proc((const GLubyte*)"glUseShaderProgramEXT")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_EXT_separate_shader_objects = false;
/* GL_EXT_separate_specular_color */
bool __loadGL_EXT_separate_specular_color(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_EXT_separate_specular_color = false;
/* GL_EXT_shader_image_load_formatted */
bool __loadGL_EXT_shader_image_load_formatted(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_EXT_shader_image_load_formatted = false;
/* GL_EXT_shader_image_load_store */
PFNGLBINDIMAGETEXTUREEXTPROC __glBindImageTextureEXT = nullptr; void APIENTRY glBindImageTextureEXT (GLuint index, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLint format) { if (__glBindImageTextureEXT != 0) (__glBindImageTextureEXT)(index, texture, level, layered, layer, access, format);  }
PFNGLMEMORYBARRIEREXTPROC __glMemoryBarrierEXT = nullptr; void APIENTRY glMemoryBarrierEXT (GLbitfield barriers) { if (__glMemoryBarrierEXT != 0) (__glMemoryBarrierEXT)(barriers);  }
bool __loadGL_EXT_shader_image_load_store(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glBindImageTextureEXT = (PFNGLBINDIMAGETEXTUREEXTPROC)proc((const GLubyte*)"glBindImageTextureEXT")) != nullptr) || r;
    r = ((__glMemoryBarrierEXT = (PFNGLMEMORYBARRIEREXTPROC)proc((const GLubyte*)"glMemoryBarrierEXT")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_EXT_shader_image_load_store = false;
/* GL_EXT_shader_integer_mix */
bool __loadGL_EXT_shader_integer_mix(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_EXT_shader_integer_mix = false;
/* GL_EXT_shadow_funcs */
bool __loadGL_EXT_shadow_funcs(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_EXT_shadow_funcs = false;
/* GL_EXT_shared_texture_palette */
bool __loadGL_EXT_shared_texture_palette(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_EXT_shared_texture_palette = false;
/* GL_EXT_sparse_texture2 */
bool __loadGL_EXT_sparse_texture2(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_EXT_sparse_texture2 = false;
/* GL_EXT_stencil_clear_tag */
PFNGLSTENCILCLEARTAGEXTPROC __glStencilClearTagEXT = nullptr; void APIENTRY glStencilClearTagEXT (GLsizei stencilTagBits, GLuint stencilClearTag) { if (__glStencilClearTagEXT != 0) (__glStencilClearTagEXT)(stencilTagBits, stencilClearTag);  }
bool __loadGL_EXT_stencil_clear_tag(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glStencilClearTagEXT = (PFNGLSTENCILCLEARTAGEXTPROC)proc((const GLubyte*)"glStencilClearTagEXT")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_EXT_stencil_clear_tag = false;
/* GL_EXT_stencil_two_side */
PFNGLACTIVESTENCILFACEEXTPROC __glActiveStencilFaceEXT = nullptr; void APIENTRY glActiveStencilFaceEXT (GLenum face) { if (__glActiveStencilFaceEXT != 0) (__glActiveStencilFaceEXT)(face);  }
bool __loadGL_EXT_stencil_two_side(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glActiveStencilFaceEXT = (PFNGLACTIVESTENCILFACEEXTPROC)proc((const GLubyte*)"glActiveStencilFaceEXT")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_EXT_stencil_two_side = false;
/* GL_EXT_stencil_wrap */
bool __loadGL_EXT_stencil_wrap(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_EXT_stencil_wrap = false;
/* GL_EXT_subtexture */
PFNGLTEXSUBIMAGE1DEXTPROC __glTexSubImage1DEXT = nullptr; void APIENTRY glTexSubImage1DEXT (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels) { if (__glTexSubImage1DEXT != 0) (__glTexSubImage1DEXT)(target, level, xoffset, width, format, type, pixels);  }
PFNGLTEXSUBIMAGE2DEXTPROC __glTexSubImage2DEXT = nullptr; void APIENTRY glTexSubImage2DEXT (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels) { if (__glTexSubImage2DEXT != 0) (__glTexSubImage2DEXT)(target, level, xoffset, yoffset, width, height, format, type, pixels);  }
bool __loadGL_EXT_subtexture(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glTexSubImage1DEXT = (PFNGLTEXSUBIMAGE1DEXTPROC)proc((const GLubyte*)"glTexSubImage1DEXT")) != nullptr) || r;
    r = ((__glTexSubImage2DEXT = (PFNGLTEXSUBIMAGE2DEXTPROC)proc((const GLubyte*)"glTexSubImage2DEXT")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_EXT_subtexture = false;
/* GL_EXT_texture */
bool __loadGL_EXT_texture(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_EXT_texture = false;
/* GL_EXT_texture3D */
PFNGLTEXIMAGE3DEXTPROC __glTexImage3DEXT = nullptr; void APIENTRY glTexImage3DEXT (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels) { if (__glTexImage3DEXT != 0) (__glTexImage3DEXT)(target, level, internalformat, width, height, depth, border, format, type, pixels);  }
PFNGLTEXSUBIMAGE3DEXTPROC __glTexSubImage3DEXT = nullptr; void APIENTRY glTexSubImage3DEXT (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels) { if (__glTexSubImage3DEXT != 0) (__glTexSubImage3DEXT)(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);  }
bool __loadGL_EXT_texture3D(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glTexImage3DEXT = (PFNGLTEXIMAGE3DEXTPROC)proc((const GLubyte*)"glTexImage3DEXT")) != nullptr) || r;
    r = ((__glTexSubImage3DEXT = (PFNGLTEXSUBIMAGE3DEXTPROC)proc((const GLubyte*)"glTexSubImage3DEXT")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_EXT_texture3D = false;
/* GL_EXT_texture_array */
PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC __glFramebufferTextureLayerEXT = nullptr; void APIENTRY glFramebufferTextureLayerEXT (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer) { if (__glFramebufferTextureLayerEXT != 0) (__glFramebufferTextureLayerEXT)(target, attachment, texture, level, layer);  }
bool __loadGL_EXT_texture_array(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glFramebufferTextureLayerEXT = (PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC)proc((const GLubyte*)"glFramebufferTextureLayerEXT")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_EXT_texture_array = false;
/* GL_EXT_texture_buffer_object */
PFNGLTEXBUFFEREXTPROC __glTexBufferEXT = nullptr; void APIENTRY glTexBufferEXT (GLenum target, GLenum internalformat, GLuint buffer) { if (__glTexBufferEXT != 0) (__glTexBufferEXT)(target, internalformat, buffer);  }
bool __loadGL_EXT_texture_buffer_object(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glTexBufferEXT = (PFNGLTEXBUFFEREXTPROC)proc((const GLubyte*)"glTexBufferEXT")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_EXT_texture_buffer_object = false;
/* GL_EXT_texture_compression_latc */
bool __loadGL_EXT_texture_compression_latc(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_EXT_texture_compression_latc = false;
/* GL_EXT_texture_compression_rgtc */
bool __loadGL_EXT_texture_compression_rgtc(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_EXT_texture_compression_rgtc = false;
/* GL_EXT_texture_compression_s3tc */
bool __loadGL_EXT_texture_compression_s3tc(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_EXT_texture_compression_s3tc = false;
/* GL_EXT_texture_cube_map */
bool __loadGL_EXT_texture_cube_map(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_EXT_texture_cube_map = false;
/* GL_EXT_texture_env_add */
bool __loadGL_EXT_texture_env_add(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_EXT_texture_env_add = false;
/* GL_EXT_texture_env_combine */
bool __loadGL_EXT_texture_env_combine(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_EXT_texture_env_combine = false;
/* GL_EXT_texture_env_dot3 */
bool __loadGL_EXT_texture_env_dot3(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_EXT_texture_env_dot3 = false;
/* GL_EXT_texture_filter_anisotropic */
bool __loadGL_EXT_texture_filter_anisotropic(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_EXT_texture_filter_anisotropic = false;
/* GL_EXT_texture_filter_minmax */
bool __loadGL_EXT_texture_filter_minmax(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_EXT_texture_filter_minmax = false;
/* GL_EXT_texture_integer */
PFNGLCLEARCOLORIIEXTPROC __glClearColorIiEXT = nullptr; void APIENTRY glClearColorIiEXT (GLint red, GLint green, GLint blue, GLint alpha) { if (__glClearColorIiEXT != 0) (__glClearColorIiEXT)(red, green, blue, alpha);  }
PFNGLCLEARCOLORIUIEXTPROC __glClearColorIuiEXT = nullptr; void APIENTRY glClearColorIuiEXT (GLuint red, GLuint green, GLuint blue, GLuint alpha) { if (__glClearColorIuiEXT != 0) (__glClearColorIuiEXT)(red, green, blue, alpha);  }
PFNGLGETTEXPARAMETERIIVEXTPROC __glGetTexParameterIivEXT = nullptr; void APIENTRY glGetTexParameterIivEXT (GLenum target, GLenum pname, GLint *params) { if (__glGetTexParameterIivEXT != 0) (__glGetTexParameterIivEXT)(target, pname, params);  }
PFNGLGETTEXPARAMETERIUIVEXTPROC __glGetTexParameterIuivEXT = nullptr; void APIENTRY glGetTexParameterIuivEXT (GLenum target, GLenum pname, GLuint *params) { if (__glGetTexParameterIuivEXT != 0) (__glGetTexParameterIuivEXT)(target, pname, params);  }
PFNGLTEXPARAMETERIIVEXTPROC __glTexParameterIivEXT = nullptr; void APIENTRY glTexParameterIivEXT (GLenum target, GLenum pname, const GLint *params) { if (__glTexParameterIivEXT != 0) (__glTexParameterIivEXT)(target, pname, params);  }
PFNGLTEXPARAMETERIUIVEXTPROC __glTexParameterIuivEXT = nullptr; void APIENTRY glTexParameterIuivEXT (GLenum target, GLenum pname, const GLuint *params) { if (__glTexParameterIuivEXT != 0) (__glTexParameterIuivEXT)(target, pname, params);  }
bool __loadGL_EXT_texture_integer(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glClearColorIiEXT = (PFNGLCLEARCOLORIIEXTPROC)proc((const GLubyte*)"glClearColorIiEXT")) != nullptr) || r;
    r = ((__glClearColorIuiEXT = (PFNGLCLEARCOLORIUIEXTPROC)proc((const GLubyte*)"glClearColorIuiEXT")) != nullptr) || r;
    r = ((__glGetTexParameterIivEXT = (PFNGLGETTEXPARAMETERIIVEXTPROC)proc((const GLubyte*)"glGetTexParameterIivEXT")) != nullptr) || r;
    r = ((__glGetTexParameterIuivEXT = (PFNGLGETTEXPARAMETERIUIVEXTPROC)proc((const GLubyte*)"glGetTexParameterIuivEXT")) != nullptr) || r;
    r = ((__glTexParameterIivEXT = (PFNGLTEXPARAMETERIIVEXTPROC)proc((const GLubyte*)"glTexParameterIivEXT")) != nullptr) || r;
    r = ((__glTexParameterIuivEXT = (PFNGLTEXPARAMETERIUIVEXTPROC)proc((const GLubyte*)"glTexParameterIuivEXT")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_EXT_texture_integer = false;
/* GL_EXT_texture_lod_bias */
bool __loadGL_EXT_texture_lod_bias(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_EXT_texture_lod_bias = false;
/* GL_EXT_texture_mirror_clamp */
bool __loadGL_EXT_texture_mirror_clamp(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_EXT_texture_mirror_clamp = false;
/* GL_EXT_texture_object */
PFNGLARETEXTURESRESIDENTEXTPROC __glAreTexturesResidentEXT = nullptr; GLboolean APIENTRY glAreTexturesResidentEXT (GLsizei n, const GLuint *textures, GLboolean *residences) { if (__glAreTexturesResidentEXT != 0) return (__glAreTexturesResidentEXT)(n, textures, residences); return 0; }
PFNGLBINDTEXTUREEXTPROC __glBindTextureEXT = nullptr; void APIENTRY glBindTextureEXT (GLenum target, GLuint texture) { if (__glBindTextureEXT != 0) (__glBindTextureEXT)(target, texture);  }
PFNGLDELETETEXTURESEXTPROC __glDeleteTexturesEXT = nullptr; void APIENTRY glDeleteTexturesEXT (GLsizei n, const GLuint *textures) { if (__glDeleteTexturesEXT != 0) (__glDeleteTexturesEXT)(n, textures);  }
PFNGLGENTEXTURESEXTPROC __glGenTexturesEXT = nullptr; void APIENTRY glGenTexturesEXT (GLsizei n, GLuint *textures) { if (__glGenTexturesEXT != 0) (__glGenTexturesEXT)(n, textures);  }
PFNGLISTEXTUREEXTPROC __glIsTextureEXT = nullptr; GLboolean APIENTRY glIsTextureEXT (GLuint texture) { if (__glIsTextureEXT != 0) return (__glIsTextureEXT)(texture); return 0; }
PFNGLPRIORITIZETEXTURESEXTPROC __glPrioritizeTexturesEXT = nullptr; void APIENTRY glPrioritizeTexturesEXT (GLsizei n, const GLuint *textures, const GLclampf *priorities) { if (__glPrioritizeTexturesEXT != 0) (__glPrioritizeTexturesEXT)(n, textures, priorities);  }
bool __loadGL_EXT_texture_object(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glAreTexturesResidentEXT = (PFNGLARETEXTURESRESIDENTEXTPROC)proc((const GLubyte*)"glAreTexturesResidentEXT")) != nullptr) || r;
    r = ((__glBindTextureEXT = (PFNGLBINDTEXTUREEXTPROC)proc((const GLubyte*)"glBindTextureEXT")) != nullptr) || r;
    r = ((__glDeleteTexturesEXT = (PFNGLDELETETEXTURESEXTPROC)proc((const GLubyte*)"glDeleteTexturesEXT")) != nullptr) || r;
    r = ((__glGenTexturesEXT = (PFNGLGENTEXTURESEXTPROC)proc((const GLubyte*)"glGenTexturesEXT")) != nullptr) || r;
    r = ((__glIsTextureEXT = (PFNGLISTEXTUREEXTPROC)proc((const GLubyte*)"glIsTextureEXT")) != nullptr) || r;
    r = ((__glPrioritizeTexturesEXT = (PFNGLPRIORITIZETEXTURESEXTPROC)proc((const GLubyte*)"glPrioritizeTexturesEXT")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_EXT_texture_object = false;
/* GL_EXT_texture_perturb_normal */
PFNGLTEXTURENORMALEXTPROC __glTextureNormalEXT = nullptr; void APIENTRY glTextureNormalEXT (GLenum mode) { if (__glTextureNormalEXT != 0) (__glTextureNormalEXT)(mode);  }
bool __loadGL_EXT_texture_perturb_normal(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glTextureNormalEXT = (PFNGLTEXTURENORMALEXTPROC)proc((const GLubyte*)"glTextureNormalEXT")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_EXT_texture_perturb_normal = false;
/* GL_EXT_texture_sRGB */
bool __loadGL_EXT_texture_sRGB(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_EXT_texture_sRGB = false;
/* GL_EXT_texture_sRGB_decode */
bool __loadGL_EXT_texture_sRGB_decode(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_EXT_texture_sRGB_decode = false;
/* GL_EXT_texture_shared_exponent */
bool __loadGL_EXT_texture_shared_exponent(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_EXT_texture_shared_exponent = false;
/* GL_EXT_texture_snorm */
bool __loadGL_EXT_texture_snorm(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_EXT_texture_snorm = false;
/* GL_EXT_texture_swizzle */
bool __loadGL_EXT_texture_swizzle(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_EXT_texture_swizzle = false;
/* GL_EXT_timer_query */
PFNGLGETQUERYOBJECTI64VEXTPROC __glGetQueryObjecti64vEXT = nullptr; void APIENTRY glGetQueryObjecti64vEXT (GLuint id, GLenum pname, GLint64 *params) { if (__glGetQueryObjecti64vEXT != 0) (__glGetQueryObjecti64vEXT)(id, pname, params);  }
PFNGLGETQUERYOBJECTUI64VEXTPROC __glGetQueryObjectui64vEXT = nullptr; void APIENTRY glGetQueryObjectui64vEXT (GLuint id, GLenum pname, GLuint64 *params) { if (__glGetQueryObjectui64vEXT != 0) (__glGetQueryObjectui64vEXT)(id, pname, params);  }
bool __loadGL_EXT_timer_query(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glGetQueryObjecti64vEXT = (PFNGLGETQUERYOBJECTI64VEXTPROC)proc((const GLubyte*)"glGetQueryObjecti64vEXT")) != nullptr) || r;
    r = ((__glGetQueryObjectui64vEXT = (PFNGLGETQUERYOBJECTUI64VEXTPROC)proc((const GLubyte*)"glGetQueryObjectui64vEXT")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_EXT_timer_query = false;
/* GL_EXT_transform_feedback */
PFNGLBEGINTRANSFORMFEEDBACKEXTPROC __glBeginTransformFeedbackEXT = nullptr; void APIENTRY glBeginTransformFeedbackEXT (GLenum primitiveMode) { if (__glBeginTransformFeedbackEXT != 0) (__glBeginTransformFeedbackEXT)(primitiveMode);  }
PFNGLBINDBUFFERBASEEXTPROC __glBindBufferBaseEXT = nullptr; void APIENTRY glBindBufferBaseEXT (GLenum target, GLuint index, GLuint buffer) { if (__glBindBufferBaseEXT != 0) (__glBindBufferBaseEXT)(target, index, buffer);  }
PFNGLBINDBUFFEROFFSETEXTPROC __glBindBufferOffsetEXT = nullptr; void APIENTRY glBindBufferOffsetEXT (GLenum target, GLuint index, GLuint buffer, GLintptr offset) { if (__glBindBufferOffsetEXT != 0) (__glBindBufferOffsetEXT)(target, index, buffer, offset);  }
PFNGLBINDBUFFERRANGEEXTPROC __glBindBufferRangeEXT = nullptr; void APIENTRY glBindBufferRangeEXT (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size) { if (__glBindBufferRangeEXT != 0) (__glBindBufferRangeEXT)(target, index, buffer, offset, size);  }
PFNGLENDTRANSFORMFEEDBACKEXTPROC __glEndTransformFeedbackEXT = nullptr; void APIENTRY glEndTransformFeedbackEXT () { if (__glEndTransformFeedbackEXT != 0) (__glEndTransformFeedbackEXT)();  }
PFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC __glGetTransformFeedbackVaryingEXT = nullptr; void APIENTRY glGetTransformFeedbackVaryingEXT (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name) { if (__glGetTransformFeedbackVaryingEXT != 0) (__glGetTransformFeedbackVaryingEXT)(program, index, bufSize, length, size, type, name);  }
PFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC __glTransformFeedbackVaryingsEXT = nullptr; void APIENTRY glTransformFeedbackVaryingsEXT (GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode) { if (__glTransformFeedbackVaryingsEXT != 0) (__glTransformFeedbackVaryingsEXT)(program, count, varyings, bufferMode);  }
bool __loadGL_EXT_transform_feedback(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glBeginTransformFeedbackEXT = (PFNGLBEGINTRANSFORMFEEDBACKEXTPROC)proc((const GLubyte*)"glBeginTransformFeedbackEXT")) != nullptr) || r;
    r = ((__glBindBufferBaseEXT = (PFNGLBINDBUFFERBASEEXTPROC)proc((const GLubyte*)"glBindBufferBaseEXT")) != nullptr) || r;
    r = ((__glBindBufferOffsetEXT = (PFNGLBINDBUFFEROFFSETEXTPROC)proc((const GLubyte*)"glBindBufferOffsetEXT")) != nullptr) || r;
    r = ((__glBindBufferRangeEXT = (PFNGLBINDBUFFERRANGEEXTPROC)proc((const GLubyte*)"glBindBufferRangeEXT")) != nullptr) || r;
    r = ((__glEndTransformFeedbackEXT = (PFNGLENDTRANSFORMFEEDBACKEXTPROC)proc((const GLubyte*)"glEndTransformFeedbackEXT")) != nullptr) || r;
    r = ((__glGetTransformFeedbackVaryingEXT = (PFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC)proc((const GLubyte*)"glGetTransformFeedbackVaryingEXT")) != nullptr) || r;
    r = ((__glTransformFeedbackVaryingsEXT = (PFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC)proc((const GLubyte*)"glTransformFeedbackVaryingsEXT")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_EXT_transform_feedback = false;
/* GL_EXT_vertex_array */
PFNGLARRAYELEMENTEXTPROC __glArrayElementEXT = nullptr; void APIENTRY glArrayElementEXT (GLint i) { if (__glArrayElementEXT != 0) (__glArrayElementEXT)(i);  }
PFNGLCOLORPOINTEREXTPROC __glColorPointerEXT = nullptr; void APIENTRY glColorPointerEXT (GLint size, GLenum type, GLsizei stride, GLsizei count, const void *pointer) { if (__glColorPointerEXT != 0) (__glColorPointerEXT)(size, type, stride, count, pointer);  }
PFNGLDRAWARRAYSEXTPROC __glDrawArraysEXT = nullptr; void APIENTRY glDrawArraysEXT (GLenum mode, GLint first, GLsizei count) { if (__glDrawArraysEXT != 0) (__glDrawArraysEXT)(mode, first, count);  }
PFNGLEDGEFLAGPOINTEREXTPROC __glEdgeFlagPointerEXT = nullptr; void APIENTRY glEdgeFlagPointerEXT (GLsizei stride, GLsizei count, const GLboolean *pointer) { if (__glEdgeFlagPointerEXT != 0) (__glEdgeFlagPointerEXT)(stride, count, pointer);  }
PFNGLGETPOINTERVEXTPROC __glGetPointervEXT = nullptr; void APIENTRY glGetPointervEXT (GLenum pname, void **params) { if (__glGetPointervEXT != 0) (__glGetPointervEXT)(pname, params);  }
PFNGLINDEXPOINTEREXTPROC __glIndexPointerEXT = nullptr; void APIENTRY glIndexPointerEXT (GLenum type, GLsizei stride, GLsizei count, const void *pointer) { if (__glIndexPointerEXT != 0) (__glIndexPointerEXT)(type, stride, count, pointer);  }
PFNGLNORMALPOINTEREXTPROC __glNormalPointerEXT = nullptr; void APIENTRY glNormalPointerEXT (GLenum type, GLsizei stride, GLsizei count, const void *pointer) { if (__glNormalPointerEXT != 0) (__glNormalPointerEXT)(type, stride, count, pointer);  }
PFNGLTEXCOORDPOINTEREXTPROC __glTexCoordPointerEXT = nullptr; void APIENTRY glTexCoordPointerEXT (GLint size, GLenum type, GLsizei stride, GLsizei count, const void *pointer) { if (__glTexCoordPointerEXT != 0) (__glTexCoordPointerEXT)(size, type, stride, count, pointer);  }
PFNGLVERTEXPOINTEREXTPROC __glVertexPointerEXT = nullptr; void APIENTRY glVertexPointerEXT (GLint size, GLenum type, GLsizei stride, GLsizei count, const void *pointer) { if (__glVertexPointerEXT != 0) (__glVertexPointerEXT)(size, type, stride, count, pointer);  }
bool __loadGL_EXT_vertex_array(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glArrayElementEXT = (PFNGLARRAYELEMENTEXTPROC)proc((const GLubyte*)"glArrayElementEXT")) != nullptr) || r;
    r = ((__glColorPointerEXT = (PFNGLCOLORPOINTEREXTPROC)proc((const GLubyte*)"glColorPointerEXT")) != nullptr) || r;
    r = ((__glDrawArraysEXT = (PFNGLDRAWARRAYSEXTPROC)proc((const GLubyte*)"glDrawArraysEXT")) != nullptr) || r;
    r = ((__glEdgeFlagPointerEXT = (PFNGLEDGEFLAGPOINTEREXTPROC)proc((const GLubyte*)"glEdgeFlagPointerEXT")) != nullptr) || r;
    r = ((__glGetPointervEXT = (PFNGLGETPOINTERVEXTPROC)proc((const GLubyte*)"glGetPointervEXT")) != nullptr) || r;
    r = ((__glIndexPointerEXT = (PFNGLINDEXPOINTEREXTPROC)proc((const GLubyte*)"glIndexPointerEXT")) != nullptr) || r;
    r = ((__glNormalPointerEXT = (PFNGLNORMALPOINTEREXTPROC)proc((const GLubyte*)"glNormalPointerEXT")) != nullptr) || r;
    r = ((__glTexCoordPointerEXT = (PFNGLTEXCOORDPOINTEREXTPROC)proc((const GLubyte*)"glTexCoordPointerEXT")) != nullptr) || r;
    r = ((__glVertexPointerEXT = (PFNGLVERTEXPOINTEREXTPROC)proc((const GLubyte*)"glVertexPointerEXT")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_EXT_vertex_array = false;
/* GL_EXT_vertex_array_bgra */
bool __loadGL_EXT_vertex_array_bgra(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_EXT_vertex_array_bgra = false;
/* GL_EXT_vertex_attrib_64bit */
PFNGLGETVERTEXATTRIBLDVEXTPROC __glGetVertexAttribLdvEXT = nullptr; void APIENTRY glGetVertexAttribLdvEXT (GLuint index, GLenum pname, GLdouble *params) { if (__glGetVertexAttribLdvEXT != 0) (__glGetVertexAttribLdvEXT)(index, pname, params);  }
PFNGLVERTEXATTRIBL1DEXTPROC __glVertexAttribL1dEXT = nullptr; void APIENTRY glVertexAttribL1dEXT (GLuint index, GLdouble x) { if (__glVertexAttribL1dEXT != 0) (__glVertexAttribL1dEXT)(index, x);  }
PFNGLVERTEXATTRIBL1DVEXTPROC __glVertexAttribL1dvEXT = nullptr; void APIENTRY glVertexAttribL1dvEXT (GLuint index, const GLdouble *v) { if (__glVertexAttribL1dvEXT != 0) (__glVertexAttribL1dvEXT)(index, v);  }
PFNGLVERTEXATTRIBL2DEXTPROC __glVertexAttribL2dEXT = nullptr; void APIENTRY glVertexAttribL2dEXT (GLuint index, GLdouble x, GLdouble y) { if (__glVertexAttribL2dEXT != 0) (__glVertexAttribL2dEXT)(index, x, y);  }
PFNGLVERTEXATTRIBL2DVEXTPROC __glVertexAttribL2dvEXT = nullptr; void APIENTRY glVertexAttribL2dvEXT (GLuint index, const GLdouble *v) { if (__glVertexAttribL2dvEXT != 0) (__glVertexAttribL2dvEXT)(index, v);  }
PFNGLVERTEXATTRIBL3DEXTPROC __glVertexAttribL3dEXT = nullptr; void APIENTRY glVertexAttribL3dEXT (GLuint index, GLdouble x, GLdouble y, GLdouble z) { if (__glVertexAttribL3dEXT != 0) (__glVertexAttribL3dEXT)(index, x, y, z);  }
PFNGLVERTEXATTRIBL3DVEXTPROC __glVertexAttribL3dvEXT = nullptr; void APIENTRY glVertexAttribL3dvEXT (GLuint index, const GLdouble *v) { if (__glVertexAttribL3dvEXT != 0) (__glVertexAttribL3dvEXT)(index, v);  }
PFNGLVERTEXATTRIBL4DEXTPROC __glVertexAttribL4dEXT = nullptr; void APIENTRY glVertexAttribL4dEXT (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { if (__glVertexAttribL4dEXT != 0) (__glVertexAttribL4dEXT)(index, x, y, z, w);  }
PFNGLVERTEXATTRIBL4DVEXTPROC __glVertexAttribL4dvEXT = nullptr; void APIENTRY glVertexAttribL4dvEXT (GLuint index, const GLdouble *v) { if (__glVertexAttribL4dvEXT != 0) (__glVertexAttribL4dvEXT)(index, v);  }
PFNGLVERTEXATTRIBLPOINTEREXTPROC __glVertexAttribLPointerEXT = nullptr; void APIENTRY glVertexAttribLPointerEXT (GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer) { if (__glVertexAttribLPointerEXT != 0) (__glVertexAttribLPointerEXT)(index, size, type, stride, pointer);  }
bool __loadGL_EXT_vertex_attrib_64bit(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glGetVertexAttribLdvEXT = (PFNGLGETVERTEXATTRIBLDVEXTPROC)proc((const GLubyte*)"glGetVertexAttribLdvEXT")) != nullptr) || r;
    r = ((__glVertexAttribL1dEXT = (PFNGLVERTEXATTRIBL1DEXTPROC)proc((const GLubyte*)"glVertexAttribL1dEXT")) != nullptr) || r;
    r = ((__glVertexAttribL1dvEXT = (PFNGLVERTEXATTRIBL1DVEXTPROC)proc((const GLubyte*)"glVertexAttribL1dvEXT")) != nullptr) || r;
    r = ((__glVertexAttribL2dEXT = (PFNGLVERTEXATTRIBL2DEXTPROC)proc((const GLubyte*)"glVertexAttribL2dEXT")) != nullptr) || r;
    r = ((__glVertexAttribL2dvEXT = (PFNGLVERTEXATTRIBL2DVEXTPROC)proc((const GLubyte*)"glVertexAttribL2dvEXT")) != nullptr) || r;
    r = ((__glVertexAttribL3dEXT = (PFNGLVERTEXATTRIBL3DEXTPROC)proc((const GLubyte*)"glVertexAttribL3dEXT")) != nullptr) || r;
    r = ((__glVertexAttribL3dvEXT = (PFNGLVERTEXATTRIBL3DVEXTPROC)proc((const GLubyte*)"glVertexAttribL3dvEXT")) != nullptr) || r;
    r = ((__glVertexAttribL4dEXT = (PFNGLVERTEXATTRIBL4DEXTPROC)proc((const GLubyte*)"glVertexAttribL4dEXT")) != nullptr) || r;
    r = ((__glVertexAttribL4dvEXT = (PFNGLVERTEXATTRIBL4DVEXTPROC)proc((const GLubyte*)"glVertexAttribL4dvEXT")) != nullptr) || r;
    r = ((__glVertexAttribLPointerEXT = (PFNGLVERTEXATTRIBLPOINTEREXTPROC)proc((const GLubyte*)"glVertexAttribLPointerEXT")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_EXT_vertex_attrib_64bit = false;
/* GL_EXT_vertex_shader */
PFNGLBEGINVERTEXSHADEREXTPROC __glBeginVertexShaderEXT = nullptr; void APIENTRY glBeginVertexShaderEXT () { if (__glBeginVertexShaderEXT != 0) (__glBeginVertexShaderEXT)();  }
PFNGLBINDLIGHTPARAMETEREXTPROC __glBindLightParameterEXT = nullptr; GLuint APIENTRY glBindLightParameterEXT (GLenum light, GLenum value) { if (__glBindLightParameterEXT != 0) return (__glBindLightParameterEXT)(light, value); return 0; }
PFNGLBINDMATERIALPARAMETEREXTPROC __glBindMaterialParameterEXT = nullptr; GLuint APIENTRY glBindMaterialParameterEXT (GLenum face, GLenum value) { if (__glBindMaterialParameterEXT != 0) return (__glBindMaterialParameterEXT)(face, value); return 0; }
PFNGLBINDPARAMETEREXTPROC __glBindParameterEXT = nullptr; GLuint APIENTRY glBindParameterEXT (GLenum value) { if (__glBindParameterEXT != 0) return (__glBindParameterEXT)(value); return 0; }
PFNGLBINDTEXGENPARAMETEREXTPROC __glBindTexGenParameterEXT = nullptr; GLuint APIENTRY glBindTexGenParameterEXT (GLenum unit, GLenum coord, GLenum value) { if (__glBindTexGenParameterEXT != 0) return (__glBindTexGenParameterEXT)(unit, coord, value); return 0; }
PFNGLBINDTEXTUREUNITPARAMETEREXTPROC __glBindTextureUnitParameterEXT = nullptr; GLuint APIENTRY glBindTextureUnitParameterEXT (GLenum unit, GLenum value) { if (__glBindTextureUnitParameterEXT != 0) return (__glBindTextureUnitParameterEXT)(unit, value); return 0; }
PFNGLBINDVERTEXSHADEREXTPROC __glBindVertexShaderEXT = nullptr; void APIENTRY glBindVertexShaderEXT (GLuint id) { if (__glBindVertexShaderEXT != 0) (__glBindVertexShaderEXT)(id);  }
PFNGLDELETEVERTEXSHADEREXTPROC __glDeleteVertexShaderEXT = nullptr; void APIENTRY glDeleteVertexShaderEXT (GLuint id) { if (__glDeleteVertexShaderEXT != 0) (__glDeleteVertexShaderEXT)(id);  }
PFNGLDISABLEVARIANTCLIENTSTATEEXTPROC __glDisableVariantClientStateEXT = nullptr; void APIENTRY glDisableVariantClientStateEXT (GLuint id) { if (__glDisableVariantClientStateEXT != 0) (__glDisableVariantClientStateEXT)(id);  }
PFNGLENABLEVARIANTCLIENTSTATEEXTPROC __glEnableVariantClientStateEXT = nullptr; void APIENTRY glEnableVariantClientStateEXT (GLuint id) { if (__glEnableVariantClientStateEXT != 0) (__glEnableVariantClientStateEXT)(id);  }
PFNGLENDVERTEXSHADEREXTPROC __glEndVertexShaderEXT = nullptr; void APIENTRY glEndVertexShaderEXT () { if (__glEndVertexShaderEXT != 0) (__glEndVertexShaderEXT)();  }
PFNGLEXTRACTCOMPONENTEXTPROC __glExtractComponentEXT = nullptr; void APIENTRY glExtractComponentEXT (GLuint res, GLuint src, GLuint num) { if (__glExtractComponentEXT != 0) (__glExtractComponentEXT)(res, src, num);  }
PFNGLGENSYMBOLSEXTPROC __glGenSymbolsEXT = nullptr; GLuint APIENTRY glGenSymbolsEXT (GLenum datatype, GLenum storagetype, GLenum range, GLuint components) { if (__glGenSymbolsEXT != 0) return (__glGenSymbolsEXT)(datatype, storagetype, range, components); return 0; }
PFNGLGENVERTEXSHADERSEXTPROC __glGenVertexShadersEXT = nullptr; GLuint APIENTRY glGenVertexShadersEXT (GLuint range) { if (__glGenVertexShadersEXT != 0) return (__glGenVertexShadersEXT)(range); return 0; }
PFNGLGETINVARIANTBOOLEANVEXTPROC __glGetInvariantBooleanvEXT = nullptr; void APIENTRY glGetInvariantBooleanvEXT (GLuint id, GLenum value, GLboolean *data) { if (__glGetInvariantBooleanvEXT != 0) (__glGetInvariantBooleanvEXT)(id, value, data);  }
PFNGLGETINVARIANTFLOATVEXTPROC __glGetInvariantFloatvEXT = nullptr; void APIENTRY glGetInvariantFloatvEXT (GLuint id, GLenum value, GLfloat *data) { if (__glGetInvariantFloatvEXT != 0) (__glGetInvariantFloatvEXT)(id, value, data);  }
PFNGLGETINVARIANTINTEGERVEXTPROC __glGetInvariantIntegervEXT = nullptr; void APIENTRY glGetInvariantIntegervEXT (GLuint id, GLenum value, GLint *data) { if (__glGetInvariantIntegervEXT != 0) (__glGetInvariantIntegervEXT)(id, value, data);  }
PFNGLGETLOCALCONSTANTBOOLEANVEXTPROC __glGetLocalConstantBooleanvEXT = nullptr; void APIENTRY glGetLocalConstantBooleanvEXT (GLuint id, GLenum value, GLboolean *data) { if (__glGetLocalConstantBooleanvEXT != 0) (__glGetLocalConstantBooleanvEXT)(id, value, data);  }
PFNGLGETLOCALCONSTANTFLOATVEXTPROC __glGetLocalConstantFloatvEXT = nullptr; void APIENTRY glGetLocalConstantFloatvEXT (GLuint id, GLenum value, GLfloat *data) { if (__glGetLocalConstantFloatvEXT != 0) (__glGetLocalConstantFloatvEXT)(id, value, data);  }
PFNGLGETLOCALCONSTANTINTEGERVEXTPROC __glGetLocalConstantIntegervEXT = nullptr; void APIENTRY glGetLocalConstantIntegervEXT (GLuint id, GLenum value, GLint *data) { if (__glGetLocalConstantIntegervEXT != 0) (__glGetLocalConstantIntegervEXT)(id, value, data);  }
PFNGLGETVARIANTBOOLEANVEXTPROC __glGetVariantBooleanvEXT = nullptr; void APIENTRY glGetVariantBooleanvEXT (GLuint id, GLenum value, GLboolean *data) { if (__glGetVariantBooleanvEXT != 0) (__glGetVariantBooleanvEXT)(id, value, data);  }
PFNGLGETVARIANTFLOATVEXTPROC __glGetVariantFloatvEXT = nullptr; void APIENTRY glGetVariantFloatvEXT (GLuint id, GLenum value, GLfloat *data) { if (__glGetVariantFloatvEXT != 0) (__glGetVariantFloatvEXT)(id, value, data);  }
PFNGLGETVARIANTINTEGERVEXTPROC __glGetVariantIntegervEXT = nullptr; void APIENTRY glGetVariantIntegervEXT (GLuint id, GLenum value, GLint *data) { if (__glGetVariantIntegervEXT != 0) (__glGetVariantIntegervEXT)(id, value, data);  }
PFNGLGETVARIANTPOINTERVEXTPROC __glGetVariantPointervEXT = nullptr; void APIENTRY glGetVariantPointervEXT (GLuint id, GLenum value, void **data) { if (__glGetVariantPointervEXT != 0) (__glGetVariantPointervEXT)(id, value, data);  }
PFNGLINSERTCOMPONENTEXTPROC __glInsertComponentEXT = nullptr; void APIENTRY glInsertComponentEXT (GLuint res, GLuint src, GLuint num) { if (__glInsertComponentEXT != 0) (__glInsertComponentEXT)(res, src, num);  }
PFNGLISVARIANTENABLEDEXTPROC __glIsVariantEnabledEXT = nullptr; GLboolean APIENTRY glIsVariantEnabledEXT (GLuint id, GLenum cap) { if (__glIsVariantEnabledEXT != 0) return (__glIsVariantEnabledEXT)(id, cap); return 0; }
PFNGLSETINVARIANTEXTPROC __glSetInvariantEXT = nullptr; void APIENTRY glSetInvariantEXT (GLuint id, GLenum type, const void *addr) { if (__glSetInvariantEXT != 0) (__glSetInvariantEXT)(id, type, addr);  }
PFNGLSETLOCALCONSTANTEXTPROC __glSetLocalConstantEXT = nullptr; void APIENTRY glSetLocalConstantEXT (GLuint id, GLenum type, const void *addr) { if (__glSetLocalConstantEXT != 0) (__glSetLocalConstantEXT)(id, type, addr);  }
PFNGLSHADEROP1EXTPROC __glShaderOp1EXT = nullptr; void APIENTRY glShaderOp1EXT (GLenum op, GLuint res, GLuint arg1) { if (__glShaderOp1EXT != 0) (__glShaderOp1EXT)(op, res, arg1);  }
PFNGLSHADEROP2EXTPROC __glShaderOp2EXT = nullptr; void APIENTRY glShaderOp2EXT (GLenum op, GLuint res, GLuint arg1, GLuint arg2) { if (__glShaderOp2EXT != 0) (__glShaderOp2EXT)(op, res, arg1, arg2);  }
PFNGLSHADEROP3EXTPROC __glShaderOp3EXT = nullptr; void APIENTRY glShaderOp3EXT (GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3) { if (__glShaderOp3EXT != 0) (__glShaderOp3EXT)(op, res, arg1, arg2, arg3);  }
PFNGLSWIZZLEEXTPROC __glSwizzleEXT = nullptr; void APIENTRY glSwizzleEXT (GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW) { if (__glSwizzleEXT != 0) (__glSwizzleEXT)(res, in, outX, outY, outZ, outW);  }
PFNGLVARIANTPOINTEREXTPROC __glVariantPointerEXT = nullptr; void APIENTRY glVariantPointerEXT (GLuint id, GLenum type, GLuint stride, const void *addr) { if (__glVariantPointerEXT != 0) (__glVariantPointerEXT)(id, type, stride, addr);  }
PFNGLVARIANTBVEXTPROC __glVariantbvEXT = nullptr; void APIENTRY glVariantbvEXT (GLuint id, const GLbyte *addr) { if (__glVariantbvEXT != 0) (__glVariantbvEXT)(id, addr);  }
PFNGLVARIANTDVEXTPROC __glVariantdvEXT = nullptr; void APIENTRY glVariantdvEXT (GLuint id, const GLdouble *addr) { if (__glVariantdvEXT != 0) (__glVariantdvEXT)(id, addr);  }
PFNGLVARIANTFVEXTPROC __glVariantfvEXT = nullptr; void APIENTRY glVariantfvEXT (GLuint id, const GLfloat *addr) { if (__glVariantfvEXT != 0) (__glVariantfvEXT)(id, addr);  }
PFNGLVARIANTIVEXTPROC __glVariantivEXT = nullptr; void APIENTRY glVariantivEXT (GLuint id, const GLint *addr) { if (__glVariantivEXT != 0) (__glVariantivEXT)(id, addr);  }
PFNGLVARIANTSVEXTPROC __glVariantsvEXT = nullptr; void APIENTRY glVariantsvEXT (GLuint id, const GLshort *addr) { if (__glVariantsvEXT != 0) (__glVariantsvEXT)(id, addr);  }
PFNGLVARIANTUBVEXTPROC __glVariantubvEXT = nullptr; void APIENTRY glVariantubvEXT (GLuint id, const GLubyte *addr) { if (__glVariantubvEXT != 0) (__glVariantubvEXT)(id, addr);  }
PFNGLVARIANTUIVEXTPROC __glVariantuivEXT = nullptr; void APIENTRY glVariantuivEXT (GLuint id, const GLuint *addr) { if (__glVariantuivEXT != 0) (__glVariantuivEXT)(id, addr);  }
PFNGLVARIANTUSVEXTPROC __glVariantusvEXT = nullptr; void APIENTRY glVariantusvEXT (GLuint id, const GLushort *addr) { if (__glVariantusvEXT != 0) (__glVariantusvEXT)(id, addr);  }
PFNGLWRITEMASKEXTPROC __glWriteMaskEXT = nullptr; void APIENTRY glWriteMaskEXT (GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW) { if (__glWriteMaskEXT != 0) (__glWriteMaskEXT)(res, in, outX, outY, outZ, outW);  }
bool __loadGL_EXT_vertex_shader(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glBeginVertexShaderEXT = (PFNGLBEGINVERTEXSHADEREXTPROC)proc((const GLubyte*)"glBeginVertexShaderEXT")) != nullptr) || r;
    r = ((__glBindLightParameterEXT = (PFNGLBINDLIGHTPARAMETEREXTPROC)proc((const GLubyte*)"glBindLightParameterEXT")) != nullptr) || r;
    r = ((__glBindMaterialParameterEXT = (PFNGLBINDMATERIALPARAMETEREXTPROC)proc((const GLubyte*)"glBindMaterialParameterEXT")) != nullptr) || r;
    r = ((__glBindParameterEXT = (PFNGLBINDPARAMETEREXTPROC)proc((const GLubyte*)"glBindParameterEXT")) != nullptr) || r;
    r = ((__glBindTexGenParameterEXT = (PFNGLBINDTEXGENPARAMETEREXTPROC)proc((const GLubyte*)"glBindTexGenParameterEXT")) != nullptr) || r;
    r = ((__glBindTextureUnitParameterEXT = (PFNGLBINDTEXTUREUNITPARAMETEREXTPROC)proc((const GLubyte*)"glBindTextureUnitParameterEXT")) != nullptr) || r;
    r = ((__glBindVertexShaderEXT = (PFNGLBINDVERTEXSHADEREXTPROC)proc((const GLubyte*)"glBindVertexShaderEXT")) != nullptr) || r;
    r = ((__glDeleteVertexShaderEXT = (PFNGLDELETEVERTEXSHADEREXTPROC)proc((const GLubyte*)"glDeleteVertexShaderEXT")) != nullptr) || r;
    r = ((__glDisableVariantClientStateEXT = (PFNGLDISABLEVARIANTCLIENTSTATEEXTPROC)proc((const GLubyte*)"glDisableVariantClientStateEXT")) != nullptr) || r;
    r = ((__glEnableVariantClientStateEXT = (PFNGLENABLEVARIANTCLIENTSTATEEXTPROC)proc((const GLubyte*)"glEnableVariantClientStateEXT")) != nullptr) || r;
    r = ((__glEndVertexShaderEXT = (PFNGLENDVERTEXSHADEREXTPROC)proc((const GLubyte*)"glEndVertexShaderEXT")) != nullptr) || r;
    r = ((__glExtractComponentEXT = (PFNGLEXTRACTCOMPONENTEXTPROC)proc((const GLubyte*)"glExtractComponentEXT")) != nullptr) || r;
    r = ((__glGenSymbolsEXT = (PFNGLGENSYMBOLSEXTPROC)proc((const GLubyte*)"glGenSymbolsEXT")) != nullptr) || r;
    r = ((__glGenVertexShadersEXT = (PFNGLGENVERTEXSHADERSEXTPROC)proc((const GLubyte*)"glGenVertexShadersEXT")) != nullptr) || r;
    r = ((__glGetInvariantBooleanvEXT = (PFNGLGETINVARIANTBOOLEANVEXTPROC)proc((const GLubyte*)"glGetInvariantBooleanvEXT")) != nullptr) || r;
    r = ((__glGetInvariantFloatvEXT = (PFNGLGETINVARIANTFLOATVEXTPROC)proc((const GLubyte*)"glGetInvariantFloatvEXT")) != nullptr) || r;
    r = ((__glGetInvariantIntegervEXT = (PFNGLGETINVARIANTINTEGERVEXTPROC)proc((const GLubyte*)"glGetInvariantIntegervEXT")) != nullptr) || r;
    r = ((__glGetLocalConstantBooleanvEXT = (PFNGLGETLOCALCONSTANTBOOLEANVEXTPROC)proc((const GLubyte*)"glGetLocalConstantBooleanvEXT")) != nullptr) || r;
    r = ((__glGetLocalConstantFloatvEXT = (PFNGLGETLOCALCONSTANTFLOATVEXTPROC)proc((const GLubyte*)"glGetLocalConstantFloatvEXT")) != nullptr) || r;
    r = ((__glGetLocalConstantIntegervEXT = (PFNGLGETLOCALCONSTANTINTEGERVEXTPROC)proc((const GLubyte*)"glGetLocalConstantIntegervEXT")) != nullptr) || r;
    r = ((__glGetVariantBooleanvEXT = (PFNGLGETVARIANTBOOLEANVEXTPROC)proc((const GLubyte*)"glGetVariantBooleanvEXT")) != nullptr) || r;
    r = ((__glGetVariantFloatvEXT = (PFNGLGETVARIANTFLOATVEXTPROC)proc((const GLubyte*)"glGetVariantFloatvEXT")) != nullptr) || r;
    r = ((__glGetVariantIntegervEXT = (PFNGLGETVARIANTINTEGERVEXTPROC)proc((const GLubyte*)"glGetVariantIntegervEXT")) != nullptr) || r;
    r = ((__glGetVariantPointervEXT = (PFNGLGETVARIANTPOINTERVEXTPROC)proc((const GLubyte*)"glGetVariantPointervEXT")) != nullptr) || r;
    r = ((__glInsertComponentEXT = (PFNGLINSERTCOMPONENTEXTPROC)proc((const GLubyte*)"glInsertComponentEXT")) != nullptr) || r;
    r = ((__glIsVariantEnabledEXT = (PFNGLISVARIANTENABLEDEXTPROC)proc((const GLubyte*)"glIsVariantEnabledEXT")) != nullptr) || r;
    r = ((__glSetInvariantEXT = (PFNGLSETINVARIANTEXTPROC)proc((const GLubyte*)"glSetInvariantEXT")) != nullptr) || r;
    r = ((__glSetLocalConstantEXT = (PFNGLSETLOCALCONSTANTEXTPROC)proc((const GLubyte*)"glSetLocalConstantEXT")) != nullptr) || r;
    r = ((__glShaderOp1EXT = (PFNGLSHADEROP1EXTPROC)proc((const GLubyte*)"glShaderOp1EXT")) != nullptr) || r;
    r = ((__glShaderOp2EXT = (PFNGLSHADEROP2EXTPROC)proc((const GLubyte*)"glShaderOp2EXT")) != nullptr) || r;
    r = ((__glShaderOp3EXT = (PFNGLSHADEROP3EXTPROC)proc((const GLubyte*)"glShaderOp3EXT")) != nullptr) || r;
    r = ((__glSwizzleEXT = (PFNGLSWIZZLEEXTPROC)proc((const GLubyte*)"glSwizzleEXT")) != nullptr) || r;
    r = ((__glVariantPointerEXT = (PFNGLVARIANTPOINTEREXTPROC)proc((const GLubyte*)"glVariantPointerEXT")) != nullptr) || r;
    r = ((__glVariantbvEXT = (PFNGLVARIANTBVEXTPROC)proc((const GLubyte*)"glVariantbvEXT")) != nullptr) || r;
    r = ((__glVariantdvEXT = (PFNGLVARIANTDVEXTPROC)proc((const GLubyte*)"glVariantdvEXT")) != nullptr) || r;
    r = ((__glVariantfvEXT = (PFNGLVARIANTFVEXTPROC)proc((const GLubyte*)"glVariantfvEXT")) != nullptr) || r;
    r = ((__glVariantivEXT = (PFNGLVARIANTIVEXTPROC)proc((const GLubyte*)"glVariantivEXT")) != nullptr) || r;
    r = ((__glVariantsvEXT = (PFNGLVARIANTSVEXTPROC)proc((const GLubyte*)"glVariantsvEXT")) != nullptr) || r;
    r = ((__glVariantubvEXT = (PFNGLVARIANTUBVEXTPROC)proc((const GLubyte*)"glVariantubvEXT")) != nullptr) || r;
    r = ((__glVariantuivEXT = (PFNGLVARIANTUIVEXTPROC)proc((const GLubyte*)"glVariantuivEXT")) != nullptr) || r;
    r = ((__glVariantusvEXT = (PFNGLVARIANTUSVEXTPROC)proc((const GLubyte*)"glVariantusvEXT")) != nullptr) || r;
    r = ((__glWriteMaskEXT = (PFNGLWRITEMASKEXTPROC)proc((const GLubyte*)"glWriteMaskEXT")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_EXT_vertex_shader = false;
/* GL_EXT_vertex_weighting */
PFNGLVERTEXWEIGHTPOINTEREXTPROC __glVertexWeightPointerEXT = nullptr; void APIENTRY glVertexWeightPointerEXT (GLint size, GLenum type, GLsizei stride, const void *pointer) { if (__glVertexWeightPointerEXT != 0) (__glVertexWeightPointerEXT)(size, type, stride, pointer);  }
PFNGLVERTEXWEIGHTFEXTPROC __glVertexWeightfEXT = nullptr; void APIENTRY glVertexWeightfEXT (GLfloat weight) { if (__glVertexWeightfEXT != 0) (__glVertexWeightfEXT)(weight);  }
PFNGLVERTEXWEIGHTFVEXTPROC __glVertexWeightfvEXT = nullptr; void APIENTRY glVertexWeightfvEXT (const GLfloat *weight) { if (__glVertexWeightfvEXT != 0) (__glVertexWeightfvEXT)(weight);  }
bool __loadGL_EXT_vertex_weighting(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glVertexWeightPointerEXT = (PFNGLVERTEXWEIGHTPOINTEREXTPROC)proc((const GLubyte*)"glVertexWeightPointerEXT")) != nullptr) || r;
    r = ((__glVertexWeightfEXT = (PFNGLVERTEXWEIGHTFEXTPROC)proc((const GLubyte*)"glVertexWeightfEXT")) != nullptr) || r;
    r = ((__glVertexWeightfvEXT = (PFNGLVERTEXWEIGHTFVEXTPROC)proc((const GLubyte*)"glVertexWeightfvEXT")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_EXT_vertex_weighting = false;
/* GL_EXT_x11_sync_object */
PFNGLIMPORTSYNCEXTPROC __glImportSyncEXT = nullptr; GLsync APIENTRY glImportSyncEXT (GLenum external_sync_type, GLintptr external_sync, GLbitfield flags) { if (__glImportSyncEXT != 0) return (__glImportSyncEXT)(external_sync_type, external_sync, flags); return 0; }
bool __loadGL_EXT_x11_sync_object(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glImportSyncEXT = (PFNGLIMPORTSYNCEXTPROC)proc((const GLubyte*)"glImportSyncEXT")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_EXT_x11_sync_object = false;
/* GL_GREMEDY_frame_terminator */
PFNGLFRAMETERMINATORGREMEDYPROC __glFrameTerminatorGREMEDY = nullptr; void APIENTRY glFrameTerminatorGREMEDY () { if (__glFrameTerminatorGREMEDY != 0) (__glFrameTerminatorGREMEDY)();  }
bool __loadGL_GREMEDY_frame_terminator(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glFrameTerminatorGREMEDY = (PFNGLFRAMETERMINATORGREMEDYPROC)proc((const GLubyte*)"glFrameTerminatorGREMEDY")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_GREMEDY_frame_terminator = false;
/* GL_GREMEDY_string_marker */
PFNGLSTRINGMARKERGREMEDYPROC __glStringMarkerGREMEDY = nullptr; void APIENTRY glStringMarkerGREMEDY (GLsizei len, const void *string) { if (__glStringMarkerGREMEDY != 0) (__glStringMarkerGREMEDY)(len, string);  }
bool __loadGL_GREMEDY_string_marker(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glStringMarkerGREMEDY = (PFNGLSTRINGMARKERGREMEDYPROC)proc((const GLubyte*)"glStringMarkerGREMEDY")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_GREMEDY_string_marker = false;
/* GL_HP_convolution_border_modes */
bool __loadGL_HP_convolution_border_modes(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_HP_convolution_border_modes = false;
/* GL_HP_image_transform */
PFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC __glGetImageTransformParameterfvHP = nullptr; void APIENTRY glGetImageTransformParameterfvHP (GLenum target, GLenum pname, GLfloat *params) { if (__glGetImageTransformParameterfvHP != 0) (__glGetImageTransformParameterfvHP)(target, pname, params);  }
PFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC __glGetImageTransformParameterivHP = nullptr; void APIENTRY glGetImageTransformParameterivHP (GLenum target, GLenum pname, GLint *params) { if (__glGetImageTransformParameterivHP != 0) (__glGetImageTransformParameterivHP)(target, pname, params);  }
PFNGLIMAGETRANSFORMPARAMETERFHPPROC __glImageTransformParameterfHP = nullptr; void APIENTRY glImageTransformParameterfHP (GLenum target, GLenum pname, GLfloat param) { if (__glImageTransformParameterfHP != 0) (__glImageTransformParameterfHP)(target, pname, param);  }
PFNGLIMAGETRANSFORMPARAMETERFVHPPROC __glImageTransformParameterfvHP = nullptr; void APIENTRY glImageTransformParameterfvHP (GLenum target, GLenum pname, const GLfloat *params) { if (__glImageTransformParameterfvHP != 0) (__glImageTransformParameterfvHP)(target, pname, params);  }
PFNGLIMAGETRANSFORMPARAMETERIHPPROC __glImageTransformParameteriHP = nullptr; void APIENTRY glImageTransformParameteriHP (GLenum target, GLenum pname, GLint param) { if (__glImageTransformParameteriHP != 0) (__glImageTransformParameteriHP)(target, pname, param);  }
PFNGLIMAGETRANSFORMPARAMETERIVHPPROC __glImageTransformParameterivHP = nullptr; void APIENTRY glImageTransformParameterivHP (GLenum target, GLenum pname, const GLint *params) { if (__glImageTransformParameterivHP != 0) (__glImageTransformParameterivHP)(target, pname, params);  }
bool __loadGL_HP_image_transform(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glGetImageTransformParameterfvHP = (PFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC)proc((const GLubyte*)"glGetImageTransformParameterfvHP")) != nullptr) || r;
    r = ((__glGetImageTransformParameterivHP = (PFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC)proc((const GLubyte*)"glGetImageTransformParameterivHP")) != nullptr) || r;
    r = ((__glImageTransformParameterfHP = (PFNGLIMAGETRANSFORMPARAMETERFHPPROC)proc((const GLubyte*)"glImageTransformParameterfHP")) != nullptr) || r;
    r = ((__glImageTransformParameterfvHP = (PFNGLIMAGETRANSFORMPARAMETERFVHPPROC)proc((const GLubyte*)"glImageTransformParameterfvHP")) != nullptr) || r;
    r = ((__glImageTransformParameteriHP = (PFNGLIMAGETRANSFORMPARAMETERIHPPROC)proc((const GLubyte*)"glImageTransformParameteriHP")) != nullptr) || r;
    r = ((__glImageTransformParameterivHP = (PFNGLIMAGETRANSFORMPARAMETERIVHPPROC)proc((const GLubyte*)"glImageTransformParameterivHP")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_HP_image_transform = false;
/* GL_HP_occlusion_test */
bool __loadGL_HP_occlusion_test(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_HP_occlusion_test = false;
/* GL_HP_texture_lighting */
bool __loadGL_HP_texture_lighting(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_HP_texture_lighting = false;
/* GL_IBM_cull_vertex */
bool __loadGL_IBM_cull_vertex(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_IBM_cull_vertex = false;
/* GL_IBM_multimode_draw_arrays */
PFNGLMULTIMODEDRAWARRAYSIBMPROC __glMultiModeDrawArraysIBM = nullptr; void APIENTRY glMultiModeDrawArraysIBM (const GLenum *mode, const GLint *first, const GLsizei *count, GLsizei primcount, GLint modestride) { if (__glMultiModeDrawArraysIBM != 0) (__glMultiModeDrawArraysIBM)(mode, first, count, primcount, modestride);  }
PFNGLMULTIMODEDRAWELEMENTSIBMPROC __glMultiModeDrawElementsIBM = nullptr; void APIENTRY glMultiModeDrawElementsIBM (const GLenum *mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei primcount, GLint modestride) { if (__glMultiModeDrawElementsIBM != 0) (__glMultiModeDrawElementsIBM)(mode, count, type, indices, primcount, modestride);  }
bool __loadGL_IBM_multimode_draw_arrays(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glMultiModeDrawArraysIBM = (PFNGLMULTIMODEDRAWARRAYSIBMPROC)proc((const GLubyte*)"glMultiModeDrawArraysIBM")) != nullptr) || r;
    r = ((__glMultiModeDrawElementsIBM = (PFNGLMULTIMODEDRAWELEMENTSIBMPROC)proc((const GLubyte*)"glMultiModeDrawElementsIBM")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_IBM_multimode_draw_arrays = false;
/* GL_IBM_rasterpos_clip */
bool __loadGL_IBM_rasterpos_clip(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_IBM_rasterpos_clip = false;
/* GL_IBM_static_data */
PFNGLFLUSHSTATICDATAIBMPROC __glFlushStaticDataIBM = nullptr; void APIENTRY glFlushStaticDataIBM (GLenum target) { if (__glFlushStaticDataIBM != 0) (__glFlushStaticDataIBM)(target);  }
bool __loadGL_IBM_static_data(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glFlushStaticDataIBM = (PFNGLFLUSHSTATICDATAIBMPROC)proc((const GLubyte*)"glFlushStaticDataIBM")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_IBM_static_data = false;
/* GL_IBM_texture_mirrored_repeat */
bool __loadGL_IBM_texture_mirrored_repeat(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_IBM_texture_mirrored_repeat = false;
/* GL_IBM_vertex_array_lists */
PFNGLCOLORPOINTERLISTIBMPROC __glColorPointerListIBM = nullptr; void APIENTRY glColorPointerListIBM (GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride) { if (__glColorPointerListIBM != 0) (__glColorPointerListIBM)(size, type, stride, pointer, ptrstride);  }
PFNGLEDGEFLAGPOINTERLISTIBMPROC __glEdgeFlagPointerListIBM = nullptr; void APIENTRY glEdgeFlagPointerListIBM (GLint stride, const GLboolean **pointer, GLint ptrstride) { if (__glEdgeFlagPointerListIBM != 0) (__glEdgeFlagPointerListIBM)(stride, pointer, ptrstride);  }
PFNGLFOGCOORDPOINTERLISTIBMPROC __glFogCoordPointerListIBM = nullptr; void APIENTRY glFogCoordPointerListIBM (GLenum type, GLint stride, const void **pointer, GLint ptrstride) { if (__glFogCoordPointerListIBM != 0) (__glFogCoordPointerListIBM)(type, stride, pointer, ptrstride);  }
PFNGLINDEXPOINTERLISTIBMPROC __glIndexPointerListIBM = nullptr; void APIENTRY glIndexPointerListIBM (GLenum type, GLint stride, const void **pointer, GLint ptrstride) { if (__glIndexPointerListIBM != 0) (__glIndexPointerListIBM)(type, stride, pointer, ptrstride);  }
PFNGLNORMALPOINTERLISTIBMPROC __glNormalPointerListIBM = nullptr; void APIENTRY glNormalPointerListIBM (GLenum type, GLint stride, const void **pointer, GLint ptrstride) { if (__glNormalPointerListIBM != 0) (__glNormalPointerListIBM)(type, stride, pointer, ptrstride);  }
PFNGLSECONDARYCOLORPOINTERLISTIBMPROC __glSecondaryColorPointerListIBM = nullptr; void APIENTRY glSecondaryColorPointerListIBM (GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride) { if (__glSecondaryColorPointerListIBM != 0) (__glSecondaryColorPointerListIBM)(size, type, stride, pointer, ptrstride);  }
PFNGLTEXCOORDPOINTERLISTIBMPROC __glTexCoordPointerListIBM = nullptr; void APIENTRY glTexCoordPointerListIBM (GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride) { if (__glTexCoordPointerListIBM != 0) (__glTexCoordPointerListIBM)(size, type, stride, pointer, ptrstride);  }
PFNGLVERTEXPOINTERLISTIBMPROC __glVertexPointerListIBM = nullptr; void APIENTRY glVertexPointerListIBM (GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride) { if (__glVertexPointerListIBM != 0) (__glVertexPointerListIBM)(size, type, stride, pointer, ptrstride);  }
bool __loadGL_IBM_vertex_array_lists(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glColorPointerListIBM = (PFNGLCOLORPOINTERLISTIBMPROC)proc((const GLubyte*)"glColorPointerListIBM")) != nullptr) || r;
    r = ((__glEdgeFlagPointerListIBM = (PFNGLEDGEFLAGPOINTERLISTIBMPROC)proc((const GLubyte*)"glEdgeFlagPointerListIBM")) != nullptr) || r;
    r = ((__glFogCoordPointerListIBM = (PFNGLFOGCOORDPOINTERLISTIBMPROC)proc((const GLubyte*)"glFogCoordPointerListIBM")) != nullptr) || r;
    r = ((__glIndexPointerListIBM = (PFNGLINDEXPOINTERLISTIBMPROC)proc((const GLubyte*)"glIndexPointerListIBM")) != nullptr) || r;
    r = ((__glNormalPointerListIBM = (PFNGLNORMALPOINTERLISTIBMPROC)proc((const GLubyte*)"glNormalPointerListIBM")) != nullptr) || r;
    r = ((__glSecondaryColorPointerListIBM = (PFNGLSECONDARYCOLORPOINTERLISTIBMPROC)proc((const GLubyte*)"glSecondaryColorPointerListIBM")) != nullptr) || r;
    r = ((__glTexCoordPointerListIBM = (PFNGLTEXCOORDPOINTERLISTIBMPROC)proc((const GLubyte*)"glTexCoordPointerListIBM")) != nullptr) || r;
    r = ((__glVertexPointerListIBM = (PFNGLVERTEXPOINTERLISTIBMPROC)proc((const GLubyte*)"glVertexPointerListIBM")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_IBM_vertex_array_lists = false;
/* GL_INGR_blend_func_separate */
PFNGLBLENDFUNCSEPARATEINGRPROC __glBlendFuncSeparateINGR = nullptr; void APIENTRY glBlendFuncSeparateINGR (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha) { if (__glBlendFuncSeparateINGR != 0) (__glBlendFuncSeparateINGR)(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);  }
bool __loadGL_INGR_blend_func_separate(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glBlendFuncSeparateINGR = (PFNGLBLENDFUNCSEPARATEINGRPROC)proc((const GLubyte*)"glBlendFuncSeparateINGR")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_INGR_blend_func_separate = false;
/* GL_INGR_color_clamp */
bool __loadGL_INGR_color_clamp(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_INGR_color_clamp = false;
/* GL_INGR_interlace_read */
bool __loadGL_INGR_interlace_read(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_INGR_interlace_read = false;
/* GL_INTEL_fragment_shader_ordering */
bool __loadGL_INTEL_fragment_shader_ordering(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_INTEL_fragment_shader_ordering = false;
/* GL_INTEL_framebuffer_CMAA */
PFNGLAPPLYFRAMEBUFFERATTACHMENTCMAAINTELPROC __glApplyFramebufferAttachmentCMAAINTEL = nullptr; void APIENTRY glApplyFramebufferAttachmentCMAAINTEL () { if (__glApplyFramebufferAttachmentCMAAINTEL != 0) (__glApplyFramebufferAttachmentCMAAINTEL)();  }
bool __loadGL_INTEL_framebuffer_CMAA(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glApplyFramebufferAttachmentCMAAINTEL = (PFNGLAPPLYFRAMEBUFFERATTACHMENTCMAAINTELPROC)proc((const GLubyte*)"glApplyFramebufferAttachmentCMAAINTEL")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_INTEL_framebuffer_CMAA = false;
/* GL_INTEL_map_texture */
PFNGLMAPTEXTURE2DINTELPROC __glMapTexture2DINTEL = nullptr; void *APIENTRY glMapTexture2DINTEL (GLuint texture, GLint level, GLbitfield access, GLint *stride, GLenum *layout) { if (__glMapTexture2DINTEL != 0) return (__glMapTexture2DINTEL)(texture, level, access, stride, layout); return 0; }
PFNGLSYNCTEXTUREINTELPROC __glSyncTextureINTEL = nullptr; void APIENTRY glSyncTextureINTEL (GLuint texture) { if (__glSyncTextureINTEL != 0) (__glSyncTextureINTEL)(texture);  }
PFNGLUNMAPTEXTURE2DINTELPROC __glUnmapTexture2DINTEL = nullptr; void APIENTRY glUnmapTexture2DINTEL (GLuint texture, GLint level) { if (__glUnmapTexture2DINTEL != 0) (__glUnmapTexture2DINTEL)(texture, level);  }
bool __loadGL_INTEL_map_texture(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glMapTexture2DINTEL = (PFNGLMAPTEXTURE2DINTELPROC)proc((const GLubyte*)"glMapTexture2DINTEL")) != nullptr) || r;
    r = ((__glSyncTextureINTEL = (PFNGLSYNCTEXTUREINTELPROC)proc((const GLubyte*)"glSyncTextureINTEL")) != nullptr) || r;
    r = ((__glUnmapTexture2DINTEL = (PFNGLUNMAPTEXTURE2DINTELPROC)proc((const GLubyte*)"glUnmapTexture2DINTEL")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_INTEL_map_texture = false;
/* GL_INTEL_parallel_arrays */
PFNGLCOLORPOINTERVINTELPROC __glColorPointervINTEL = nullptr; void APIENTRY glColorPointervINTEL (GLint size, GLenum type, const void **pointer) { if (__glColorPointervINTEL != 0) (__glColorPointervINTEL)(size, type, pointer);  }
PFNGLNORMALPOINTERVINTELPROC __glNormalPointervINTEL = nullptr; void APIENTRY glNormalPointervINTEL (GLenum type, const void **pointer) { if (__glNormalPointervINTEL != 0) (__glNormalPointervINTEL)(type, pointer);  }
PFNGLTEXCOORDPOINTERVINTELPROC __glTexCoordPointervINTEL = nullptr; void APIENTRY glTexCoordPointervINTEL (GLint size, GLenum type, const void **pointer) { if (__glTexCoordPointervINTEL != 0) (__glTexCoordPointervINTEL)(size, type, pointer);  }
PFNGLVERTEXPOINTERVINTELPROC __glVertexPointervINTEL = nullptr; void APIENTRY glVertexPointervINTEL (GLint size, GLenum type, const void **pointer) { if (__glVertexPointervINTEL != 0) (__glVertexPointervINTEL)(size, type, pointer);  }
bool __loadGL_INTEL_parallel_arrays(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glColorPointervINTEL = (PFNGLCOLORPOINTERVINTELPROC)proc((const GLubyte*)"glColorPointervINTEL")) != nullptr) || r;
    r = ((__glNormalPointervINTEL = (PFNGLNORMALPOINTERVINTELPROC)proc((const GLubyte*)"glNormalPointervINTEL")) != nullptr) || r;
    r = ((__glTexCoordPointervINTEL = (PFNGLTEXCOORDPOINTERVINTELPROC)proc((const GLubyte*)"glTexCoordPointervINTEL")) != nullptr) || r;
    r = ((__glVertexPointervINTEL = (PFNGLVERTEXPOINTERVINTELPROC)proc((const GLubyte*)"glVertexPointervINTEL")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_INTEL_parallel_arrays = false;
/* GL_INTEL_performance_query */
PFNGLBEGINPERFQUERYINTELPROC __glBeginPerfQueryINTEL = nullptr; void APIENTRY glBeginPerfQueryINTEL (GLuint queryHandle) { if (__glBeginPerfQueryINTEL != 0) (__glBeginPerfQueryINTEL)(queryHandle);  }
PFNGLCREATEPERFQUERYINTELPROC __glCreatePerfQueryINTEL = nullptr; void APIENTRY glCreatePerfQueryINTEL (GLuint queryId, GLuint *queryHandle) { if (__glCreatePerfQueryINTEL != 0) (__glCreatePerfQueryINTEL)(queryId, queryHandle);  }
PFNGLDELETEPERFQUERYINTELPROC __glDeletePerfQueryINTEL = nullptr; void APIENTRY glDeletePerfQueryINTEL (GLuint queryHandle) { if (__glDeletePerfQueryINTEL != 0) (__glDeletePerfQueryINTEL)(queryHandle);  }
PFNGLENDPERFQUERYINTELPROC __glEndPerfQueryINTEL = nullptr; void APIENTRY glEndPerfQueryINTEL (GLuint queryHandle) { if (__glEndPerfQueryINTEL != 0) (__glEndPerfQueryINTEL)(queryHandle);  }
PFNGLGETFIRSTPERFQUERYIDINTELPROC __glGetFirstPerfQueryIdINTEL = nullptr; void APIENTRY glGetFirstPerfQueryIdINTEL (GLuint *queryId) { if (__glGetFirstPerfQueryIdINTEL != 0) (__glGetFirstPerfQueryIdINTEL)(queryId);  }
PFNGLGETNEXTPERFQUERYIDINTELPROC __glGetNextPerfQueryIdINTEL = nullptr; void APIENTRY glGetNextPerfQueryIdINTEL (GLuint queryId, GLuint *nextQueryId) { if (__glGetNextPerfQueryIdINTEL != 0) (__glGetNextPerfQueryIdINTEL)(queryId, nextQueryId);  }
PFNGLGETPERFCOUNTERINFOINTELPROC __glGetPerfCounterInfoINTEL = nullptr; void APIENTRY glGetPerfCounterInfoINTEL (GLuint queryId, GLuint counterId, GLuint counterNameLength, GLchar *counterName, GLuint counterDescLength, GLchar *counterDesc, GLuint *counterOffset, GLuint *counterDataSize, GLuint *counterTypeEnum, GLuint *counterDataTypeEnum, GLuint64 *rawCounterMaxValue) { if (__glGetPerfCounterInfoINTEL != 0) (__glGetPerfCounterInfoINTEL)(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, counterDataSize, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue);  }
PFNGLGETPERFQUERYDATAINTELPROC __glGetPerfQueryDataINTEL = nullptr; void APIENTRY glGetPerfQueryDataINTEL (GLuint queryHandle, GLuint flags, GLsizei dataSize, GLvoid *data, GLuint *bytesWritten) { if (__glGetPerfQueryDataINTEL != 0) (__glGetPerfQueryDataINTEL)(queryHandle, flags, dataSize, data, bytesWritten);  }
PFNGLGETPERFQUERYIDBYNAMEINTELPROC __glGetPerfQueryIdByNameINTEL = nullptr; void APIENTRY glGetPerfQueryIdByNameINTEL (GLchar *queryName, GLuint *queryId) { if (__glGetPerfQueryIdByNameINTEL != 0) (__glGetPerfQueryIdByNameINTEL)(queryName, queryId);  }
PFNGLGETPERFQUERYINFOINTELPROC __glGetPerfQueryInfoINTEL = nullptr; void APIENTRY glGetPerfQueryInfoINTEL (GLuint queryId, GLuint queryNameLength, GLchar *queryName, GLuint *dataSize, GLuint *noCounters, GLuint *noInstances, GLuint *capsMask) { if (__glGetPerfQueryInfoINTEL != 0) (__glGetPerfQueryInfoINTEL)(queryId, queryNameLength, queryName, dataSize, noCounters, noInstances, capsMask);  }
bool __loadGL_INTEL_performance_query(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glBeginPerfQueryINTEL = (PFNGLBEGINPERFQUERYINTELPROC)proc((const GLubyte*)"glBeginPerfQueryINTEL")) != nullptr) || r;
    r = ((__glCreatePerfQueryINTEL = (PFNGLCREATEPERFQUERYINTELPROC)proc((const GLubyte*)"glCreatePerfQueryINTEL")) != nullptr) || r;
    r = ((__glDeletePerfQueryINTEL = (PFNGLDELETEPERFQUERYINTELPROC)proc((const GLubyte*)"glDeletePerfQueryINTEL")) != nullptr) || r;
    r = ((__glEndPerfQueryINTEL = (PFNGLENDPERFQUERYINTELPROC)proc((const GLubyte*)"glEndPerfQueryINTEL")) != nullptr) || r;
    r = ((__glGetFirstPerfQueryIdINTEL = (PFNGLGETFIRSTPERFQUERYIDINTELPROC)proc((const GLubyte*)"glGetFirstPerfQueryIdINTEL")) != nullptr) || r;
    r = ((__glGetNextPerfQueryIdINTEL = (PFNGLGETNEXTPERFQUERYIDINTELPROC)proc((const GLubyte*)"glGetNextPerfQueryIdINTEL")) != nullptr) || r;
    r = ((__glGetPerfCounterInfoINTEL = (PFNGLGETPERFCOUNTERINFOINTELPROC)proc((const GLubyte*)"glGetPerfCounterInfoINTEL")) != nullptr) || r;
    r = ((__glGetPerfQueryDataINTEL = (PFNGLGETPERFQUERYDATAINTELPROC)proc((const GLubyte*)"glGetPerfQueryDataINTEL")) != nullptr) || r;
    r = ((__glGetPerfQueryIdByNameINTEL = (PFNGLGETPERFQUERYIDBYNAMEINTELPROC)proc((const GLubyte*)"glGetPerfQueryIdByNameINTEL")) != nullptr) || r;
    r = ((__glGetPerfQueryInfoINTEL = (PFNGLGETPERFQUERYINFOINTELPROC)proc((const GLubyte*)"glGetPerfQueryInfoINTEL")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_INTEL_performance_query = false;
/* GL_MESAX_texture_stack */
bool __loadGL_MESAX_texture_stack(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_MESAX_texture_stack = false;
/* GL_MESA_pack_invert */
bool __loadGL_MESA_pack_invert(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_MESA_pack_invert = false;
/* GL_MESA_resize_buffers */
PFNGLRESIZEBUFFERSMESAPROC __glResizeBuffersMESA = nullptr; void APIENTRY glResizeBuffersMESA () { if (__glResizeBuffersMESA != 0) (__glResizeBuffersMESA)();  }
bool __loadGL_MESA_resize_buffers(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glResizeBuffersMESA = (PFNGLRESIZEBUFFERSMESAPROC)proc((const GLubyte*)"glResizeBuffersMESA")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_MESA_resize_buffers = false;
/* GL_MESA_window_pos */
PFNGLWINDOWPOS2DMESAPROC __glWindowPos2dMESA = nullptr; void APIENTRY glWindowPos2dMESA (GLdouble x, GLdouble y) { if (__glWindowPos2dMESA != 0) (__glWindowPos2dMESA)(x, y);  }
PFNGLWINDOWPOS2DVMESAPROC __glWindowPos2dvMESA = nullptr; void APIENTRY glWindowPos2dvMESA (const GLdouble *v) { if (__glWindowPos2dvMESA != 0) (__glWindowPos2dvMESA)(v);  }
PFNGLWINDOWPOS2FMESAPROC __glWindowPos2fMESA = nullptr; void APIENTRY glWindowPos2fMESA (GLfloat x, GLfloat y) { if (__glWindowPos2fMESA != 0) (__glWindowPos2fMESA)(x, y);  }
PFNGLWINDOWPOS2FVMESAPROC __glWindowPos2fvMESA = nullptr; void APIENTRY glWindowPos2fvMESA (const GLfloat *v) { if (__glWindowPos2fvMESA != 0) (__glWindowPos2fvMESA)(v);  }
PFNGLWINDOWPOS2IMESAPROC __glWindowPos2iMESA = nullptr; void APIENTRY glWindowPos2iMESA (GLint x, GLint y) { if (__glWindowPos2iMESA != 0) (__glWindowPos2iMESA)(x, y);  }
PFNGLWINDOWPOS2IVMESAPROC __glWindowPos2ivMESA = nullptr; void APIENTRY glWindowPos2ivMESA (const GLint *v) { if (__glWindowPos2ivMESA != 0) (__glWindowPos2ivMESA)(v);  }
PFNGLWINDOWPOS2SMESAPROC __glWindowPos2sMESA = nullptr; void APIENTRY glWindowPos2sMESA (GLshort x, GLshort y) { if (__glWindowPos2sMESA != 0) (__glWindowPos2sMESA)(x, y);  }
PFNGLWINDOWPOS2SVMESAPROC __glWindowPos2svMESA = nullptr; void APIENTRY glWindowPos2svMESA (const GLshort *v) { if (__glWindowPos2svMESA != 0) (__glWindowPos2svMESA)(v);  }
PFNGLWINDOWPOS3DMESAPROC __glWindowPos3dMESA = nullptr; void APIENTRY glWindowPos3dMESA (GLdouble x, GLdouble y, GLdouble z) { if (__glWindowPos3dMESA != 0) (__glWindowPos3dMESA)(x, y, z);  }
PFNGLWINDOWPOS3DVMESAPROC __glWindowPos3dvMESA = nullptr; void APIENTRY glWindowPos3dvMESA (const GLdouble *v) { if (__glWindowPos3dvMESA != 0) (__glWindowPos3dvMESA)(v);  }
PFNGLWINDOWPOS3FMESAPROC __glWindowPos3fMESA = nullptr; void APIENTRY glWindowPos3fMESA (GLfloat x, GLfloat y, GLfloat z) { if (__glWindowPos3fMESA != 0) (__glWindowPos3fMESA)(x, y, z);  }
PFNGLWINDOWPOS3FVMESAPROC __glWindowPos3fvMESA = nullptr; void APIENTRY glWindowPos3fvMESA (const GLfloat *v) { if (__glWindowPos3fvMESA != 0) (__glWindowPos3fvMESA)(v);  }
PFNGLWINDOWPOS3IMESAPROC __glWindowPos3iMESA = nullptr; void APIENTRY glWindowPos3iMESA (GLint x, GLint y, GLint z) { if (__glWindowPos3iMESA != 0) (__glWindowPos3iMESA)(x, y, z);  }
PFNGLWINDOWPOS3IVMESAPROC __glWindowPos3ivMESA = nullptr; void APIENTRY glWindowPos3ivMESA (const GLint *v) { if (__glWindowPos3ivMESA != 0) (__glWindowPos3ivMESA)(v);  }
PFNGLWINDOWPOS3SMESAPROC __glWindowPos3sMESA = nullptr; void APIENTRY glWindowPos3sMESA (GLshort x, GLshort y, GLshort z) { if (__glWindowPos3sMESA != 0) (__glWindowPos3sMESA)(x, y, z);  }
PFNGLWINDOWPOS3SVMESAPROC __glWindowPos3svMESA = nullptr; void APIENTRY glWindowPos3svMESA (const GLshort *v) { if (__glWindowPos3svMESA != 0) (__glWindowPos3svMESA)(v);  }
PFNGLWINDOWPOS4DMESAPROC __glWindowPos4dMESA = nullptr; void APIENTRY glWindowPos4dMESA (GLdouble x, GLdouble y, GLdouble z, GLdouble w) { if (__glWindowPos4dMESA != 0) (__glWindowPos4dMESA)(x, y, z, w);  }
PFNGLWINDOWPOS4DVMESAPROC __glWindowPos4dvMESA = nullptr; void APIENTRY glWindowPos4dvMESA (const GLdouble *v) { if (__glWindowPos4dvMESA != 0) (__glWindowPos4dvMESA)(v);  }
PFNGLWINDOWPOS4FMESAPROC __glWindowPos4fMESA = nullptr; void APIENTRY glWindowPos4fMESA (GLfloat x, GLfloat y, GLfloat z, GLfloat w) { if (__glWindowPos4fMESA != 0) (__glWindowPos4fMESA)(x, y, z, w);  }
PFNGLWINDOWPOS4FVMESAPROC __glWindowPos4fvMESA = nullptr; void APIENTRY glWindowPos4fvMESA (const GLfloat *v) { if (__glWindowPos4fvMESA != 0) (__glWindowPos4fvMESA)(v);  }
PFNGLWINDOWPOS4IMESAPROC __glWindowPos4iMESA = nullptr; void APIENTRY glWindowPos4iMESA (GLint x, GLint y, GLint z, GLint w) { if (__glWindowPos4iMESA != 0) (__glWindowPos4iMESA)(x, y, z, w);  }
PFNGLWINDOWPOS4IVMESAPROC __glWindowPos4ivMESA = nullptr; void APIENTRY glWindowPos4ivMESA (const GLint *v) { if (__glWindowPos4ivMESA != 0) (__glWindowPos4ivMESA)(v);  }
PFNGLWINDOWPOS4SMESAPROC __glWindowPos4sMESA = nullptr; void APIENTRY glWindowPos4sMESA (GLshort x, GLshort y, GLshort z, GLshort w) { if (__glWindowPos4sMESA != 0) (__glWindowPos4sMESA)(x, y, z, w);  }
PFNGLWINDOWPOS4SVMESAPROC __glWindowPos4svMESA = nullptr; void APIENTRY glWindowPos4svMESA (const GLshort *v) { if (__glWindowPos4svMESA != 0) (__glWindowPos4svMESA)(v);  }
bool __loadGL_MESA_window_pos(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glWindowPos2dMESA = (PFNGLWINDOWPOS2DMESAPROC)proc((const GLubyte*)"glWindowPos2dMESA")) != nullptr) || r;
    r = ((__glWindowPos2dvMESA = (PFNGLWINDOWPOS2DVMESAPROC)proc((const GLubyte*)"glWindowPos2dvMESA")) != nullptr) || r;
    r = ((__glWindowPos2fMESA = (PFNGLWINDOWPOS2FMESAPROC)proc((const GLubyte*)"glWindowPos2fMESA")) != nullptr) || r;
    r = ((__glWindowPos2fvMESA = (PFNGLWINDOWPOS2FVMESAPROC)proc((const GLubyte*)"glWindowPos2fvMESA")) != nullptr) || r;
    r = ((__glWindowPos2iMESA = (PFNGLWINDOWPOS2IMESAPROC)proc((const GLubyte*)"glWindowPos2iMESA")) != nullptr) || r;
    r = ((__glWindowPos2ivMESA = (PFNGLWINDOWPOS2IVMESAPROC)proc((const GLubyte*)"glWindowPos2ivMESA")) != nullptr) || r;
    r = ((__glWindowPos2sMESA = (PFNGLWINDOWPOS2SMESAPROC)proc((const GLubyte*)"glWindowPos2sMESA")) != nullptr) || r;
    r = ((__glWindowPos2svMESA = (PFNGLWINDOWPOS2SVMESAPROC)proc((const GLubyte*)"glWindowPos2svMESA")) != nullptr) || r;
    r = ((__glWindowPos3dMESA = (PFNGLWINDOWPOS3DMESAPROC)proc((const GLubyte*)"glWindowPos3dMESA")) != nullptr) || r;
    r = ((__glWindowPos3dvMESA = (PFNGLWINDOWPOS3DVMESAPROC)proc((const GLubyte*)"glWindowPos3dvMESA")) != nullptr) || r;
    r = ((__glWindowPos3fMESA = (PFNGLWINDOWPOS3FMESAPROC)proc((const GLubyte*)"glWindowPos3fMESA")) != nullptr) || r;
    r = ((__glWindowPos3fvMESA = (PFNGLWINDOWPOS3FVMESAPROC)proc((const GLubyte*)"glWindowPos3fvMESA")) != nullptr) || r;
    r = ((__glWindowPos3iMESA = (PFNGLWINDOWPOS3IMESAPROC)proc((const GLubyte*)"glWindowPos3iMESA")) != nullptr) || r;
    r = ((__glWindowPos3ivMESA = (PFNGLWINDOWPOS3IVMESAPROC)proc((const GLubyte*)"glWindowPos3ivMESA")) != nullptr) || r;
    r = ((__glWindowPos3sMESA = (PFNGLWINDOWPOS3SMESAPROC)proc((const GLubyte*)"glWindowPos3sMESA")) != nullptr) || r;
    r = ((__glWindowPos3svMESA = (PFNGLWINDOWPOS3SVMESAPROC)proc((const GLubyte*)"glWindowPos3svMESA")) != nullptr) || r;
    r = ((__glWindowPos4dMESA = (PFNGLWINDOWPOS4DMESAPROC)proc((const GLubyte*)"glWindowPos4dMESA")) != nullptr) || r;
    r = ((__glWindowPos4dvMESA = (PFNGLWINDOWPOS4DVMESAPROC)proc((const GLubyte*)"glWindowPos4dvMESA")) != nullptr) || r;
    r = ((__glWindowPos4fMESA = (PFNGLWINDOWPOS4FMESAPROC)proc((const GLubyte*)"glWindowPos4fMESA")) != nullptr) || r;
    r = ((__glWindowPos4fvMESA = (PFNGLWINDOWPOS4FVMESAPROC)proc((const GLubyte*)"glWindowPos4fvMESA")) != nullptr) || r;
    r = ((__glWindowPos4iMESA = (PFNGLWINDOWPOS4IMESAPROC)proc((const GLubyte*)"glWindowPos4iMESA")) != nullptr) || r;
    r = ((__glWindowPos4ivMESA = (PFNGLWINDOWPOS4IVMESAPROC)proc((const GLubyte*)"glWindowPos4ivMESA")) != nullptr) || r;
    r = ((__glWindowPos4sMESA = (PFNGLWINDOWPOS4SMESAPROC)proc((const GLubyte*)"glWindowPos4sMESA")) != nullptr) || r;
    r = ((__glWindowPos4svMESA = (PFNGLWINDOWPOS4SVMESAPROC)proc((const GLubyte*)"glWindowPos4svMESA")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_MESA_window_pos = false;
/* GL_MESA_ycbcr_texture */
bool __loadGL_MESA_ycbcr_texture(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_MESA_ycbcr_texture = false;
/* GL_NVX_conditional_render */
PFNGLBEGINCONDITIONALRENDERNVXPROC __glBeginConditionalRenderNVX = nullptr; void APIENTRY glBeginConditionalRenderNVX (GLuint id) { if (__glBeginConditionalRenderNVX != 0) (__glBeginConditionalRenderNVX)(id);  }
PFNGLENDCONDITIONALRENDERNVXPROC __glEndConditionalRenderNVX = nullptr; void APIENTRY glEndConditionalRenderNVX () { if (__glEndConditionalRenderNVX != 0) (__glEndConditionalRenderNVX)();  }
bool __loadGL_NVX_conditional_render(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glBeginConditionalRenderNVX = (PFNGLBEGINCONDITIONALRENDERNVXPROC)proc((const GLubyte*)"glBeginConditionalRenderNVX")) != nullptr) || r;
    r = ((__glEndConditionalRenderNVX = (PFNGLENDCONDITIONALRENDERNVXPROC)proc((const GLubyte*)"glEndConditionalRenderNVX")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_NVX_conditional_render = false;
/* GL_NVX_gpu_memory_info */
bool __loadGL_NVX_gpu_memory_info(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_NVX_gpu_memory_info = false;
/* GL_NV_bindless_multi_draw_indirect */
PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSNVPROC __glMultiDrawArraysIndirectBindlessNV = nullptr; void APIENTRY glMultiDrawArraysIndirectBindlessNV (GLenum mode, const void *indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount) { if (__glMultiDrawArraysIndirectBindlessNV != 0) (__glMultiDrawArraysIndirectBindlessNV)(mode, indirect, drawCount, stride, vertexBufferCount);  }
PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSNVPROC __glMultiDrawElementsIndirectBindlessNV = nullptr; void APIENTRY glMultiDrawElementsIndirectBindlessNV (GLenum mode, GLenum type, const void *indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount) { if (__glMultiDrawElementsIndirectBindlessNV != 0) (__glMultiDrawElementsIndirectBindlessNV)(mode, type, indirect, drawCount, stride, vertexBufferCount);  }
bool __loadGL_NV_bindless_multi_draw_indirect(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glMultiDrawArraysIndirectBindlessNV = (PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSNVPROC)proc((const GLubyte*)"glMultiDrawArraysIndirectBindlessNV")) != nullptr) || r;
    r = ((__glMultiDrawElementsIndirectBindlessNV = (PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSNVPROC)proc((const GLubyte*)"glMultiDrawElementsIndirectBindlessNV")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_NV_bindless_multi_draw_indirect = false;
/* GL_NV_bindless_multi_draw_indirect_count */
PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSCOUNTNVPROC __glMultiDrawArraysIndirectBindlessCountNV = nullptr; void APIENTRY glMultiDrawArraysIndirectBindlessCountNV (GLenum mode, const void *indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount) { if (__glMultiDrawArraysIndirectBindlessCountNV != 0) (__glMultiDrawArraysIndirectBindlessCountNV)(mode, indirect, drawCount, maxDrawCount, stride, vertexBufferCount);  }
PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSCOUNTNVPROC __glMultiDrawElementsIndirectBindlessCountNV = nullptr; void APIENTRY glMultiDrawElementsIndirectBindlessCountNV (GLenum mode, GLenum type, const void *indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount) { if (__glMultiDrawElementsIndirectBindlessCountNV != 0) (__glMultiDrawElementsIndirectBindlessCountNV)(mode, type, indirect, drawCount, maxDrawCount, stride, vertexBufferCount);  }
bool __loadGL_NV_bindless_multi_draw_indirect_count(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glMultiDrawArraysIndirectBindlessCountNV = (PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSCOUNTNVPROC)proc((const GLubyte*)"glMultiDrawArraysIndirectBindlessCountNV")) != nullptr) || r;
    r = ((__glMultiDrawElementsIndirectBindlessCountNV = (PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSCOUNTNVPROC)proc((const GLubyte*)"glMultiDrawElementsIndirectBindlessCountNV")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_NV_bindless_multi_draw_indirect_count = false;
/* GL_NV_bindless_texture */
PFNGLGETIMAGEHANDLENVPROC __glGetImageHandleNV = nullptr; GLuint64 APIENTRY glGetImageHandleNV (GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format) { if (__glGetImageHandleNV != 0) return (__glGetImageHandleNV)(texture, level, layered, layer, format); return 0; }
PFNGLGETTEXTUREHANDLENVPROC __glGetTextureHandleNV = nullptr; GLuint64 APIENTRY glGetTextureHandleNV (GLuint texture) { if (__glGetTextureHandleNV != 0) return (__glGetTextureHandleNV)(texture); return 0; }
PFNGLGETTEXTURESAMPLERHANDLENVPROC __glGetTextureSamplerHandleNV = nullptr; GLuint64 APIENTRY glGetTextureSamplerHandleNV (GLuint texture, GLuint sampler) { if (__glGetTextureSamplerHandleNV != 0) return (__glGetTextureSamplerHandleNV)(texture, sampler); return 0; }
PFNGLISIMAGEHANDLERESIDENTNVPROC __glIsImageHandleResidentNV = nullptr; GLboolean APIENTRY glIsImageHandleResidentNV (GLuint64 handle) { if (__glIsImageHandleResidentNV != 0) return (__glIsImageHandleResidentNV)(handle); return 0; }
PFNGLISTEXTUREHANDLERESIDENTNVPROC __glIsTextureHandleResidentNV = nullptr; GLboolean APIENTRY glIsTextureHandleResidentNV (GLuint64 handle) { if (__glIsTextureHandleResidentNV != 0) return (__glIsTextureHandleResidentNV)(handle); return 0; }
PFNGLMAKEIMAGEHANDLENONRESIDENTNVPROC __glMakeImageHandleNonResidentNV = nullptr; void APIENTRY glMakeImageHandleNonResidentNV (GLuint64 handle) { if (__glMakeImageHandleNonResidentNV != 0) (__glMakeImageHandleNonResidentNV)(handle);  }
PFNGLMAKEIMAGEHANDLERESIDENTNVPROC __glMakeImageHandleResidentNV = nullptr; void APIENTRY glMakeImageHandleResidentNV (GLuint64 handle, GLenum access) { if (__glMakeImageHandleResidentNV != 0) (__glMakeImageHandleResidentNV)(handle, access);  }
PFNGLMAKETEXTUREHANDLENONRESIDENTNVPROC __glMakeTextureHandleNonResidentNV = nullptr; void APIENTRY glMakeTextureHandleNonResidentNV (GLuint64 handle) { if (__glMakeTextureHandleNonResidentNV != 0) (__glMakeTextureHandleNonResidentNV)(handle);  }
PFNGLMAKETEXTUREHANDLERESIDENTNVPROC __glMakeTextureHandleResidentNV = nullptr; void APIENTRY glMakeTextureHandleResidentNV (GLuint64 handle) { if (__glMakeTextureHandleResidentNV != 0) (__glMakeTextureHandleResidentNV)(handle);  }
PFNGLPROGRAMUNIFORMHANDLEUI64NVPROC __glProgramUniformHandleui64NV = nullptr; void APIENTRY glProgramUniformHandleui64NV (GLuint program, GLint location, GLuint64 value) { if (__glProgramUniformHandleui64NV != 0) (__glProgramUniformHandleui64NV)(program, location, value);  }
PFNGLPROGRAMUNIFORMHANDLEUI64VNVPROC __glProgramUniformHandleui64vNV = nullptr; void APIENTRY glProgramUniformHandleui64vNV (GLuint program, GLint location, GLsizei count, const GLuint64 *values) { if (__glProgramUniformHandleui64vNV != 0) (__glProgramUniformHandleui64vNV)(program, location, count, values);  }
PFNGLUNIFORMHANDLEUI64NVPROC __glUniformHandleui64NV = nullptr; void APIENTRY glUniformHandleui64NV (GLint location, GLuint64 value) { if (__glUniformHandleui64NV != 0) (__glUniformHandleui64NV)(location, value);  }
PFNGLUNIFORMHANDLEUI64VNVPROC __glUniformHandleui64vNV = nullptr; void APIENTRY glUniformHandleui64vNV (GLint location, GLsizei count, const GLuint64 *value) { if (__glUniformHandleui64vNV != 0) (__glUniformHandleui64vNV)(location, count, value);  }
bool __loadGL_NV_bindless_texture(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glGetImageHandleNV = (PFNGLGETIMAGEHANDLENVPROC)proc((const GLubyte*)"glGetImageHandleNV")) != nullptr) || r;
    r = ((__glGetTextureHandleNV = (PFNGLGETTEXTUREHANDLENVPROC)proc((const GLubyte*)"glGetTextureHandleNV")) != nullptr) || r;
    r = ((__glGetTextureSamplerHandleNV = (PFNGLGETTEXTURESAMPLERHANDLENVPROC)proc((const GLubyte*)"glGetTextureSamplerHandleNV")) != nullptr) || r;
    r = ((__glIsImageHandleResidentNV = (PFNGLISIMAGEHANDLERESIDENTNVPROC)proc((const GLubyte*)"glIsImageHandleResidentNV")) != nullptr) || r;
    r = ((__glIsTextureHandleResidentNV = (PFNGLISTEXTUREHANDLERESIDENTNVPROC)proc((const GLubyte*)"glIsTextureHandleResidentNV")) != nullptr) || r;
    r = ((__glMakeImageHandleNonResidentNV = (PFNGLMAKEIMAGEHANDLENONRESIDENTNVPROC)proc((const GLubyte*)"glMakeImageHandleNonResidentNV")) != nullptr) || r;
    r = ((__glMakeImageHandleResidentNV = (PFNGLMAKEIMAGEHANDLERESIDENTNVPROC)proc((const GLubyte*)"glMakeImageHandleResidentNV")) != nullptr) || r;
    r = ((__glMakeTextureHandleNonResidentNV = (PFNGLMAKETEXTUREHANDLENONRESIDENTNVPROC)proc((const GLubyte*)"glMakeTextureHandleNonResidentNV")) != nullptr) || r;
    r = ((__glMakeTextureHandleResidentNV = (PFNGLMAKETEXTUREHANDLERESIDENTNVPROC)proc((const GLubyte*)"glMakeTextureHandleResidentNV")) != nullptr) || r;
    r = ((__glProgramUniformHandleui64NV = (PFNGLPROGRAMUNIFORMHANDLEUI64NVPROC)proc((const GLubyte*)"glProgramUniformHandleui64NV")) != nullptr) || r;
    r = ((__glProgramUniformHandleui64vNV = (PFNGLPROGRAMUNIFORMHANDLEUI64VNVPROC)proc((const GLubyte*)"glProgramUniformHandleui64vNV")) != nullptr) || r;
    r = ((__glUniformHandleui64NV = (PFNGLUNIFORMHANDLEUI64NVPROC)proc((const GLubyte*)"glUniformHandleui64NV")) != nullptr) || r;
    r = ((__glUniformHandleui64vNV = (PFNGLUNIFORMHANDLEUI64VNVPROC)proc((const GLubyte*)"glUniformHandleui64vNV")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_NV_bindless_texture = false;
/* GL_NV_blend_equation_advanced */
PFNGLBLENDBARRIERNVPROC __glBlendBarrierNV = nullptr; void APIENTRY glBlendBarrierNV () { if (__glBlendBarrierNV != 0) (__glBlendBarrierNV)();  }
PFNGLBLENDPARAMETERINVPROC __glBlendParameteriNV = nullptr; void APIENTRY glBlendParameteriNV (GLenum pname, GLint value) { if (__glBlendParameteriNV != 0) (__glBlendParameteriNV)(pname, value);  }
bool __loadGL_NV_blend_equation_advanced(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glBlendBarrierNV = (PFNGLBLENDBARRIERNVPROC)proc((const GLubyte*)"glBlendBarrierNV")) != nullptr) || r;
    r = ((__glBlendParameteriNV = (PFNGLBLENDPARAMETERINVPROC)proc((const GLubyte*)"glBlendParameteriNV")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_NV_blend_equation_advanced = false;
/* GL_NV_blend_equation_advanced_coherent */
bool __loadGL_NV_blend_equation_advanced_coherent(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_NV_blend_equation_advanced_coherent = false;
/* GL_NV_blend_square */
bool __loadGL_NV_blend_square(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_NV_blend_square = false;
/* GL_NV_command_list */
PFNGLCALLCOMMANDLISTNVPROC __glCallCommandListNV = nullptr; void APIENTRY glCallCommandListNV (GLuint list) { if (__glCallCommandListNV != 0) (__glCallCommandListNV)(list);  }
PFNGLCOMMANDLISTSEGMENTSNVPROC __glCommandListSegmentsNV = nullptr; void APIENTRY glCommandListSegmentsNV (GLuint list, GLuint segments) { if (__glCommandListSegmentsNV != 0) (__glCommandListSegmentsNV)(list, segments);  }
PFNGLCOMPILECOMMANDLISTNVPROC __glCompileCommandListNV = nullptr; void APIENTRY glCompileCommandListNV (GLuint list) { if (__glCompileCommandListNV != 0) (__glCompileCommandListNV)(list);  }
PFNGLCREATECOMMANDLISTSNVPROC __glCreateCommandListsNV = nullptr; void APIENTRY glCreateCommandListsNV (GLsizei n, GLuint *lists) { if (__glCreateCommandListsNV != 0) (__glCreateCommandListsNV)(n, lists);  }
PFNGLCREATESTATESNVPROC __glCreateStatesNV = nullptr; void APIENTRY glCreateStatesNV (GLsizei n, GLuint *states) { if (__glCreateStatesNV != 0) (__glCreateStatesNV)(n, states);  }
PFNGLDELETECOMMANDLISTSNVPROC __glDeleteCommandListsNV = nullptr; void APIENTRY glDeleteCommandListsNV (GLsizei n, const GLuint *lists) { if (__glDeleteCommandListsNV != 0) (__glDeleteCommandListsNV)(n, lists);  }
PFNGLDELETESTATESNVPROC __glDeleteStatesNV = nullptr; void APIENTRY glDeleteStatesNV (GLsizei n, const GLuint *states) { if (__glDeleteStatesNV != 0) (__glDeleteStatesNV)(n, states);  }
PFNGLDRAWCOMMANDSADDRESSNVPROC __glDrawCommandsAddressNV = nullptr; void APIENTRY glDrawCommandsAddressNV (GLenum primitiveMode, const GLuint64 *indirects, const GLsizei *sizes, GLuint count) { if (__glDrawCommandsAddressNV != 0) (__glDrawCommandsAddressNV)(primitiveMode, indirects, sizes, count);  }
PFNGLDRAWCOMMANDSNVPROC __glDrawCommandsNV = nullptr; void APIENTRY glDrawCommandsNV (GLenum primitiveMode, GLuint buffer, const GLintptr *indirects, const GLsizei *sizes, GLuint count) { if (__glDrawCommandsNV != 0) (__glDrawCommandsNV)(primitiveMode, buffer, indirects, sizes, count);  }
PFNGLDRAWCOMMANDSSTATESADDRESSNVPROC __glDrawCommandsStatesAddressNV = nullptr; void APIENTRY glDrawCommandsStatesAddressNV (const GLuint64 *indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count) { if (__glDrawCommandsStatesAddressNV != 0) (__glDrawCommandsStatesAddressNV)(indirects, sizes, states, fbos, count);  }
PFNGLDRAWCOMMANDSSTATESNVPROC __glDrawCommandsStatesNV = nullptr; void APIENTRY glDrawCommandsStatesNV (GLuint buffer, const GLintptr *indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count) { if (__glDrawCommandsStatesNV != 0) (__glDrawCommandsStatesNV)(buffer, indirects, sizes, states, fbos, count);  }
PFNGLGETCOMMANDHEADERNVPROC __glGetCommandHeaderNV = nullptr; GLuint APIENTRY glGetCommandHeaderNV (GLenum tokenID, GLuint size) { if (__glGetCommandHeaderNV != 0) return (__glGetCommandHeaderNV)(tokenID, size); return 0; }
PFNGLGETSTAGEINDEXNVPROC __glGetStageIndexNV = nullptr; GLushort APIENTRY glGetStageIndexNV (GLenum shadertype) { if (__glGetStageIndexNV != 0) return (__glGetStageIndexNV)(shadertype); return 0; }
PFNGLISCOMMANDLISTNVPROC __glIsCommandListNV = nullptr; GLboolean APIENTRY glIsCommandListNV (GLuint list) { if (__glIsCommandListNV != 0) return (__glIsCommandListNV)(list); return 0; }
PFNGLISSTATENVPROC __glIsStateNV = nullptr; GLboolean APIENTRY glIsStateNV (GLuint state) { if (__glIsStateNV != 0) return (__glIsStateNV)(state); return 0; }
PFNGLLISTDRAWCOMMANDSSTATESCLIENTNVPROC __glListDrawCommandsStatesClientNV = nullptr; void APIENTRY glListDrawCommandsStatesClientNV (GLuint list, GLuint segment, const void **indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count) { if (__glListDrawCommandsStatesClientNV != 0) (__glListDrawCommandsStatesClientNV)(list, segment, indirects, sizes, states, fbos, count);  }
PFNGLSTATECAPTURENVPROC __glStateCaptureNV = nullptr; void APIENTRY glStateCaptureNV (GLuint state, GLenum mode) { if (__glStateCaptureNV != 0) (__glStateCaptureNV)(state, mode);  }
bool __loadGL_NV_command_list(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glCallCommandListNV = (PFNGLCALLCOMMANDLISTNVPROC)proc((const GLubyte*)"glCallCommandListNV")) != nullptr) || r;
    r = ((__glCommandListSegmentsNV = (PFNGLCOMMANDLISTSEGMENTSNVPROC)proc((const GLubyte*)"glCommandListSegmentsNV")) != nullptr) || r;
    r = ((__glCompileCommandListNV = (PFNGLCOMPILECOMMANDLISTNVPROC)proc((const GLubyte*)"glCompileCommandListNV")) != nullptr) || r;
    r = ((__glCreateCommandListsNV = (PFNGLCREATECOMMANDLISTSNVPROC)proc((const GLubyte*)"glCreateCommandListsNV")) != nullptr) || r;
    r = ((__glCreateStatesNV = (PFNGLCREATESTATESNVPROC)proc((const GLubyte*)"glCreateStatesNV")) != nullptr) || r;
    r = ((__glDeleteCommandListsNV = (PFNGLDELETECOMMANDLISTSNVPROC)proc((const GLubyte*)"glDeleteCommandListsNV")) != nullptr) || r;
    r = ((__glDeleteStatesNV = (PFNGLDELETESTATESNVPROC)proc((const GLubyte*)"glDeleteStatesNV")) != nullptr) || r;
    r = ((__glDrawCommandsAddressNV = (PFNGLDRAWCOMMANDSADDRESSNVPROC)proc((const GLubyte*)"glDrawCommandsAddressNV")) != nullptr) || r;
    r = ((__glDrawCommandsNV = (PFNGLDRAWCOMMANDSNVPROC)proc((const GLubyte*)"glDrawCommandsNV")) != nullptr) || r;
    r = ((__glDrawCommandsStatesAddressNV = (PFNGLDRAWCOMMANDSSTATESADDRESSNVPROC)proc((const GLubyte*)"glDrawCommandsStatesAddressNV")) != nullptr) || r;
    r = ((__glDrawCommandsStatesNV = (PFNGLDRAWCOMMANDSSTATESNVPROC)proc((const GLubyte*)"glDrawCommandsStatesNV")) != nullptr) || r;
    r = ((__glGetCommandHeaderNV = (PFNGLGETCOMMANDHEADERNVPROC)proc((const GLubyte*)"glGetCommandHeaderNV")) != nullptr) || r;
    r = ((__glGetStageIndexNV = (PFNGLGETSTAGEINDEXNVPROC)proc((const GLubyte*)"glGetStageIndexNV")) != nullptr) || r;
    r = ((__glIsCommandListNV = (PFNGLISCOMMANDLISTNVPROC)proc((const GLubyte*)"glIsCommandListNV")) != nullptr) || r;
    r = ((__glIsStateNV = (PFNGLISSTATENVPROC)proc((const GLubyte*)"glIsStateNV")) != nullptr) || r;
    r = ((__glListDrawCommandsStatesClientNV = (PFNGLLISTDRAWCOMMANDSSTATESCLIENTNVPROC)proc((const GLubyte*)"glListDrawCommandsStatesClientNV")) != nullptr) || r;
    r = ((__glStateCaptureNV = (PFNGLSTATECAPTURENVPROC)proc((const GLubyte*)"glStateCaptureNV")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_NV_command_list = false;
/* GL_NV_compute_program5 */
bool __loadGL_NV_compute_program5(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_NV_compute_program5 = false;
/* GL_NV_conditional_render */
PFNGLBEGINCONDITIONALRENDERNVPROC __glBeginConditionalRenderNV = nullptr; void APIENTRY glBeginConditionalRenderNV (GLuint id, GLenum mode) { if (__glBeginConditionalRenderNV != 0) (__glBeginConditionalRenderNV)(id, mode);  }
PFNGLENDCONDITIONALRENDERNVPROC __glEndConditionalRenderNV = nullptr; void APIENTRY glEndConditionalRenderNV () { if (__glEndConditionalRenderNV != 0) (__glEndConditionalRenderNV)();  }
bool __loadGL_NV_conditional_render(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glBeginConditionalRenderNV = (PFNGLBEGINCONDITIONALRENDERNVPROC)proc((const GLubyte*)"glBeginConditionalRenderNV")) != nullptr) || r;
    r = ((__glEndConditionalRenderNV = (PFNGLENDCONDITIONALRENDERNVPROC)proc((const GLubyte*)"glEndConditionalRenderNV")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_NV_conditional_render = false;
/* GL_NV_conservative_raster */
PFNGLSUBPIXELPRECISIONBIASNVPROC __glSubpixelPrecisionBiasNV = nullptr; void APIENTRY glSubpixelPrecisionBiasNV (GLuint xbits, GLuint ybits) { if (__glSubpixelPrecisionBiasNV != 0) (__glSubpixelPrecisionBiasNV)(xbits, ybits);  }
bool __loadGL_NV_conservative_raster(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glSubpixelPrecisionBiasNV = (PFNGLSUBPIXELPRECISIONBIASNVPROC)proc((const GLubyte*)"glSubpixelPrecisionBiasNV")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_NV_conservative_raster = false;
/* GL_NV_conservative_raster_dilate */
PFNGLCONSERVATIVERASTERPARAMETERFNVPROC __glConservativeRasterParameterfNV = nullptr; void APIENTRY glConservativeRasterParameterfNV (GLenum pname, GLfloat value) { if (__glConservativeRasterParameterfNV != 0) (__glConservativeRasterParameterfNV)(pname, value);  }
bool __loadGL_NV_conservative_raster_dilate(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glConservativeRasterParameterfNV = (PFNGLCONSERVATIVERASTERPARAMETERFNVPROC)proc((const GLubyte*)"glConservativeRasterParameterfNV")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_NV_conservative_raster_dilate = false;
/* GL_NV_copy_depth_to_color */
bool __loadGL_NV_copy_depth_to_color(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_NV_copy_depth_to_color = false;
/* GL_NV_copy_image */
PFNGLCOPYIMAGESUBDATANVPROC __glCopyImageSubDataNV = nullptr; void APIENTRY glCopyImageSubDataNV (GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth) { if (__glCopyImageSubDataNV != 0) (__glCopyImageSubDataNV)(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth);  }
bool __loadGL_NV_copy_image(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glCopyImageSubDataNV = (PFNGLCOPYIMAGESUBDATANVPROC)proc((const GLubyte*)"glCopyImageSubDataNV")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_NV_copy_image = false;
/* GL_NV_deep_texture3D */
bool __loadGL_NV_deep_texture3D(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_NV_deep_texture3D = false;
/* GL_NV_depth_buffer_float */
PFNGLCLEARDEPTHDNVPROC __glClearDepthdNV = nullptr; void APIENTRY glClearDepthdNV (GLdouble depth) { if (__glClearDepthdNV != 0) (__glClearDepthdNV)(depth);  }
PFNGLDEPTHBOUNDSDNVPROC __glDepthBoundsdNV = nullptr; void APIENTRY glDepthBoundsdNV (GLdouble zmin, GLdouble zmax) { if (__glDepthBoundsdNV != 0) (__glDepthBoundsdNV)(zmin, zmax);  }
PFNGLDEPTHRANGEDNVPROC __glDepthRangedNV = nullptr; void APIENTRY glDepthRangedNV (GLdouble zNear, GLdouble zFar) { if (__glDepthRangedNV != 0) (__glDepthRangedNV)(zNear, zFar);  }
bool __loadGL_NV_depth_buffer_float(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glClearDepthdNV = (PFNGLCLEARDEPTHDNVPROC)proc((const GLubyte*)"glClearDepthdNV")) != nullptr) || r;
    r = ((__glDepthBoundsdNV = (PFNGLDEPTHBOUNDSDNVPROC)proc((const GLubyte*)"glDepthBoundsdNV")) != nullptr) || r;
    r = ((__glDepthRangedNV = (PFNGLDEPTHRANGEDNVPROC)proc((const GLubyte*)"glDepthRangedNV")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_NV_depth_buffer_float = false;
/* GL_NV_depth_clamp */
bool __loadGL_NV_depth_clamp(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_NV_depth_clamp = false;
/* GL_NV_draw_texture */
PFNGLDRAWTEXTURENVPROC __glDrawTextureNV = nullptr; void APIENTRY glDrawTextureNV (GLuint texture, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1) { if (__glDrawTextureNV != 0) (__glDrawTextureNV)(texture, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1);  }
bool __loadGL_NV_draw_texture(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glDrawTextureNV = (PFNGLDRAWTEXTURENVPROC)proc((const GLubyte*)"glDrawTextureNV")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_NV_draw_texture = false;
/* GL_NV_evaluators */
PFNGLEVALMAPSNVPROC __glEvalMapsNV = nullptr; void APIENTRY glEvalMapsNV (GLenum target, GLenum mode) { if (__glEvalMapsNV != 0) (__glEvalMapsNV)(target, mode);  }
PFNGLGETMAPATTRIBPARAMETERFVNVPROC __glGetMapAttribParameterfvNV = nullptr; void APIENTRY glGetMapAttribParameterfvNV (GLenum target, GLuint index, GLenum pname, GLfloat *params) { if (__glGetMapAttribParameterfvNV != 0) (__glGetMapAttribParameterfvNV)(target, index, pname, params);  }
PFNGLGETMAPATTRIBPARAMETERIVNVPROC __glGetMapAttribParameterivNV = nullptr; void APIENTRY glGetMapAttribParameterivNV (GLenum target, GLuint index, GLenum pname, GLint *params) { if (__glGetMapAttribParameterivNV != 0) (__glGetMapAttribParameterivNV)(target, index, pname, params);  }
PFNGLGETMAPCONTROLPOINTSNVPROC __glGetMapControlPointsNV = nullptr; void APIENTRY glGetMapControlPointsNV (GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, void *points) { if (__glGetMapControlPointsNV != 0) (__glGetMapControlPointsNV)(target, index, type, ustride, vstride, packed, points);  }
PFNGLGETMAPPARAMETERFVNVPROC __glGetMapParameterfvNV = nullptr; void APIENTRY glGetMapParameterfvNV (GLenum target, GLenum pname, GLfloat *params) { if (__glGetMapParameterfvNV != 0) (__glGetMapParameterfvNV)(target, pname, params);  }
PFNGLGETMAPPARAMETERIVNVPROC __glGetMapParameterivNV = nullptr; void APIENTRY glGetMapParameterivNV (GLenum target, GLenum pname, GLint *params) { if (__glGetMapParameterivNV != 0) (__glGetMapParameterivNV)(target, pname, params);  }
PFNGLMAPCONTROLPOINTSNVPROC __glMapControlPointsNV = nullptr; void APIENTRY glMapControlPointsNV (GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const void *points) { if (__glMapControlPointsNV != 0) (__glMapControlPointsNV)(target, index, type, ustride, vstride, uorder, vorder, packed, points);  }
PFNGLMAPPARAMETERFVNVPROC __glMapParameterfvNV = nullptr; void APIENTRY glMapParameterfvNV (GLenum target, GLenum pname, const GLfloat *params) { if (__glMapParameterfvNV != 0) (__glMapParameterfvNV)(target, pname, params);  }
PFNGLMAPPARAMETERIVNVPROC __glMapParameterivNV = nullptr; void APIENTRY glMapParameterivNV (GLenum target, GLenum pname, const GLint *params) { if (__glMapParameterivNV != 0) (__glMapParameterivNV)(target, pname, params);  }
bool __loadGL_NV_evaluators(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glEvalMapsNV = (PFNGLEVALMAPSNVPROC)proc((const GLubyte*)"glEvalMapsNV")) != nullptr) || r;
    r = ((__glGetMapAttribParameterfvNV = (PFNGLGETMAPATTRIBPARAMETERFVNVPROC)proc((const GLubyte*)"glGetMapAttribParameterfvNV")) != nullptr) || r;
    r = ((__glGetMapAttribParameterivNV = (PFNGLGETMAPATTRIBPARAMETERIVNVPROC)proc((const GLubyte*)"glGetMapAttribParameterivNV")) != nullptr) || r;
    r = ((__glGetMapControlPointsNV = (PFNGLGETMAPCONTROLPOINTSNVPROC)proc((const GLubyte*)"glGetMapControlPointsNV")) != nullptr) || r;
    r = ((__glGetMapParameterfvNV = (PFNGLGETMAPPARAMETERFVNVPROC)proc((const GLubyte*)"glGetMapParameterfvNV")) != nullptr) || r;
    r = ((__glGetMapParameterivNV = (PFNGLGETMAPPARAMETERIVNVPROC)proc((const GLubyte*)"glGetMapParameterivNV")) != nullptr) || r;
    r = ((__glMapControlPointsNV = (PFNGLMAPCONTROLPOINTSNVPROC)proc((const GLubyte*)"glMapControlPointsNV")) != nullptr) || r;
    r = ((__glMapParameterfvNV = (PFNGLMAPPARAMETERFVNVPROC)proc((const GLubyte*)"glMapParameterfvNV")) != nullptr) || r;
    r = ((__glMapParameterivNV = (PFNGLMAPPARAMETERIVNVPROC)proc((const GLubyte*)"glMapParameterivNV")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_NV_evaluators = false;
/* GL_NV_explicit_multisample */
PFNGLGETMULTISAMPLEFVNVPROC __glGetMultisamplefvNV = nullptr; void APIENTRY glGetMultisamplefvNV (GLenum pname, GLuint index, GLfloat *val) { if (__glGetMultisamplefvNV != 0) (__glGetMultisamplefvNV)(pname, index, val);  }
PFNGLSAMPLEMASKINDEXEDNVPROC __glSampleMaskIndexedNV = nullptr; void APIENTRY glSampleMaskIndexedNV (GLuint index, GLbitfield mask) { if (__glSampleMaskIndexedNV != 0) (__glSampleMaskIndexedNV)(index, mask);  }
PFNGLTEXRENDERBUFFERNVPROC __glTexRenderbufferNV = nullptr; void APIENTRY glTexRenderbufferNV (GLenum target, GLuint renderbuffer) { if (__glTexRenderbufferNV != 0) (__glTexRenderbufferNV)(target, renderbuffer);  }
bool __loadGL_NV_explicit_multisample(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glGetMultisamplefvNV = (PFNGLGETMULTISAMPLEFVNVPROC)proc((const GLubyte*)"glGetMultisamplefvNV")) != nullptr) || r;
    r = ((__glSampleMaskIndexedNV = (PFNGLSAMPLEMASKINDEXEDNVPROC)proc((const GLubyte*)"glSampleMaskIndexedNV")) != nullptr) || r;
    r = ((__glTexRenderbufferNV = (PFNGLTEXRENDERBUFFERNVPROC)proc((const GLubyte*)"glTexRenderbufferNV")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_NV_explicit_multisample = false;
/* GL_NV_fence */
PFNGLDELETEFENCESNVPROC __glDeleteFencesNV = nullptr; void APIENTRY glDeleteFencesNV (GLsizei n, const GLuint *fences) { if (__glDeleteFencesNV != 0) (__glDeleteFencesNV)(n, fences);  }
PFNGLFINISHFENCENVPROC __glFinishFenceNV = nullptr; void APIENTRY glFinishFenceNV (GLuint fence) { if (__glFinishFenceNV != 0) (__glFinishFenceNV)(fence);  }
PFNGLGENFENCESNVPROC __glGenFencesNV = nullptr; void APIENTRY glGenFencesNV (GLsizei n, GLuint *fences) { if (__glGenFencesNV != 0) (__glGenFencesNV)(n, fences);  }
PFNGLGETFENCEIVNVPROC __glGetFenceivNV = nullptr; void APIENTRY glGetFenceivNV (GLuint fence, GLenum pname, GLint *params) { if (__glGetFenceivNV != 0) (__glGetFenceivNV)(fence, pname, params);  }
PFNGLISFENCENVPROC __glIsFenceNV = nullptr; GLboolean APIENTRY glIsFenceNV (GLuint fence) { if (__glIsFenceNV != 0) return (__glIsFenceNV)(fence); return 0; }
PFNGLSETFENCENVPROC __glSetFenceNV = nullptr; void APIENTRY glSetFenceNV (GLuint fence, GLenum condition) { if (__glSetFenceNV != 0) (__glSetFenceNV)(fence, condition);  }
PFNGLTESTFENCENVPROC __glTestFenceNV = nullptr; GLboolean APIENTRY glTestFenceNV (GLuint fence) { if (__glTestFenceNV != 0) return (__glTestFenceNV)(fence); return 0; }
bool __loadGL_NV_fence(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glDeleteFencesNV = (PFNGLDELETEFENCESNVPROC)proc((const GLubyte*)"glDeleteFencesNV")) != nullptr) || r;
    r = ((__glFinishFenceNV = (PFNGLFINISHFENCENVPROC)proc((const GLubyte*)"glFinishFenceNV")) != nullptr) || r;
    r = ((__glGenFencesNV = (PFNGLGENFENCESNVPROC)proc((const GLubyte*)"glGenFencesNV")) != nullptr) || r;
    r = ((__glGetFenceivNV = (PFNGLGETFENCEIVNVPROC)proc((const GLubyte*)"glGetFenceivNV")) != nullptr) || r;
    r = ((__glIsFenceNV = (PFNGLISFENCENVPROC)proc((const GLubyte*)"glIsFenceNV")) != nullptr) || r;
    r = ((__glSetFenceNV = (PFNGLSETFENCENVPROC)proc((const GLubyte*)"glSetFenceNV")) != nullptr) || r;
    r = ((__glTestFenceNV = (PFNGLTESTFENCENVPROC)proc((const GLubyte*)"glTestFenceNV")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_NV_fence = false;
/* GL_NV_fill_rectangle */
bool __loadGL_NV_fill_rectangle(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_NV_fill_rectangle = false;
/* GL_NV_float_buffer */
bool __loadGL_NV_float_buffer(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_NV_float_buffer = false;
/* GL_NV_fog_distance */
bool __loadGL_NV_fog_distance(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_NV_fog_distance = false;
/* GL_NV_fragment_coverage_to_color */
PFNGLFRAGMENTCOVERAGECOLORNVPROC __glFragmentCoverageColorNV = nullptr; void APIENTRY glFragmentCoverageColorNV (GLuint color) { if (__glFragmentCoverageColorNV != 0) (__glFragmentCoverageColorNV)(color);  }
bool __loadGL_NV_fragment_coverage_to_color(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glFragmentCoverageColorNV = (PFNGLFRAGMENTCOVERAGECOLORNVPROC)proc((const GLubyte*)"glFragmentCoverageColorNV")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_NV_fragment_coverage_to_color = false;
/* GL_NV_fragment_program */
PFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC __glGetProgramNamedParameterdvNV = nullptr; void APIENTRY glGetProgramNamedParameterdvNV (GLuint id, GLsizei len, const GLubyte *name, GLdouble *params) { if (__glGetProgramNamedParameterdvNV != 0) (__glGetProgramNamedParameterdvNV)(id, len, name, params);  }
PFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC __glGetProgramNamedParameterfvNV = nullptr; void APIENTRY glGetProgramNamedParameterfvNV (GLuint id, GLsizei len, const GLubyte *name, GLfloat *params) { if (__glGetProgramNamedParameterfvNV != 0) (__glGetProgramNamedParameterfvNV)(id, len, name, params);  }
PFNGLPROGRAMNAMEDPARAMETER4DNVPROC __glProgramNamedParameter4dNV = nullptr; void APIENTRY glProgramNamedParameter4dNV (GLuint id, GLsizei len, const GLubyte *name, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { if (__glProgramNamedParameter4dNV != 0) (__glProgramNamedParameter4dNV)(id, len, name, x, y, z, w);  }
PFNGLPROGRAMNAMEDPARAMETER4DVNVPROC __glProgramNamedParameter4dvNV = nullptr; void APIENTRY glProgramNamedParameter4dvNV (GLuint id, GLsizei len, const GLubyte *name, const GLdouble *v) { if (__glProgramNamedParameter4dvNV != 0) (__glProgramNamedParameter4dvNV)(id, len, name, v);  }
PFNGLPROGRAMNAMEDPARAMETER4FNVPROC __glProgramNamedParameter4fNV = nullptr; void APIENTRY glProgramNamedParameter4fNV (GLuint id, GLsizei len, const GLubyte *name, GLfloat x, GLfloat y, GLfloat z, GLfloat w) { if (__glProgramNamedParameter4fNV != 0) (__glProgramNamedParameter4fNV)(id, len, name, x, y, z, w);  }
PFNGLPROGRAMNAMEDPARAMETER4FVNVPROC __glProgramNamedParameter4fvNV = nullptr; void APIENTRY glProgramNamedParameter4fvNV (GLuint id, GLsizei len, const GLubyte *name, const GLfloat *v) { if (__glProgramNamedParameter4fvNV != 0) (__glProgramNamedParameter4fvNV)(id, len, name, v);  }
bool __loadGL_NV_fragment_program(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glGetProgramNamedParameterdvNV = (PFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC)proc((const GLubyte*)"glGetProgramNamedParameterdvNV")) != nullptr) || r;
    r = ((__glGetProgramNamedParameterfvNV = (PFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC)proc((const GLubyte*)"glGetProgramNamedParameterfvNV")) != nullptr) || r;
    r = ((__glProgramNamedParameter4dNV = (PFNGLPROGRAMNAMEDPARAMETER4DNVPROC)proc((const GLubyte*)"glProgramNamedParameter4dNV")) != nullptr) || r;
    r = ((__glProgramNamedParameter4dvNV = (PFNGLPROGRAMNAMEDPARAMETER4DVNVPROC)proc((const GLubyte*)"glProgramNamedParameter4dvNV")) != nullptr) || r;
    r = ((__glProgramNamedParameter4fNV = (PFNGLPROGRAMNAMEDPARAMETER4FNVPROC)proc((const GLubyte*)"glProgramNamedParameter4fNV")) != nullptr) || r;
    r = ((__glProgramNamedParameter4fvNV = (PFNGLPROGRAMNAMEDPARAMETER4FVNVPROC)proc((const GLubyte*)"glProgramNamedParameter4fvNV")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_NV_fragment_program = false;
/* GL_NV_fragment_program2 */
bool __loadGL_NV_fragment_program2(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_NV_fragment_program2 = false;
/* GL_NV_fragment_program4 */
bool __loadGL_NV_fragment_program4(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_NV_fragment_program4 = false;
/* GL_NV_fragment_program_option */
bool __loadGL_NV_fragment_program_option(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_NV_fragment_program_option = false;
/* GL_NV_fragment_shader_interlock */
bool __loadGL_NV_fragment_shader_interlock(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_NV_fragment_shader_interlock = false;
/* GL_NV_framebuffer_mixed_samples */
PFNGLCOVERAGEMODULATIONNVPROC __glCoverageModulationNV = nullptr; void APIENTRY glCoverageModulationNV (GLenum components) { if (__glCoverageModulationNV != 0) (__glCoverageModulationNV)(components);  }
PFNGLCOVERAGEMODULATIONTABLENVPROC __glCoverageModulationTableNV = nullptr; void APIENTRY glCoverageModulationTableNV (GLsizei n, const GLfloat *v) { if (__glCoverageModulationTableNV != 0) (__glCoverageModulationTableNV)(n, v);  }
PFNGLGETCOVERAGEMODULATIONTABLENVPROC __glGetCoverageModulationTableNV = nullptr; void APIENTRY glGetCoverageModulationTableNV (GLsizei bufsize, GLfloat *v) { if (__glGetCoverageModulationTableNV != 0) (__glGetCoverageModulationTableNV)(bufsize, v);  }
bool __loadGL_NV_framebuffer_mixed_samples(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glCoverageModulationNV = (PFNGLCOVERAGEMODULATIONNVPROC)proc((const GLubyte*)"glCoverageModulationNV")) != nullptr) || r;
    r = ((__glCoverageModulationTableNV = (PFNGLCOVERAGEMODULATIONTABLENVPROC)proc((const GLubyte*)"glCoverageModulationTableNV")) != nullptr) || r;
    r = ((__glGetCoverageModulationTableNV = (PFNGLGETCOVERAGEMODULATIONTABLENVPROC)proc((const GLubyte*)"glGetCoverageModulationTableNV")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_NV_framebuffer_mixed_samples = false;
/* GL_NV_framebuffer_multisample_coverage */
PFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC __glRenderbufferStorageMultisampleCoverageNV = nullptr; void APIENTRY glRenderbufferStorageMultisampleCoverageNV (GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height) { if (__glRenderbufferStorageMultisampleCoverageNV != 0) (__glRenderbufferStorageMultisampleCoverageNV)(target, coverageSamples, colorSamples, internalformat, width, height);  }
bool __loadGL_NV_framebuffer_multisample_coverage(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glRenderbufferStorageMultisampleCoverageNV = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC)proc((const GLubyte*)"glRenderbufferStorageMultisampleCoverageNV")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_NV_framebuffer_multisample_coverage = false;
/* GL_NV_geometry_program4 */
PFNGLFRAMEBUFFERTEXTUREEXTPROC __glFramebufferTextureEXT = nullptr; void APIENTRY glFramebufferTextureEXT (GLenum target, GLenum attachment, GLuint texture, GLint level) { if (__glFramebufferTextureEXT != 0) (__glFramebufferTextureEXT)(target, attachment, texture, level);  }
PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC __glFramebufferTextureFaceEXT = nullptr; void APIENTRY glFramebufferTextureFaceEXT (GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face) { if (__glFramebufferTextureFaceEXT != 0) (__glFramebufferTextureFaceEXT)(target, attachment, texture, level, face);  }
PFNGLPROGRAMVERTEXLIMITNVPROC __glProgramVertexLimitNV = nullptr; void APIENTRY glProgramVertexLimitNV (GLenum target, GLint limit) { if (__glProgramVertexLimitNV != 0) (__glProgramVertexLimitNV)(target, limit);  }
bool __loadGL_NV_geometry_program4(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glFramebufferTextureEXT = (PFNGLFRAMEBUFFERTEXTUREEXTPROC)proc((const GLubyte*)"glFramebufferTextureEXT")) != nullptr) || r;
    r = ((__glFramebufferTextureFaceEXT = (PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC)proc((const GLubyte*)"glFramebufferTextureFaceEXT")) != nullptr) || r;
    r = ((__glProgramVertexLimitNV = (PFNGLPROGRAMVERTEXLIMITNVPROC)proc((const GLubyte*)"glProgramVertexLimitNV")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_NV_geometry_program4 = false;
/* GL_NV_geometry_shader4 */
bool __loadGL_NV_geometry_shader4(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_NV_geometry_shader4 = false;
/* GL_NV_geometry_shader_passthrough */
bool __loadGL_NV_geometry_shader_passthrough(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_NV_geometry_shader_passthrough = false;
/* GL_NV_gpu_program4 */
PFNGLGETPROGRAMENVPARAMETERIIVNVPROC __glGetProgramEnvParameterIivNV = nullptr; void APIENTRY glGetProgramEnvParameterIivNV (GLenum target, GLuint index, GLint *params) { if (__glGetProgramEnvParameterIivNV != 0) (__glGetProgramEnvParameterIivNV)(target, index, params);  }
PFNGLGETPROGRAMENVPARAMETERIUIVNVPROC __glGetProgramEnvParameterIuivNV = nullptr; void APIENTRY glGetProgramEnvParameterIuivNV (GLenum target, GLuint index, GLuint *params) { if (__glGetProgramEnvParameterIuivNV != 0) (__glGetProgramEnvParameterIuivNV)(target, index, params);  }
PFNGLGETPROGRAMLOCALPARAMETERIIVNVPROC __glGetProgramLocalParameterIivNV = nullptr; void APIENTRY glGetProgramLocalParameterIivNV (GLenum target, GLuint index, GLint *params) { if (__glGetProgramLocalParameterIivNV != 0) (__glGetProgramLocalParameterIivNV)(target, index, params);  }
PFNGLGETPROGRAMLOCALPARAMETERIUIVNVPROC __glGetProgramLocalParameterIuivNV = nullptr; void APIENTRY glGetProgramLocalParameterIuivNV (GLenum target, GLuint index, GLuint *params) { if (__glGetProgramLocalParameterIuivNV != 0) (__glGetProgramLocalParameterIuivNV)(target, index, params);  }
PFNGLPROGRAMENVPARAMETERI4INVPROC __glProgramEnvParameterI4iNV = nullptr; void APIENTRY glProgramEnvParameterI4iNV (GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w) { if (__glProgramEnvParameterI4iNV != 0) (__glProgramEnvParameterI4iNV)(target, index, x, y, z, w);  }
PFNGLPROGRAMENVPARAMETERI4IVNVPROC __glProgramEnvParameterI4ivNV = nullptr; void APIENTRY glProgramEnvParameterI4ivNV (GLenum target, GLuint index, const GLint *params) { if (__glProgramEnvParameterI4ivNV != 0) (__glProgramEnvParameterI4ivNV)(target, index, params);  }
PFNGLPROGRAMENVPARAMETERI4UINVPROC __glProgramEnvParameterI4uiNV = nullptr; void APIENTRY glProgramEnvParameterI4uiNV (GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) { if (__glProgramEnvParameterI4uiNV != 0) (__glProgramEnvParameterI4uiNV)(target, index, x, y, z, w);  }
PFNGLPROGRAMENVPARAMETERI4UIVNVPROC __glProgramEnvParameterI4uivNV = nullptr; void APIENTRY glProgramEnvParameterI4uivNV (GLenum target, GLuint index, const GLuint *params) { if (__glProgramEnvParameterI4uivNV != 0) (__glProgramEnvParameterI4uivNV)(target, index, params);  }
PFNGLPROGRAMENVPARAMETERSI4IVNVPROC __glProgramEnvParametersI4ivNV = nullptr; void APIENTRY glProgramEnvParametersI4ivNV (GLenum target, GLuint index, GLsizei count, const GLint *params) { if (__glProgramEnvParametersI4ivNV != 0) (__glProgramEnvParametersI4ivNV)(target, index, count, params);  }
PFNGLPROGRAMENVPARAMETERSI4UIVNVPROC __glProgramEnvParametersI4uivNV = nullptr; void APIENTRY glProgramEnvParametersI4uivNV (GLenum target, GLuint index, GLsizei count, const GLuint *params) { if (__glProgramEnvParametersI4uivNV != 0) (__glProgramEnvParametersI4uivNV)(target, index, count, params);  }
PFNGLPROGRAMLOCALPARAMETERI4INVPROC __glProgramLocalParameterI4iNV = nullptr; void APIENTRY glProgramLocalParameterI4iNV (GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w) { if (__glProgramLocalParameterI4iNV != 0) (__glProgramLocalParameterI4iNV)(target, index, x, y, z, w);  }
PFNGLPROGRAMLOCALPARAMETERI4IVNVPROC __glProgramLocalParameterI4ivNV = nullptr; void APIENTRY glProgramLocalParameterI4ivNV (GLenum target, GLuint index, const GLint *params) { if (__glProgramLocalParameterI4ivNV != 0) (__glProgramLocalParameterI4ivNV)(target, index, params);  }
PFNGLPROGRAMLOCALPARAMETERI4UINVPROC __glProgramLocalParameterI4uiNV = nullptr; void APIENTRY glProgramLocalParameterI4uiNV (GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) { if (__glProgramLocalParameterI4uiNV != 0) (__glProgramLocalParameterI4uiNV)(target, index, x, y, z, w);  }
PFNGLPROGRAMLOCALPARAMETERI4UIVNVPROC __glProgramLocalParameterI4uivNV = nullptr; void APIENTRY glProgramLocalParameterI4uivNV (GLenum target, GLuint index, const GLuint *params) { if (__glProgramLocalParameterI4uivNV != 0) (__glProgramLocalParameterI4uivNV)(target, index, params);  }
PFNGLPROGRAMLOCALPARAMETERSI4IVNVPROC __glProgramLocalParametersI4ivNV = nullptr; void APIENTRY glProgramLocalParametersI4ivNV (GLenum target, GLuint index, GLsizei count, const GLint *params) { if (__glProgramLocalParametersI4ivNV != 0) (__glProgramLocalParametersI4ivNV)(target, index, count, params);  }
PFNGLPROGRAMLOCALPARAMETERSI4UIVNVPROC __glProgramLocalParametersI4uivNV = nullptr; void APIENTRY glProgramLocalParametersI4uivNV (GLenum target, GLuint index, GLsizei count, const GLuint *params) { if (__glProgramLocalParametersI4uivNV != 0) (__glProgramLocalParametersI4uivNV)(target, index, count, params);  }
bool __loadGL_NV_gpu_program4(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glGetProgramEnvParameterIivNV = (PFNGLGETPROGRAMENVPARAMETERIIVNVPROC)proc((const GLubyte*)"glGetProgramEnvParameterIivNV")) != nullptr) || r;
    r = ((__glGetProgramEnvParameterIuivNV = (PFNGLGETPROGRAMENVPARAMETERIUIVNVPROC)proc((const GLubyte*)"glGetProgramEnvParameterIuivNV")) != nullptr) || r;
    r = ((__glGetProgramLocalParameterIivNV = (PFNGLGETPROGRAMLOCALPARAMETERIIVNVPROC)proc((const GLubyte*)"glGetProgramLocalParameterIivNV")) != nullptr) || r;
    r = ((__glGetProgramLocalParameterIuivNV = (PFNGLGETPROGRAMLOCALPARAMETERIUIVNVPROC)proc((const GLubyte*)"glGetProgramLocalParameterIuivNV")) != nullptr) || r;
    r = ((__glProgramEnvParameterI4iNV = (PFNGLPROGRAMENVPARAMETERI4INVPROC)proc((const GLubyte*)"glProgramEnvParameterI4iNV")) != nullptr) || r;
    r = ((__glProgramEnvParameterI4ivNV = (PFNGLPROGRAMENVPARAMETERI4IVNVPROC)proc((const GLubyte*)"glProgramEnvParameterI4ivNV")) != nullptr) || r;
    r = ((__glProgramEnvParameterI4uiNV = (PFNGLPROGRAMENVPARAMETERI4UINVPROC)proc((const GLubyte*)"glProgramEnvParameterI4uiNV")) != nullptr) || r;
    r = ((__glProgramEnvParameterI4uivNV = (PFNGLPROGRAMENVPARAMETERI4UIVNVPROC)proc((const GLubyte*)"glProgramEnvParameterI4uivNV")) != nullptr) || r;
    r = ((__glProgramEnvParametersI4ivNV = (PFNGLPROGRAMENVPARAMETERSI4IVNVPROC)proc((const GLubyte*)"glProgramEnvParametersI4ivNV")) != nullptr) || r;
    r = ((__glProgramEnvParametersI4uivNV = (PFNGLPROGRAMENVPARAMETERSI4UIVNVPROC)proc((const GLubyte*)"glProgramEnvParametersI4uivNV")) != nullptr) || r;
    r = ((__glProgramLocalParameterI4iNV = (PFNGLPROGRAMLOCALPARAMETERI4INVPROC)proc((const GLubyte*)"glProgramLocalParameterI4iNV")) != nullptr) || r;
    r = ((__glProgramLocalParameterI4ivNV = (PFNGLPROGRAMLOCALPARAMETERI4IVNVPROC)proc((const GLubyte*)"glProgramLocalParameterI4ivNV")) != nullptr) || r;
    r = ((__glProgramLocalParameterI4uiNV = (PFNGLPROGRAMLOCALPARAMETERI4UINVPROC)proc((const GLubyte*)"glProgramLocalParameterI4uiNV")) != nullptr) || r;
    r = ((__glProgramLocalParameterI4uivNV = (PFNGLPROGRAMLOCALPARAMETERI4UIVNVPROC)proc((const GLubyte*)"glProgramLocalParameterI4uivNV")) != nullptr) || r;
    r = ((__glProgramLocalParametersI4ivNV = (PFNGLPROGRAMLOCALPARAMETERSI4IVNVPROC)proc((const GLubyte*)"glProgramLocalParametersI4ivNV")) != nullptr) || r;
    r = ((__glProgramLocalParametersI4uivNV = (PFNGLPROGRAMLOCALPARAMETERSI4UIVNVPROC)proc((const GLubyte*)"glProgramLocalParametersI4uivNV")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_NV_gpu_program4 = false;
/* GL_NV_gpu_program5 */
PFNGLGETPROGRAMSUBROUTINEPARAMETERUIVNVPROC __glGetProgramSubroutineParameteruivNV = nullptr; void APIENTRY glGetProgramSubroutineParameteruivNV (GLenum target, GLuint index, GLuint *param) { if (__glGetProgramSubroutineParameteruivNV != 0) (__glGetProgramSubroutineParameteruivNV)(target, index, param);  }
PFNGLPROGRAMSUBROUTINEPARAMETERSUIVNVPROC __glProgramSubroutineParametersuivNV = nullptr; void APIENTRY glProgramSubroutineParametersuivNV (GLenum target, GLsizei count, const GLuint *params) { if (__glProgramSubroutineParametersuivNV != 0) (__glProgramSubroutineParametersuivNV)(target, count, params);  }
bool __loadGL_NV_gpu_program5(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glGetProgramSubroutineParameteruivNV = (PFNGLGETPROGRAMSUBROUTINEPARAMETERUIVNVPROC)proc((const GLubyte*)"glGetProgramSubroutineParameteruivNV")) != nullptr) || r;
    r = ((__glProgramSubroutineParametersuivNV = (PFNGLPROGRAMSUBROUTINEPARAMETERSUIVNVPROC)proc((const GLubyte*)"glProgramSubroutineParametersuivNV")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_NV_gpu_program5 = false;
/* GL_NV_gpu_program5_mem_extended */
bool __loadGL_NV_gpu_program5_mem_extended(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_NV_gpu_program5_mem_extended = false;
/* GL_NV_gpu_shader5 */
bool __loadGL_NV_gpu_shader5(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_NV_gpu_shader5 = false;
/* GL_NV_half_float */
PFNGLCOLOR3HNVPROC __glColor3hNV = nullptr; void APIENTRY glColor3hNV (GLhalfNV red, GLhalfNV green, GLhalfNV blue) { if (__glColor3hNV != 0) (__glColor3hNV)(red, green, blue);  }
PFNGLCOLOR3HVNVPROC __glColor3hvNV = nullptr; void APIENTRY glColor3hvNV (const GLhalfNV *v) { if (__glColor3hvNV != 0) (__glColor3hvNV)(v);  }
PFNGLCOLOR4HNVPROC __glColor4hNV = nullptr; void APIENTRY glColor4hNV (GLhalfNV red, GLhalfNV green, GLhalfNV blue, GLhalfNV alpha) { if (__glColor4hNV != 0) (__glColor4hNV)(red, green, blue, alpha);  }
PFNGLCOLOR4HVNVPROC __glColor4hvNV = nullptr; void APIENTRY glColor4hvNV (const GLhalfNV *v) { if (__glColor4hvNV != 0) (__glColor4hvNV)(v);  }
PFNGLFOGCOORDHNVPROC __glFogCoordhNV = nullptr; void APIENTRY glFogCoordhNV (GLhalfNV fog) { if (__glFogCoordhNV != 0) (__glFogCoordhNV)(fog);  }
PFNGLFOGCOORDHVNVPROC __glFogCoordhvNV = nullptr; void APIENTRY glFogCoordhvNV (const GLhalfNV *fog) { if (__glFogCoordhvNV != 0) (__glFogCoordhvNV)(fog);  }
PFNGLMULTITEXCOORD1HNVPROC __glMultiTexCoord1hNV = nullptr; void APIENTRY glMultiTexCoord1hNV (GLenum target, GLhalfNV s) { if (__glMultiTexCoord1hNV != 0) (__glMultiTexCoord1hNV)(target, s);  }
PFNGLMULTITEXCOORD1HVNVPROC __glMultiTexCoord1hvNV = nullptr; void APIENTRY glMultiTexCoord1hvNV (GLenum target, const GLhalfNV *v) { if (__glMultiTexCoord1hvNV != 0) (__glMultiTexCoord1hvNV)(target, v);  }
PFNGLMULTITEXCOORD2HNVPROC __glMultiTexCoord2hNV = nullptr; void APIENTRY glMultiTexCoord2hNV (GLenum target, GLhalfNV s, GLhalfNV t) { if (__glMultiTexCoord2hNV != 0) (__glMultiTexCoord2hNV)(target, s, t);  }
PFNGLMULTITEXCOORD2HVNVPROC __glMultiTexCoord2hvNV = nullptr; void APIENTRY glMultiTexCoord2hvNV (GLenum target, const GLhalfNV *v) { if (__glMultiTexCoord2hvNV != 0) (__glMultiTexCoord2hvNV)(target, v);  }
PFNGLMULTITEXCOORD3HNVPROC __glMultiTexCoord3hNV = nullptr; void APIENTRY glMultiTexCoord3hNV (GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r) { if (__glMultiTexCoord3hNV != 0) (__glMultiTexCoord3hNV)(target, s, t, r);  }
PFNGLMULTITEXCOORD3HVNVPROC __glMultiTexCoord3hvNV = nullptr; void APIENTRY glMultiTexCoord3hvNV (GLenum target, const GLhalfNV *v) { if (__glMultiTexCoord3hvNV != 0) (__glMultiTexCoord3hvNV)(target, v);  }
PFNGLMULTITEXCOORD4HNVPROC __glMultiTexCoord4hNV = nullptr; void APIENTRY glMultiTexCoord4hNV (GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q) { if (__glMultiTexCoord4hNV != 0) (__glMultiTexCoord4hNV)(target, s, t, r, q);  }
PFNGLMULTITEXCOORD4HVNVPROC __glMultiTexCoord4hvNV = nullptr; void APIENTRY glMultiTexCoord4hvNV (GLenum target, const GLhalfNV *v) { if (__glMultiTexCoord4hvNV != 0) (__glMultiTexCoord4hvNV)(target, v);  }
PFNGLNORMAL3HNVPROC __glNormal3hNV = nullptr; void APIENTRY glNormal3hNV (GLhalfNV nx, GLhalfNV ny, GLhalfNV nz) { if (__glNormal3hNV != 0) (__glNormal3hNV)(nx, ny, nz);  }
PFNGLNORMAL3HVNVPROC __glNormal3hvNV = nullptr; void APIENTRY glNormal3hvNV (const GLhalfNV *v) { if (__glNormal3hvNV != 0) (__glNormal3hvNV)(v);  }
PFNGLSECONDARYCOLOR3HNVPROC __glSecondaryColor3hNV = nullptr; void APIENTRY glSecondaryColor3hNV (GLhalfNV red, GLhalfNV green, GLhalfNV blue) { if (__glSecondaryColor3hNV != 0) (__glSecondaryColor3hNV)(red, green, blue);  }
PFNGLSECONDARYCOLOR3HVNVPROC __glSecondaryColor3hvNV = nullptr; void APIENTRY glSecondaryColor3hvNV (const GLhalfNV *v) { if (__glSecondaryColor3hvNV != 0) (__glSecondaryColor3hvNV)(v);  }
PFNGLTEXCOORD1HNVPROC __glTexCoord1hNV = nullptr; void APIENTRY glTexCoord1hNV (GLhalfNV s) { if (__glTexCoord1hNV != 0) (__glTexCoord1hNV)(s);  }
PFNGLTEXCOORD1HVNVPROC __glTexCoord1hvNV = nullptr; void APIENTRY glTexCoord1hvNV (const GLhalfNV *v) { if (__glTexCoord1hvNV != 0) (__glTexCoord1hvNV)(v);  }
PFNGLTEXCOORD2HNVPROC __glTexCoord2hNV = nullptr; void APIENTRY glTexCoord2hNV (GLhalfNV s, GLhalfNV t) { if (__glTexCoord2hNV != 0) (__glTexCoord2hNV)(s, t);  }
PFNGLTEXCOORD2HVNVPROC __glTexCoord2hvNV = nullptr; void APIENTRY glTexCoord2hvNV (const GLhalfNV *v) { if (__glTexCoord2hvNV != 0) (__glTexCoord2hvNV)(v);  }
PFNGLTEXCOORD3HNVPROC __glTexCoord3hNV = nullptr; void APIENTRY glTexCoord3hNV (GLhalfNV s, GLhalfNV t, GLhalfNV r) { if (__glTexCoord3hNV != 0) (__glTexCoord3hNV)(s, t, r);  }
PFNGLTEXCOORD3HVNVPROC __glTexCoord3hvNV = nullptr; void APIENTRY glTexCoord3hvNV (const GLhalfNV *v) { if (__glTexCoord3hvNV != 0) (__glTexCoord3hvNV)(v);  }
PFNGLTEXCOORD4HNVPROC __glTexCoord4hNV = nullptr; void APIENTRY glTexCoord4hNV (GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q) { if (__glTexCoord4hNV != 0) (__glTexCoord4hNV)(s, t, r, q);  }
PFNGLTEXCOORD4HVNVPROC __glTexCoord4hvNV = nullptr; void APIENTRY glTexCoord4hvNV (const GLhalfNV *v) { if (__glTexCoord4hvNV != 0) (__glTexCoord4hvNV)(v);  }
PFNGLVERTEX2HNVPROC __glVertex2hNV = nullptr; void APIENTRY glVertex2hNV (GLhalfNV x, GLhalfNV y) { if (__glVertex2hNV != 0) (__glVertex2hNV)(x, y);  }
PFNGLVERTEX2HVNVPROC __glVertex2hvNV = nullptr; void APIENTRY glVertex2hvNV (const GLhalfNV *v) { if (__glVertex2hvNV != 0) (__glVertex2hvNV)(v);  }
PFNGLVERTEX3HNVPROC __glVertex3hNV = nullptr; void APIENTRY glVertex3hNV (GLhalfNV x, GLhalfNV y, GLhalfNV z) { if (__glVertex3hNV != 0) (__glVertex3hNV)(x, y, z);  }
PFNGLVERTEX3HVNVPROC __glVertex3hvNV = nullptr; void APIENTRY glVertex3hvNV (const GLhalfNV *v) { if (__glVertex3hvNV != 0) (__glVertex3hvNV)(v);  }
PFNGLVERTEX4HNVPROC __glVertex4hNV = nullptr; void APIENTRY glVertex4hNV (GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w) { if (__glVertex4hNV != 0) (__glVertex4hNV)(x, y, z, w);  }
PFNGLVERTEX4HVNVPROC __glVertex4hvNV = nullptr; void APIENTRY glVertex4hvNV (const GLhalfNV *v) { if (__glVertex4hvNV != 0) (__glVertex4hvNV)(v);  }
PFNGLVERTEXATTRIB1HNVPROC __glVertexAttrib1hNV = nullptr; void APIENTRY glVertexAttrib1hNV (GLuint index, GLhalfNV x) { if (__glVertexAttrib1hNV != 0) (__glVertexAttrib1hNV)(index, x);  }
PFNGLVERTEXATTRIB1HVNVPROC __glVertexAttrib1hvNV = nullptr; void APIENTRY glVertexAttrib1hvNV (GLuint index, const GLhalfNV *v) { if (__glVertexAttrib1hvNV != 0) (__glVertexAttrib1hvNV)(index, v);  }
PFNGLVERTEXATTRIB2HNVPROC __glVertexAttrib2hNV = nullptr; void APIENTRY glVertexAttrib2hNV (GLuint index, GLhalfNV x, GLhalfNV y) { if (__glVertexAttrib2hNV != 0) (__glVertexAttrib2hNV)(index, x, y);  }
PFNGLVERTEXATTRIB2HVNVPROC __glVertexAttrib2hvNV = nullptr; void APIENTRY glVertexAttrib2hvNV (GLuint index, const GLhalfNV *v) { if (__glVertexAttrib2hvNV != 0) (__glVertexAttrib2hvNV)(index, v);  }
PFNGLVERTEXATTRIB3HNVPROC __glVertexAttrib3hNV = nullptr; void APIENTRY glVertexAttrib3hNV (GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z) { if (__glVertexAttrib3hNV != 0) (__glVertexAttrib3hNV)(index, x, y, z);  }
PFNGLVERTEXATTRIB3HVNVPROC __glVertexAttrib3hvNV = nullptr; void APIENTRY glVertexAttrib3hvNV (GLuint index, const GLhalfNV *v) { if (__glVertexAttrib3hvNV != 0) (__glVertexAttrib3hvNV)(index, v);  }
PFNGLVERTEXATTRIB4HNVPROC __glVertexAttrib4hNV = nullptr; void APIENTRY glVertexAttrib4hNV (GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w) { if (__glVertexAttrib4hNV != 0) (__glVertexAttrib4hNV)(index, x, y, z, w);  }
PFNGLVERTEXATTRIB4HVNVPROC __glVertexAttrib4hvNV = nullptr; void APIENTRY glVertexAttrib4hvNV (GLuint index, const GLhalfNV *v) { if (__glVertexAttrib4hvNV != 0) (__glVertexAttrib4hvNV)(index, v);  }
PFNGLVERTEXATTRIBS1HVNVPROC __glVertexAttribs1hvNV = nullptr; void APIENTRY glVertexAttribs1hvNV (GLuint index, GLsizei n, const GLhalfNV *v) { if (__glVertexAttribs1hvNV != 0) (__glVertexAttribs1hvNV)(index, n, v);  }
PFNGLVERTEXATTRIBS2HVNVPROC __glVertexAttribs2hvNV = nullptr; void APIENTRY glVertexAttribs2hvNV (GLuint index, GLsizei n, const GLhalfNV *v) { if (__glVertexAttribs2hvNV != 0) (__glVertexAttribs2hvNV)(index, n, v);  }
PFNGLVERTEXATTRIBS3HVNVPROC __glVertexAttribs3hvNV = nullptr; void APIENTRY glVertexAttribs3hvNV (GLuint index, GLsizei n, const GLhalfNV *v) { if (__glVertexAttribs3hvNV != 0) (__glVertexAttribs3hvNV)(index, n, v);  }
PFNGLVERTEXATTRIBS4HVNVPROC __glVertexAttribs4hvNV = nullptr; void APIENTRY glVertexAttribs4hvNV (GLuint index, GLsizei n, const GLhalfNV *v) { if (__glVertexAttribs4hvNV != 0) (__glVertexAttribs4hvNV)(index, n, v);  }
PFNGLVERTEXWEIGHTHNVPROC __glVertexWeighthNV = nullptr; void APIENTRY glVertexWeighthNV (GLhalfNV weight) { if (__glVertexWeighthNV != 0) (__glVertexWeighthNV)(weight);  }
PFNGLVERTEXWEIGHTHVNVPROC __glVertexWeighthvNV = nullptr; void APIENTRY glVertexWeighthvNV (const GLhalfNV *weight) { if (__glVertexWeighthvNV != 0) (__glVertexWeighthvNV)(weight);  }
bool __loadGL_NV_half_float(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glColor3hNV = (PFNGLCOLOR3HNVPROC)proc((const GLubyte*)"glColor3hNV")) != nullptr) || r;
    r = ((__glColor3hvNV = (PFNGLCOLOR3HVNVPROC)proc((const GLubyte*)"glColor3hvNV")) != nullptr) || r;
    r = ((__glColor4hNV = (PFNGLCOLOR4HNVPROC)proc((const GLubyte*)"glColor4hNV")) != nullptr) || r;
    r = ((__glColor4hvNV = (PFNGLCOLOR4HVNVPROC)proc((const GLubyte*)"glColor4hvNV")) != nullptr) || r;
    r = ((__glFogCoordhNV = (PFNGLFOGCOORDHNVPROC)proc((const GLubyte*)"glFogCoordhNV")) != nullptr) || r;
    r = ((__glFogCoordhvNV = (PFNGLFOGCOORDHVNVPROC)proc((const GLubyte*)"glFogCoordhvNV")) != nullptr) || r;
    r = ((__glMultiTexCoord1hNV = (PFNGLMULTITEXCOORD1HNVPROC)proc((const GLubyte*)"glMultiTexCoord1hNV")) != nullptr) || r;
    r = ((__glMultiTexCoord1hvNV = (PFNGLMULTITEXCOORD1HVNVPROC)proc((const GLubyte*)"glMultiTexCoord1hvNV")) != nullptr) || r;
    r = ((__glMultiTexCoord2hNV = (PFNGLMULTITEXCOORD2HNVPROC)proc((const GLubyte*)"glMultiTexCoord2hNV")) != nullptr) || r;
    r = ((__glMultiTexCoord2hvNV = (PFNGLMULTITEXCOORD2HVNVPROC)proc((const GLubyte*)"glMultiTexCoord2hvNV")) != nullptr) || r;
    r = ((__glMultiTexCoord3hNV = (PFNGLMULTITEXCOORD3HNVPROC)proc((const GLubyte*)"glMultiTexCoord3hNV")) != nullptr) || r;
    r = ((__glMultiTexCoord3hvNV = (PFNGLMULTITEXCOORD3HVNVPROC)proc((const GLubyte*)"glMultiTexCoord3hvNV")) != nullptr) || r;
    r = ((__glMultiTexCoord4hNV = (PFNGLMULTITEXCOORD4HNVPROC)proc((const GLubyte*)"glMultiTexCoord4hNV")) != nullptr) || r;
    r = ((__glMultiTexCoord4hvNV = (PFNGLMULTITEXCOORD4HVNVPROC)proc((const GLubyte*)"glMultiTexCoord4hvNV")) != nullptr) || r;
    r = ((__glNormal3hNV = (PFNGLNORMAL3HNVPROC)proc((const GLubyte*)"glNormal3hNV")) != nullptr) || r;
    r = ((__glNormal3hvNV = (PFNGLNORMAL3HVNVPROC)proc((const GLubyte*)"glNormal3hvNV")) != nullptr) || r;
    r = ((__glSecondaryColor3hNV = (PFNGLSECONDARYCOLOR3HNVPROC)proc((const GLubyte*)"glSecondaryColor3hNV")) != nullptr) || r;
    r = ((__glSecondaryColor3hvNV = (PFNGLSECONDARYCOLOR3HVNVPROC)proc((const GLubyte*)"glSecondaryColor3hvNV")) != nullptr) || r;
    r = ((__glTexCoord1hNV = (PFNGLTEXCOORD1HNVPROC)proc((const GLubyte*)"glTexCoord1hNV")) != nullptr) || r;
    r = ((__glTexCoord1hvNV = (PFNGLTEXCOORD1HVNVPROC)proc((const GLubyte*)"glTexCoord1hvNV")) != nullptr) || r;
    r = ((__glTexCoord2hNV = (PFNGLTEXCOORD2HNVPROC)proc((const GLubyte*)"glTexCoord2hNV")) != nullptr) || r;
    r = ((__glTexCoord2hvNV = (PFNGLTEXCOORD2HVNVPROC)proc((const GLubyte*)"glTexCoord2hvNV")) != nullptr) || r;
    r = ((__glTexCoord3hNV = (PFNGLTEXCOORD3HNVPROC)proc((const GLubyte*)"glTexCoord3hNV")) != nullptr) || r;
    r = ((__glTexCoord3hvNV = (PFNGLTEXCOORD3HVNVPROC)proc((const GLubyte*)"glTexCoord3hvNV")) != nullptr) || r;
    r = ((__glTexCoord4hNV = (PFNGLTEXCOORD4HNVPROC)proc((const GLubyte*)"glTexCoord4hNV")) != nullptr) || r;
    r = ((__glTexCoord4hvNV = (PFNGLTEXCOORD4HVNVPROC)proc((const GLubyte*)"glTexCoord4hvNV")) != nullptr) || r;
    r = ((__glVertex2hNV = (PFNGLVERTEX2HNVPROC)proc((const GLubyte*)"glVertex2hNV")) != nullptr) || r;
    r = ((__glVertex2hvNV = (PFNGLVERTEX2HVNVPROC)proc((const GLubyte*)"glVertex2hvNV")) != nullptr) || r;
    r = ((__glVertex3hNV = (PFNGLVERTEX3HNVPROC)proc((const GLubyte*)"glVertex3hNV")) != nullptr) || r;
    r = ((__glVertex3hvNV = (PFNGLVERTEX3HVNVPROC)proc((const GLubyte*)"glVertex3hvNV")) != nullptr) || r;
    r = ((__glVertex4hNV = (PFNGLVERTEX4HNVPROC)proc((const GLubyte*)"glVertex4hNV")) != nullptr) || r;
    r = ((__glVertex4hvNV = (PFNGLVERTEX4HVNVPROC)proc((const GLubyte*)"glVertex4hvNV")) != nullptr) || r;
    r = ((__glVertexAttrib1hNV = (PFNGLVERTEXATTRIB1HNVPROC)proc((const GLubyte*)"glVertexAttrib1hNV")) != nullptr) || r;
    r = ((__glVertexAttrib1hvNV = (PFNGLVERTEXATTRIB1HVNVPROC)proc((const GLubyte*)"glVertexAttrib1hvNV")) != nullptr) || r;
    r = ((__glVertexAttrib2hNV = (PFNGLVERTEXATTRIB2HNVPROC)proc((const GLubyte*)"glVertexAttrib2hNV")) != nullptr) || r;
    r = ((__glVertexAttrib2hvNV = (PFNGLVERTEXATTRIB2HVNVPROC)proc((const GLubyte*)"glVertexAttrib2hvNV")) != nullptr) || r;
    r = ((__glVertexAttrib3hNV = (PFNGLVERTEXATTRIB3HNVPROC)proc((const GLubyte*)"glVertexAttrib3hNV")) != nullptr) || r;
    r = ((__glVertexAttrib3hvNV = (PFNGLVERTEXATTRIB3HVNVPROC)proc((const GLubyte*)"glVertexAttrib3hvNV")) != nullptr) || r;
    r = ((__glVertexAttrib4hNV = (PFNGLVERTEXATTRIB4HNVPROC)proc((const GLubyte*)"glVertexAttrib4hNV")) != nullptr) || r;
    r = ((__glVertexAttrib4hvNV = (PFNGLVERTEXATTRIB4HVNVPROC)proc((const GLubyte*)"glVertexAttrib4hvNV")) != nullptr) || r;
    r = ((__glVertexAttribs1hvNV = (PFNGLVERTEXATTRIBS1HVNVPROC)proc((const GLubyte*)"glVertexAttribs1hvNV")) != nullptr) || r;
    r = ((__glVertexAttribs2hvNV = (PFNGLVERTEXATTRIBS2HVNVPROC)proc((const GLubyte*)"glVertexAttribs2hvNV")) != nullptr) || r;
    r = ((__glVertexAttribs3hvNV = (PFNGLVERTEXATTRIBS3HVNVPROC)proc((const GLubyte*)"glVertexAttribs3hvNV")) != nullptr) || r;
    r = ((__glVertexAttribs4hvNV = (PFNGLVERTEXATTRIBS4HVNVPROC)proc((const GLubyte*)"glVertexAttribs4hvNV")) != nullptr) || r;
    r = ((__glVertexWeighthNV = (PFNGLVERTEXWEIGHTHNVPROC)proc((const GLubyte*)"glVertexWeighthNV")) != nullptr) || r;
    r = ((__glVertexWeighthvNV = (PFNGLVERTEXWEIGHTHVNVPROC)proc((const GLubyte*)"glVertexWeighthvNV")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_NV_half_float = false;
/* GL_NV_internalformat_sample_query */
PFNGLGETINTERNALFORMATSAMPLEIVNVPROC __glGetInternalformatSampleivNV = nullptr; void APIENTRY glGetInternalformatSampleivNV (GLenum target, GLenum internalformat, GLsizei samples, GLenum pname, GLsizei bufSize, GLint *params) { if (__glGetInternalformatSampleivNV != 0) (__glGetInternalformatSampleivNV)(target, internalformat, samples, pname, bufSize, params);  }
bool __loadGL_NV_internalformat_sample_query(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glGetInternalformatSampleivNV = (PFNGLGETINTERNALFORMATSAMPLEIVNVPROC)proc((const GLubyte*)"glGetInternalformatSampleivNV")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_NV_internalformat_sample_query = false;
/* GL_NV_light_max_exponent */
bool __loadGL_NV_light_max_exponent(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_NV_light_max_exponent = false;
/* GL_NV_multisample_coverage */
bool __loadGL_NV_multisample_coverage(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_NV_multisample_coverage = false;
/* GL_NV_multisample_filter_hint */
bool __loadGL_NV_multisample_filter_hint(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_NV_multisample_filter_hint = false;
/* GL_NV_occlusion_query */
PFNGLBEGINOCCLUSIONQUERYNVPROC __glBeginOcclusionQueryNV = nullptr; void APIENTRY glBeginOcclusionQueryNV (GLuint id) { if (__glBeginOcclusionQueryNV != 0) (__glBeginOcclusionQueryNV)(id);  }
PFNGLDELETEOCCLUSIONQUERIESNVPROC __glDeleteOcclusionQueriesNV = nullptr; void APIENTRY glDeleteOcclusionQueriesNV (GLsizei n, const GLuint *ids) { if (__glDeleteOcclusionQueriesNV != 0) (__glDeleteOcclusionQueriesNV)(n, ids);  }
PFNGLENDOCCLUSIONQUERYNVPROC __glEndOcclusionQueryNV = nullptr; void APIENTRY glEndOcclusionQueryNV () { if (__glEndOcclusionQueryNV != 0) (__glEndOcclusionQueryNV)();  }
PFNGLGENOCCLUSIONQUERIESNVPROC __glGenOcclusionQueriesNV = nullptr; void APIENTRY glGenOcclusionQueriesNV (GLsizei n, GLuint *ids) { if (__glGenOcclusionQueriesNV != 0) (__glGenOcclusionQueriesNV)(n, ids);  }
PFNGLGETOCCLUSIONQUERYIVNVPROC __glGetOcclusionQueryivNV = nullptr; void APIENTRY glGetOcclusionQueryivNV (GLuint id, GLenum pname, GLint *params) { if (__glGetOcclusionQueryivNV != 0) (__glGetOcclusionQueryivNV)(id, pname, params);  }
PFNGLGETOCCLUSIONQUERYUIVNVPROC __glGetOcclusionQueryuivNV = nullptr; void APIENTRY glGetOcclusionQueryuivNV (GLuint id, GLenum pname, GLuint *params) { if (__glGetOcclusionQueryuivNV != 0) (__glGetOcclusionQueryuivNV)(id, pname, params);  }
PFNGLISOCCLUSIONQUERYNVPROC __glIsOcclusionQueryNV = nullptr; GLboolean APIENTRY glIsOcclusionQueryNV (GLuint id) { if (__glIsOcclusionQueryNV != 0) return (__glIsOcclusionQueryNV)(id); return 0; }
bool __loadGL_NV_occlusion_query(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glBeginOcclusionQueryNV = (PFNGLBEGINOCCLUSIONQUERYNVPROC)proc((const GLubyte*)"glBeginOcclusionQueryNV")) != nullptr) || r;
    r = ((__glDeleteOcclusionQueriesNV = (PFNGLDELETEOCCLUSIONQUERIESNVPROC)proc((const GLubyte*)"glDeleteOcclusionQueriesNV")) != nullptr) || r;
    r = ((__glEndOcclusionQueryNV = (PFNGLENDOCCLUSIONQUERYNVPROC)proc((const GLubyte*)"glEndOcclusionQueryNV")) != nullptr) || r;
    r = ((__glGenOcclusionQueriesNV = (PFNGLGENOCCLUSIONQUERIESNVPROC)proc((const GLubyte*)"glGenOcclusionQueriesNV")) != nullptr) || r;
    r = ((__glGetOcclusionQueryivNV = (PFNGLGETOCCLUSIONQUERYIVNVPROC)proc((const GLubyte*)"glGetOcclusionQueryivNV")) != nullptr) || r;
    r = ((__glGetOcclusionQueryuivNV = (PFNGLGETOCCLUSIONQUERYUIVNVPROC)proc((const GLubyte*)"glGetOcclusionQueryuivNV")) != nullptr) || r;
    r = ((__glIsOcclusionQueryNV = (PFNGLISOCCLUSIONQUERYNVPROC)proc((const GLubyte*)"glIsOcclusionQueryNV")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_NV_occlusion_query = false;
/* GL_NV_packed_depth_stencil */
bool __loadGL_NV_packed_depth_stencil(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_NV_packed_depth_stencil = false;
/* GL_NV_parameter_buffer_object */
PFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC __glProgramBufferParametersIivNV = nullptr; void APIENTRY glProgramBufferParametersIivNV (GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLint *params) { if (__glProgramBufferParametersIivNV != 0) (__glProgramBufferParametersIivNV)(target, bindingIndex, wordIndex, count, params);  }
PFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC __glProgramBufferParametersIuivNV = nullptr; void APIENTRY glProgramBufferParametersIuivNV (GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLuint *params) { if (__glProgramBufferParametersIuivNV != 0) (__glProgramBufferParametersIuivNV)(target, bindingIndex, wordIndex, count, params);  }
PFNGLPROGRAMBUFFERPARAMETERSFVNVPROC __glProgramBufferParametersfvNV = nullptr; void APIENTRY glProgramBufferParametersfvNV (GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLfloat *params) { if (__glProgramBufferParametersfvNV != 0) (__glProgramBufferParametersfvNV)(target, bindingIndex, wordIndex, count, params);  }
bool __loadGL_NV_parameter_buffer_object(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glProgramBufferParametersIivNV = (PFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC)proc((const GLubyte*)"glProgramBufferParametersIivNV")) != nullptr) || r;
    r = ((__glProgramBufferParametersIuivNV = (PFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC)proc((const GLubyte*)"glProgramBufferParametersIuivNV")) != nullptr) || r;
    r = ((__glProgramBufferParametersfvNV = (PFNGLPROGRAMBUFFERPARAMETERSFVNVPROC)proc((const GLubyte*)"glProgramBufferParametersfvNV")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_NV_parameter_buffer_object = false;
/* GL_NV_parameter_buffer_object2 */
bool __loadGL_NV_parameter_buffer_object2(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_NV_parameter_buffer_object2 = false;
/* GL_NV_path_rendering */
PFNGLCOPYPATHNVPROC __glCopyPathNV = nullptr; void APIENTRY glCopyPathNV (GLuint resultPath, GLuint srcPath) { if (__glCopyPathNV != 0) (__glCopyPathNV)(resultPath, srcPath);  }
PFNGLCOVERFILLPATHINSTANCEDNVPROC __glCoverFillPathInstancedNV = nullptr; void APIENTRY glCoverFillPathInstancedNV (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues) { if (__glCoverFillPathInstancedNV != 0) (__glCoverFillPathInstancedNV)(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues);  }
PFNGLCOVERFILLPATHNVPROC __glCoverFillPathNV = nullptr; void APIENTRY glCoverFillPathNV (GLuint path, GLenum coverMode) { if (__glCoverFillPathNV != 0) (__glCoverFillPathNV)(path, coverMode);  }
PFNGLCOVERSTROKEPATHINSTANCEDNVPROC __glCoverStrokePathInstancedNV = nullptr; void APIENTRY glCoverStrokePathInstancedNV (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues) { if (__glCoverStrokePathInstancedNV != 0) (__glCoverStrokePathInstancedNV)(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues);  }
PFNGLCOVERSTROKEPATHNVPROC __glCoverStrokePathNV = nullptr; void APIENTRY glCoverStrokePathNV (GLuint path, GLenum coverMode) { if (__glCoverStrokePathNV != 0) (__glCoverStrokePathNV)(path, coverMode);  }
PFNGLDELETEPATHSNVPROC __glDeletePathsNV = nullptr; void APIENTRY glDeletePathsNV (GLuint path, GLsizei range) { if (__glDeletePathsNV != 0) (__glDeletePathsNV)(path, range);  }
PFNGLGENPATHSNVPROC __glGenPathsNV = nullptr; GLuint APIENTRY glGenPathsNV (GLsizei range) { if (__glGenPathsNV != 0) return (__glGenPathsNV)(range); return 0; }
PFNGLGETPATHCOLORGENFVNVPROC __glGetPathColorGenfvNV = nullptr; void APIENTRY glGetPathColorGenfvNV (GLenum color, GLenum pname, GLfloat *value) { if (__glGetPathColorGenfvNV != 0) (__glGetPathColorGenfvNV)(color, pname, value);  }
PFNGLGETPATHCOLORGENIVNVPROC __glGetPathColorGenivNV = nullptr; void APIENTRY glGetPathColorGenivNV (GLenum color, GLenum pname, GLint *value) { if (__glGetPathColorGenivNV != 0) (__glGetPathColorGenivNV)(color, pname, value);  }
PFNGLGETPATHCOMMANDSNVPROC __glGetPathCommandsNV = nullptr; void APIENTRY glGetPathCommandsNV (GLuint path, GLubyte *commands) { if (__glGetPathCommandsNV != 0) (__glGetPathCommandsNV)(path, commands);  }
PFNGLGETPATHCOORDSNVPROC __glGetPathCoordsNV = nullptr; void APIENTRY glGetPathCoordsNV (GLuint path, GLfloat *coords) { if (__glGetPathCoordsNV != 0) (__glGetPathCoordsNV)(path, coords);  }
PFNGLGETPATHDASHARRAYNVPROC __glGetPathDashArrayNV = nullptr; void APIENTRY glGetPathDashArrayNV (GLuint path, GLfloat *dashArray) { if (__glGetPathDashArrayNV != 0) (__glGetPathDashArrayNV)(path, dashArray);  }
PFNGLGETPATHLENGTHNVPROC __glGetPathLengthNV = nullptr; GLfloat APIENTRY glGetPathLengthNV (GLuint path, GLsizei startSegment, GLsizei numSegments) { if (__glGetPathLengthNV != 0) return (__glGetPathLengthNV)(path, startSegment, numSegments); return 0; }
PFNGLGETPATHMETRICRANGENVPROC __glGetPathMetricRangeNV = nullptr; void APIENTRY glGetPathMetricRangeNV (GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat *metrics) { if (__glGetPathMetricRangeNV != 0) (__glGetPathMetricRangeNV)(metricQueryMask, firstPathName, numPaths, stride, metrics);  }
PFNGLGETPATHMETRICSNVPROC __glGetPathMetricsNV = nullptr; void APIENTRY glGetPathMetricsNV (GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLsizei stride, GLfloat *metrics) { if (__glGetPathMetricsNV != 0) (__glGetPathMetricsNV)(metricQueryMask, numPaths, pathNameType, paths, pathBase, stride, metrics);  }
PFNGLGETPATHPARAMETERFVNVPROC __glGetPathParameterfvNV = nullptr; void APIENTRY glGetPathParameterfvNV (GLuint path, GLenum pname, GLfloat *value) { if (__glGetPathParameterfvNV != 0) (__glGetPathParameterfvNV)(path, pname, value);  }
PFNGLGETPATHPARAMETERIVNVPROC __glGetPathParameterivNV = nullptr; void APIENTRY glGetPathParameterivNV (GLuint path, GLenum pname, GLint *value) { if (__glGetPathParameterivNV != 0) (__glGetPathParameterivNV)(path, pname, value);  }
PFNGLGETPATHSPACINGNVPROC __glGetPathSpacingNV = nullptr; void APIENTRY glGetPathSpacingNV (GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat *returnedSpacing) { if (__glGetPathSpacingNV != 0) (__glGetPathSpacingNV)(pathListMode, numPaths, pathNameType, paths, pathBase, advanceScale, kerningScale, transformType, returnedSpacing);  }
PFNGLGETPATHTEXGENFVNVPROC __glGetPathTexGenfvNV = nullptr; void APIENTRY glGetPathTexGenfvNV (GLenum texCoordSet, GLenum pname, GLfloat *value) { if (__glGetPathTexGenfvNV != 0) (__glGetPathTexGenfvNV)(texCoordSet, pname, value);  }
PFNGLGETPATHTEXGENIVNVPROC __glGetPathTexGenivNV = nullptr; void APIENTRY glGetPathTexGenivNV (GLenum texCoordSet, GLenum pname, GLint *value) { if (__glGetPathTexGenivNV != 0) (__glGetPathTexGenivNV)(texCoordSet, pname, value);  }
PFNGLGETPROGRAMRESOURCEFVNVPROC __glGetProgramResourcefvNV = nullptr; void APIENTRY glGetProgramResourcefvNV (GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLfloat *params) { if (__glGetProgramResourcefvNV != 0) (__glGetProgramResourcefvNV)(program, programInterface, index, propCount, props, bufSize, length, params);  }
PFNGLINTERPOLATEPATHSNVPROC __glInterpolatePathsNV = nullptr; void APIENTRY glInterpolatePathsNV (GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight) { if (__glInterpolatePathsNV != 0) (__glInterpolatePathsNV)(resultPath, pathA, pathB, weight);  }
PFNGLISPATHNVPROC __glIsPathNV = nullptr; GLboolean APIENTRY glIsPathNV (GLuint path) { if (__glIsPathNV != 0) return (__glIsPathNV)(path); return 0; }
PFNGLISPOINTINFILLPATHNVPROC __glIsPointInFillPathNV = nullptr; GLboolean APIENTRY glIsPointInFillPathNV (GLuint path, GLuint mask, GLfloat x, GLfloat y) { if (__glIsPointInFillPathNV != 0) return (__glIsPointInFillPathNV)(path, mask, x, y); return 0; }
PFNGLISPOINTINSTROKEPATHNVPROC __glIsPointInStrokePathNV = nullptr; GLboolean APIENTRY glIsPointInStrokePathNV (GLuint path, GLfloat x, GLfloat y) { if (__glIsPointInStrokePathNV != 0) return (__glIsPointInStrokePathNV)(path, x, y); return 0; }
PFNGLMATRIXLOAD3X2FNVPROC __glMatrixLoad3x2fNV = nullptr; void APIENTRY glMatrixLoad3x2fNV (GLenum matrixMode, const GLfloat *m) { if (__glMatrixLoad3x2fNV != 0) (__glMatrixLoad3x2fNV)(matrixMode, m);  }
PFNGLMATRIXLOAD3X3FNVPROC __glMatrixLoad3x3fNV = nullptr; void APIENTRY glMatrixLoad3x3fNV (GLenum matrixMode, const GLfloat *m) { if (__glMatrixLoad3x3fNV != 0) (__glMatrixLoad3x3fNV)(matrixMode, m);  }
PFNGLMATRIXLOADTRANSPOSE3X3FNVPROC __glMatrixLoadTranspose3x3fNV = nullptr; void APIENTRY glMatrixLoadTranspose3x3fNV (GLenum matrixMode, const GLfloat *m) { if (__glMatrixLoadTranspose3x3fNV != 0) (__glMatrixLoadTranspose3x3fNV)(matrixMode, m);  }
PFNGLMATRIXMULT3X2FNVPROC __glMatrixMult3x2fNV = nullptr; void APIENTRY glMatrixMult3x2fNV (GLenum matrixMode, const GLfloat *m) { if (__glMatrixMult3x2fNV != 0) (__glMatrixMult3x2fNV)(matrixMode, m);  }
PFNGLMATRIXMULT3X3FNVPROC __glMatrixMult3x3fNV = nullptr; void APIENTRY glMatrixMult3x3fNV (GLenum matrixMode, const GLfloat *m) { if (__glMatrixMult3x3fNV != 0) (__glMatrixMult3x3fNV)(matrixMode, m);  }
PFNGLMATRIXMULTTRANSPOSE3X3FNVPROC __glMatrixMultTranspose3x3fNV = nullptr; void APIENTRY glMatrixMultTranspose3x3fNV (GLenum matrixMode, const GLfloat *m) { if (__glMatrixMultTranspose3x3fNV != 0) (__glMatrixMultTranspose3x3fNV)(matrixMode, m);  }
PFNGLPATHCOLORGENNVPROC __glPathColorGenNV = nullptr; void APIENTRY glPathColorGenNV (GLenum color, GLenum genMode, GLenum colorFormat, const GLfloat *coeffs) { if (__glPathColorGenNV != 0) (__glPathColorGenNV)(color, genMode, colorFormat, coeffs);  }
PFNGLPATHCOMMANDSNVPROC __glPathCommandsNV = nullptr; void APIENTRY glPathCommandsNV (GLuint path, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const void *coords) { if (__glPathCommandsNV != 0) (__glPathCommandsNV)(path, numCommands, commands, numCoords, coordType, coords);  }
PFNGLPATHCOORDSNVPROC __glPathCoordsNV = nullptr; void APIENTRY glPathCoordsNV (GLuint path, GLsizei numCoords, GLenum coordType, const void *coords) { if (__glPathCoordsNV != 0) (__glPathCoordsNV)(path, numCoords, coordType, coords);  }
PFNGLPATHCOVERDEPTHFUNCNVPROC __glPathCoverDepthFuncNV = nullptr; void APIENTRY glPathCoverDepthFuncNV (GLenum func) { if (__glPathCoverDepthFuncNV != 0) (__glPathCoverDepthFuncNV)(func);  }
PFNGLPATHDASHARRAYNVPROC __glPathDashArrayNV = nullptr; void APIENTRY glPathDashArrayNV (GLuint path, GLsizei dashCount, const GLfloat *dashArray) { if (__glPathDashArrayNV != 0) (__glPathDashArrayNV)(path, dashCount, dashArray);  }
PFNGLPATHFOGGENNVPROC __glPathFogGenNV = nullptr; void APIENTRY glPathFogGenNV (GLenum genMode) { if (__glPathFogGenNV != 0) (__glPathFogGenNV)(genMode);  }
PFNGLPATHGLYPHINDEXARRAYNVPROC __glPathGlyphIndexArrayNV = nullptr; GLenum APIENTRY glPathGlyphIndexArrayNV (GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale) { if (__glPathGlyphIndexArrayNV != 0) return (__glPathGlyphIndexArrayNV)(firstPathName, fontTarget, fontName, fontStyle, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale); return 0; }
PFNGLPATHGLYPHINDEXRANGENVPROC __glPathGlyphIndexRangeNV = nullptr; GLenum APIENTRY glPathGlyphIndexRangeNV (GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint pathParameterTemplate, GLfloat emScale, GLuint baseAndCount[2]) { if (__glPathGlyphIndexRangeNV != 0) return (__glPathGlyphIndexRangeNV)(fontTarget, fontName, fontStyle, pathParameterTemplate, emScale, baseAndCount); return 0; }
PFNGLPATHGLYPHRANGENVPROC __glPathGlyphRangeNV = nullptr; void APIENTRY glPathGlyphRangeNV (GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale) { if (__glPathGlyphRangeNV != 0) (__glPathGlyphRangeNV)(firstPathName, fontTarget, fontName, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale);  }
PFNGLPATHGLYPHSNVPROC __glPathGlyphsNV = nullptr; void APIENTRY glPathGlyphsNV (GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const void *charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale) { if (__glPathGlyphsNV != 0) (__glPathGlyphsNV)(firstPathName, fontTarget, fontName, fontStyle, numGlyphs, type, charcodes, handleMissingGlyphs, pathParameterTemplate, emScale);  }
PFNGLPATHMEMORYGLYPHINDEXARRAYNVPROC __glPathMemoryGlyphIndexArrayNV = nullptr; GLenum APIENTRY glPathMemoryGlyphIndexArrayNV (GLuint firstPathName, GLenum fontTarget, GLsizeiptr fontSize, const void *fontData, GLsizei faceIndex, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale) { if (__glPathMemoryGlyphIndexArrayNV != 0) return (__glPathMemoryGlyphIndexArrayNV)(firstPathName, fontTarget, fontSize, fontData, faceIndex, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale); return 0; }
PFNGLPATHPARAMETERFNVPROC __glPathParameterfNV = nullptr; void APIENTRY glPathParameterfNV (GLuint path, GLenum pname, GLfloat value) { if (__glPathParameterfNV != 0) (__glPathParameterfNV)(path, pname, value);  }
PFNGLPATHPARAMETERFVNVPROC __glPathParameterfvNV = nullptr; void APIENTRY glPathParameterfvNV (GLuint path, GLenum pname, const GLfloat *value) { if (__glPathParameterfvNV != 0) (__glPathParameterfvNV)(path, pname, value);  }
PFNGLPATHPARAMETERINVPROC __glPathParameteriNV = nullptr; void APIENTRY glPathParameteriNV (GLuint path, GLenum pname, GLint value) { if (__glPathParameteriNV != 0) (__glPathParameteriNV)(path, pname, value);  }
PFNGLPATHPARAMETERIVNVPROC __glPathParameterivNV = nullptr; void APIENTRY glPathParameterivNV (GLuint path, GLenum pname, const GLint *value) { if (__glPathParameterivNV != 0) (__glPathParameterivNV)(path, pname, value);  }
PFNGLPATHSTENCILDEPTHOFFSETNVPROC __glPathStencilDepthOffsetNV = nullptr; void APIENTRY glPathStencilDepthOffsetNV (GLfloat factor, GLfloat units) { if (__glPathStencilDepthOffsetNV != 0) (__glPathStencilDepthOffsetNV)(factor, units);  }
PFNGLPATHSTENCILFUNCNVPROC __glPathStencilFuncNV = nullptr; void APIENTRY glPathStencilFuncNV (GLenum func, GLint ref, GLuint mask) { if (__glPathStencilFuncNV != 0) (__glPathStencilFuncNV)(func, ref, mask);  }
PFNGLPATHSTRINGNVPROC __glPathStringNV = nullptr; void APIENTRY glPathStringNV (GLuint path, GLenum format, GLsizei length, const void *pathString) { if (__glPathStringNV != 0) (__glPathStringNV)(path, format, length, pathString);  }
PFNGLPATHSUBCOMMANDSNVPROC __glPathSubCommandsNV = nullptr; void APIENTRY glPathSubCommandsNV (GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const void *coords) { if (__glPathSubCommandsNV != 0) (__glPathSubCommandsNV)(path, commandStart, commandsToDelete, numCommands, commands, numCoords, coordType, coords);  }
PFNGLPATHSUBCOORDSNVPROC __glPathSubCoordsNV = nullptr; void APIENTRY glPathSubCoordsNV (GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const void *coords) { if (__glPathSubCoordsNV != 0) (__glPathSubCoordsNV)(path, coordStart, numCoords, coordType, coords);  }
PFNGLPATHTEXGENNVPROC __glPathTexGenNV = nullptr; void APIENTRY glPathTexGenNV (GLenum texCoordSet, GLenum genMode, GLint components, const GLfloat *coeffs) { if (__glPathTexGenNV != 0) (__glPathTexGenNV)(texCoordSet, genMode, components, coeffs);  }
PFNGLPOINTALONGPATHNVPROC __glPointAlongPathNV = nullptr; GLboolean APIENTRY glPointAlongPathNV (GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat *x, GLfloat *y, GLfloat *tangentX, GLfloat *tangentY) { if (__glPointAlongPathNV != 0) return (__glPointAlongPathNV)(path, startSegment, numSegments, distance, x, y, tangentX, tangentY); return 0; }
PFNGLPROGRAMPATHFRAGMENTINPUTGENNVPROC __glProgramPathFragmentInputGenNV = nullptr; void APIENTRY glProgramPathFragmentInputGenNV (GLuint program, GLint location, GLenum genMode, GLint components, const GLfloat *coeffs) { if (__glProgramPathFragmentInputGenNV != 0) (__glProgramPathFragmentInputGenNV)(program, location, genMode, components, coeffs);  }
PFNGLSTENCILFILLPATHINSTANCEDNVPROC __glStencilFillPathInstancedNV = nullptr; void APIENTRY glStencilFillPathInstancedNV (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat *transformValues) { if (__glStencilFillPathInstancedNV != 0) (__glStencilFillPathInstancedNV)(numPaths, pathNameType, paths, pathBase, fillMode, mask, transformType, transformValues);  }
PFNGLSTENCILFILLPATHNVPROC __glStencilFillPathNV = nullptr; void APIENTRY glStencilFillPathNV (GLuint path, GLenum fillMode, GLuint mask) { if (__glStencilFillPathNV != 0) (__glStencilFillPathNV)(path, fillMode, mask);  }
PFNGLSTENCILSTROKEPATHINSTANCEDNVPROC __glStencilStrokePathInstancedNV = nullptr; void APIENTRY glStencilStrokePathInstancedNV (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat *transformValues) { if (__glStencilStrokePathInstancedNV != 0) (__glStencilStrokePathInstancedNV)(numPaths, pathNameType, paths, pathBase, reference, mask, transformType, transformValues);  }
PFNGLSTENCILSTROKEPATHNVPROC __glStencilStrokePathNV = nullptr; void APIENTRY glStencilStrokePathNV (GLuint path, GLint reference, GLuint mask) { if (__glStencilStrokePathNV != 0) (__glStencilStrokePathNV)(path, reference, mask);  }
PFNGLSTENCILTHENCOVERFILLPATHINSTANCEDNVPROC __glStencilThenCoverFillPathInstancedNV = nullptr; void APIENTRY glStencilThenCoverFillPathInstancedNV (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat *transformValues) { if (__glStencilThenCoverFillPathInstancedNV != 0) (__glStencilThenCoverFillPathInstancedNV)(numPaths, pathNameType, paths, pathBase, fillMode, mask, coverMode, transformType, transformValues);  }
PFNGLSTENCILTHENCOVERFILLPATHNVPROC __glStencilThenCoverFillPathNV = nullptr; void APIENTRY glStencilThenCoverFillPathNV (GLuint path, GLenum fillMode, GLuint mask, GLenum coverMode) { if (__glStencilThenCoverFillPathNV != 0) (__glStencilThenCoverFillPathNV)(path, fillMode, mask, coverMode);  }
PFNGLSTENCILTHENCOVERSTROKEPATHINSTANCEDNVPROC __glStencilThenCoverStrokePathInstancedNV = nullptr; void APIENTRY glStencilThenCoverStrokePathInstancedNV (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat *transformValues) { if (__glStencilThenCoverStrokePathInstancedNV != 0) (__glStencilThenCoverStrokePathInstancedNV)(numPaths, pathNameType, paths, pathBase, reference, mask, coverMode, transformType, transformValues);  }
PFNGLSTENCILTHENCOVERSTROKEPATHNVPROC __glStencilThenCoverStrokePathNV = nullptr; void APIENTRY glStencilThenCoverStrokePathNV (GLuint path, GLint reference, GLuint mask, GLenum coverMode) { if (__glStencilThenCoverStrokePathNV != 0) (__glStencilThenCoverStrokePathNV)(path, reference, mask, coverMode);  }
PFNGLTRANSFORMPATHNVPROC __glTransformPathNV = nullptr; void APIENTRY glTransformPathNV (GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat *transformValues) { if (__glTransformPathNV != 0) (__glTransformPathNV)(resultPath, srcPath, transformType, transformValues);  }
PFNGLWEIGHTPATHSNVPROC __glWeightPathsNV = nullptr; void APIENTRY glWeightPathsNV (GLuint resultPath, GLsizei numPaths, const GLuint *paths, const GLfloat *weights) { if (__glWeightPathsNV != 0) (__glWeightPathsNV)(resultPath, numPaths, paths, weights);  }
bool __loadGL_NV_path_rendering(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glCopyPathNV = (PFNGLCOPYPATHNVPROC)proc((const GLubyte*)"glCopyPathNV")) != nullptr) || r;
    r = ((__glCoverFillPathInstancedNV = (PFNGLCOVERFILLPATHINSTANCEDNVPROC)proc((const GLubyte*)"glCoverFillPathInstancedNV")) != nullptr) || r;
    r = ((__glCoverFillPathNV = (PFNGLCOVERFILLPATHNVPROC)proc((const GLubyte*)"glCoverFillPathNV")) != nullptr) || r;
    r = ((__glCoverStrokePathInstancedNV = (PFNGLCOVERSTROKEPATHINSTANCEDNVPROC)proc((const GLubyte*)"glCoverStrokePathInstancedNV")) != nullptr) || r;
    r = ((__glCoverStrokePathNV = (PFNGLCOVERSTROKEPATHNVPROC)proc((const GLubyte*)"glCoverStrokePathNV")) != nullptr) || r;
    r = ((__glDeletePathsNV = (PFNGLDELETEPATHSNVPROC)proc((const GLubyte*)"glDeletePathsNV")) != nullptr) || r;
    r = ((__glGenPathsNV = (PFNGLGENPATHSNVPROC)proc((const GLubyte*)"glGenPathsNV")) != nullptr) || r;
    r = ((__glGetPathColorGenfvNV = (PFNGLGETPATHCOLORGENFVNVPROC)proc((const GLubyte*)"glGetPathColorGenfvNV")) != nullptr) || r;
    r = ((__glGetPathColorGenivNV = (PFNGLGETPATHCOLORGENIVNVPROC)proc((const GLubyte*)"glGetPathColorGenivNV")) != nullptr) || r;
    r = ((__glGetPathCommandsNV = (PFNGLGETPATHCOMMANDSNVPROC)proc((const GLubyte*)"glGetPathCommandsNV")) != nullptr) || r;
    r = ((__glGetPathCoordsNV = (PFNGLGETPATHCOORDSNVPROC)proc((const GLubyte*)"glGetPathCoordsNV")) != nullptr) || r;
    r = ((__glGetPathDashArrayNV = (PFNGLGETPATHDASHARRAYNVPROC)proc((const GLubyte*)"glGetPathDashArrayNV")) != nullptr) || r;
    r = ((__glGetPathLengthNV = (PFNGLGETPATHLENGTHNVPROC)proc((const GLubyte*)"glGetPathLengthNV")) != nullptr) || r;
    r = ((__glGetPathMetricRangeNV = (PFNGLGETPATHMETRICRANGENVPROC)proc((const GLubyte*)"glGetPathMetricRangeNV")) != nullptr) || r;
    r = ((__glGetPathMetricsNV = (PFNGLGETPATHMETRICSNVPROC)proc((const GLubyte*)"glGetPathMetricsNV")) != nullptr) || r;
    r = ((__glGetPathParameterfvNV = (PFNGLGETPATHPARAMETERFVNVPROC)proc((const GLubyte*)"glGetPathParameterfvNV")) != nullptr) || r;
    r = ((__glGetPathParameterivNV = (PFNGLGETPATHPARAMETERIVNVPROC)proc((const GLubyte*)"glGetPathParameterivNV")) != nullptr) || r;
    r = ((__glGetPathSpacingNV = (PFNGLGETPATHSPACINGNVPROC)proc((const GLubyte*)"glGetPathSpacingNV")) != nullptr) || r;
    r = ((__glGetPathTexGenfvNV = (PFNGLGETPATHTEXGENFVNVPROC)proc((const GLubyte*)"glGetPathTexGenfvNV")) != nullptr) || r;
    r = ((__glGetPathTexGenivNV = (PFNGLGETPATHTEXGENIVNVPROC)proc((const GLubyte*)"glGetPathTexGenivNV")) != nullptr) || r;
    r = ((__glGetProgramResourcefvNV = (PFNGLGETPROGRAMRESOURCEFVNVPROC)proc((const GLubyte*)"glGetProgramResourcefvNV")) != nullptr) || r;
    r = ((__glInterpolatePathsNV = (PFNGLINTERPOLATEPATHSNVPROC)proc((const GLubyte*)"glInterpolatePathsNV")) != nullptr) || r;
    r = ((__glIsPathNV = (PFNGLISPATHNVPROC)proc((const GLubyte*)"glIsPathNV")) != nullptr) || r;
    r = ((__glIsPointInFillPathNV = (PFNGLISPOINTINFILLPATHNVPROC)proc((const GLubyte*)"glIsPointInFillPathNV")) != nullptr) || r;
    r = ((__glIsPointInStrokePathNV = (PFNGLISPOINTINSTROKEPATHNVPROC)proc((const GLubyte*)"glIsPointInStrokePathNV")) != nullptr) || r;
    r = ((__glMatrixLoad3x2fNV = (PFNGLMATRIXLOAD3X2FNVPROC)proc((const GLubyte*)"glMatrixLoad3x2fNV")) != nullptr) || r;
    r = ((__glMatrixLoad3x3fNV = (PFNGLMATRIXLOAD3X3FNVPROC)proc((const GLubyte*)"glMatrixLoad3x3fNV")) != nullptr) || r;
    r = ((__glMatrixLoadTranspose3x3fNV = (PFNGLMATRIXLOADTRANSPOSE3X3FNVPROC)proc((const GLubyte*)"glMatrixLoadTranspose3x3fNV")) != nullptr) || r;
    r = ((__glMatrixMult3x2fNV = (PFNGLMATRIXMULT3X2FNVPROC)proc((const GLubyte*)"glMatrixMult3x2fNV")) != nullptr) || r;
    r = ((__glMatrixMult3x3fNV = (PFNGLMATRIXMULT3X3FNVPROC)proc((const GLubyte*)"glMatrixMult3x3fNV")) != nullptr) || r;
    r = ((__glMatrixMultTranspose3x3fNV = (PFNGLMATRIXMULTTRANSPOSE3X3FNVPROC)proc((const GLubyte*)"glMatrixMultTranspose3x3fNV")) != nullptr) || r;
    r = ((__glPathColorGenNV = (PFNGLPATHCOLORGENNVPROC)proc((const GLubyte*)"glPathColorGenNV")) != nullptr) || r;
    r = ((__glPathCommandsNV = (PFNGLPATHCOMMANDSNVPROC)proc((const GLubyte*)"glPathCommandsNV")) != nullptr) || r;
    r = ((__glPathCoordsNV = (PFNGLPATHCOORDSNVPROC)proc((const GLubyte*)"glPathCoordsNV")) != nullptr) || r;
    r = ((__glPathCoverDepthFuncNV = (PFNGLPATHCOVERDEPTHFUNCNVPROC)proc((const GLubyte*)"glPathCoverDepthFuncNV")) != nullptr) || r;
    r = ((__glPathDashArrayNV = (PFNGLPATHDASHARRAYNVPROC)proc((const GLubyte*)"glPathDashArrayNV")) != nullptr) || r;
    r = ((__glPathFogGenNV = (PFNGLPATHFOGGENNVPROC)proc((const GLubyte*)"glPathFogGenNV")) != nullptr) || r;
    r = ((__glPathGlyphIndexArrayNV = (PFNGLPATHGLYPHINDEXARRAYNVPROC)proc((const GLubyte*)"glPathGlyphIndexArrayNV")) != nullptr) || r;
    r = ((__glPathGlyphIndexRangeNV = (PFNGLPATHGLYPHINDEXRANGENVPROC)proc((const GLubyte*)"glPathGlyphIndexRangeNV")) != nullptr) || r;
    r = ((__glPathGlyphRangeNV = (PFNGLPATHGLYPHRANGENVPROC)proc((const GLubyte*)"glPathGlyphRangeNV")) != nullptr) || r;
    r = ((__glPathGlyphsNV = (PFNGLPATHGLYPHSNVPROC)proc((const GLubyte*)"glPathGlyphsNV")) != nullptr) || r;
    r = ((__glPathMemoryGlyphIndexArrayNV = (PFNGLPATHMEMORYGLYPHINDEXARRAYNVPROC)proc((const GLubyte*)"glPathMemoryGlyphIndexArrayNV")) != nullptr) || r;
    r = ((__glPathParameterfNV = (PFNGLPATHPARAMETERFNVPROC)proc((const GLubyte*)"glPathParameterfNV")) != nullptr) || r;
    r = ((__glPathParameterfvNV = (PFNGLPATHPARAMETERFVNVPROC)proc((const GLubyte*)"glPathParameterfvNV")) != nullptr) || r;
    r = ((__glPathParameteriNV = (PFNGLPATHPARAMETERINVPROC)proc((const GLubyte*)"glPathParameteriNV")) != nullptr) || r;
    r = ((__glPathParameterivNV = (PFNGLPATHPARAMETERIVNVPROC)proc((const GLubyte*)"glPathParameterivNV")) != nullptr) || r;
    r = ((__glPathStencilDepthOffsetNV = (PFNGLPATHSTENCILDEPTHOFFSETNVPROC)proc((const GLubyte*)"glPathStencilDepthOffsetNV")) != nullptr) || r;
    r = ((__glPathStencilFuncNV = (PFNGLPATHSTENCILFUNCNVPROC)proc((const GLubyte*)"glPathStencilFuncNV")) != nullptr) || r;
    r = ((__glPathStringNV = (PFNGLPATHSTRINGNVPROC)proc((const GLubyte*)"glPathStringNV")) != nullptr) || r;
    r = ((__glPathSubCommandsNV = (PFNGLPATHSUBCOMMANDSNVPROC)proc((const GLubyte*)"glPathSubCommandsNV")) != nullptr) || r;
    r = ((__glPathSubCoordsNV = (PFNGLPATHSUBCOORDSNVPROC)proc((const GLubyte*)"glPathSubCoordsNV")) != nullptr) || r;
    r = ((__glPathTexGenNV = (PFNGLPATHTEXGENNVPROC)proc((const GLubyte*)"glPathTexGenNV")) != nullptr) || r;
    r = ((__glPointAlongPathNV = (PFNGLPOINTALONGPATHNVPROC)proc((const GLubyte*)"glPointAlongPathNV")) != nullptr) || r;
    r = ((__glProgramPathFragmentInputGenNV = (PFNGLPROGRAMPATHFRAGMENTINPUTGENNVPROC)proc((const GLubyte*)"glProgramPathFragmentInputGenNV")) != nullptr) || r;
    r = ((__glStencilFillPathInstancedNV = (PFNGLSTENCILFILLPATHINSTANCEDNVPROC)proc((const GLubyte*)"glStencilFillPathInstancedNV")) != nullptr) || r;
    r = ((__glStencilFillPathNV = (PFNGLSTENCILFILLPATHNVPROC)proc((const GLubyte*)"glStencilFillPathNV")) != nullptr) || r;
    r = ((__glStencilStrokePathInstancedNV = (PFNGLSTENCILSTROKEPATHINSTANCEDNVPROC)proc((const GLubyte*)"glStencilStrokePathInstancedNV")) != nullptr) || r;
    r = ((__glStencilStrokePathNV = (PFNGLSTENCILSTROKEPATHNVPROC)proc((const GLubyte*)"glStencilStrokePathNV")) != nullptr) || r;
    r = ((__glStencilThenCoverFillPathInstancedNV = (PFNGLSTENCILTHENCOVERFILLPATHINSTANCEDNVPROC)proc((const GLubyte*)"glStencilThenCoverFillPathInstancedNV")) != nullptr) || r;
    r = ((__glStencilThenCoverFillPathNV = (PFNGLSTENCILTHENCOVERFILLPATHNVPROC)proc((const GLubyte*)"glStencilThenCoverFillPathNV")) != nullptr) || r;
    r = ((__glStencilThenCoverStrokePathInstancedNV = (PFNGLSTENCILTHENCOVERSTROKEPATHINSTANCEDNVPROC)proc((const GLubyte*)"glStencilThenCoverStrokePathInstancedNV")) != nullptr) || r;
    r = ((__glStencilThenCoverStrokePathNV = (PFNGLSTENCILTHENCOVERSTROKEPATHNVPROC)proc((const GLubyte*)"glStencilThenCoverStrokePathNV")) != nullptr) || r;
    r = ((__glTransformPathNV = (PFNGLTRANSFORMPATHNVPROC)proc((const GLubyte*)"glTransformPathNV")) != nullptr) || r;
    r = ((__glWeightPathsNV = (PFNGLWEIGHTPATHSNVPROC)proc((const GLubyte*)"glWeightPathsNV")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_NV_path_rendering = false;
/* GL_NV_path_rendering_shared_edge */
bool __loadGL_NV_path_rendering_shared_edge(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_NV_path_rendering_shared_edge = false;
/* GL_NV_pixel_data_range */
PFNGLFLUSHPIXELDATARANGENVPROC __glFlushPixelDataRangeNV = nullptr; void APIENTRY glFlushPixelDataRangeNV (GLenum target) { if (__glFlushPixelDataRangeNV != 0) (__glFlushPixelDataRangeNV)(target);  }
PFNGLPIXELDATARANGENVPROC __glPixelDataRangeNV = nullptr; void APIENTRY glPixelDataRangeNV (GLenum target, GLsizei length, const void *pointer) { if (__glPixelDataRangeNV != 0) (__glPixelDataRangeNV)(target, length, pointer);  }
bool __loadGL_NV_pixel_data_range(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glFlushPixelDataRangeNV = (PFNGLFLUSHPIXELDATARANGENVPROC)proc((const GLubyte*)"glFlushPixelDataRangeNV")) != nullptr) || r;
    r = ((__glPixelDataRangeNV = (PFNGLPIXELDATARANGENVPROC)proc((const GLubyte*)"glPixelDataRangeNV")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_NV_pixel_data_range = false;
/* GL_NV_point_sprite */
PFNGLPOINTPARAMETERINVPROC __glPointParameteriNV = nullptr; void APIENTRY glPointParameteriNV (GLenum pname, GLint param) { if (__glPointParameteriNV != 0) (__glPointParameteriNV)(pname, param);  }
PFNGLPOINTPARAMETERIVNVPROC __glPointParameterivNV = nullptr; void APIENTRY glPointParameterivNV (GLenum pname, const GLint *params) { if (__glPointParameterivNV != 0) (__glPointParameterivNV)(pname, params);  }
bool __loadGL_NV_point_sprite(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glPointParameteriNV = (PFNGLPOINTPARAMETERINVPROC)proc((const GLubyte*)"glPointParameteriNV")) != nullptr) || r;
    r = ((__glPointParameterivNV = (PFNGLPOINTPARAMETERIVNVPROC)proc((const GLubyte*)"glPointParameterivNV")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_NV_point_sprite = false;
/* GL_NV_present_video */
PFNGLGETVIDEOI64VNVPROC __glGetVideoi64vNV = nullptr; void APIENTRY glGetVideoi64vNV (GLuint video_slot, GLenum pname, GLint64EXT *params) { if (__glGetVideoi64vNV != 0) (__glGetVideoi64vNV)(video_slot, pname, params);  }
PFNGLGETVIDEOIVNVPROC __glGetVideoivNV = nullptr; void APIENTRY glGetVideoivNV (GLuint video_slot, GLenum pname, GLint *params) { if (__glGetVideoivNV != 0) (__glGetVideoivNV)(video_slot, pname, params);  }
PFNGLGETVIDEOUI64VNVPROC __glGetVideoui64vNV = nullptr; void APIENTRY glGetVideoui64vNV (GLuint video_slot, GLenum pname, GLuint64EXT *params) { if (__glGetVideoui64vNV != 0) (__glGetVideoui64vNV)(video_slot, pname, params);  }
PFNGLGETVIDEOUIVNVPROC __glGetVideouivNV = nullptr; void APIENTRY glGetVideouivNV (GLuint video_slot, GLenum pname, GLuint *params) { if (__glGetVideouivNV != 0) (__glGetVideouivNV)(video_slot, pname, params);  }
PFNGLPRESENTFRAMEDUALFILLNVPROC __glPresentFrameDualFillNV = nullptr; void APIENTRY glPresentFrameDualFillNV (GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLenum target1, GLuint fill1, GLenum target2, GLuint fill2, GLenum target3, GLuint fill3) { if (__glPresentFrameDualFillNV != 0) (__glPresentFrameDualFillNV)(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, target1, fill1, target2, fill2, target3, fill3);  }
PFNGLPRESENTFRAMEKEYEDNVPROC __glPresentFrameKeyedNV = nullptr; void APIENTRY glPresentFrameKeyedNV (GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLuint key0, GLenum target1, GLuint fill1, GLuint key1) { if (__glPresentFrameKeyedNV != 0) (__glPresentFrameKeyedNV)(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, key0, target1, fill1, key1);  }
bool __loadGL_NV_present_video(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glGetVideoi64vNV = (PFNGLGETVIDEOI64VNVPROC)proc((const GLubyte*)"glGetVideoi64vNV")) != nullptr) || r;
    r = ((__glGetVideoivNV = (PFNGLGETVIDEOIVNVPROC)proc((const GLubyte*)"glGetVideoivNV")) != nullptr) || r;
    r = ((__glGetVideoui64vNV = (PFNGLGETVIDEOUI64VNVPROC)proc((const GLubyte*)"glGetVideoui64vNV")) != nullptr) || r;
    r = ((__glGetVideouivNV = (PFNGLGETVIDEOUIVNVPROC)proc((const GLubyte*)"glGetVideouivNV")) != nullptr) || r;
    r = ((__glPresentFrameDualFillNV = (PFNGLPRESENTFRAMEDUALFILLNVPROC)proc((const GLubyte*)"glPresentFrameDualFillNV")) != nullptr) || r;
    r = ((__glPresentFrameKeyedNV = (PFNGLPRESENTFRAMEKEYEDNVPROC)proc((const GLubyte*)"glPresentFrameKeyedNV")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_NV_present_video = false;
/* GL_NV_primitive_restart */
PFNGLPRIMITIVERESTARTINDEXNVPROC __glPrimitiveRestartIndexNV = nullptr; void APIENTRY glPrimitiveRestartIndexNV (GLuint index) { if (__glPrimitiveRestartIndexNV != 0) (__glPrimitiveRestartIndexNV)(index);  }
PFNGLPRIMITIVERESTARTNVPROC __glPrimitiveRestartNV = nullptr; void APIENTRY glPrimitiveRestartNV () { if (__glPrimitiveRestartNV != 0) (__glPrimitiveRestartNV)();  }
bool __loadGL_NV_primitive_restart(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glPrimitiveRestartIndexNV = (PFNGLPRIMITIVERESTARTINDEXNVPROC)proc((const GLubyte*)"glPrimitiveRestartIndexNV")) != nullptr) || r;
    r = ((__glPrimitiveRestartNV = (PFNGLPRIMITIVERESTARTNVPROC)proc((const GLubyte*)"glPrimitiveRestartNV")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_NV_primitive_restart = false;
/* GL_NV_register_combiners */
PFNGLCOMBINERINPUTNVPROC __glCombinerInputNV = nullptr; void APIENTRY glCombinerInputNV (GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage) { if (__glCombinerInputNV != 0) (__glCombinerInputNV)(stage, portion, variable, input, mapping, componentUsage);  }
PFNGLCOMBINEROUTPUTNVPROC __glCombinerOutputNV = nullptr; void APIENTRY glCombinerOutputNV (GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum) { if (__glCombinerOutputNV != 0) (__glCombinerOutputNV)(stage, portion, abOutput, cdOutput, sumOutput, scale, bias, abDotProduct, cdDotProduct, muxSum);  }
PFNGLCOMBINERPARAMETERFNVPROC __glCombinerParameterfNV = nullptr; void APIENTRY glCombinerParameterfNV (GLenum pname, GLfloat param) { if (__glCombinerParameterfNV != 0) (__glCombinerParameterfNV)(pname, param);  }
PFNGLCOMBINERPARAMETERFVNVPROC __glCombinerParameterfvNV = nullptr; void APIENTRY glCombinerParameterfvNV (GLenum pname, const GLfloat *params) { if (__glCombinerParameterfvNV != 0) (__glCombinerParameterfvNV)(pname, params);  }
PFNGLCOMBINERPARAMETERINVPROC __glCombinerParameteriNV = nullptr; void APIENTRY glCombinerParameteriNV (GLenum pname, GLint param) { if (__glCombinerParameteriNV != 0) (__glCombinerParameteriNV)(pname, param);  }
PFNGLCOMBINERPARAMETERIVNVPROC __glCombinerParameterivNV = nullptr; void APIENTRY glCombinerParameterivNV (GLenum pname, const GLint *params) { if (__glCombinerParameterivNV != 0) (__glCombinerParameterivNV)(pname, params);  }
PFNGLFINALCOMBINERINPUTNVPROC __glFinalCombinerInputNV = nullptr; void APIENTRY glFinalCombinerInputNV (GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage) { if (__glFinalCombinerInputNV != 0) (__glFinalCombinerInputNV)(variable, input, mapping, componentUsage);  }
PFNGLGETCOMBINERINPUTPARAMETERFVNVPROC __glGetCombinerInputParameterfvNV = nullptr; void APIENTRY glGetCombinerInputParameterfvNV (GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat *params) { if (__glGetCombinerInputParameterfvNV != 0) (__glGetCombinerInputParameterfvNV)(stage, portion, variable, pname, params);  }
PFNGLGETCOMBINERINPUTPARAMETERIVNVPROC __glGetCombinerInputParameterivNV = nullptr; void APIENTRY glGetCombinerInputParameterivNV (GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint *params) { if (__glGetCombinerInputParameterivNV != 0) (__glGetCombinerInputParameterivNV)(stage, portion, variable, pname, params);  }
PFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC __glGetCombinerOutputParameterfvNV = nullptr; void APIENTRY glGetCombinerOutputParameterfvNV (GLenum stage, GLenum portion, GLenum pname, GLfloat *params) { if (__glGetCombinerOutputParameterfvNV != 0) (__glGetCombinerOutputParameterfvNV)(stage, portion, pname, params);  }
PFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC __glGetCombinerOutputParameterivNV = nullptr; void APIENTRY glGetCombinerOutputParameterivNV (GLenum stage, GLenum portion, GLenum pname, GLint *params) { if (__glGetCombinerOutputParameterivNV != 0) (__glGetCombinerOutputParameterivNV)(stage, portion, pname, params);  }
PFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC __glGetFinalCombinerInputParameterfvNV = nullptr; void APIENTRY glGetFinalCombinerInputParameterfvNV (GLenum variable, GLenum pname, GLfloat *params) { if (__glGetFinalCombinerInputParameterfvNV != 0) (__glGetFinalCombinerInputParameterfvNV)(variable, pname, params);  }
PFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC __glGetFinalCombinerInputParameterivNV = nullptr; void APIENTRY glGetFinalCombinerInputParameterivNV (GLenum variable, GLenum pname, GLint *params) { if (__glGetFinalCombinerInputParameterivNV != 0) (__glGetFinalCombinerInputParameterivNV)(variable, pname, params);  }
bool __loadGL_NV_register_combiners(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glCombinerInputNV = (PFNGLCOMBINERINPUTNVPROC)proc((const GLubyte*)"glCombinerInputNV")) != nullptr) || r;
    r = ((__glCombinerOutputNV = (PFNGLCOMBINEROUTPUTNVPROC)proc((const GLubyte*)"glCombinerOutputNV")) != nullptr) || r;
    r = ((__glCombinerParameterfNV = (PFNGLCOMBINERPARAMETERFNVPROC)proc((const GLubyte*)"glCombinerParameterfNV")) != nullptr) || r;
    r = ((__glCombinerParameterfvNV = (PFNGLCOMBINERPARAMETERFVNVPROC)proc((const GLubyte*)"glCombinerParameterfvNV")) != nullptr) || r;
    r = ((__glCombinerParameteriNV = (PFNGLCOMBINERPARAMETERINVPROC)proc((const GLubyte*)"glCombinerParameteriNV")) != nullptr) || r;
    r = ((__glCombinerParameterivNV = (PFNGLCOMBINERPARAMETERIVNVPROC)proc((const GLubyte*)"glCombinerParameterivNV")) != nullptr) || r;
    r = ((__glFinalCombinerInputNV = (PFNGLFINALCOMBINERINPUTNVPROC)proc((const GLubyte*)"glFinalCombinerInputNV")) != nullptr) || r;
    r = ((__glGetCombinerInputParameterfvNV = (PFNGLGETCOMBINERINPUTPARAMETERFVNVPROC)proc((const GLubyte*)"glGetCombinerInputParameterfvNV")) != nullptr) || r;
    r = ((__glGetCombinerInputParameterivNV = (PFNGLGETCOMBINERINPUTPARAMETERIVNVPROC)proc((const GLubyte*)"glGetCombinerInputParameterivNV")) != nullptr) || r;
    r = ((__glGetCombinerOutputParameterfvNV = (PFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC)proc((const GLubyte*)"glGetCombinerOutputParameterfvNV")) != nullptr) || r;
    r = ((__glGetCombinerOutputParameterivNV = (PFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC)proc((const GLubyte*)"glGetCombinerOutputParameterivNV")) != nullptr) || r;
    r = ((__glGetFinalCombinerInputParameterfvNV = (PFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC)proc((const GLubyte*)"glGetFinalCombinerInputParameterfvNV")) != nullptr) || r;
    r = ((__glGetFinalCombinerInputParameterivNV = (PFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC)proc((const GLubyte*)"glGetFinalCombinerInputParameterivNV")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_NV_register_combiners = false;
/* GL_NV_register_combiners2 */
PFNGLCOMBINERSTAGEPARAMETERFVNVPROC __glCombinerStageParameterfvNV = nullptr; void APIENTRY glCombinerStageParameterfvNV (GLenum stage, GLenum pname, const GLfloat *params) { if (__glCombinerStageParameterfvNV != 0) (__glCombinerStageParameterfvNV)(stage, pname, params);  }
PFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC __glGetCombinerStageParameterfvNV = nullptr; void APIENTRY glGetCombinerStageParameterfvNV (GLenum stage, GLenum pname, GLfloat *params) { if (__glGetCombinerStageParameterfvNV != 0) (__glGetCombinerStageParameterfvNV)(stage, pname, params);  }
bool __loadGL_NV_register_combiners2(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glCombinerStageParameterfvNV = (PFNGLCOMBINERSTAGEPARAMETERFVNVPROC)proc((const GLubyte*)"glCombinerStageParameterfvNV")) != nullptr) || r;
    r = ((__glGetCombinerStageParameterfvNV = (PFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC)proc((const GLubyte*)"glGetCombinerStageParameterfvNV")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_NV_register_combiners2 = false;
/* GL_NV_sample_locations */
PFNGLFRAMEBUFFERSAMPLELOCATIONSFVNVPROC __glFramebufferSampleLocationsfvNV = nullptr; void APIENTRY glFramebufferSampleLocationsfvNV (GLenum target, GLuint start, GLsizei count, const GLfloat *v) { if (__glFramebufferSampleLocationsfvNV != 0) (__glFramebufferSampleLocationsfvNV)(target, start, count, v);  }
PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVNVPROC __glNamedFramebufferSampleLocationsfvNV = nullptr; void APIENTRY glNamedFramebufferSampleLocationsfvNV (GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *v) { if (__glNamedFramebufferSampleLocationsfvNV != 0) (__glNamedFramebufferSampleLocationsfvNV)(framebuffer, start, count, v);  }
PFNGLRESOLVEDEPTHVALUESNVPROC __glResolveDepthValuesNV = nullptr; void APIENTRY glResolveDepthValuesNV () { if (__glResolveDepthValuesNV != 0) (__glResolveDepthValuesNV)();  }
bool __loadGL_NV_sample_locations(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glFramebufferSampleLocationsfvNV = (PFNGLFRAMEBUFFERSAMPLELOCATIONSFVNVPROC)proc((const GLubyte*)"glFramebufferSampleLocationsfvNV")) != nullptr) || r;
    r = ((__glNamedFramebufferSampleLocationsfvNV = (PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVNVPROC)proc((const GLubyte*)"glNamedFramebufferSampleLocationsfvNV")) != nullptr) || r;
    r = ((__glResolveDepthValuesNV = (PFNGLRESOLVEDEPTHVALUESNVPROC)proc((const GLubyte*)"glResolveDepthValuesNV")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_NV_sample_locations = false;
/* GL_NV_sample_mask_override_coverage */
bool __loadGL_NV_sample_mask_override_coverage(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_NV_sample_mask_override_coverage = false;
/* GL_NV_shader_atomic_counters */
bool __loadGL_NV_shader_atomic_counters(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_NV_shader_atomic_counters = false;
/* GL_NV_shader_atomic_float */
bool __loadGL_NV_shader_atomic_float(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_NV_shader_atomic_float = false;
/* GL_NV_shader_atomic_fp16_vector */
bool __loadGL_NV_shader_atomic_fp16_vector(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_NV_shader_atomic_fp16_vector = false;
/* GL_NV_shader_atomic_int64 */
bool __loadGL_NV_shader_atomic_int64(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_NV_shader_atomic_int64 = false;
/* GL_NV_shader_buffer_load */
PFNGLGETBUFFERPARAMETERUI64VNVPROC __glGetBufferParameterui64vNV = nullptr; void APIENTRY glGetBufferParameterui64vNV (GLenum target, GLenum pname, GLuint64EXT *params) { if (__glGetBufferParameterui64vNV != 0) (__glGetBufferParameterui64vNV)(target, pname, params);  }
PFNGLGETINTEGERUI64VNVPROC __glGetIntegerui64vNV = nullptr; void APIENTRY glGetIntegerui64vNV (GLenum value, GLuint64EXT *result) { if (__glGetIntegerui64vNV != 0) (__glGetIntegerui64vNV)(value, result);  }
PFNGLGETNAMEDBUFFERPARAMETERUI64VNVPROC __glGetNamedBufferParameterui64vNV = nullptr; void APIENTRY glGetNamedBufferParameterui64vNV (GLuint buffer, GLenum pname, GLuint64EXT *params) { if (__glGetNamedBufferParameterui64vNV != 0) (__glGetNamedBufferParameterui64vNV)(buffer, pname, params);  }
PFNGLISBUFFERRESIDENTNVPROC __glIsBufferResidentNV = nullptr; GLboolean APIENTRY glIsBufferResidentNV (GLenum target) { if (__glIsBufferResidentNV != 0) return (__glIsBufferResidentNV)(target); return 0; }
PFNGLISNAMEDBUFFERRESIDENTNVPROC __glIsNamedBufferResidentNV = nullptr; GLboolean APIENTRY glIsNamedBufferResidentNV (GLuint buffer) { if (__glIsNamedBufferResidentNV != 0) return (__glIsNamedBufferResidentNV)(buffer); return 0; }
PFNGLMAKEBUFFERNONRESIDENTNVPROC __glMakeBufferNonResidentNV = nullptr; void APIENTRY glMakeBufferNonResidentNV (GLenum target) { if (__glMakeBufferNonResidentNV != 0) (__glMakeBufferNonResidentNV)(target);  }
PFNGLMAKEBUFFERRESIDENTNVPROC __glMakeBufferResidentNV = nullptr; void APIENTRY glMakeBufferResidentNV (GLenum target, GLenum access) { if (__glMakeBufferResidentNV != 0) (__glMakeBufferResidentNV)(target, access);  }
PFNGLMAKENAMEDBUFFERNONRESIDENTNVPROC __glMakeNamedBufferNonResidentNV = nullptr; void APIENTRY glMakeNamedBufferNonResidentNV (GLuint buffer) { if (__glMakeNamedBufferNonResidentNV != 0) (__glMakeNamedBufferNonResidentNV)(buffer);  }
PFNGLMAKENAMEDBUFFERRESIDENTNVPROC __glMakeNamedBufferResidentNV = nullptr; void APIENTRY glMakeNamedBufferResidentNV (GLuint buffer, GLenum access) { if (__glMakeNamedBufferResidentNV != 0) (__glMakeNamedBufferResidentNV)(buffer, access);  }
PFNGLPROGRAMUNIFORMUI64NVPROC __glProgramUniformui64NV = nullptr; void APIENTRY glProgramUniformui64NV (GLuint program, GLint location, GLuint64EXT value) { if (__glProgramUniformui64NV != 0) (__glProgramUniformui64NV)(program, location, value);  }
PFNGLPROGRAMUNIFORMUI64VNVPROC __glProgramUniformui64vNV = nullptr; void APIENTRY glProgramUniformui64vNV (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value) { if (__glProgramUniformui64vNV != 0) (__glProgramUniformui64vNV)(program, location, count, value);  }
PFNGLUNIFORMUI64NVPROC __glUniformui64NV = nullptr; void APIENTRY glUniformui64NV (GLint location, GLuint64EXT value) { if (__glUniformui64NV != 0) (__glUniformui64NV)(location, value);  }
PFNGLUNIFORMUI64VNVPROC __glUniformui64vNV = nullptr; void APIENTRY glUniformui64vNV (GLint location, GLsizei count, const GLuint64EXT *value) { if (__glUniformui64vNV != 0) (__glUniformui64vNV)(location, count, value);  }
bool __loadGL_NV_shader_buffer_load(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glGetBufferParameterui64vNV = (PFNGLGETBUFFERPARAMETERUI64VNVPROC)proc((const GLubyte*)"glGetBufferParameterui64vNV")) != nullptr) || r;
    r = ((__glGetIntegerui64vNV = (PFNGLGETINTEGERUI64VNVPROC)proc((const GLubyte*)"glGetIntegerui64vNV")) != nullptr) || r;
    r = ((__glGetNamedBufferParameterui64vNV = (PFNGLGETNAMEDBUFFERPARAMETERUI64VNVPROC)proc((const GLubyte*)"glGetNamedBufferParameterui64vNV")) != nullptr) || r;
    r = ((__glIsBufferResidentNV = (PFNGLISBUFFERRESIDENTNVPROC)proc((const GLubyte*)"glIsBufferResidentNV")) != nullptr) || r;
    r = ((__glIsNamedBufferResidentNV = (PFNGLISNAMEDBUFFERRESIDENTNVPROC)proc((const GLubyte*)"glIsNamedBufferResidentNV")) != nullptr) || r;
    r = ((__glMakeBufferNonResidentNV = (PFNGLMAKEBUFFERNONRESIDENTNVPROC)proc((const GLubyte*)"glMakeBufferNonResidentNV")) != nullptr) || r;
    r = ((__glMakeBufferResidentNV = (PFNGLMAKEBUFFERRESIDENTNVPROC)proc((const GLubyte*)"glMakeBufferResidentNV")) != nullptr) || r;
    r = ((__glMakeNamedBufferNonResidentNV = (PFNGLMAKENAMEDBUFFERNONRESIDENTNVPROC)proc((const GLubyte*)"glMakeNamedBufferNonResidentNV")) != nullptr) || r;
    r = ((__glMakeNamedBufferResidentNV = (PFNGLMAKENAMEDBUFFERRESIDENTNVPROC)proc((const GLubyte*)"glMakeNamedBufferResidentNV")) != nullptr) || r;
    r = ((__glProgramUniformui64NV = (PFNGLPROGRAMUNIFORMUI64NVPROC)proc((const GLubyte*)"glProgramUniformui64NV")) != nullptr) || r;
    r = ((__glProgramUniformui64vNV = (PFNGLPROGRAMUNIFORMUI64VNVPROC)proc((const GLubyte*)"glProgramUniformui64vNV")) != nullptr) || r;
    r = ((__glUniformui64NV = (PFNGLUNIFORMUI64NVPROC)proc((const GLubyte*)"glUniformui64NV")) != nullptr) || r;
    r = ((__glUniformui64vNV = (PFNGLUNIFORMUI64VNVPROC)proc((const GLubyte*)"glUniformui64vNV")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_NV_shader_buffer_load = false;
/* GL_NV_shader_buffer_store */
bool __loadGL_NV_shader_buffer_store(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_NV_shader_buffer_store = false;
/* GL_NV_shader_storage_buffer_object */
bool __loadGL_NV_shader_storage_buffer_object(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_NV_shader_storage_buffer_object = false;
/* GL_NV_shader_thread_group */
bool __loadGL_NV_shader_thread_group(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_NV_shader_thread_group = false;
/* GL_NV_shader_thread_shuffle */
bool __loadGL_NV_shader_thread_shuffle(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_NV_shader_thread_shuffle = false;
/* GL_NV_tessellation_program5 */
bool __loadGL_NV_tessellation_program5(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_NV_tessellation_program5 = false;
/* GL_NV_texgen_emboss */
bool __loadGL_NV_texgen_emboss(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_NV_texgen_emboss = false;
/* GL_NV_texgen_reflection */
bool __loadGL_NV_texgen_reflection(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_NV_texgen_reflection = false;
/* GL_NV_texture_barrier */
PFNGLTEXTUREBARRIERNVPROC __glTextureBarrierNV = nullptr; void APIENTRY glTextureBarrierNV () { if (__glTextureBarrierNV != 0) (__glTextureBarrierNV)();  }
bool __loadGL_NV_texture_barrier(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glTextureBarrierNV = (PFNGLTEXTUREBARRIERNVPROC)proc((const GLubyte*)"glTextureBarrierNV")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_NV_texture_barrier = false;
/* GL_NV_texture_compression_vtc */
bool __loadGL_NV_texture_compression_vtc(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_NV_texture_compression_vtc = false;
/* GL_NV_texture_env_combine4 */
bool __loadGL_NV_texture_env_combine4(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_NV_texture_env_combine4 = false;
/* GL_NV_texture_expand_normal */
bool __loadGL_NV_texture_expand_normal(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_NV_texture_expand_normal = false;
/* GL_NV_texture_multisample */
PFNGLTEXIMAGE2DMULTISAMPLECOVERAGENVPROC __glTexImage2DMultisampleCoverageNV = nullptr; void APIENTRY glTexImage2DMultisampleCoverageNV (GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations) { if (__glTexImage2DMultisampleCoverageNV != 0) (__glTexImage2DMultisampleCoverageNV)(target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations);  }
PFNGLTEXIMAGE3DMULTISAMPLECOVERAGENVPROC __glTexImage3DMultisampleCoverageNV = nullptr; void APIENTRY glTexImage3DMultisampleCoverageNV (GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations) { if (__glTexImage3DMultisampleCoverageNV != 0) (__glTexImage3DMultisampleCoverageNV)(target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations);  }
PFNGLTEXTUREIMAGE2DMULTISAMPLECOVERAGENVPROC __glTextureImage2DMultisampleCoverageNV = nullptr; void APIENTRY glTextureImage2DMultisampleCoverageNV (GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations) { if (__glTextureImage2DMultisampleCoverageNV != 0) (__glTextureImage2DMultisampleCoverageNV)(texture, target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations);  }
PFNGLTEXTUREIMAGE2DMULTISAMPLENVPROC __glTextureImage2DMultisampleNV = nullptr; void APIENTRY glTextureImage2DMultisampleNV (GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations) { if (__glTextureImage2DMultisampleNV != 0) (__glTextureImage2DMultisampleNV)(texture, target, samples, internalFormat, width, height, fixedSampleLocations);  }
PFNGLTEXTUREIMAGE3DMULTISAMPLECOVERAGENVPROC __glTextureImage3DMultisampleCoverageNV = nullptr; void APIENTRY glTextureImage3DMultisampleCoverageNV (GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations) { if (__glTextureImage3DMultisampleCoverageNV != 0) (__glTextureImage3DMultisampleCoverageNV)(texture, target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations);  }
PFNGLTEXTUREIMAGE3DMULTISAMPLENVPROC __glTextureImage3DMultisampleNV = nullptr; void APIENTRY glTextureImage3DMultisampleNV (GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations) { if (__glTextureImage3DMultisampleNV != 0) (__glTextureImage3DMultisampleNV)(texture, target, samples, internalFormat, width, height, depth, fixedSampleLocations);  }
bool __loadGL_NV_texture_multisample(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glTexImage2DMultisampleCoverageNV = (PFNGLTEXIMAGE2DMULTISAMPLECOVERAGENVPROC)proc((const GLubyte*)"glTexImage2DMultisampleCoverageNV")) != nullptr) || r;
    r = ((__glTexImage3DMultisampleCoverageNV = (PFNGLTEXIMAGE3DMULTISAMPLECOVERAGENVPROC)proc((const GLubyte*)"glTexImage3DMultisampleCoverageNV")) != nullptr) || r;
    r = ((__glTextureImage2DMultisampleCoverageNV = (PFNGLTEXTUREIMAGE2DMULTISAMPLECOVERAGENVPROC)proc((const GLubyte*)"glTextureImage2DMultisampleCoverageNV")) != nullptr) || r;
    r = ((__glTextureImage2DMultisampleNV = (PFNGLTEXTUREIMAGE2DMULTISAMPLENVPROC)proc((const GLubyte*)"glTextureImage2DMultisampleNV")) != nullptr) || r;
    r = ((__glTextureImage3DMultisampleCoverageNV = (PFNGLTEXTUREIMAGE3DMULTISAMPLECOVERAGENVPROC)proc((const GLubyte*)"glTextureImage3DMultisampleCoverageNV")) != nullptr) || r;
    r = ((__glTextureImage3DMultisampleNV = (PFNGLTEXTUREIMAGE3DMULTISAMPLENVPROC)proc((const GLubyte*)"glTextureImage3DMultisampleNV")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_NV_texture_multisample = false;
/* GL_NV_texture_rectangle */
bool __loadGL_NV_texture_rectangle(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_NV_texture_rectangle = false;
/* GL_NV_texture_shader */
bool __loadGL_NV_texture_shader(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_NV_texture_shader = false;
/* GL_NV_texture_shader2 */
bool __loadGL_NV_texture_shader2(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_NV_texture_shader2 = false;
/* GL_NV_texture_shader3 */
bool __loadGL_NV_texture_shader3(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_NV_texture_shader3 = false;
/* GL_NV_transform_feedback */
PFNGLACTIVEVARYINGNVPROC __glActiveVaryingNV = nullptr; void APIENTRY glActiveVaryingNV (GLuint program, const GLchar *name) { if (__glActiveVaryingNV != 0) (__glActiveVaryingNV)(program, name);  }
PFNGLBEGINTRANSFORMFEEDBACKNVPROC __glBeginTransformFeedbackNV = nullptr; void APIENTRY glBeginTransformFeedbackNV (GLenum primitiveMode) { if (__glBeginTransformFeedbackNV != 0) (__glBeginTransformFeedbackNV)(primitiveMode);  }
PFNGLBINDBUFFERBASENVPROC __glBindBufferBaseNV = nullptr; void APIENTRY glBindBufferBaseNV (GLenum target, GLuint index, GLuint buffer) { if (__glBindBufferBaseNV != 0) (__glBindBufferBaseNV)(target, index, buffer);  }
PFNGLBINDBUFFEROFFSETNVPROC __glBindBufferOffsetNV = nullptr; void APIENTRY glBindBufferOffsetNV (GLenum target, GLuint index, GLuint buffer, GLintptr offset) { if (__glBindBufferOffsetNV != 0) (__glBindBufferOffsetNV)(target, index, buffer, offset);  }
PFNGLBINDBUFFERRANGENVPROC __glBindBufferRangeNV = nullptr; void APIENTRY glBindBufferRangeNV (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size) { if (__glBindBufferRangeNV != 0) (__glBindBufferRangeNV)(target, index, buffer, offset, size);  }
PFNGLENDTRANSFORMFEEDBACKNVPROC __glEndTransformFeedbackNV = nullptr; void APIENTRY glEndTransformFeedbackNV () { if (__glEndTransformFeedbackNV != 0) (__glEndTransformFeedbackNV)();  }
PFNGLGETACTIVEVARYINGNVPROC __glGetActiveVaryingNV = nullptr; void APIENTRY glGetActiveVaryingNV (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name) { if (__glGetActiveVaryingNV != 0) (__glGetActiveVaryingNV)(program, index, bufSize, length, size, type, name);  }
PFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC __glGetTransformFeedbackVaryingNV = nullptr; void APIENTRY glGetTransformFeedbackVaryingNV (GLuint program, GLuint index, GLint *location) { if (__glGetTransformFeedbackVaryingNV != 0) (__glGetTransformFeedbackVaryingNV)(program, index, location);  }
PFNGLGETVARYINGLOCATIONNVPROC __glGetVaryingLocationNV = nullptr; GLint APIENTRY glGetVaryingLocationNV (GLuint program, const GLchar *name) { if (__glGetVaryingLocationNV != 0) return (__glGetVaryingLocationNV)(program, name); return 0; }
PFNGLTRANSFORMFEEDBACKATTRIBSNVPROC __glTransformFeedbackAttribsNV = nullptr; void APIENTRY glTransformFeedbackAttribsNV (GLsizei count, const GLint *attribs, GLenum bufferMode) { if (__glTransformFeedbackAttribsNV != 0) (__glTransformFeedbackAttribsNV)(count, attribs, bufferMode);  }
PFNGLTRANSFORMFEEDBACKSTREAMATTRIBSNVPROC __glTransformFeedbackStreamAttribsNV = nullptr; void APIENTRY glTransformFeedbackStreamAttribsNV (GLsizei count, const GLint *attribs, GLsizei nbuffers, const GLint *bufstreams, GLenum bufferMode) { if (__glTransformFeedbackStreamAttribsNV != 0) (__glTransformFeedbackStreamAttribsNV)(count, attribs, nbuffers, bufstreams, bufferMode);  }
PFNGLTRANSFORMFEEDBACKVARYINGSNVPROC __glTransformFeedbackVaryingsNV = nullptr; void APIENTRY glTransformFeedbackVaryingsNV (GLuint program, GLsizei count, const GLint *locations, GLenum bufferMode) { if (__glTransformFeedbackVaryingsNV != 0) (__glTransformFeedbackVaryingsNV)(program, count, locations, bufferMode);  }
bool __loadGL_NV_transform_feedback(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glActiveVaryingNV = (PFNGLACTIVEVARYINGNVPROC)proc((const GLubyte*)"glActiveVaryingNV")) != nullptr) || r;
    r = ((__glBeginTransformFeedbackNV = (PFNGLBEGINTRANSFORMFEEDBACKNVPROC)proc((const GLubyte*)"glBeginTransformFeedbackNV")) != nullptr) || r;
    r = ((__glBindBufferBaseNV = (PFNGLBINDBUFFERBASENVPROC)proc((const GLubyte*)"glBindBufferBaseNV")) != nullptr) || r;
    r = ((__glBindBufferOffsetNV = (PFNGLBINDBUFFEROFFSETNVPROC)proc((const GLubyte*)"glBindBufferOffsetNV")) != nullptr) || r;
    r = ((__glBindBufferRangeNV = (PFNGLBINDBUFFERRANGENVPROC)proc((const GLubyte*)"glBindBufferRangeNV")) != nullptr) || r;
    r = ((__glEndTransformFeedbackNV = (PFNGLENDTRANSFORMFEEDBACKNVPROC)proc((const GLubyte*)"glEndTransformFeedbackNV")) != nullptr) || r;
    r = ((__glGetActiveVaryingNV = (PFNGLGETACTIVEVARYINGNVPROC)proc((const GLubyte*)"glGetActiveVaryingNV")) != nullptr) || r;
    r = ((__glGetTransformFeedbackVaryingNV = (PFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC)proc((const GLubyte*)"glGetTransformFeedbackVaryingNV")) != nullptr) || r;
    r = ((__glGetVaryingLocationNV = (PFNGLGETVARYINGLOCATIONNVPROC)proc((const GLubyte*)"glGetVaryingLocationNV")) != nullptr) || r;
    r = ((__glTransformFeedbackAttribsNV = (PFNGLTRANSFORMFEEDBACKATTRIBSNVPROC)proc((const GLubyte*)"glTransformFeedbackAttribsNV")) != nullptr) || r;
    r = ((__glTransformFeedbackStreamAttribsNV = (PFNGLTRANSFORMFEEDBACKSTREAMATTRIBSNVPROC)proc((const GLubyte*)"glTransformFeedbackStreamAttribsNV")) != nullptr) || r;
    r = ((__glTransformFeedbackVaryingsNV = (PFNGLTRANSFORMFEEDBACKVARYINGSNVPROC)proc((const GLubyte*)"glTransformFeedbackVaryingsNV")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_NV_transform_feedback = false;
/* GL_NV_transform_feedback2 */
PFNGLBINDTRANSFORMFEEDBACKNVPROC __glBindTransformFeedbackNV = nullptr; void APIENTRY glBindTransformFeedbackNV (GLenum target, GLuint id) { if (__glBindTransformFeedbackNV != 0) (__glBindTransformFeedbackNV)(target, id);  }
PFNGLDELETETRANSFORMFEEDBACKSNVPROC __glDeleteTransformFeedbacksNV = nullptr; void APIENTRY glDeleteTransformFeedbacksNV (GLsizei n, const GLuint *ids) { if (__glDeleteTransformFeedbacksNV != 0) (__glDeleteTransformFeedbacksNV)(n, ids);  }
PFNGLDRAWTRANSFORMFEEDBACKNVPROC __glDrawTransformFeedbackNV = nullptr; void APIENTRY glDrawTransformFeedbackNV (GLenum mode, GLuint id) { if (__glDrawTransformFeedbackNV != 0) (__glDrawTransformFeedbackNV)(mode, id);  }
PFNGLGENTRANSFORMFEEDBACKSNVPROC __glGenTransformFeedbacksNV = nullptr; void APIENTRY glGenTransformFeedbacksNV (GLsizei n, GLuint *ids) { if (__glGenTransformFeedbacksNV != 0) (__glGenTransformFeedbacksNV)(n, ids);  }
PFNGLISTRANSFORMFEEDBACKNVPROC __glIsTransformFeedbackNV = nullptr; GLboolean APIENTRY glIsTransformFeedbackNV (GLuint id) { if (__glIsTransformFeedbackNV != 0) return (__glIsTransformFeedbackNV)(id); return 0; }
PFNGLPAUSETRANSFORMFEEDBACKNVPROC __glPauseTransformFeedbackNV = nullptr; void APIENTRY glPauseTransformFeedbackNV () { if (__glPauseTransformFeedbackNV != 0) (__glPauseTransformFeedbackNV)();  }
PFNGLRESUMETRANSFORMFEEDBACKNVPROC __glResumeTransformFeedbackNV = nullptr; void APIENTRY glResumeTransformFeedbackNV () { if (__glResumeTransformFeedbackNV != 0) (__glResumeTransformFeedbackNV)();  }
bool __loadGL_NV_transform_feedback2(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glBindTransformFeedbackNV = (PFNGLBINDTRANSFORMFEEDBACKNVPROC)proc((const GLubyte*)"glBindTransformFeedbackNV")) != nullptr) || r;
    r = ((__glDeleteTransformFeedbacksNV = (PFNGLDELETETRANSFORMFEEDBACKSNVPROC)proc((const GLubyte*)"glDeleteTransformFeedbacksNV")) != nullptr) || r;
    r = ((__glDrawTransformFeedbackNV = (PFNGLDRAWTRANSFORMFEEDBACKNVPROC)proc((const GLubyte*)"glDrawTransformFeedbackNV")) != nullptr) || r;
    r = ((__glGenTransformFeedbacksNV = (PFNGLGENTRANSFORMFEEDBACKSNVPROC)proc((const GLubyte*)"glGenTransformFeedbacksNV")) != nullptr) || r;
    r = ((__glIsTransformFeedbackNV = (PFNGLISTRANSFORMFEEDBACKNVPROC)proc((const GLubyte*)"glIsTransformFeedbackNV")) != nullptr) || r;
    r = ((__glPauseTransformFeedbackNV = (PFNGLPAUSETRANSFORMFEEDBACKNVPROC)proc((const GLubyte*)"glPauseTransformFeedbackNV")) != nullptr) || r;
    r = ((__glResumeTransformFeedbackNV = (PFNGLRESUMETRANSFORMFEEDBACKNVPROC)proc((const GLubyte*)"glResumeTransformFeedbackNV")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_NV_transform_feedback2 = false;
/* GL_NV_uniform_buffer_unified_memory */
bool __loadGL_NV_uniform_buffer_unified_memory(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_NV_uniform_buffer_unified_memory = false;
/* GL_NV_vdpau_interop */
PFNGLVDPAUFININVPROC __glVDPAUFiniNV = nullptr; void APIENTRY glVDPAUFiniNV () { if (__glVDPAUFiniNV != 0) (__glVDPAUFiniNV)();  }
PFNGLVDPAUGETSURFACEIVNVPROC __glVDPAUGetSurfaceivNV = nullptr; void APIENTRY glVDPAUGetSurfaceivNV (GLvdpauSurfaceNV surface, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values) { if (__glVDPAUGetSurfaceivNV != 0) (__glVDPAUGetSurfaceivNV)(surface, pname, bufSize, length, values);  }
PFNGLVDPAUINITNVPROC __glVDPAUInitNV = nullptr; void APIENTRY glVDPAUInitNV (const void *vdpDevice, const void *getProcAddress) { if (__glVDPAUInitNV != 0) (__glVDPAUInitNV)(vdpDevice, getProcAddress);  }
PFNGLVDPAUISSURFACENVPROC __glVDPAUIsSurfaceNV = nullptr; GLboolean APIENTRY glVDPAUIsSurfaceNV (GLvdpauSurfaceNV surface) { if (__glVDPAUIsSurfaceNV != 0) return (__glVDPAUIsSurfaceNV)(surface); return 0; }
PFNGLVDPAUMAPSURFACESNVPROC __glVDPAUMapSurfacesNV = nullptr; void APIENTRY glVDPAUMapSurfacesNV (GLsizei numSurfaces, const GLvdpauSurfaceNV *surfaces) { if (__glVDPAUMapSurfacesNV != 0) (__glVDPAUMapSurfacesNV)(numSurfaces, surfaces);  }
PFNGLVDPAUREGISTEROUTPUTSURFACENVPROC __glVDPAURegisterOutputSurfaceNV = nullptr; GLvdpauSurfaceNV APIENTRY glVDPAURegisterOutputSurfaceNV (const void *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames) { if (__glVDPAURegisterOutputSurfaceNV != 0) return (__glVDPAURegisterOutputSurfaceNV)(vdpSurface, target, numTextureNames, textureNames); return 0; }
PFNGLVDPAUREGISTERVIDEOSURFACENVPROC __glVDPAURegisterVideoSurfaceNV = nullptr; GLvdpauSurfaceNV APIENTRY glVDPAURegisterVideoSurfaceNV (const void *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames) { if (__glVDPAURegisterVideoSurfaceNV != 0) return (__glVDPAURegisterVideoSurfaceNV)(vdpSurface, target, numTextureNames, textureNames); return 0; }
PFNGLVDPAUSURFACEACCESSNVPROC __glVDPAUSurfaceAccessNV = nullptr; void APIENTRY glVDPAUSurfaceAccessNV (GLvdpauSurfaceNV surface, GLenum access) { if (__glVDPAUSurfaceAccessNV != 0) (__glVDPAUSurfaceAccessNV)(surface, access);  }
PFNGLVDPAUUNMAPSURFACESNVPROC __glVDPAUUnmapSurfacesNV = nullptr; void APIENTRY glVDPAUUnmapSurfacesNV (GLsizei numSurface, const GLvdpauSurfaceNV *surfaces) { if (__glVDPAUUnmapSurfacesNV != 0) (__glVDPAUUnmapSurfacesNV)(numSurface, surfaces);  }
PFNGLVDPAUUNREGISTERSURFACENVPROC __glVDPAUUnregisterSurfaceNV = nullptr; void APIENTRY glVDPAUUnregisterSurfaceNV (GLvdpauSurfaceNV surface) { if (__glVDPAUUnregisterSurfaceNV != 0) (__glVDPAUUnregisterSurfaceNV)(surface);  }
bool __loadGL_NV_vdpau_interop(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glVDPAUFiniNV = (PFNGLVDPAUFININVPROC)proc((const GLubyte*)"glVDPAUFiniNV")) != nullptr) || r;
    r = ((__glVDPAUGetSurfaceivNV = (PFNGLVDPAUGETSURFACEIVNVPROC)proc((const GLubyte*)"glVDPAUGetSurfaceivNV")) != nullptr) || r;
    r = ((__glVDPAUInitNV = (PFNGLVDPAUINITNVPROC)proc((const GLubyte*)"glVDPAUInitNV")) != nullptr) || r;
    r = ((__glVDPAUIsSurfaceNV = (PFNGLVDPAUISSURFACENVPROC)proc((const GLubyte*)"glVDPAUIsSurfaceNV")) != nullptr) || r;
    r = ((__glVDPAUMapSurfacesNV = (PFNGLVDPAUMAPSURFACESNVPROC)proc((const GLubyte*)"glVDPAUMapSurfacesNV")) != nullptr) || r;
    r = ((__glVDPAURegisterOutputSurfaceNV = (PFNGLVDPAUREGISTEROUTPUTSURFACENVPROC)proc((const GLubyte*)"glVDPAURegisterOutputSurfaceNV")) != nullptr) || r;
    r = ((__glVDPAURegisterVideoSurfaceNV = (PFNGLVDPAUREGISTERVIDEOSURFACENVPROC)proc((const GLubyte*)"glVDPAURegisterVideoSurfaceNV")) != nullptr) || r;
    r = ((__glVDPAUSurfaceAccessNV = (PFNGLVDPAUSURFACEACCESSNVPROC)proc((const GLubyte*)"glVDPAUSurfaceAccessNV")) != nullptr) || r;
    r = ((__glVDPAUUnmapSurfacesNV = (PFNGLVDPAUUNMAPSURFACESNVPROC)proc((const GLubyte*)"glVDPAUUnmapSurfacesNV")) != nullptr) || r;
    r = ((__glVDPAUUnregisterSurfaceNV = (PFNGLVDPAUUNREGISTERSURFACENVPROC)proc((const GLubyte*)"glVDPAUUnregisterSurfaceNV")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_NV_vdpau_interop = false;
/* GL_NV_vertex_array_range */
PFNGLFLUSHVERTEXARRAYRANGENVPROC __glFlushVertexArrayRangeNV = nullptr; void APIENTRY glFlushVertexArrayRangeNV () { if (__glFlushVertexArrayRangeNV != 0) (__glFlushVertexArrayRangeNV)();  }
PFNGLVERTEXARRAYRANGENVPROC __glVertexArrayRangeNV = nullptr; void APIENTRY glVertexArrayRangeNV (GLsizei length, const void *pointer) { if (__glVertexArrayRangeNV != 0) (__glVertexArrayRangeNV)(length, pointer);  }
bool __loadGL_NV_vertex_array_range(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glFlushVertexArrayRangeNV = (PFNGLFLUSHVERTEXARRAYRANGENVPROC)proc((const GLubyte*)"glFlushVertexArrayRangeNV")) != nullptr) || r;
    r = ((__glVertexArrayRangeNV = (PFNGLVERTEXARRAYRANGENVPROC)proc((const GLubyte*)"glVertexArrayRangeNV")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_NV_vertex_array_range = false;
/* GL_NV_vertex_array_range2 */
bool __loadGL_NV_vertex_array_range2(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_NV_vertex_array_range2 = false;
/* GL_NV_vertex_attrib_integer_64bit */
PFNGLGETVERTEXATTRIBLI64VNVPROC __glGetVertexAttribLi64vNV = nullptr; void APIENTRY glGetVertexAttribLi64vNV (GLuint index, GLenum pname, GLint64EXT *params) { if (__glGetVertexAttribLi64vNV != 0) (__glGetVertexAttribLi64vNV)(index, pname, params);  }
PFNGLGETVERTEXATTRIBLUI64VNVPROC __glGetVertexAttribLui64vNV = nullptr; void APIENTRY glGetVertexAttribLui64vNV (GLuint index, GLenum pname, GLuint64EXT *params) { if (__glGetVertexAttribLui64vNV != 0) (__glGetVertexAttribLui64vNV)(index, pname, params);  }
PFNGLVERTEXATTRIBL1I64NVPROC __glVertexAttribL1i64NV = nullptr; void APIENTRY glVertexAttribL1i64NV (GLuint index, GLint64EXT x) { if (__glVertexAttribL1i64NV != 0) (__glVertexAttribL1i64NV)(index, x);  }
PFNGLVERTEXATTRIBL1I64VNVPROC __glVertexAttribL1i64vNV = nullptr; void APIENTRY glVertexAttribL1i64vNV (GLuint index, const GLint64EXT *v) { if (__glVertexAttribL1i64vNV != 0) (__glVertexAttribL1i64vNV)(index, v);  }
PFNGLVERTEXATTRIBL1UI64NVPROC __glVertexAttribL1ui64NV = nullptr; void APIENTRY glVertexAttribL1ui64NV (GLuint index, GLuint64EXT x) { if (__glVertexAttribL1ui64NV != 0) (__glVertexAttribL1ui64NV)(index, x);  }
PFNGLVERTEXATTRIBL1UI64VNVPROC __glVertexAttribL1ui64vNV = nullptr; void APIENTRY glVertexAttribL1ui64vNV (GLuint index, const GLuint64EXT *v) { if (__glVertexAttribL1ui64vNV != 0) (__glVertexAttribL1ui64vNV)(index, v);  }
PFNGLVERTEXATTRIBL2I64NVPROC __glVertexAttribL2i64NV = nullptr; void APIENTRY glVertexAttribL2i64NV (GLuint index, GLint64EXT x, GLint64EXT y) { if (__glVertexAttribL2i64NV != 0) (__glVertexAttribL2i64NV)(index, x, y);  }
PFNGLVERTEXATTRIBL2I64VNVPROC __glVertexAttribL2i64vNV = nullptr; void APIENTRY glVertexAttribL2i64vNV (GLuint index, const GLint64EXT *v) { if (__glVertexAttribL2i64vNV != 0) (__glVertexAttribL2i64vNV)(index, v);  }
PFNGLVERTEXATTRIBL2UI64NVPROC __glVertexAttribL2ui64NV = nullptr; void APIENTRY glVertexAttribL2ui64NV (GLuint index, GLuint64EXT x, GLuint64EXT y) { if (__glVertexAttribL2ui64NV != 0) (__glVertexAttribL2ui64NV)(index, x, y);  }
PFNGLVERTEXATTRIBL2UI64VNVPROC __glVertexAttribL2ui64vNV = nullptr; void APIENTRY glVertexAttribL2ui64vNV (GLuint index, const GLuint64EXT *v) { if (__glVertexAttribL2ui64vNV != 0) (__glVertexAttribL2ui64vNV)(index, v);  }
PFNGLVERTEXATTRIBL3I64NVPROC __glVertexAttribL3i64NV = nullptr; void APIENTRY glVertexAttribL3i64NV (GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z) { if (__glVertexAttribL3i64NV != 0) (__glVertexAttribL3i64NV)(index, x, y, z);  }
PFNGLVERTEXATTRIBL3I64VNVPROC __glVertexAttribL3i64vNV = nullptr; void APIENTRY glVertexAttribL3i64vNV (GLuint index, const GLint64EXT *v) { if (__glVertexAttribL3i64vNV != 0) (__glVertexAttribL3i64vNV)(index, v);  }
PFNGLVERTEXATTRIBL3UI64NVPROC __glVertexAttribL3ui64NV = nullptr; void APIENTRY glVertexAttribL3ui64NV (GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z) { if (__glVertexAttribL3ui64NV != 0) (__glVertexAttribL3ui64NV)(index, x, y, z);  }
PFNGLVERTEXATTRIBL3UI64VNVPROC __glVertexAttribL3ui64vNV = nullptr; void APIENTRY glVertexAttribL3ui64vNV (GLuint index, const GLuint64EXT *v) { if (__glVertexAttribL3ui64vNV != 0) (__glVertexAttribL3ui64vNV)(index, v);  }
PFNGLVERTEXATTRIBL4I64NVPROC __glVertexAttribL4i64NV = nullptr; void APIENTRY glVertexAttribL4i64NV (GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w) { if (__glVertexAttribL4i64NV != 0) (__glVertexAttribL4i64NV)(index, x, y, z, w);  }
PFNGLVERTEXATTRIBL4I64VNVPROC __glVertexAttribL4i64vNV = nullptr; void APIENTRY glVertexAttribL4i64vNV (GLuint index, const GLint64EXT *v) { if (__glVertexAttribL4i64vNV != 0) (__glVertexAttribL4i64vNV)(index, v);  }
PFNGLVERTEXATTRIBL4UI64NVPROC __glVertexAttribL4ui64NV = nullptr; void APIENTRY glVertexAttribL4ui64NV (GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w) { if (__glVertexAttribL4ui64NV != 0) (__glVertexAttribL4ui64NV)(index, x, y, z, w);  }
PFNGLVERTEXATTRIBL4UI64VNVPROC __glVertexAttribL4ui64vNV = nullptr; void APIENTRY glVertexAttribL4ui64vNV (GLuint index, const GLuint64EXT *v) { if (__glVertexAttribL4ui64vNV != 0) (__glVertexAttribL4ui64vNV)(index, v);  }
PFNGLVERTEXATTRIBLFORMATNVPROC __glVertexAttribLFormatNV = nullptr; void APIENTRY glVertexAttribLFormatNV (GLuint index, GLint size, GLenum type, GLsizei stride) { if (__glVertexAttribLFormatNV != 0) (__glVertexAttribLFormatNV)(index, size, type, stride);  }
bool __loadGL_NV_vertex_attrib_integer_64bit(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glGetVertexAttribLi64vNV = (PFNGLGETVERTEXATTRIBLI64VNVPROC)proc((const GLubyte*)"glGetVertexAttribLi64vNV")) != nullptr) || r;
    r = ((__glGetVertexAttribLui64vNV = (PFNGLGETVERTEXATTRIBLUI64VNVPROC)proc((const GLubyte*)"glGetVertexAttribLui64vNV")) != nullptr) || r;
    r = ((__glVertexAttribL1i64NV = (PFNGLVERTEXATTRIBL1I64NVPROC)proc((const GLubyte*)"glVertexAttribL1i64NV")) != nullptr) || r;
    r = ((__glVertexAttribL1i64vNV = (PFNGLVERTEXATTRIBL1I64VNVPROC)proc((const GLubyte*)"glVertexAttribL1i64vNV")) != nullptr) || r;
    r = ((__glVertexAttribL1ui64NV = (PFNGLVERTEXATTRIBL1UI64NVPROC)proc((const GLubyte*)"glVertexAttribL1ui64NV")) != nullptr) || r;
    r = ((__glVertexAttribL1ui64vNV = (PFNGLVERTEXATTRIBL1UI64VNVPROC)proc((const GLubyte*)"glVertexAttribL1ui64vNV")) != nullptr) || r;
    r = ((__glVertexAttribL2i64NV = (PFNGLVERTEXATTRIBL2I64NVPROC)proc((const GLubyte*)"glVertexAttribL2i64NV")) != nullptr) || r;
    r = ((__glVertexAttribL2i64vNV = (PFNGLVERTEXATTRIBL2I64VNVPROC)proc((const GLubyte*)"glVertexAttribL2i64vNV")) != nullptr) || r;
    r = ((__glVertexAttribL2ui64NV = (PFNGLVERTEXATTRIBL2UI64NVPROC)proc((const GLubyte*)"glVertexAttribL2ui64NV")) != nullptr) || r;
    r = ((__glVertexAttribL2ui64vNV = (PFNGLVERTEXATTRIBL2UI64VNVPROC)proc((const GLubyte*)"glVertexAttribL2ui64vNV")) != nullptr) || r;
    r = ((__glVertexAttribL3i64NV = (PFNGLVERTEXATTRIBL3I64NVPROC)proc((const GLubyte*)"glVertexAttribL3i64NV")) != nullptr) || r;
    r = ((__glVertexAttribL3i64vNV = (PFNGLVERTEXATTRIBL3I64VNVPROC)proc((const GLubyte*)"glVertexAttribL3i64vNV")) != nullptr) || r;
    r = ((__glVertexAttribL3ui64NV = (PFNGLVERTEXATTRIBL3UI64NVPROC)proc((const GLubyte*)"glVertexAttribL3ui64NV")) != nullptr) || r;
    r = ((__glVertexAttribL3ui64vNV = (PFNGLVERTEXATTRIBL3UI64VNVPROC)proc((const GLubyte*)"glVertexAttribL3ui64vNV")) != nullptr) || r;
    r = ((__glVertexAttribL4i64NV = (PFNGLVERTEXATTRIBL4I64NVPROC)proc((const GLubyte*)"glVertexAttribL4i64NV")) != nullptr) || r;
    r = ((__glVertexAttribL4i64vNV = (PFNGLVERTEXATTRIBL4I64VNVPROC)proc((const GLubyte*)"glVertexAttribL4i64vNV")) != nullptr) || r;
    r = ((__glVertexAttribL4ui64NV = (PFNGLVERTEXATTRIBL4UI64NVPROC)proc((const GLubyte*)"glVertexAttribL4ui64NV")) != nullptr) || r;
    r = ((__glVertexAttribL4ui64vNV = (PFNGLVERTEXATTRIBL4UI64VNVPROC)proc((const GLubyte*)"glVertexAttribL4ui64vNV")) != nullptr) || r;
    r = ((__glVertexAttribLFormatNV = (PFNGLVERTEXATTRIBLFORMATNVPROC)proc((const GLubyte*)"glVertexAttribLFormatNV")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_NV_vertex_attrib_integer_64bit = false;
/* GL_NV_vertex_buffer_unified_memory */
PFNGLBUFFERADDRESSRANGENVPROC __glBufferAddressRangeNV = nullptr; void APIENTRY glBufferAddressRangeNV (GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length) { if (__glBufferAddressRangeNV != 0) (__glBufferAddressRangeNV)(pname, index, address, length);  }
PFNGLCOLORFORMATNVPROC __glColorFormatNV = nullptr; void APIENTRY glColorFormatNV (GLint size, GLenum type, GLsizei stride) { if (__glColorFormatNV != 0) (__glColorFormatNV)(size, type, stride);  }
PFNGLEDGEFLAGFORMATNVPROC __glEdgeFlagFormatNV = nullptr; void APIENTRY glEdgeFlagFormatNV (GLsizei stride) { if (__glEdgeFlagFormatNV != 0) (__glEdgeFlagFormatNV)(stride);  }
PFNGLFOGCOORDFORMATNVPROC __glFogCoordFormatNV = nullptr; void APIENTRY glFogCoordFormatNV (GLenum type, GLsizei stride) { if (__glFogCoordFormatNV != 0) (__glFogCoordFormatNV)(type, stride);  }
PFNGLGETINTEGERUI64I_VNVPROC __glGetIntegerui64i_vNV = nullptr; void APIENTRY glGetIntegerui64i_vNV (GLenum value, GLuint index, GLuint64EXT *result) { if (__glGetIntegerui64i_vNV != 0) (__glGetIntegerui64i_vNV)(value, index, result);  }
PFNGLINDEXFORMATNVPROC __glIndexFormatNV = nullptr; void APIENTRY glIndexFormatNV (GLenum type, GLsizei stride) { if (__glIndexFormatNV != 0) (__glIndexFormatNV)(type, stride);  }
PFNGLNORMALFORMATNVPROC __glNormalFormatNV = nullptr; void APIENTRY glNormalFormatNV (GLenum type, GLsizei stride) { if (__glNormalFormatNV != 0) (__glNormalFormatNV)(type, stride);  }
PFNGLSECONDARYCOLORFORMATNVPROC __glSecondaryColorFormatNV = nullptr; void APIENTRY glSecondaryColorFormatNV (GLint size, GLenum type, GLsizei stride) { if (__glSecondaryColorFormatNV != 0) (__glSecondaryColorFormatNV)(size, type, stride);  }
PFNGLTEXCOORDFORMATNVPROC __glTexCoordFormatNV = nullptr; void APIENTRY glTexCoordFormatNV (GLint size, GLenum type, GLsizei stride) { if (__glTexCoordFormatNV != 0) (__glTexCoordFormatNV)(size, type, stride);  }
PFNGLVERTEXATTRIBFORMATNVPROC __glVertexAttribFormatNV = nullptr; void APIENTRY glVertexAttribFormatNV (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride) { if (__glVertexAttribFormatNV != 0) (__glVertexAttribFormatNV)(index, size, type, normalized, stride);  }
PFNGLVERTEXATTRIBIFORMATNVPROC __glVertexAttribIFormatNV = nullptr; void APIENTRY glVertexAttribIFormatNV (GLuint index, GLint size, GLenum type, GLsizei stride) { if (__glVertexAttribIFormatNV != 0) (__glVertexAttribIFormatNV)(index, size, type, stride);  }
PFNGLVERTEXFORMATNVPROC __glVertexFormatNV = nullptr; void APIENTRY glVertexFormatNV (GLint size, GLenum type, GLsizei stride) { if (__glVertexFormatNV != 0) (__glVertexFormatNV)(size, type, stride);  }
bool __loadGL_NV_vertex_buffer_unified_memory(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glBufferAddressRangeNV = (PFNGLBUFFERADDRESSRANGENVPROC)proc((const GLubyte*)"glBufferAddressRangeNV")) != nullptr) || r;
    r = ((__glColorFormatNV = (PFNGLCOLORFORMATNVPROC)proc((const GLubyte*)"glColorFormatNV")) != nullptr) || r;
    r = ((__glEdgeFlagFormatNV = (PFNGLEDGEFLAGFORMATNVPROC)proc((const GLubyte*)"glEdgeFlagFormatNV")) != nullptr) || r;
    r = ((__glFogCoordFormatNV = (PFNGLFOGCOORDFORMATNVPROC)proc((const GLubyte*)"glFogCoordFormatNV")) != nullptr) || r;
    r = ((__glGetIntegerui64i_vNV = (PFNGLGETINTEGERUI64I_VNVPROC)proc((const GLubyte*)"glGetIntegerui64i_vNV")) != nullptr) || r;
    r = ((__glIndexFormatNV = (PFNGLINDEXFORMATNVPROC)proc((const GLubyte*)"glIndexFormatNV")) != nullptr) || r;
    r = ((__glNormalFormatNV = (PFNGLNORMALFORMATNVPROC)proc((const GLubyte*)"glNormalFormatNV")) != nullptr) || r;
    r = ((__glSecondaryColorFormatNV = (PFNGLSECONDARYCOLORFORMATNVPROC)proc((const GLubyte*)"glSecondaryColorFormatNV")) != nullptr) || r;
    r = ((__glTexCoordFormatNV = (PFNGLTEXCOORDFORMATNVPROC)proc((const GLubyte*)"glTexCoordFormatNV")) != nullptr) || r;
    r = ((__glVertexAttribFormatNV = (PFNGLVERTEXATTRIBFORMATNVPROC)proc((const GLubyte*)"glVertexAttribFormatNV")) != nullptr) || r;
    r = ((__glVertexAttribIFormatNV = (PFNGLVERTEXATTRIBIFORMATNVPROC)proc((const GLubyte*)"glVertexAttribIFormatNV")) != nullptr) || r;
    r = ((__glVertexFormatNV = (PFNGLVERTEXFORMATNVPROC)proc((const GLubyte*)"glVertexFormatNV")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_NV_vertex_buffer_unified_memory = false;
/* GL_NV_vertex_program */
PFNGLAREPROGRAMSRESIDENTNVPROC __glAreProgramsResidentNV = nullptr; GLboolean APIENTRY glAreProgramsResidentNV (GLsizei n, const GLuint *programs, GLboolean *residences) { if (__glAreProgramsResidentNV != 0) return (__glAreProgramsResidentNV)(n, programs, residences); return 0; }
PFNGLBINDPROGRAMNVPROC __glBindProgramNV = nullptr; void APIENTRY glBindProgramNV (GLenum target, GLuint id) { if (__glBindProgramNV != 0) (__glBindProgramNV)(target, id);  }
PFNGLDELETEPROGRAMSNVPROC __glDeleteProgramsNV = nullptr; void APIENTRY glDeleteProgramsNV (GLsizei n, const GLuint *programs) { if (__glDeleteProgramsNV != 0) (__glDeleteProgramsNV)(n, programs);  }
PFNGLEXECUTEPROGRAMNVPROC __glExecuteProgramNV = nullptr; void APIENTRY glExecuteProgramNV (GLenum target, GLuint id, const GLfloat *params) { if (__glExecuteProgramNV != 0) (__glExecuteProgramNV)(target, id, params);  }
PFNGLGENPROGRAMSNVPROC __glGenProgramsNV = nullptr; void APIENTRY glGenProgramsNV (GLsizei n, GLuint *programs) { if (__glGenProgramsNV != 0) (__glGenProgramsNV)(n, programs);  }
PFNGLGETPROGRAMPARAMETERDVNVPROC __glGetProgramParameterdvNV = nullptr; void APIENTRY glGetProgramParameterdvNV (GLenum target, GLuint index, GLenum pname, GLdouble *params) { if (__glGetProgramParameterdvNV != 0) (__glGetProgramParameterdvNV)(target, index, pname, params);  }
PFNGLGETPROGRAMPARAMETERFVNVPROC __glGetProgramParameterfvNV = nullptr; void APIENTRY glGetProgramParameterfvNV (GLenum target, GLuint index, GLenum pname, GLfloat *params) { if (__glGetProgramParameterfvNV != 0) (__glGetProgramParameterfvNV)(target, index, pname, params);  }
PFNGLGETPROGRAMSTRINGNVPROC __glGetProgramStringNV = nullptr; void APIENTRY glGetProgramStringNV (GLuint id, GLenum pname, GLubyte *program) { if (__glGetProgramStringNV != 0) (__glGetProgramStringNV)(id, pname, program);  }
PFNGLGETPROGRAMIVNVPROC __glGetProgramivNV = nullptr; void APIENTRY glGetProgramivNV (GLuint id, GLenum pname, GLint *params) { if (__glGetProgramivNV != 0) (__glGetProgramivNV)(id, pname, params);  }
PFNGLGETTRACKMATRIXIVNVPROC __glGetTrackMatrixivNV = nullptr; void APIENTRY glGetTrackMatrixivNV (GLenum target, GLuint address, GLenum pname, GLint *params) { if (__glGetTrackMatrixivNV != 0) (__glGetTrackMatrixivNV)(target, address, pname, params);  }
PFNGLGETVERTEXATTRIBPOINTERVNVPROC __glGetVertexAttribPointervNV = nullptr; void APIENTRY glGetVertexAttribPointervNV (GLuint index, GLenum pname, void **pointer) { if (__glGetVertexAttribPointervNV != 0) (__glGetVertexAttribPointervNV)(index, pname, pointer);  }
PFNGLGETVERTEXATTRIBDVNVPROC __glGetVertexAttribdvNV = nullptr; void APIENTRY glGetVertexAttribdvNV (GLuint index, GLenum pname, GLdouble *params) { if (__glGetVertexAttribdvNV != 0) (__glGetVertexAttribdvNV)(index, pname, params);  }
PFNGLGETVERTEXATTRIBFVNVPROC __glGetVertexAttribfvNV = nullptr; void APIENTRY glGetVertexAttribfvNV (GLuint index, GLenum pname, GLfloat *params) { if (__glGetVertexAttribfvNV != 0) (__glGetVertexAttribfvNV)(index, pname, params);  }
PFNGLGETVERTEXATTRIBIVNVPROC __glGetVertexAttribivNV = nullptr; void APIENTRY glGetVertexAttribivNV (GLuint index, GLenum pname, GLint *params) { if (__glGetVertexAttribivNV != 0) (__glGetVertexAttribivNV)(index, pname, params);  }
PFNGLISPROGRAMNVPROC __glIsProgramNV = nullptr; GLboolean APIENTRY glIsProgramNV (GLuint id) { if (__glIsProgramNV != 0) return (__glIsProgramNV)(id); return 0; }
PFNGLLOADPROGRAMNVPROC __glLoadProgramNV = nullptr; void APIENTRY glLoadProgramNV (GLenum target, GLuint id, GLsizei len, const GLubyte *program) { if (__glLoadProgramNV != 0) (__glLoadProgramNV)(target, id, len, program);  }
PFNGLPROGRAMPARAMETER4DNVPROC __glProgramParameter4dNV = nullptr; void APIENTRY glProgramParameter4dNV (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { if (__glProgramParameter4dNV != 0) (__glProgramParameter4dNV)(target, index, x, y, z, w);  }
PFNGLPROGRAMPARAMETER4DVNVPROC __glProgramParameter4dvNV = nullptr; void APIENTRY glProgramParameter4dvNV (GLenum target, GLuint index, const GLdouble *v) { if (__glProgramParameter4dvNV != 0) (__glProgramParameter4dvNV)(target, index, v);  }
PFNGLPROGRAMPARAMETER4FNVPROC __glProgramParameter4fNV = nullptr; void APIENTRY glProgramParameter4fNV (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) { if (__glProgramParameter4fNV != 0) (__glProgramParameter4fNV)(target, index, x, y, z, w);  }
PFNGLPROGRAMPARAMETER4FVNVPROC __glProgramParameter4fvNV = nullptr; void APIENTRY glProgramParameter4fvNV (GLenum target, GLuint index, const GLfloat *v) { if (__glProgramParameter4fvNV != 0) (__glProgramParameter4fvNV)(target, index, v);  }
PFNGLPROGRAMPARAMETERS4DVNVPROC __glProgramParameters4dvNV = nullptr; void APIENTRY glProgramParameters4dvNV (GLenum target, GLuint index, GLsizei count, const GLdouble *v) { if (__glProgramParameters4dvNV != 0) (__glProgramParameters4dvNV)(target, index, count, v);  }
PFNGLPROGRAMPARAMETERS4FVNVPROC __glProgramParameters4fvNV = nullptr; void APIENTRY glProgramParameters4fvNV (GLenum target, GLuint index, GLsizei count, const GLfloat *v) { if (__glProgramParameters4fvNV != 0) (__glProgramParameters4fvNV)(target, index, count, v);  }
PFNGLREQUESTRESIDENTPROGRAMSNVPROC __glRequestResidentProgramsNV = nullptr; void APIENTRY glRequestResidentProgramsNV (GLsizei n, const GLuint *programs) { if (__glRequestResidentProgramsNV != 0) (__glRequestResidentProgramsNV)(n, programs);  }
PFNGLTRACKMATRIXNVPROC __glTrackMatrixNV = nullptr; void APIENTRY glTrackMatrixNV (GLenum target, GLuint address, GLenum matrix, GLenum transform) { if (__glTrackMatrixNV != 0) (__glTrackMatrixNV)(target, address, matrix, transform);  }
PFNGLVERTEXATTRIB1DNVPROC __glVertexAttrib1dNV = nullptr; void APIENTRY glVertexAttrib1dNV (GLuint index, GLdouble x) { if (__glVertexAttrib1dNV != 0) (__glVertexAttrib1dNV)(index, x);  }
PFNGLVERTEXATTRIB1DVNVPROC __glVertexAttrib1dvNV = nullptr; void APIENTRY glVertexAttrib1dvNV (GLuint index, const GLdouble *v) { if (__glVertexAttrib1dvNV != 0) (__glVertexAttrib1dvNV)(index, v);  }
PFNGLVERTEXATTRIB1FNVPROC __glVertexAttrib1fNV = nullptr; void APIENTRY glVertexAttrib1fNV (GLuint index, GLfloat x) { if (__glVertexAttrib1fNV != 0) (__glVertexAttrib1fNV)(index, x);  }
PFNGLVERTEXATTRIB1FVNVPROC __glVertexAttrib1fvNV = nullptr; void APIENTRY glVertexAttrib1fvNV (GLuint index, const GLfloat *v) { if (__glVertexAttrib1fvNV != 0) (__glVertexAttrib1fvNV)(index, v);  }
PFNGLVERTEXATTRIB1SNVPROC __glVertexAttrib1sNV = nullptr; void APIENTRY glVertexAttrib1sNV (GLuint index, GLshort x) { if (__glVertexAttrib1sNV != 0) (__glVertexAttrib1sNV)(index, x);  }
PFNGLVERTEXATTRIB1SVNVPROC __glVertexAttrib1svNV = nullptr; void APIENTRY glVertexAttrib1svNV (GLuint index, const GLshort *v) { if (__glVertexAttrib1svNV != 0) (__glVertexAttrib1svNV)(index, v);  }
PFNGLVERTEXATTRIB2DNVPROC __glVertexAttrib2dNV = nullptr; void APIENTRY glVertexAttrib2dNV (GLuint index, GLdouble x, GLdouble y) { if (__glVertexAttrib2dNV != 0) (__glVertexAttrib2dNV)(index, x, y);  }
PFNGLVERTEXATTRIB2DVNVPROC __glVertexAttrib2dvNV = nullptr; void APIENTRY glVertexAttrib2dvNV (GLuint index, const GLdouble *v) { if (__glVertexAttrib2dvNV != 0) (__glVertexAttrib2dvNV)(index, v);  }
PFNGLVERTEXATTRIB2FNVPROC __glVertexAttrib2fNV = nullptr; void APIENTRY glVertexAttrib2fNV (GLuint index, GLfloat x, GLfloat y) { if (__glVertexAttrib2fNV != 0) (__glVertexAttrib2fNV)(index, x, y);  }
PFNGLVERTEXATTRIB2FVNVPROC __glVertexAttrib2fvNV = nullptr; void APIENTRY glVertexAttrib2fvNV (GLuint index, const GLfloat *v) { if (__glVertexAttrib2fvNV != 0) (__glVertexAttrib2fvNV)(index, v);  }
PFNGLVERTEXATTRIB2SNVPROC __glVertexAttrib2sNV = nullptr; void APIENTRY glVertexAttrib2sNV (GLuint index, GLshort x, GLshort y) { if (__glVertexAttrib2sNV != 0) (__glVertexAttrib2sNV)(index, x, y);  }
PFNGLVERTEXATTRIB2SVNVPROC __glVertexAttrib2svNV = nullptr; void APIENTRY glVertexAttrib2svNV (GLuint index, const GLshort *v) { if (__glVertexAttrib2svNV != 0) (__glVertexAttrib2svNV)(index, v);  }
PFNGLVERTEXATTRIB3DNVPROC __glVertexAttrib3dNV = nullptr; void APIENTRY glVertexAttrib3dNV (GLuint index, GLdouble x, GLdouble y, GLdouble z) { if (__glVertexAttrib3dNV != 0) (__glVertexAttrib3dNV)(index, x, y, z);  }
PFNGLVERTEXATTRIB3DVNVPROC __glVertexAttrib3dvNV = nullptr; void APIENTRY glVertexAttrib3dvNV (GLuint index, const GLdouble *v) { if (__glVertexAttrib3dvNV != 0) (__glVertexAttrib3dvNV)(index, v);  }
PFNGLVERTEXATTRIB3FNVPROC __glVertexAttrib3fNV = nullptr; void APIENTRY glVertexAttrib3fNV (GLuint index, GLfloat x, GLfloat y, GLfloat z) { if (__glVertexAttrib3fNV != 0) (__glVertexAttrib3fNV)(index, x, y, z);  }
PFNGLVERTEXATTRIB3FVNVPROC __glVertexAttrib3fvNV = nullptr; void APIENTRY glVertexAttrib3fvNV (GLuint index, const GLfloat *v) { if (__glVertexAttrib3fvNV != 0) (__glVertexAttrib3fvNV)(index, v);  }
PFNGLVERTEXATTRIB3SNVPROC __glVertexAttrib3sNV = nullptr; void APIENTRY glVertexAttrib3sNV (GLuint index, GLshort x, GLshort y, GLshort z) { if (__glVertexAttrib3sNV != 0) (__glVertexAttrib3sNV)(index, x, y, z);  }
PFNGLVERTEXATTRIB3SVNVPROC __glVertexAttrib3svNV = nullptr; void APIENTRY glVertexAttrib3svNV (GLuint index, const GLshort *v) { if (__glVertexAttrib3svNV != 0) (__glVertexAttrib3svNV)(index, v);  }
PFNGLVERTEXATTRIB4DNVPROC __glVertexAttrib4dNV = nullptr; void APIENTRY glVertexAttrib4dNV (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { if (__glVertexAttrib4dNV != 0) (__glVertexAttrib4dNV)(index, x, y, z, w);  }
PFNGLVERTEXATTRIB4DVNVPROC __glVertexAttrib4dvNV = nullptr; void APIENTRY glVertexAttrib4dvNV (GLuint index, const GLdouble *v) { if (__glVertexAttrib4dvNV != 0) (__glVertexAttrib4dvNV)(index, v);  }
PFNGLVERTEXATTRIB4FNVPROC __glVertexAttrib4fNV = nullptr; void APIENTRY glVertexAttrib4fNV (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) { if (__glVertexAttrib4fNV != 0) (__glVertexAttrib4fNV)(index, x, y, z, w);  }
PFNGLVERTEXATTRIB4FVNVPROC __glVertexAttrib4fvNV = nullptr; void APIENTRY glVertexAttrib4fvNV (GLuint index, const GLfloat *v) { if (__glVertexAttrib4fvNV != 0) (__glVertexAttrib4fvNV)(index, v);  }
PFNGLVERTEXATTRIB4SNVPROC __glVertexAttrib4sNV = nullptr; void APIENTRY glVertexAttrib4sNV (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w) { if (__glVertexAttrib4sNV != 0) (__glVertexAttrib4sNV)(index, x, y, z, w);  }
PFNGLVERTEXATTRIB4SVNVPROC __glVertexAttrib4svNV = nullptr; void APIENTRY glVertexAttrib4svNV (GLuint index, const GLshort *v) { if (__glVertexAttrib4svNV != 0) (__glVertexAttrib4svNV)(index, v);  }
PFNGLVERTEXATTRIB4UBNVPROC __glVertexAttrib4ubNV = nullptr; void APIENTRY glVertexAttrib4ubNV (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w) { if (__glVertexAttrib4ubNV != 0) (__glVertexAttrib4ubNV)(index, x, y, z, w);  }
PFNGLVERTEXATTRIB4UBVNVPROC __glVertexAttrib4ubvNV = nullptr; void APIENTRY glVertexAttrib4ubvNV (GLuint index, const GLubyte *v) { if (__glVertexAttrib4ubvNV != 0) (__glVertexAttrib4ubvNV)(index, v);  }
PFNGLVERTEXATTRIBPOINTERNVPROC __glVertexAttribPointerNV = nullptr; void APIENTRY glVertexAttribPointerNV (GLuint index, GLint fsize, GLenum type, GLsizei stride, const void *pointer) { if (__glVertexAttribPointerNV != 0) (__glVertexAttribPointerNV)(index, fsize, type, stride, pointer);  }
PFNGLVERTEXATTRIBS1DVNVPROC __glVertexAttribs1dvNV = nullptr; void APIENTRY glVertexAttribs1dvNV (GLuint index, GLsizei count, const GLdouble *v) { if (__glVertexAttribs1dvNV != 0) (__glVertexAttribs1dvNV)(index, count, v);  }
PFNGLVERTEXATTRIBS1FVNVPROC __glVertexAttribs1fvNV = nullptr; void APIENTRY glVertexAttribs1fvNV (GLuint index, GLsizei count, const GLfloat *v) { if (__glVertexAttribs1fvNV != 0) (__glVertexAttribs1fvNV)(index, count, v);  }
PFNGLVERTEXATTRIBS1SVNVPROC __glVertexAttribs1svNV = nullptr; void APIENTRY glVertexAttribs1svNV (GLuint index, GLsizei count, const GLshort *v) { if (__glVertexAttribs1svNV != 0) (__glVertexAttribs1svNV)(index, count, v);  }
PFNGLVERTEXATTRIBS2DVNVPROC __glVertexAttribs2dvNV = nullptr; void APIENTRY glVertexAttribs2dvNV (GLuint index, GLsizei count, const GLdouble *v) { if (__glVertexAttribs2dvNV != 0) (__glVertexAttribs2dvNV)(index, count, v);  }
PFNGLVERTEXATTRIBS2FVNVPROC __glVertexAttribs2fvNV = nullptr; void APIENTRY glVertexAttribs2fvNV (GLuint index, GLsizei count, const GLfloat *v) { if (__glVertexAttribs2fvNV != 0) (__glVertexAttribs2fvNV)(index, count, v);  }
PFNGLVERTEXATTRIBS2SVNVPROC __glVertexAttribs2svNV = nullptr; void APIENTRY glVertexAttribs2svNV (GLuint index, GLsizei count, const GLshort *v) { if (__glVertexAttribs2svNV != 0) (__glVertexAttribs2svNV)(index, count, v);  }
PFNGLVERTEXATTRIBS3DVNVPROC __glVertexAttribs3dvNV = nullptr; void APIENTRY glVertexAttribs3dvNV (GLuint index, GLsizei count, const GLdouble *v) { if (__glVertexAttribs3dvNV != 0) (__glVertexAttribs3dvNV)(index, count, v);  }
PFNGLVERTEXATTRIBS3FVNVPROC __glVertexAttribs3fvNV = nullptr; void APIENTRY glVertexAttribs3fvNV (GLuint index, GLsizei count, const GLfloat *v) { if (__glVertexAttribs3fvNV != 0) (__glVertexAttribs3fvNV)(index, count, v);  }
PFNGLVERTEXATTRIBS3SVNVPROC __glVertexAttribs3svNV = nullptr; void APIENTRY glVertexAttribs3svNV (GLuint index, GLsizei count, const GLshort *v) { if (__glVertexAttribs3svNV != 0) (__glVertexAttribs3svNV)(index, count, v);  }
PFNGLVERTEXATTRIBS4DVNVPROC __glVertexAttribs4dvNV = nullptr; void APIENTRY glVertexAttribs4dvNV (GLuint index, GLsizei count, const GLdouble *v) { if (__glVertexAttribs4dvNV != 0) (__glVertexAttribs4dvNV)(index, count, v);  }
PFNGLVERTEXATTRIBS4FVNVPROC __glVertexAttribs4fvNV = nullptr; void APIENTRY glVertexAttribs4fvNV (GLuint index, GLsizei count, const GLfloat *v) { if (__glVertexAttribs4fvNV != 0) (__glVertexAttribs4fvNV)(index, count, v);  }
PFNGLVERTEXATTRIBS4SVNVPROC __glVertexAttribs4svNV = nullptr; void APIENTRY glVertexAttribs4svNV (GLuint index, GLsizei count, const GLshort *v) { if (__glVertexAttribs4svNV != 0) (__glVertexAttribs4svNV)(index, count, v);  }
PFNGLVERTEXATTRIBS4UBVNVPROC __glVertexAttribs4ubvNV = nullptr; void APIENTRY glVertexAttribs4ubvNV (GLuint index, GLsizei count, const GLubyte *v) { if (__glVertexAttribs4ubvNV != 0) (__glVertexAttribs4ubvNV)(index, count, v);  }
bool __loadGL_NV_vertex_program(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glAreProgramsResidentNV = (PFNGLAREPROGRAMSRESIDENTNVPROC)proc((const GLubyte*)"glAreProgramsResidentNV")) != nullptr) || r;
    r = ((__glBindProgramNV = (PFNGLBINDPROGRAMNVPROC)proc((const GLubyte*)"glBindProgramNV")) != nullptr) || r;
    r = ((__glDeleteProgramsNV = (PFNGLDELETEPROGRAMSNVPROC)proc((const GLubyte*)"glDeleteProgramsNV")) != nullptr) || r;
    r = ((__glExecuteProgramNV = (PFNGLEXECUTEPROGRAMNVPROC)proc((const GLubyte*)"glExecuteProgramNV")) != nullptr) || r;
    r = ((__glGenProgramsNV = (PFNGLGENPROGRAMSNVPROC)proc((const GLubyte*)"glGenProgramsNV")) != nullptr) || r;
    r = ((__glGetProgramParameterdvNV = (PFNGLGETPROGRAMPARAMETERDVNVPROC)proc((const GLubyte*)"glGetProgramParameterdvNV")) != nullptr) || r;
    r = ((__glGetProgramParameterfvNV = (PFNGLGETPROGRAMPARAMETERFVNVPROC)proc((const GLubyte*)"glGetProgramParameterfvNV")) != nullptr) || r;
    r = ((__glGetProgramStringNV = (PFNGLGETPROGRAMSTRINGNVPROC)proc((const GLubyte*)"glGetProgramStringNV")) != nullptr) || r;
    r = ((__glGetProgramivNV = (PFNGLGETPROGRAMIVNVPROC)proc((const GLubyte*)"glGetProgramivNV")) != nullptr) || r;
    r = ((__glGetTrackMatrixivNV = (PFNGLGETTRACKMATRIXIVNVPROC)proc((const GLubyte*)"glGetTrackMatrixivNV")) != nullptr) || r;
    r = ((__glGetVertexAttribPointervNV = (PFNGLGETVERTEXATTRIBPOINTERVNVPROC)proc((const GLubyte*)"glGetVertexAttribPointervNV")) != nullptr) || r;
    r = ((__glGetVertexAttribdvNV = (PFNGLGETVERTEXATTRIBDVNVPROC)proc((const GLubyte*)"glGetVertexAttribdvNV")) != nullptr) || r;
    r = ((__glGetVertexAttribfvNV = (PFNGLGETVERTEXATTRIBFVNVPROC)proc((const GLubyte*)"glGetVertexAttribfvNV")) != nullptr) || r;
    r = ((__glGetVertexAttribivNV = (PFNGLGETVERTEXATTRIBIVNVPROC)proc((const GLubyte*)"glGetVertexAttribivNV")) != nullptr) || r;
    r = ((__glIsProgramNV = (PFNGLISPROGRAMNVPROC)proc((const GLubyte*)"glIsProgramNV")) != nullptr) || r;
    r = ((__glLoadProgramNV = (PFNGLLOADPROGRAMNVPROC)proc((const GLubyte*)"glLoadProgramNV")) != nullptr) || r;
    r = ((__glProgramParameter4dNV = (PFNGLPROGRAMPARAMETER4DNVPROC)proc((const GLubyte*)"glProgramParameter4dNV")) != nullptr) || r;
    r = ((__glProgramParameter4dvNV = (PFNGLPROGRAMPARAMETER4DVNVPROC)proc((const GLubyte*)"glProgramParameter4dvNV")) != nullptr) || r;
    r = ((__glProgramParameter4fNV = (PFNGLPROGRAMPARAMETER4FNVPROC)proc((const GLubyte*)"glProgramParameter4fNV")) != nullptr) || r;
    r = ((__glProgramParameter4fvNV = (PFNGLPROGRAMPARAMETER4FVNVPROC)proc((const GLubyte*)"glProgramParameter4fvNV")) != nullptr) || r;
    r = ((__glProgramParameters4dvNV = (PFNGLPROGRAMPARAMETERS4DVNVPROC)proc((const GLubyte*)"glProgramParameters4dvNV")) != nullptr) || r;
    r = ((__glProgramParameters4fvNV = (PFNGLPROGRAMPARAMETERS4FVNVPROC)proc((const GLubyte*)"glProgramParameters4fvNV")) != nullptr) || r;
    r = ((__glRequestResidentProgramsNV = (PFNGLREQUESTRESIDENTPROGRAMSNVPROC)proc((const GLubyte*)"glRequestResidentProgramsNV")) != nullptr) || r;
    r = ((__glTrackMatrixNV = (PFNGLTRACKMATRIXNVPROC)proc((const GLubyte*)"glTrackMatrixNV")) != nullptr) || r;
    r = ((__glVertexAttrib1dNV = (PFNGLVERTEXATTRIB1DNVPROC)proc((const GLubyte*)"glVertexAttrib1dNV")) != nullptr) || r;
    r = ((__glVertexAttrib1dvNV = (PFNGLVERTEXATTRIB1DVNVPROC)proc((const GLubyte*)"glVertexAttrib1dvNV")) != nullptr) || r;
    r = ((__glVertexAttrib1fNV = (PFNGLVERTEXATTRIB1FNVPROC)proc((const GLubyte*)"glVertexAttrib1fNV")) != nullptr) || r;
    r = ((__glVertexAttrib1fvNV = (PFNGLVERTEXATTRIB1FVNVPROC)proc((const GLubyte*)"glVertexAttrib1fvNV")) != nullptr) || r;
    r = ((__glVertexAttrib1sNV = (PFNGLVERTEXATTRIB1SNVPROC)proc((const GLubyte*)"glVertexAttrib1sNV")) != nullptr) || r;
    r = ((__glVertexAttrib1svNV = (PFNGLVERTEXATTRIB1SVNVPROC)proc((const GLubyte*)"glVertexAttrib1svNV")) != nullptr) || r;
    r = ((__glVertexAttrib2dNV = (PFNGLVERTEXATTRIB2DNVPROC)proc((const GLubyte*)"glVertexAttrib2dNV")) != nullptr) || r;
    r = ((__glVertexAttrib2dvNV = (PFNGLVERTEXATTRIB2DVNVPROC)proc((const GLubyte*)"glVertexAttrib2dvNV")) != nullptr) || r;
    r = ((__glVertexAttrib2fNV = (PFNGLVERTEXATTRIB2FNVPROC)proc((const GLubyte*)"glVertexAttrib2fNV")) != nullptr) || r;
    r = ((__glVertexAttrib2fvNV = (PFNGLVERTEXATTRIB2FVNVPROC)proc((const GLubyte*)"glVertexAttrib2fvNV")) != nullptr) || r;
    r = ((__glVertexAttrib2sNV = (PFNGLVERTEXATTRIB2SNVPROC)proc((const GLubyte*)"glVertexAttrib2sNV")) != nullptr) || r;
    r = ((__glVertexAttrib2svNV = (PFNGLVERTEXATTRIB2SVNVPROC)proc((const GLubyte*)"glVertexAttrib2svNV")) != nullptr) || r;
    r = ((__glVertexAttrib3dNV = (PFNGLVERTEXATTRIB3DNVPROC)proc((const GLubyte*)"glVertexAttrib3dNV")) != nullptr) || r;
    r = ((__glVertexAttrib3dvNV = (PFNGLVERTEXATTRIB3DVNVPROC)proc((const GLubyte*)"glVertexAttrib3dvNV")) != nullptr) || r;
    r = ((__glVertexAttrib3fNV = (PFNGLVERTEXATTRIB3FNVPROC)proc((const GLubyte*)"glVertexAttrib3fNV")) != nullptr) || r;
    r = ((__glVertexAttrib3fvNV = (PFNGLVERTEXATTRIB3FVNVPROC)proc((const GLubyte*)"glVertexAttrib3fvNV")) != nullptr) || r;
    r = ((__glVertexAttrib3sNV = (PFNGLVERTEXATTRIB3SNVPROC)proc((const GLubyte*)"glVertexAttrib3sNV")) != nullptr) || r;
    r = ((__glVertexAttrib3svNV = (PFNGLVERTEXATTRIB3SVNVPROC)proc((const GLubyte*)"glVertexAttrib3svNV")) != nullptr) || r;
    r = ((__glVertexAttrib4dNV = (PFNGLVERTEXATTRIB4DNVPROC)proc((const GLubyte*)"glVertexAttrib4dNV")) != nullptr) || r;
    r = ((__glVertexAttrib4dvNV = (PFNGLVERTEXATTRIB4DVNVPROC)proc((const GLubyte*)"glVertexAttrib4dvNV")) != nullptr) || r;
    r = ((__glVertexAttrib4fNV = (PFNGLVERTEXATTRIB4FNVPROC)proc((const GLubyte*)"glVertexAttrib4fNV")) != nullptr) || r;
    r = ((__glVertexAttrib4fvNV = (PFNGLVERTEXATTRIB4FVNVPROC)proc((const GLubyte*)"glVertexAttrib4fvNV")) != nullptr) || r;
    r = ((__glVertexAttrib4sNV = (PFNGLVERTEXATTRIB4SNVPROC)proc((const GLubyte*)"glVertexAttrib4sNV")) != nullptr) || r;
    r = ((__glVertexAttrib4svNV = (PFNGLVERTEXATTRIB4SVNVPROC)proc((const GLubyte*)"glVertexAttrib4svNV")) != nullptr) || r;
    r = ((__glVertexAttrib4ubNV = (PFNGLVERTEXATTRIB4UBNVPROC)proc((const GLubyte*)"glVertexAttrib4ubNV")) != nullptr) || r;
    r = ((__glVertexAttrib4ubvNV = (PFNGLVERTEXATTRIB4UBVNVPROC)proc((const GLubyte*)"glVertexAttrib4ubvNV")) != nullptr) || r;
    r = ((__glVertexAttribPointerNV = (PFNGLVERTEXATTRIBPOINTERNVPROC)proc((const GLubyte*)"glVertexAttribPointerNV")) != nullptr) || r;
    r = ((__glVertexAttribs1dvNV = (PFNGLVERTEXATTRIBS1DVNVPROC)proc((const GLubyte*)"glVertexAttribs1dvNV")) != nullptr) || r;
    r = ((__glVertexAttribs1fvNV = (PFNGLVERTEXATTRIBS1FVNVPROC)proc((const GLubyte*)"glVertexAttribs1fvNV")) != nullptr) || r;
    r = ((__glVertexAttribs1svNV = (PFNGLVERTEXATTRIBS1SVNVPROC)proc((const GLubyte*)"glVertexAttribs1svNV")) != nullptr) || r;
    r = ((__glVertexAttribs2dvNV = (PFNGLVERTEXATTRIBS2DVNVPROC)proc((const GLubyte*)"glVertexAttribs2dvNV")) != nullptr) || r;
    r = ((__glVertexAttribs2fvNV = (PFNGLVERTEXATTRIBS2FVNVPROC)proc((const GLubyte*)"glVertexAttribs2fvNV")) != nullptr) || r;
    r = ((__glVertexAttribs2svNV = (PFNGLVERTEXATTRIBS2SVNVPROC)proc((const GLubyte*)"glVertexAttribs2svNV")) != nullptr) || r;
    r = ((__glVertexAttribs3dvNV = (PFNGLVERTEXATTRIBS3DVNVPROC)proc((const GLubyte*)"glVertexAttribs3dvNV")) != nullptr) || r;
    r = ((__glVertexAttribs3fvNV = (PFNGLVERTEXATTRIBS3FVNVPROC)proc((const GLubyte*)"glVertexAttribs3fvNV")) != nullptr) || r;
    r = ((__glVertexAttribs3svNV = (PFNGLVERTEXATTRIBS3SVNVPROC)proc((const GLubyte*)"glVertexAttribs3svNV")) != nullptr) || r;
    r = ((__glVertexAttribs4dvNV = (PFNGLVERTEXATTRIBS4DVNVPROC)proc((const GLubyte*)"glVertexAttribs4dvNV")) != nullptr) || r;
    r = ((__glVertexAttribs4fvNV = (PFNGLVERTEXATTRIBS4FVNVPROC)proc((const GLubyte*)"glVertexAttribs4fvNV")) != nullptr) || r;
    r = ((__glVertexAttribs4svNV = (PFNGLVERTEXATTRIBS4SVNVPROC)proc((const GLubyte*)"glVertexAttribs4svNV")) != nullptr) || r;
    r = ((__glVertexAttribs4ubvNV = (PFNGLVERTEXATTRIBS4UBVNVPROC)proc((const GLubyte*)"glVertexAttribs4ubvNV")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_NV_vertex_program = false;
/* GL_NV_vertex_program1_1 */
bool __loadGL_NV_vertex_program1_1(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_NV_vertex_program1_1 = false;
/* GL_NV_vertex_program2 */
bool __loadGL_NV_vertex_program2(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_NV_vertex_program2 = false;
/* GL_NV_vertex_program2_option */
bool __loadGL_NV_vertex_program2_option(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_NV_vertex_program2_option = false;
/* GL_NV_vertex_program3 */
bool __loadGL_NV_vertex_program3(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_NV_vertex_program3 = false;
/* GL_NV_vertex_program4 */
PFNGLGETVERTEXATTRIBIIVEXTPROC __glGetVertexAttribIivEXT = nullptr; void APIENTRY glGetVertexAttribIivEXT (GLuint index, GLenum pname, GLint *params) { if (__glGetVertexAttribIivEXT != 0) (__glGetVertexAttribIivEXT)(index, pname, params);  }
PFNGLGETVERTEXATTRIBIUIVEXTPROC __glGetVertexAttribIuivEXT = nullptr; void APIENTRY glGetVertexAttribIuivEXT (GLuint index, GLenum pname, GLuint *params) { if (__glGetVertexAttribIuivEXT != 0) (__glGetVertexAttribIuivEXT)(index, pname, params);  }
PFNGLVERTEXATTRIBI1IEXTPROC __glVertexAttribI1iEXT = nullptr; void APIENTRY glVertexAttribI1iEXT (GLuint index, GLint x) { if (__glVertexAttribI1iEXT != 0) (__glVertexAttribI1iEXT)(index, x);  }
PFNGLVERTEXATTRIBI1IVEXTPROC __glVertexAttribI1ivEXT = nullptr; void APIENTRY glVertexAttribI1ivEXT (GLuint index, const GLint *v) { if (__glVertexAttribI1ivEXT != 0) (__glVertexAttribI1ivEXT)(index, v);  }
PFNGLVERTEXATTRIBI1UIEXTPROC __glVertexAttribI1uiEXT = nullptr; void APIENTRY glVertexAttribI1uiEXT (GLuint index, GLuint x) { if (__glVertexAttribI1uiEXT != 0) (__glVertexAttribI1uiEXT)(index, x);  }
PFNGLVERTEXATTRIBI1UIVEXTPROC __glVertexAttribI1uivEXT = nullptr; void APIENTRY glVertexAttribI1uivEXT (GLuint index, const GLuint *v) { if (__glVertexAttribI1uivEXT != 0) (__glVertexAttribI1uivEXT)(index, v);  }
PFNGLVERTEXATTRIBI2IEXTPROC __glVertexAttribI2iEXT = nullptr; void APIENTRY glVertexAttribI2iEXT (GLuint index, GLint x, GLint y) { if (__glVertexAttribI2iEXT != 0) (__glVertexAttribI2iEXT)(index, x, y);  }
PFNGLVERTEXATTRIBI2IVEXTPROC __glVertexAttribI2ivEXT = nullptr; void APIENTRY glVertexAttribI2ivEXT (GLuint index, const GLint *v) { if (__glVertexAttribI2ivEXT != 0) (__glVertexAttribI2ivEXT)(index, v);  }
PFNGLVERTEXATTRIBI2UIEXTPROC __glVertexAttribI2uiEXT = nullptr; void APIENTRY glVertexAttribI2uiEXT (GLuint index, GLuint x, GLuint y) { if (__glVertexAttribI2uiEXT != 0) (__glVertexAttribI2uiEXT)(index, x, y);  }
PFNGLVERTEXATTRIBI2UIVEXTPROC __glVertexAttribI2uivEXT = nullptr; void APIENTRY glVertexAttribI2uivEXT (GLuint index, const GLuint *v) { if (__glVertexAttribI2uivEXT != 0) (__glVertexAttribI2uivEXT)(index, v);  }
PFNGLVERTEXATTRIBI3IEXTPROC __glVertexAttribI3iEXT = nullptr; void APIENTRY glVertexAttribI3iEXT (GLuint index, GLint x, GLint y, GLint z) { if (__glVertexAttribI3iEXT != 0) (__glVertexAttribI3iEXT)(index, x, y, z);  }
PFNGLVERTEXATTRIBI3IVEXTPROC __glVertexAttribI3ivEXT = nullptr; void APIENTRY glVertexAttribI3ivEXT (GLuint index, const GLint *v) { if (__glVertexAttribI3ivEXT != 0) (__glVertexAttribI3ivEXT)(index, v);  }
PFNGLVERTEXATTRIBI3UIEXTPROC __glVertexAttribI3uiEXT = nullptr; void APIENTRY glVertexAttribI3uiEXT (GLuint index, GLuint x, GLuint y, GLuint z) { if (__glVertexAttribI3uiEXT != 0) (__glVertexAttribI3uiEXT)(index, x, y, z);  }
PFNGLVERTEXATTRIBI3UIVEXTPROC __glVertexAttribI3uivEXT = nullptr; void APIENTRY glVertexAttribI3uivEXT (GLuint index, const GLuint *v) { if (__glVertexAttribI3uivEXT != 0) (__glVertexAttribI3uivEXT)(index, v);  }
PFNGLVERTEXATTRIBI4BVEXTPROC __glVertexAttribI4bvEXT = nullptr; void APIENTRY glVertexAttribI4bvEXT (GLuint index, const GLbyte *v) { if (__glVertexAttribI4bvEXT != 0) (__glVertexAttribI4bvEXT)(index, v);  }
PFNGLVERTEXATTRIBI4IEXTPROC __glVertexAttribI4iEXT = nullptr; void APIENTRY glVertexAttribI4iEXT (GLuint index, GLint x, GLint y, GLint z, GLint w) { if (__glVertexAttribI4iEXT != 0) (__glVertexAttribI4iEXT)(index, x, y, z, w);  }
PFNGLVERTEXATTRIBI4IVEXTPROC __glVertexAttribI4ivEXT = nullptr; void APIENTRY glVertexAttribI4ivEXT (GLuint index, const GLint *v) { if (__glVertexAttribI4ivEXT != 0) (__glVertexAttribI4ivEXT)(index, v);  }
PFNGLVERTEXATTRIBI4SVEXTPROC __glVertexAttribI4svEXT = nullptr; void APIENTRY glVertexAttribI4svEXT (GLuint index, const GLshort *v) { if (__glVertexAttribI4svEXT != 0) (__glVertexAttribI4svEXT)(index, v);  }
PFNGLVERTEXATTRIBI4UBVEXTPROC __glVertexAttribI4ubvEXT = nullptr; void APIENTRY glVertexAttribI4ubvEXT (GLuint index, const GLubyte *v) { if (__glVertexAttribI4ubvEXT != 0) (__glVertexAttribI4ubvEXT)(index, v);  }
PFNGLVERTEXATTRIBI4UIEXTPROC __glVertexAttribI4uiEXT = nullptr; void APIENTRY glVertexAttribI4uiEXT (GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) { if (__glVertexAttribI4uiEXT != 0) (__glVertexAttribI4uiEXT)(index, x, y, z, w);  }
PFNGLVERTEXATTRIBI4UIVEXTPROC __glVertexAttribI4uivEXT = nullptr; void APIENTRY glVertexAttribI4uivEXT (GLuint index, const GLuint *v) { if (__glVertexAttribI4uivEXT != 0) (__glVertexAttribI4uivEXT)(index, v);  }
PFNGLVERTEXATTRIBI4USVEXTPROC __glVertexAttribI4usvEXT = nullptr; void APIENTRY glVertexAttribI4usvEXT (GLuint index, const GLushort *v) { if (__glVertexAttribI4usvEXT != 0) (__glVertexAttribI4usvEXT)(index, v);  }
PFNGLVERTEXATTRIBIPOINTEREXTPROC __glVertexAttribIPointerEXT = nullptr; void APIENTRY glVertexAttribIPointerEXT (GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer) { if (__glVertexAttribIPointerEXT != 0) (__glVertexAttribIPointerEXT)(index, size, type, stride, pointer);  }
bool __loadGL_NV_vertex_program4(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glGetVertexAttribIivEXT = (PFNGLGETVERTEXATTRIBIIVEXTPROC)proc((const GLubyte*)"glGetVertexAttribIivEXT")) != nullptr) || r;
    r = ((__glGetVertexAttribIuivEXT = (PFNGLGETVERTEXATTRIBIUIVEXTPROC)proc((const GLubyte*)"glGetVertexAttribIuivEXT")) != nullptr) || r;
    r = ((__glVertexAttribI1iEXT = (PFNGLVERTEXATTRIBI1IEXTPROC)proc((const GLubyte*)"glVertexAttribI1iEXT")) != nullptr) || r;
    r = ((__glVertexAttribI1ivEXT = (PFNGLVERTEXATTRIBI1IVEXTPROC)proc((const GLubyte*)"glVertexAttribI1ivEXT")) != nullptr) || r;
    r = ((__glVertexAttribI1uiEXT = (PFNGLVERTEXATTRIBI1UIEXTPROC)proc((const GLubyte*)"glVertexAttribI1uiEXT")) != nullptr) || r;
    r = ((__glVertexAttribI1uivEXT = (PFNGLVERTEXATTRIBI1UIVEXTPROC)proc((const GLubyte*)"glVertexAttribI1uivEXT")) != nullptr) || r;
    r = ((__glVertexAttribI2iEXT = (PFNGLVERTEXATTRIBI2IEXTPROC)proc((const GLubyte*)"glVertexAttribI2iEXT")) != nullptr) || r;
    r = ((__glVertexAttribI2ivEXT = (PFNGLVERTEXATTRIBI2IVEXTPROC)proc((const GLubyte*)"glVertexAttribI2ivEXT")) != nullptr) || r;
    r = ((__glVertexAttribI2uiEXT = (PFNGLVERTEXATTRIBI2UIEXTPROC)proc((const GLubyte*)"glVertexAttribI2uiEXT")) != nullptr) || r;
    r = ((__glVertexAttribI2uivEXT = (PFNGLVERTEXATTRIBI2UIVEXTPROC)proc((const GLubyte*)"glVertexAttribI2uivEXT")) != nullptr) || r;
    r = ((__glVertexAttribI3iEXT = (PFNGLVERTEXATTRIBI3IEXTPROC)proc((const GLubyte*)"glVertexAttribI3iEXT")) != nullptr) || r;
    r = ((__glVertexAttribI3ivEXT = (PFNGLVERTEXATTRIBI3IVEXTPROC)proc((const GLubyte*)"glVertexAttribI3ivEXT")) != nullptr) || r;
    r = ((__glVertexAttribI3uiEXT = (PFNGLVERTEXATTRIBI3UIEXTPROC)proc((const GLubyte*)"glVertexAttribI3uiEXT")) != nullptr) || r;
    r = ((__glVertexAttribI3uivEXT = (PFNGLVERTEXATTRIBI3UIVEXTPROC)proc((const GLubyte*)"glVertexAttribI3uivEXT")) != nullptr) || r;
    r = ((__glVertexAttribI4bvEXT = (PFNGLVERTEXATTRIBI4BVEXTPROC)proc((const GLubyte*)"glVertexAttribI4bvEXT")) != nullptr) || r;
    r = ((__glVertexAttribI4iEXT = (PFNGLVERTEXATTRIBI4IEXTPROC)proc((const GLubyte*)"glVertexAttribI4iEXT")) != nullptr) || r;
    r = ((__glVertexAttribI4ivEXT = (PFNGLVERTEXATTRIBI4IVEXTPROC)proc((const GLubyte*)"glVertexAttribI4ivEXT")) != nullptr) || r;
    r = ((__glVertexAttribI4svEXT = (PFNGLVERTEXATTRIBI4SVEXTPROC)proc((const GLubyte*)"glVertexAttribI4svEXT")) != nullptr) || r;
    r = ((__glVertexAttribI4ubvEXT = (PFNGLVERTEXATTRIBI4UBVEXTPROC)proc((const GLubyte*)"glVertexAttribI4ubvEXT")) != nullptr) || r;
    r = ((__glVertexAttribI4uiEXT = (PFNGLVERTEXATTRIBI4UIEXTPROC)proc((const GLubyte*)"glVertexAttribI4uiEXT")) != nullptr) || r;
    r = ((__glVertexAttribI4uivEXT = (PFNGLVERTEXATTRIBI4UIVEXTPROC)proc((const GLubyte*)"glVertexAttribI4uivEXT")) != nullptr) || r;
    r = ((__glVertexAttribI4usvEXT = (PFNGLVERTEXATTRIBI4USVEXTPROC)proc((const GLubyte*)"glVertexAttribI4usvEXT")) != nullptr) || r;
    r = ((__glVertexAttribIPointerEXT = (PFNGLVERTEXATTRIBIPOINTEREXTPROC)proc((const GLubyte*)"glVertexAttribIPointerEXT")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_NV_vertex_program4 = false;
/* GL_NV_video_capture */
PFNGLBEGINVIDEOCAPTURENVPROC __glBeginVideoCaptureNV = nullptr; void APIENTRY glBeginVideoCaptureNV (GLuint video_capture_slot) { if (__glBeginVideoCaptureNV != 0) (__glBeginVideoCaptureNV)(video_capture_slot);  }
PFNGLBINDVIDEOCAPTURESTREAMBUFFERNVPROC __glBindVideoCaptureStreamBufferNV = nullptr; void APIENTRY glBindVideoCaptureStreamBufferNV (GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLintptrARB offset) { if (__glBindVideoCaptureStreamBufferNV != 0) (__glBindVideoCaptureStreamBufferNV)(video_capture_slot, stream, frame_region, offset);  }
PFNGLBINDVIDEOCAPTURESTREAMTEXTURENVPROC __glBindVideoCaptureStreamTextureNV = nullptr; void APIENTRY glBindVideoCaptureStreamTextureNV (GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLenum target, GLuint texture) { if (__glBindVideoCaptureStreamTextureNV != 0) (__glBindVideoCaptureStreamTextureNV)(video_capture_slot, stream, frame_region, target, texture);  }
PFNGLENDVIDEOCAPTURENVPROC __glEndVideoCaptureNV = nullptr; void APIENTRY glEndVideoCaptureNV (GLuint video_capture_slot) { if (__glEndVideoCaptureNV != 0) (__glEndVideoCaptureNV)(video_capture_slot);  }
PFNGLGETVIDEOCAPTURESTREAMDVNVPROC __glGetVideoCaptureStreamdvNV = nullptr; void APIENTRY glGetVideoCaptureStreamdvNV (GLuint video_capture_slot, GLuint stream, GLenum pname, GLdouble *params) { if (__glGetVideoCaptureStreamdvNV != 0) (__glGetVideoCaptureStreamdvNV)(video_capture_slot, stream, pname, params);  }
PFNGLGETVIDEOCAPTURESTREAMFVNVPROC __glGetVideoCaptureStreamfvNV = nullptr; void APIENTRY glGetVideoCaptureStreamfvNV (GLuint video_capture_slot, GLuint stream, GLenum pname, GLfloat *params) { if (__glGetVideoCaptureStreamfvNV != 0) (__glGetVideoCaptureStreamfvNV)(video_capture_slot, stream, pname, params);  }
PFNGLGETVIDEOCAPTURESTREAMIVNVPROC __glGetVideoCaptureStreamivNV = nullptr; void APIENTRY glGetVideoCaptureStreamivNV (GLuint video_capture_slot, GLuint stream, GLenum pname, GLint *params) { if (__glGetVideoCaptureStreamivNV != 0) (__glGetVideoCaptureStreamivNV)(video_capture_slot, stream, pname, params);  }
PFNGLGETVIDEOCAPTUREIVNVPROC __glGetVideoCaptureivNV = nullptr; void APIENTRY glGetVideoCaptureivNV (GLuint video_capture_slot, GLenum pname, GLint *params) { if (__glGetVideoCaptureivNV != 0) (__glGetVideoCaptureivNV)(video_capture_slot, pname, params);  }
PFNGLVIDEOCAPTURENVPROC __glVideoCaptureNV = nullptr; GLenum APIENTRY glVideoCaptureNV (GLuint video_capture_slot, GLuint *sequence_num, GLuint64EXT *capture_time) { if (__glVideoCaptureNV != 0) return (__glVideoCaptureNV)(video_capture_slot, sequence_num, capture_time); return 0; }
PFNGLVIDEOCAPTURESTREAMPARAMETERDVNVPROC __glVideoCaptureStreamParameterdvNV = nullptr; void APIENTRY glVideoCaptureStreamParameterdvNV (GLuint video_capture_slot, GLuint stream, GLenum pname, const GLdouble *params) { if (__glVideoCaptureStreamParameterdvNV != 0) (__glVideoCaptureStreamParameterdvNV)(video_capture_slot, stream, pname, params);  }
PFNGLVIDEOCAPTURESTREAMPARAMETERFVNVPROC __glVideoCaptureStreamParameterfvNV = nullptr; void APIENTRY glVideoCaptureStreamParameterfvNV (GLuint video_capture_slot, GLuint stream, GLenum pname, const GLfloat *params) { if (__glVideoCaptureStreamParameterfvNV != 0) (__glVideoCaptureStreamParameterfvNV)(video_capture_slot, stream, pname, params);  }
PFNGLVIDEOCAPTURESTREAMPARAMETERIVNVPROC __glVideoCaptureStreamParameterivNV = nullptr; void APIENTRY glVideoCaptureStreamParameterivNV (GLuint video_capture_slot, GLuint stream, GLenum pname, const GLint *params) { if (__glVideoCaptureStreamParameterivNV != 0) (__glVideoCaptureStreamParameterivNV)(video_capture_slot, stream, pname, params);  }
bool __loadGL_NV_video_capture(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glBeginVideoCaptureNV = (PFNGLBEGINVIDEOCAPTURENVPROC)proc((const GLubyte*)"glBeginVideoCaptureNV")) != nullptr) || r;
    r = ((__glBindVideoCaptureStreamBufferNV = (PFNGLBINDVIDEOCAPTURESTREAMBUFFERNVPROC)proc((const GLubyte*)"glBindVideoCaptureStreamBufferNV")) != nullptr) || r;
    r = ((__glBindVideoCaptureStreamTextureNV = (PFNGLBINDVIDEOCAPTURESTREAMTEXTURENVPROC)proc((const GLubyte*)"glBindVideoCaptureStreamTextureNV")) != nullptr) || r;
    r = ((__glEndVideoCaptureNV = (PFNGLENDVIDEOCAPTURENVPROC)proc((const GLubyte*)"glEndVideoCaptureNV")) != nullptr) || r;
    r = ((__glGetVideoCaptureStreamdvNV = (PFNGLGETVIDEOCAPTURESTREAMDVNVPROC)proc((const GLubyte*)"glGetVideoCaptureStreamdvNV")) != nullptr) || r;
    r = ((__glGetVideoCaptureStreamfvNV = (PFNGLGETVIDEOCAPTURESTREAMFVNVPROC)proc((const GLubyte*)"glGetVideoCaptureStreamfvNV")) != nullptr) || r;
    r = ((__glGetVideoCaptureStreamivNV = (PFNGLGETVIDEOCAPTURESTREAMIVNVPROC)proc((const GLubyte*)"glGetVideoCaptureStreamivNV")) != nullptr) || r;
    r = ((__glGetVideoCaptureivNV = (PFNGLGETVIDEOCAPTUREIVNVPROC)proc((const GLubyte*)"glGetVideoCaptureivNV")) != nullptr) || r;
    r = ((__glVideoCaptureNV = (PFNGLVIDEOCAPTURENVPROC)proc((const GLubyte*)"glVideoCaptureNV")) != nullptr) || r;
    r = ((__glVideoCaptureStreamParameterdvNV = (PFNGLVIDEOCAPTURESTREAMPARAMETERDVNVPROC)proc((const GLubyte*)"glVideoCaptureStreamParameterdvNV")) != nullptr) || r;
    r = ((__glVideoCaptureStreamParameterfvNV = (PFNGLVIDEOCAPTURESTREAMPARAMETERFVNVPROC)proc((const GLubyte*)"glVideoCaptureStreamParameterfvNV")) != nullptr) || r;
    r = ((__glVideoCaptureStreamParameterivNV = (PFNGLVIDEOCAPTURESTREAMPARAMETERIVNVPROC)proc((const GLubyte*)"glVideoCaptureStreamParameterivNV")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_NV_video_capture = false;
/* GL_NV_viewport_array2 */
bool __loadGL_NV_viewport_array2(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_NV_viewport_array2 = false;
/* GL_OML_interlace */
bool __loadGL_OML_interlace(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_OML_interlace = false;
/* GL_OML_resample */
bool __loadGL_OML_resample(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_OML_resample = false;
/* GL_OML_subsample */
bool __loadGL_OML_subsample(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_OML_subsample = false;
/* GL_OVR_multiview */
PFNGLFRAMEBUFFERTEXTUREMULTIVIEWOVRPROC __glFramebufferTextureMultiviewOVR = nullptr; void APIENTRY glFramebufferTextureMultiviewOVR (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint baseViewIndex, GLsizei numViews) { if (__glFramebufferTextureMultiviewOVR != 0) (__glFramebufferTextureMultiviewOVR)(target, attachment, texture, level, baseViewIndex, numViews);  }
bool __loadGL_OVR_multiview(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glFramebufferTextureMultiviewOVR = (PFNGLFRAMEBUFFERTEXTUREMULTIVIEWOVRPROC)proc((const GLubyte*)"glFramebufferTextureMultiviewOVR")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_OVR_multiview = false;
/* GL_OVR_multiview2 */
bool __loadGL_OVR_multiview2(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_OVR_multiview2 = false;
/* GL_PGI_misc_hints */
PFNGLHINTPGIPROC __glHintPGI = nullptr; void APIENTRY glHintPGI (GLenum target, GLint mode) { if (__glHintPGI != 0) (__glHintPGI)(target, mode);  }
bool __loadGL_PGI_misc_hints(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glHintPGI = (PFNGLHINTPGIPROC)proc((const GLubyte*)"glHintPGI")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_PGI_misc_hints = false;
/* GL_PGI_vertex_hints */
bool __loadGL_PGI_vertex_hints(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_PGI_vertex_hints = false;
/* GL_REND_screen_coordinates */
bool __loadGL_REND_screen_coordinates(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_REND_screen_coordinates = false;
/* GL_S3_s3tc */
bool __loadGL_S3_s3tc(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_S3_s3tc = false;
/* GL_SGIS_detail_texture */
PFNGLDETAILTEXFUNCSGISPROC __glDetailTexFuncSGIS = nullptr; void APIENTRY glDetailTexFuncSGIS (GLenum target, GLsizei n, const GLfloat *points) { if (__glDetailTexFuncSGIS != 0) (__glDetailTexFuncSGIS)(target, n, points);  }
PFNGLGETDETAILTEXFUNCSGISPROC __glGetDetailTexFuncSGIS = nullptr; void APIENTRY glGetDetailTexFuncSGIS (GLenum target, GLfloat *points) { if (__glGetDetailTexFuncSGIS != 0) (__glGetDetailTexFuncSGIS)(target, points);  }
bool __loadGL_SGIS_detail_texture(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glDetailTexFuncSGIS = (PFNGLDETAILTEXFUNCSGISPROC)proc((const GLubyte*)"glDetailTexFuncSGIS")) != nullptr) || r;
    r = ((__glGetDetailTexFuncSGIS = (PFNGLGETDETAILTEXFUNCSGISPROC)proc((const GLubyte*)"glGetDetailTexFuncSGIS")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_SGIS_detail_texture = false;
/* GL_SGIS_fog_function */
PFNGLFOGFUNCSGISPROC __glFogFuncSGIS = nullptr; void APIENTRY glFogFuncSGIS (GLsizei n, const GLfloat *points) { if (__glFogFuncSGIS != 0) (__glFogFuncSGIS)(n, points);  }
PFNGLGETFOGFUNCSGISPROC __glGetFogFuncSGIS = nullptr; void APIENTRY glGetFogFuncSGIS (GLfloat *points) { if (__glGetFogFuncSGIS != 0) (__glGetFogFuncSGIS)(points);  }
bool __loadGL_SGIS_fog_function(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glFogFuncSGIS = (PFNGLFOGFUNCSGISPROC)proc((const GLubyte*)"glFogFuncSGIS")) != nullptr) || r;
    r = ((__glGetFogFuncSGIS = (PFNGLGETFOGFUNCSGISPROC)proc((const GLubyte*)"glGetFogFuncSGIS")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_SGIS_fog_function = false;
/* GL_SGIS_generate_mipmap */
bool __loadGL_SGIS_generate_mipmap(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_SGIS_generate_mipmap = false;
/* GL_SGIS_multisample */
PFNGLSAMPLEMASKSGISPROC __glSampleMaskSGIS = nullptr; void APIENTRY glSampleMaskSGIS (GLclampf value, GLboolean invert) { if (__glSampleMaskSGIS != 0) (__glSampleMaskSGIS)(value, invert);  }
PFNGLSAMPLEPATTERNSGISPROC __glSamplePatternSGIS = nullptr; void APIENTRY glSamplePatternSGIS (GLenum pattern) { if (__glSamplePatternSGIS != 0) (__glSamplePatternSGIS)(pattern);  }
bool __loadGL_SGIS_multisample(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glSampleMaskSGIS = (PFNGLSAMPLEMASKSGISPROC)proc((const GLubyte*)"glSampleMaskSGIS")) != nullptr) || r;
    r = ((__glSamplePatternSGIS = (PFNGLSAMPLEPATTERNSGISPROC)proc((const GLubyte*)"glSamplePatternSGIS")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_SGIS_multisample = false;
/* GL_SGIS_pixel_texture */
PFNGLGETPIXELTEXGENPARAMETERFVSGISPROC __glGetPixelTexGenParameterfvSGIS = nullptr; void APIENTRY glGetPixelTexGenParameterfvSGIS (GLenum pname, GLfloat *params) { if (__glGetPixelTexGenParameterfvSGIS != 0) (__glGetPixelTexGenParameterfvSGIS)(pname, params);  }
PFNGLGETPIXELTEXGENPARAMETERIVSGISPROC __glGetPixelTexGenParameterivSGIS = nullptr; void APIENTRY glGetPixelTexGenParameterivSGIS (GLenum pname, GLint *params) { if (__glGetPixelTexGenParameterivSGIS != 0) (__glGetPixelTexGenParameterivSGIS)(pname, params);  }
PFNGLPIXELTEXGENPARAMETERFSGISPROC __glPixelTexGenParameterfSGIS = nullptr; void APIENTRY glPixelTexGenParameterfSGIS (GLenum pname, GLfloat param) { if (__glPixelTexGenParameterfSGIS != 0) (__glPixelTexGenParameterfSGIS)(pname, param);  }
PFNGLPIXELTEXGENPARAMETERFVSGISPROC __glPixelTexGenParameterfvSGIS = nullptr; void APIENTRY glPixelTexGenParameterfvSGIS (GLenum pname, const GLfloat *params) { if (__glPixelTexGenParameterfvSGIS != 0) (__glPixelTexGenParameterfvSGIS)(pname, params);  }
PFNGLPIXELTEXGENPARAMETERISGISPROC __glPixelTexGenParameteriSGIS = nullptr; void APIENTRY glPixelTexGenParameteriSGIS (GLenum pname, GLint param) { if (__glPixelTexGenParameteriSGIS != 0) (__glPixelTexGenParameteriSGIS)(pname, param);  }
PFNGLPIXELTEXGENPARAMETERIVSGISPROC __glPixelTexGenParameterivSGIS = nullptr; void APIENTRY glPixelTexGenParameterivSGIS (GLenum pname, const GLint *params) { if (__glPixelTexGenParameterivSGIS != 0) (__glPixelTexGenParameterivSGIS)(pname, params);  }
bool __loadGL_SGIS_pixel_texture(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glGetPixelTexGenParameterfvSGIS = (PFNGLGETPIXELTEXGENPARAMETERFVSGISPROC)proc((const GLubyte*)"glGetPixelTexGenParameterfvSGIS")) != nullptr) || r;
    r = ((__glGetPixelTexGenParameterivSGIS = (PFNGLGETPIXELTEXGENPARAMETERIVSGISPROC)proc((const GLubyte*)"glGetPixelTexGenParameterivSGIS")) != nullptr) || r;
    r = ((__glPixelTexGenParameterfSGIS = (PFNGLPIXELTEXGENPARAMETERFSGISPROC)proc((const GLubyte*)"glPixelTexGenParameterfSGIS")) != nullptr) || r;
    r = ((__glPixelTexGenParameterfvSGIS = (PFNGLPIXELTEXGENPARAMETERFVSGISPROC)proc((const GLubyte*)"glPixelTexGenParameterfvSGIS")) != nullptr) || r;
    r = ((__glPixelTexGenParameteriSGIS = (PFNGLPIXELTEXGENPARAMETERISGISPROC)proc((const GLubyte*)"glPixelTexGenParameteriSGIS")) != nullptr) || r;
    r = ((__glPixelTexGenParameterivSGIS = (PFNGLPIXELTEXGENPARAMETERIVSGISPROC)proc((const GLubyte*)"glPixelTexGenParameterivSGIS")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_SGIS_pixel_texture = false;
/* GL_SGIS_point_line_texgen */
bool __loadGL_SGIS_point_line_texgen(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_SGIS_point_line_texgen = false;
/* GL_SGIS_point_parameters */
PFNGLPOINTPARAMETERFSGISPROC __glPointParameterfSGIS = nullptr; void APIENTRY glPointParameterfSGIS (GLenum pname, GLfloat param) { if (__glPointParameterfSGIS != 0) (__glPointParameterfSGIS)(pname, param);  }
PFNGLPOINTPARAMETERFVSGISPROC __glPointParameterfvSGIS = nullptr; void APIENTRY glPointParameterfvSGIS (GLenum pname, const GLfloat *params) { if (__glPointParameterfvSGIS != 0) (__glPointParameterfvSGIS)(pname, params);  }
bool __loadGL_SGIS_point_parameters(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glPointParameterfSGIS = (PFNGLPOINTPARAMETERFSGISPROC)proc((const GLubyte*)"glPointParameterfSGIS")) != nullptr) || r;
    r = ((__glPointParameterfvSGIS = (PFNGLPOINTPARAMETERFVSGISPROC)proc((const GLubyte*)"glPointParameterfvSGIS")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_SGIS_point_parameters = false;
/* GL_SGIS_sharpen_texture */
PFNGLGETSHARPENTEXFUNCSGISPROC __glGetSharpenTexFuncSGIS = nullptr; void APIENTRY glGetSharpenTexFuncSGIS (GLenum target, GLfloat *points) { if (__glGetSharpenTexFuncSGIS != 0) (__glGetSharpenTexFuncSGIS)(target, points);  }
PFNGLSHARPENTEXFUNCSGISPROC __glSharpenTexFuncSGIS = nullptr; void APIENTRY glSharpenTexFuncSGIS (GLenum target, GLsizei n, const GLfloat *points) { if (__glSharpenTexFuncSGIS != 0) (__glSharpenTexFuncSGIS)(target, n, points);  }
bool __loadGL_SGIS_sharpen_texture(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glGetSharpenTexFuncSGIS = (PFNGLGETSHARPENTEXFUNCSGISPROC)proc((const GLubyte*)"glGetSharpenTexFuncSGIS")) != nullptr) || r;
    r = ((__glSharpenTexFuncSGIS = (PFNGLSHARPENTEXFUNCSGISPROC)proc((const GLubyte*)"glSharpenTexFuncSGIS")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_SGIS_sharpen_texture = false;
/* GL_SGIS_texture4D */
PFNGLTEXIMAGE4DSGISPROC __glTexImage4DSGIS = nullptr; void APIENTRY glTexImage4DSGIS (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GLenum format, GLenum type, const void *pixels) { if (__glTexImage4DSGIS != 0) (__glTexImage4DSGIS)(target, level, internalformat, width, height, depth, size4d, border, format, type, pixels);  }
PFNGLTEXSUBIMAGE4DSGISPROC __glTexSubImage4DSGIS = nullptr; void APIENTRY glTexSubImage4DSGIS (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLenum format, GLenum type, const void *pixels) { if (__glTexSubImage4DSGIS != 0) (__glTexSubImage4DSGIS)(target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, type, pixels);  }
bool __loadGL_SGIS_texture4D(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glTexImage4DSGIS = (PFNGLTEXIMAGE4DSGISPROC)proc((const GLubyte*)"glTexImage4DSGIS")) != nullptr) || r;
    r = ((__glTexSubImage4DSGIS = (PFNGLTEXSUBIMAGE4DSGISPROC)proc((const GLubyte*)"glTexSubImage4DSGIS")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_SGIS_texture4D = false;
/* GL_SGIS_texture_border_clamp */
bool __loadGL_SGIS_texture_border_clamp(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_SGIS_texture_border_clamp = false;
/* GL_SGIS_texture_color_mask */
PFNGLTEXTURECOLORMASKSGISPROC __glTextureColorMaskSGIS = nullptr; void APIENTRY glTextureColorMaskSGIS (GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha) { if (__glTextureColorMaskSGIS != 0) (__glTextureColorMaskSGIS)(red, green, blue, alpha);  }
bool __loadGL_SGIS_texture_color_mask(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glTextureColorMaskSGIS = (PFNGLTEXTURECOLORMASKSGISPROC)proc((const GLubyte*)"glTextureColorMaskSGIS")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_SGIS_texture_color_mask = false;
/* GL_SGIS_texture_edge_clamp */
bool __loadGL_SGIS_texture_edge_clamp(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_SGIS_texture_edge_clamp = false;
/* GL_SGIS_texture_filter4 */
PFNGLGETTEXFILTERFUNCSGISPROC __glGetTexFilterFuncSGIS = nullptr; void APIENTRY glGetTexFilterFuncSGIS (GLenum target, GLenum filter, GLfloat *weights) { if (__glGetTexFilterFuncSGIS != 0) (__glGetTexFilterFuncSGIS)(target, filter, weights);  }
PFNGLTEXFILTERFUNCSGISPROC __glTexFilterFuncSGIS = nullptr; void APIENTRY glTexFilterFuncSGIS (GLenum target, GLenum filter, GLsizei n, const GLfloat *weights) { if (__glTexFilterFuncSGIS != 0) (__glTexFilterFuncSGIS)(target, filter, n, weights);  }
bool __loadGL_SGIS_texture_filter4(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glGetTexFilterFuncSGIS = (PFNGLGETTEXFILTERFUNCSGISPROC)proc((const GLubyte*)"glGetTexFilterFuncSGIS")) != nullptr) || r;
    r = ((__glTexFilterFuncSGIS = (PFNGLTEXFILTERFUNCSGISPROC)proc((const GLubyte*)"glTexFilterFuncSGIS")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_SGIS_texture_filter4 = false;
/* GL_SGIS_texture_lod */
bool __loadGL_SGIS_texture_lod(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_SGIS_texture_lod = false;
/* GL_SGIS_texture_select */
bool __loadGL_SGIS_texture_select(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_SGIS_texture_select = false;
/* GL_SGIX_async */
PFNGLASYNCMARKERSGIXPROC __glAsyncMarkerSGIX = nullptr; void APIENTRY glAsyncMarkerSGIX (GLuint marker) { if (__glAsyncMarkerSGIX != 0) (__glAsyncMarkerSGIX)(marker);  }
PFNGLDELETEASYNCMARKERSSGIXPROC __glDeleteAsyncMarkersSGIX = nullptr; void APIENTRY glDeleteAsyncMarkersSGIX (GLuint marker, GLsizei range) { if (__glDeleteAsyncMarkersSGIX != 0) (__glDeleteAsyncMarkersSGIX)(marker, range);  }
PFNGLFINISHASYNCSGIXPROC __glFinishAsyncSGIX = nullptr; GLint APIENTRY glFinishAsyncSGIX (GLuint *markerp) { if (__glFinishAsyncSGIX != 0) return (__glFinishAsyncSGIX)(markerp); return 0; }
PFNGLGENASYNCMARKERSSGIXPROC __glGenAsyncMarkersSGIX = nullptr; GLuint APIENTRY glGenAsyncMarkersSGIX (GLsizei range) { if (__glGenAsyncMarkersSGIX != 0) return (__glGenAsyncMarkersSGIX)(range); return 0; }
PFNGLISASYNCMARKERSGIXPROC __glIsAsyncMarkerSGIX = nullptr; GLboolean APIENTRY glIsAsyncMarkerSGIX (GLuint marker) { if (__glIsAsyncMarkerSGIX != 0) return (__glIsAsyncMarkerSGIX)(marker); return 0; }
PFNGLPOLLASYNCSGIXPROC __glPollAsyncSGIX = nullptr; GLint APIENTRY glPollAsyncSGIX (GLuint *markerp) { if (__glPollAsyncSGIX != 0) return (__glPollAsyncSGIX)(markerp); return 0; }
bool __loadGL_SGIX_async(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glAsyncMarkerSGIX = (PFNGLASYNCMARKERSGIXPROC)proc((const GLubyte*)"glAsyncMarkerSGIX")) != nullptr) || r;
    r = ((__glDeleteAsyncMarkersSGIX = (PFNGLDELETEASYNCMARKERSSGIXPROC)proc((const GLubyte*)"glDeleteAsyncMarkersSGIX")) != nullptr) || r;
    r = ((__glFinishAsyncSGIX = (PFNGLFINISHASYNCSGIXPROC)proc((const GLubyte*)"glFinishAsyncSGIX")) != nullptr) || r;
    r = ((__glGenAsyncMarkersSGIX = (PFNGLGENASYNCMARKERSSGIXPROC)proc((const GLubyte*)"glGenAsyncMarkersSGIX")) != nullptr) || r;
    r = ((__glIsAsyncMarkerSGIX = (PFNGLISASYNCMARKERSGIXPROC)proc((const GLubyte*)"glIsAsyncMarkerSGIX")) != nullptr) || r;
    r = ((__glPollAsyncSGIX = (PFNGLPOLLASYNCSGIXPROC)proc((const GLubyte*)"glPollAsyncSGIX")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_SGIX_async = false;
/* GL_SGIX_async_histogram */
bool __loadGL_SGIX_async_histogram(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_SGIX_async_histogram = false;
/* GL_SGIX_async_pixel */
bool __loadGL_SGIX_async_pixel(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_SGIX_async_pixel = false;
/* GL_SGIX_blend_alpha_minmax */
bool __loadGL_SGIX_blend_alpha_minmax(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_SGIX_blend_alpha_minmax = false;
/* GL_SGIX_calligraphic_fragment */
bool __loadGL_SGIX_calligraphic_fragment(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_SGIX_calligraphic_fragment = false;
/* GL_SGIX_clipmap */
bool __loadGL_SGIX_clipmap(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_SGIX_clipmap = false;
/* GL_SGIX_convolution_accuracy */
bool __loadGL_SGIX_convolution_accuracy(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_SGIX_convolution_accuracy = false;
/* GL_SGIX_depth_pass_instrument */
bool __loadGL_SGIX_depth_pass_instrument(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_SGIX_depth_pass_instrument = false;
/* GL_SGIX_depth_texture */
bool __loadGL_SGIX_depth_texture(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_SGIX_depth_texture = false;
/* GL_SGIX_flush_raster */
PFNGLFLUSHRASTERSGIXPROC __glFlushRasterSGIX = nullptr; void APIENTRY glFlushRasterSGIX () { if (__glFlushRasterSGIX != 0) (__glFlushRasterSGIX)();  }
bool __loadGL_SGIX_flush_raster(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glFlushRasterSGIX = (PFNGLFLUSHRASTERSGIXPROC)proc((const GLubyte*)"glFlushRasterSGIX")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_SGIX_flush_raster = false;
/* GL_SGIX_fog_offset */
bool __loadGL_SGIX_fog_offset(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_SGIX_fog_offset = false;
/* GL_SGIX_fragment_lighting */
PFNGLFRAGMENTCOLORMATERIALSGIXPROC __glFragmentColorMaterialSGIX = nullptr; void APIENTRY glFragmentColorMaterialSGIX (GLenum face, GLenum mode) { if (__glFragmentColorMaterialSGIX != 0) (__glFragmentColorMaterialSGIX)(face, mode);  }
PFNGLFRAGMENTLIGHTMODELFSGIXPROC __glFragmentLightModelfSGIX = nullptr; void APIENTRY glFragmentLightModelfSGIX (GLenum pname, GLfloat param) { if (__glFragmentLightModelfSGIX != 0) (__glFragmentLightModelfSGIX)(pname, param);  }
PFNGLFRAGMENTLIGHTMODELFVSGIXPROC __glFragmentLightModelfvSGIX = nullptr; void APIENTRY glFragmentLightModelfvSGIX (GLenum pname, const GLfloat *params) { if (__glFragmentLightModelfvSGIX != 0) (__glFragmentLightModelfvSGIX)(pname, params);  }
PFNGLFRAGMENTLIGHTMODELISGIXPROC __glFragmentLightModeliSGIX = nullptr; void APIENTRY glFragmentLightModeliSGIX (GLenum pname, GLint param) { if (__glFragmentLightModeliSGIX != 0) (__glFragmentLightModeliSGIX)(pname, param);  }
PFNGLFRAGMENTLIGHTMODELIVSGIXPROC __glFragmentLightModelivSGIX = nullptr; void APIENTRY glFragmentLightModelivSGIX (GLenum pname, const GLint *params) { if (__glFragmentLightModelivSGIX != 0) (__glFragmentLightModelivSGIX)(pname, params);  }
PFNGLFRAGMENTLIGHTFSGIXPROC __glFragmentLightfSGIX = nullptr; void APIENTRY glFragmentLightfSGIX (GLenum light, GLenum pname, GLfloat param) { if (__glFragmentLightfSGIX != 0) (__glFragmentLightfSGIX)(light, pname, param);  }
PFNGLFRAGMENTLIGHTFVSGIXPROC __glFragmentLightfvSGIX = nullptr; void APIENTRY glFragmentLightfvSGIX (GLenum light, GLenum pname, const GLfloat *params) { if (__glFragmentLightfvSGIX != 0) (__glFragmentLightfvSGIX)(light, pname, params);  }
PFNGLFRAGMENTLIGHTISGIXPROC __glFragmentLightiSGIX = nullptr; void APIENTRY glFragmentLightiSGIX (GLenum light, GLenum pname, GLint param) { if (__glFragmentLightiSGIX != 0) (__glFragmentLightiSGIX)(light, pname, param);  }
PFNGLFRAGMENTLIGHTIVSGIXPROC __glFragmentLightivSGIX = nullptr; void APIENTRY glFragmentLightivSGIX (GLenum light, GLenum pname, const GLint *params) { if (__glFragmentLightivSGIX != 0) (__glFragmentLightivSGIX)(light, pname, params);  }
PFNGLFRAGMENTMATERIALFSGIXPROC __glFragmentMaterialfSGIX = nullptr; void APIENTRY glFragmentMaterialfSGIX (GLenum face, GLenum pname, GLfloat param) { if (__glFragmentMaterialfSGIX != 0) (__glFragmentMaterialfSGIX)(face, pname, param);  }
PFNGLFRAGMENTMATERIALFVSGIXPROC __glFragmentMaterialfvSGIX = nullptr; void APIENTRY glFragmentMaterialfvSGIX (GLenum face, GLenum pname, const GLfloat *params) { if (__glFragmentMaterialfvSGIX != 0) (__glFragmentMaterialfvSGIX)(face, pname, params);  }
PFNGLFRAGMENTMATERIALISGIXPROC __glFragmentMaterialiSGIX = nullptr; void APIENTRY glFragmentMaterialiSGIX (GLenum face, GLenum pname, GLint param) { if (__glFragmentMaterialiSGIX != 0) (__glFragmentMaterialiSGIX)(face, pname, param);  }
PFNGLFRAGMENTMATERIALIVSGIXPROC __glFragmentMaterialivSGIX = nullptr; void APIENTRY glFragmentMaterialivSGIX (GLenum face, GLenum pname, const GLint *params) { if (__glFragmentMaterialivSGIX != 0) (__glFragmentMaterialivSGIX)(face, pname, params);  }
PFNGLGETFRAGMENTLIGHTFVSGIXPROC __glGetFragmentLightfvSGIX = nullptr; void APIENTRY glGetFragmentLightfvSGIX (GLenum light, GLenum pname, GLfloat *params) { if (__glGetFragmentLightfvSGIX != 0) (__glGetFragmentLightfvSGIX)(light, pname, params);  }
PFNGLGETFRAGMENTLIGHTIVSGIXPROC __glGetFragmentLightivSGIX = nullptr; void APIENTRY glGetFragmentLightivSGIX (GLenum light, GLenum pname, GLint *params) { if (__glGetFragmentLightivSGIX != 0) (__glGetFragmentLightivSGIX)(light, pname, params);  }
PFNGLGETFRAGMENTMATERIALFVSGIXPROC __glGetFragmentMaterialfvSGIX = nullptr; void APIENTRY glGetFragmentMaterialfvSGIX (GLenum face, GLenum pname, GLfloat *params) { if (__glGetFragmentMaterialfvSGIX != 0) (__glGetFragmentMaterialfvSGIX)(face, pname, params);  }
PFNGLGETFRAGMENTMATERIALIVSGIXPROC __glGetFragmentMaterialivSGIX = nullptr; void APIENTRY glGetFragmentMaterialivSGIX (GLenum face, GLenum pname, GLint *params) { if (__glGetFragmentMaterialivSGIX != 0) (__glGetFragmentMaterialivSGIX)(face, pname, params);  }
PFNGLLIGHTENVISGIXPROC __glLightEnviSGIX = nullptr; void APIENTRY glLightEnviSGIX (GLenum pname, GLint param) { if (__glLightEnviSGIX != 0) (__glLightEnviSGIX)(pname, param);  }
bool __loadGL_SGIX_fragment_lighting(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glFragmentColorMaterialSGIX = (PFNGLFRAGMENTCOLORMATERIALSGIXPROC)proc((const GLubyte*)"glFragmentColorMaterialSGIX")) != nullptr) || r;
    r = ((__glFragmentLightModelfSGIX = (PFNGLFRAGMENTLIGHTMODELFSGIXPROC)proc((const GLubyte*)"glFragmentLightModelfSGIX")) != nullptr) || r;
    r = ((__glFragmentLightModelfvSGIX = (PFNGLFRAGMENTLIGHTMODELFVSGIXPROC)proc((const GLubyte*)"glFragmentLightModelfvSGIX")) != nullptr) || r;
    r = ((__glFragmentLightModeliSGIX = (PFNGLFRAGMENTLIGHTMODELISGIXPROC)proc((const GLubyte*)"glFragmentLightModeliSGIX")) != nullptr) || r;
    r = ((__glFragmentLightModelivSGIX = (PFNGLFRAGMENTLIGHTMODELIVSGIXPROC)proc((const GLubyte*)"glFragmentLightModelivSGIX")) != nullptr) || r;
    r = ((__glFragmentLightfSGIX = (PFNGLFRAGMENTLIGHTFSGIXPROC)proc((const GLubyte*)"glFragmentLightfSGIX")) != nullptr) || r;
    r = ((__glFragmentLightfvSGIX = (PFNGLFRAGMENTLIGHTFVSGIXPROC)proc((const GLubyte*)"glFragmentLightfvSGIX")) != nullptr) || r;
    r = ((__glFragmentLightiSGIX = (PFNGLFRAGMENTLIGHTISGIXPROC)proc((const GLubyte*)"glFragmentLightiSGIX")) != nullptr) || r;
    r = ((__glFragmentLightivSGIX = (PFNGLFRAGMENTLIGHTIVSGIXPROC)proc((const GLubyte*)"glFragmentLightivSGIX")) != nullptr) || r;
    r = ((__glFragmentMaterialfSGIX = (PFNGLFRAGMENTMATERIALFSGIXPROC)proc((const GLubyte*)"glFragmentMaterialfSGIX")) != nullptr) || r;
    r = ((__glFragmentMaterialfvSGIX = (PFNGLFRAGMENTMATERIALFVSGIXPROC)proc((const GLubyte*)"glFragmentMaterialfvSGIX")) != nullptr) || r;
    r = ((__glFragmentMaterialiSGIX = (PFNGLFRAGMENTMATERIALISGIXPROC)proc((const GLubyte*)"glFragmentMaterialiSGIX")) != nullptr) || r;
    r = ((__glFragmentMaterialivSGIX = (PFNGLFRAGMENTMATERIALIVSGIXPROC)proc((const GLubyte*)"glFragmentMaterialivSGIX")) != nullptr) || r;
    r = ((__glGetFragmentLightfvSGIX = (PFNGLGETFRAGMENTLIGHTFVSGIXPROC)proc((const GLubyte*)"glGetFragmentLightfvSGIX")) != nullptr) || r;
    r = ((__glGetFragmentLightivSGIX = (PFNGLGETFRAGMENTLIGHTIVSGIXPROC)proc((const GLubyte*)"glGetFragmentLightivSGIX")) != nullptr) || r;
    r = ((__glGetFragmentMaterialfvSGIX = (PFNGLGETFRAGMENTMATERIALFVSGIXPROC)proc((const GLubyte*)"glGetFragmentMaterialfvSGIX")) != nullptr) || r;
    r = ((__glGetFragmentMaterialivSGIX = (PFNGLGETFRAGMENTMATERIALIVSGIXPROC)proc((const GLubyte*)"glGetFragmentMaterialivSGIX")) != nullptr) || r;
    r = ((__glLightEnviSGIX = (PFNGLLIGHTENVISGIXPROC)proc((const GLubyte*)"glLightEnviSGIX")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_SGIX_fragment_lighting = false;
/* GL_SGIX_framezoom */
PFNGLFRAMEZOOMSGIXPROC __glFrameZoomSGIX = nullptr; void APIENTRY glFrameZoomSGIX (GLint factor) { if (__glFrameZoomSGIX != 0) (__glFrameZoomSGIX)(factor);  }
bool __loadGL_SGIX_framezoom(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glFrameZoomSGIX = (PFNGLFRAMEZOOMSGIXPROC)proc((const GLubyte*)"glFrameZoomSGIX")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_SGIX_framezoom = false;
/* GL_SGIX_igloo_interface */
PFNGLIGLOOINTERFACESGIXPROC __glIglooInterfaceSGIX = nullptr; void APIENTRY glIglooInterfaceSGIX (GLenum pname, const void *params) { if (__glIglooInterfaceSGIX != 0) (__glIglooInterfaceSGIX)(pname, params);  }
bool __loadGL_SGIX_igloo_interface(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glIglooInterfaceSGIX = (PFNGLIGLOOINTERFACESGIXPROC)proc((const GLubyte*)"glIglooInterfaceSGIX")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_SGIX_igloo_interface = false;
/* GL_SGIX_instruments */
PFNGLGETINSTRUMENTSSGIXPROC __glGetInstrumentsSGIX = nullptr; GLint APIENTRY glGetInstrumentsSGIX () { if (__glGetInstrumentsSGIX != 0) return (__glGetInstrumentsSGIX)(); return 0; }
PFNGLINSTRUMENTSBUFFERSGIXPROC __glInstrumentsBufferSGIX = nullptr; void APIENTRY glInstrumentsBufferSGIX (GLsizei size, GLint *buffer) { if (__glInstrumentsBufferSGIX != 0) (__glInstrumentsBufferSGIX)(size, buffer);  }
PFNGLPOLLINSTRUMENTSSGIXPROC __glPollInstrumentsSGIX = nullptr; GLint APIENTRY glPollInstrumentsSGIX (GLint *marker_p) { if (__glPollInstrumentsSGIX != 0) return (__glPollInstrumentsSGIX)(marker_p); return 0; }
PFNGLREADINSTRUMENTSSGIXPROC __glReadInstrumentsSGIX = nullptr; void APIENTRY glReadInstrumentsSGIX (GLint marker) { if (__glReadInstrumentsSGIX != 0) (__glReadInstrumentsSGIX)(marker);  }
PFNGLSTARTINSTRUMENTSSGIXPROC __glStartInstrumentsSGIX = nullptr; void APIENTRY glStartInstrumentsSGIX () { if (__glStartInstrumentsSGIX != 0) (__glStartInstrumentsSGIX)();  }
PFNGLSTOPINSTRUMENTSSGIXPROC __glStopInstrumentsSGIX = nullptr; void APIENTRY glStopInstrumentsSGIX (GLint marker) { if (__glStopInstrumentsSGIX != 0) (__glStopInstrumentsSGIX)(marker);  }
bool __loadGL_SGIX_instruments(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glGetInstrumentsSGIX = (PFNGLGETINSTRUMENTSSGIXPROC)proc((const GLubyte*)"glGetInstrumentsSGIX")) != nullptr) || r;
    r = ((__glInstrumentsBufferSGIX = (PFNGLINSTRUMENTSBUFFERSGIXPROC)proc((const GLubyte*)"glInstrumentsBufferSGIX")) != nullptr) || r;
    r = ((__glPollInstrumentsSGIX = (PFNGLPOLLINSTRUMENTSSGIXPROC)proc((const GLubyte*)"glPollInstrumentsSGIX")) != nullptr) || r;
    r = ((__glReadInstrumentsSGIX = (PFNGLREADINSTRUMENTSSGIXPROC)proc((const GLubyte*)"glReadInstrumentsSGIX")) != nullptr) || r;
    r = ((__glStartInstrumentsSGIX = (PFNGLSTARTINSTRUMENTSSGIXPROC)proc((const GLubyte*)"glStartInstrumentsSGIX")) != nullptr) || r;
    r = ((__glStopInstrumentsSGIX = (PFNGLSTOPINSTRUMENTSSGIXPROC)proc((const GLubyte*)"glStopInstrumentsSGIX")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_SGIX_instruments = false;
/* GL_SGIX_interlace */
bool __loadGL_SGIX_interlace(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_SGIX_interlace = false;
/* GL_SGIX_ir_instrument1 */
bool __loadGL_SGIX_ir_instrument1(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_SGIX_ir_instrument1 = false;
/* GL_SGIX_list_priority */
PFNGLGETLISTPARAMETERFVSGIXPROC __glGetListParameterfvSGIX = nullptr; void APIENTRY glGetListParameterfvSGIX (GLuint list, GLenum pname, GLfloat *params) { if (__glGetListParameterfvSGIX != 0) (__glGetListParameterfvSGIX)(list, pname, params);  }
PFNGLGETLISTPARAMETERIVSGIXPROC __glGetListParameterivSGIX = nullptr; void APIENTRY glGetListParameterivSGIX (GLuint list, GLenum pname, GLint *params) { if (__glGetListParameterivSGIX != 0) (__glGetListParameterivSGIX)(list, pname, params);  }
PFNGLLISTPARAMETERFSGIXPROC __glListParameterfSGIX = nullptr; void APIENTRY glListParameterfSGIX (GLuint list, GLenum pname, GLfloat param) { if (__glListParameterfSGIX != 0) (__glListParameterfSGIX)(list, pname, param);  }
PFNGLLISTPARAMETERFVSGIXPROC __glListParameterfvSGIX = nullptr; void APIENTRY glListParameterfvSGIX (GLuint list, GLenum pname, const GLfloat *params) { if (__glListParameterfvSGIX != 0) (__glListParameterfvSGIX)(list, pname, params);  }
PFNGLLISTPARAMETERISGIXPROC __glListParameteriSGIX = nullptr; void APIENTRY glListParameteriSGIX (GLuint list, GLenum pname, GLint param) { if (__glListParameteriSGIX != 0) (__glListParameteriSGIX)(list, pname, param);  }
PFNGLLISTPARAMETERIVSGIXPROC __glListParameterivSGIX = nullptr; void APIENTRY glListParameterivSGIX (GLuint list, GLenum pname, const GLint *params) { if (__glListParameterivSGIX != 0) (__glListParameterivSGIX)(list, pname, params);  }
bool __loadGL_SGIX_list_priority(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glGetListParameterfvSGIX = (PFNGLGETLISTPARAMETERFVSGIXPROC)proc((const GLubyte*)"glGetListParameterfvSGIX")) != nullptr) || r;
    r = ((__glGetListParameterivSGIX = (PFNGLGETLISTPARAMETERIVSGIXPROC)proc((const GLubyte*)"glGetListParameterivSGIX")) != nullptr) || r;
    r = ((__glListParameterfSGIX = (PFNGLLISTPARAMETERFSGIXPROC)proc((const GLubyte*)"glListParameterfSGIX")) != nullptr) || r;
    r = ((__glListParameterfvSGIX = (PFNGLLISTPARAMETERFVSGIXPROC)proc((const GLubyte*)"glListParameterfvSGIX")) != nullptr) || r;
    r = ((__glListParameteriSGIX = (PFNGLLISTPARAMETERISGIXPROC)proc((const GLubyte*)"glListParameteriSGIX")) != nullptr) || r;
    r = ((__glListParameterivSGIX = (PFNGLLISTPARAMETERIVSGIXPROC)proc((const GLubyte*)"glListParameterivSGIX")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_SGIX_list_priority = false;
/* GL_SGIX_pixel_texture */
PFNGLPIXELTEXGENSGIXPROC __glPixelTexGenSGIX = nullptr; void APIENTRY glPixelTexGenSGIX (GLenum mode) { if (__glPixelTexGenSGIX != 0) (__glPixelTexGenSGIX)(mode);  }
bool __loadGL_SGIX_pixel_texture(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glPixelTexGenSGIX = (PFNGLPIXELTEXGENSGIXPROC)proc((const GLubyte*)"glPixelTexGenSGIX")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_SGIX_pixel_texture = false;
/* GL_SGIX_pixel_tiles */
bool __loadGL_SGIX_pixel_tiles(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_SGIX_pixel_tiles = false;
/* GL_SGIX_polynomial_ffd */
PFNGLDEFORMSGIXPROC __glDeformSGIX = nullptr; void APIENTRY glDeformSGIX (GLbitfield mask) { if (__glDeformSGIX != 0) (__glDeformSGIX)(mask);  }
PFNGLDEFORMATIONMAP3DSGIXPROC __glDeformationMap3dSGIX = nullptr; void APIENTRY glDeformationMap3dSGIX (GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, const GLdouble *points) { if (__glDeformationMap3dSGIX != 0) (__glDeformationMap3dSGIX)(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points);  }
PFNGLDEFORMATIONMAP3FSGIXPROC __glDeformationMap3fSGIX = nullptr; void APIENTRY glDeformationMap3fSGIX (GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, const GLfloat *points) { if (__glDeformationMap3fSGIX != 0) (__glDeformationMap3fSGIX)(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points);  }
PFNGLLOADIDENTITYDEFORMATIONMAPSGIXPROC __glLoadIdentityDeformationMapSGIX = nullptr; void APIENTRY glLoadIdentityDeformationMapSGIX (GLbitfield mask) { if (__glLoadIdentityDeformationMapSGIX != 0) (__glLoadIdentityDeformationMapSGIX)(mask);  }
bool __loadGL_SGIX_polynomial_ffd(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glDeformSGIX = (PFNGLDEFORMSGIXPROC)proc((const GLubyte*)"glDeformSGIX")) != nullptr) || r;
    r = ((__glDeformationMap3dSGIX = (PFNGLDEFORMATIONMAP3DSGIXPROC)proc((const GLubyte*)"glDeformationMap3dSGIX")) != nullptr) || r;
    r = ((__glDeformationMap3fSGIX = (PFNGLDEFORMATIONMAP3FSGIXPROC)proc((const GLubyte*)"glDeformationMap3fSGIX")) != nullptr) || r;
    r = ((__glLoadIdentityDeformationMapSGIX = (PFNGLLOADIDENTITYDEFORMATIONMAPSGIXPROC)proc((const GLubyte*)"glLoadIdentityDeformationMapSGIX")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_SGIX_polynomial_ffd = false;
/* GL_SGIX_reference_plane */
PFNGLREFERENCEPLANESGIXPROC __glReferencePlaneSGIX = nullptr; void APIENTRY glReferencePlaneSGIX (const GLdouble *equation) { if (__glReferencePlaneSGIX != 0) (__glReferencePlaneSGIX)(equation);  }
bool __loadGL_SGIX_reference_plane(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glReferencePlaneSGIX = (PFNGLREFERENCEPLANESGIXPROC)proc((const GLubyte*)"glReferencePlaneSGIX")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_SGIX_reference_plane = false;
/* GL_SGIX_resample */
bool __loadGL_SGIX_resample(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_SGIX_resample = false;
/* GL_SGIX_scalebias_hint */
bool __loadGL_SGIX_scalebias_hint(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_SGIX_scalebias_hint = false;
/* GL_SGIX_shadow */
bool __loadGL_SGIX_shadow(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_SGIX_shadow = false;
/* GL_SGIX_shadow_ambient */
bool __loadGL_SGIX_shadow_ambient(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_SGIX_shadow_ambient = false;
/* GL_SGIX_sprite */
PFNGLSPRITEPARAMETERFSGIXPROC __glSpriteParameterfSGIX = nullptr; void APIENTRY glSpriteParameterfSGIX (GLenum pname, GLfloat param) { if (__glSpriteParameterfSGIX != 0) (__glSpriteParameterfSGIX)(pname, param);  }
PFNGLSPRITEPARAMETERFVSGIXPROC __glSpriteParameterfvSGIX = nullptr; void APIENTRY glSpriteParameterfvSGIX (GLenum pname, const GLfloat *params) { if (__glSpriteParameterfvSGIX != 0) (__glSpriteParameterfvSGIX)(pname, params);  }
PFNGLSPRITEPARAMETERISGIXPROC __glSpriteParameteriSGIX = nullptr; void APIENTRY glSpriteParameteriSGIX (GLenum pname, GLint param) { if (__glSpriteParameteriSGIX != 0) (__glSpriteParameteriSGIX)(pname, param);  }
PFNGLSPRITEPARAMETERIVSGIXPROC __glSpriteParameterivSGIX = nullptr; void APIENTRY glSpriteParameterivSGIX (GLenum pname, const GLint *params) { if (__glSpriteParameterivSGIX != 0) (__glSpriteParameterivSGIX)(pname, params);  }
bool __loadGL_SGIX_sprite(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glSpriteParameterfSGIX = (PFNGLSPRITEPARAMETERFSGIXPROC)proc((const GLubyte*)"glSpriteParameterfSGIX")) != nullptr) || r;
    r = ((__glSpriteParameterfvSGIX = (PFNGLSPRITEPARAMETERFVSGIXPROC)proc((const GLubyte*)"glSpriteParameterfvSGIX")) != nullptr) || r;
    r = ((__glSpriteParameteriSGIX = (PFNGLSPRITEPARAMETERISGIXPROC)proc((const GLubyte*)"glSpriteParameteriSGIX")) != nullptr) || r;
    r = ((__glSpriteParameterivSGIX = (PFNGLSPRITEPARAMETERIVSGIXPROC)proc((const GLubyte*)"glSpriteParameterivSGIX")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_SGIX_sprite = false;
/* GL_SGIX_subsample */
bool __loadGL_SGIX_subsample(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_SGIX_subsample = false;
/* GL_SGIX_tag_sample_buffer */
PFNGLTAGSAMPLEBUFFERSGIXPROC __glTagSampleBufferSGIX = nullptr; void APIENTRY glTagSampleBufferSGIX () { if (__glTagSampleBufferSGIX != 0) (__glTagSampleBufferSGIX)();  }
bool __loadGL_SGIX_tag_sample_buffer(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glTagSampleBufferSGIX = (PFNGLTAGSAMPLEBUFFERSGIXPROC)proc((const GLubyte*)"glTagSampleBufferSGIX")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_SGIX_tag_sample_buffer = false;
/* GL_SGIX_texture_add_env */
bool __loadGL_SGIX_texture_add_env(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_SGIX_texture_add_env = false;
/* GL_SGIX_texture_coordinate_clamp */
bool __loadGL_SGIX_texture_coordinate_clamp(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_SGIX_texture_coordinate_clamp = false;
/* GL_SGIX_texture_lod_bias */
bool __loadGL_SGIX_texture_lod_bias(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_SGIX_texture_lod_bias = false;
/* GL_SGIX_texture_multi_buffer */
bool __loadGL_SGIX_texture_multi_buffer(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_SGIX_texture_multi_buffer = false;
/* GL_SGIX_texture_scale_bias */
bool __loadGL_SGIX_texture_scale_bias(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_SGIX_texture_scale_bias = false;
/* GL_SGIX_vertex_preclip */
bool __loadGL_SGIX_vertex_preclip(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_SGIX_vertex_preclip = false;
/* GL_SGIX_ycrcb */
bool __loadGL_SGIX_ycrcb(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_SGIX_ycrcb = false;
/* GL_SGIX_ycrcb_subsample */
bool __loadGL_SGIX_ycrcb_subsample(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_SGIX_ycrcb_subsample = false;
/* GL_SGIX_ycrcba */
bool __loadGL_SGIX_ycrcba(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_SGIX_ycrcba = false;
/* GL_SGI_color_matrix */
bool __loadGL_SGI_color_matrix(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_SGI_color_matrix = false;
/* GL_SGI_color_table */
PFNGLCOLORTABLEPARAMETERFVSGIPROC __glColorTableParameterfvSGI = nullptr; void APIENTRY glColorTableParameterfvSGI (GLenum target, GLenum pname, const GLfloat *params) { if (__glColorTableParameterfvSGI != 0) (__glColorTableParameterfvSGI)(target, pname, params);  }
PFNGLCOLORTABLEPARAMETERIVSGIPROC __glColorTableParameterivSGI = nullptr; void APIENTRY glColorTableParameterivSGI (GLenum target, GLenum pname, const GLint *params) { if (__glColorTableParameterivSGI != 0) (__glColorTableParameterivSGI)(target, pname, params);  }
PFNGLCOLORTABLESGIPROC __glColorTableSGI = nullptr; void APIENTRY glColorTableSGI (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *table) { if (__glColorTableSGI != 0) (__glColorTableSGI)(target, internalformat, width, format, type, table);  }
PFNGLCOPYCOLORTABLESGIPROC __glCopyColorTableSGI = nullptr; void APIENTRY glCopyColorTableSGI (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width) { if (__glCopyColorTableSGI != 0) (__glCopyColorTableSGI)(target, internalformat, x, y, width);  }
PFNGLGETCOLORTABLEPARAMETERFVSGIPROC __glGetColorTableParameterfvSGI = nullptr; void APIENTRY glGetColorTableParameterfvSGI (GLenum target, GLenum pname, GLfloat *params) { if (__glGetColorTableParameterfvSGI != 0) (__glGetColorTableParameterfvSGI)(target, pname, params);  }
PFNGLGETCOLORTABLEPARAMETERIVSGIPROC __glGetColorTableParameterivSGI = nullptr; void APIENTRY glGetColorTableParameterivSGI (GLenum target, GLenum pname, GLint *params) { if (__glGetColorTableParameterivSGI != 0) (__glGetColorTableParameterivSGI)(target, pname, params);  }
PFNGLGETCOLORTABLESGIPROC __glGetColorTableSGI = nullptr; void APIENTRY glGetColorTableSGI (GLenum target, GLenum format, GLenum type, void *table) { if (__glGetColorTableSGI != 0) (__glGetColorTableSGI)(target, format, type, table);  }
bool __loadGL_SGI_color_table(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glColorTableParameterfvSGI = (PFNGLCOLORTABLEPARAMETERFVSGIPROC)proc((const GLubyte*)"glColorTableParameterfvSGI")) != nullptr) || r;
    r = ((__glColorTableParameterivSGI = (PFNGLCOLORTABLEPARAMETERIVSGIPROC)proc((const GLubyte*)"glColorTableParameterivSGI")) != nullptr) || r;
    r = ((__glColorTableSGI = (PFNGLCOLORTABLESGIPROC)proc((const GLubyte*)"glColorTableSGI")) != nullptr) || r;
    r = ((__glCopyColorTableSGI = (PFNGLCOPYCOLORTABLESGIPROC)proc((const GLubyte*)"glCopyColorTableSGI")) != nullptr) || r;
    r = ((__glGetColorTableParameterfvSGI = (PFNGLGETCOLORTABLEPARAMETERFVSGIPROC)proc((const GLubyte*)"glGetColorTableParameterfvSGI")) != nullptr) || r;
    r = ((__glGetColorTableParameterivSGI = (PFNGLGETCOLORTABLEPARAMETERIVSGIPROC)proc((const GLubyte*)"glGetColorTableParameterivSGI")) != nullptr) || r;
    r = ((__glGetColorTableSGI = (PFNGLGETCOLORTABLESGIPROC)proc((const GLubyte*)"glGetColorTableSGI")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_SGI_color_table = false;
/* GL_SGI_texture_color_table */
bool __loadGL_SGI_texture_color_table(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_SGI_texture_color_table = false;
/* GL_SUNX_constant_data */
PFNGLFINISHTEXTURESUNXPROC __glFinishTextureSUNX = nullptr; void APIENTRY glFinishTextureSUNX () { if (__glFinishTextureSUNX != 0) (__glFinishTextureSUNX)();  }
bool __loadGL_SUNX_constant_data(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glFinishTextureSUNX = (PFNGLFINISHTEXTURESUNXPROC)proc((const GLubyte*)"glFinishTextureSUNX")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_SUNX_constant_data = false;
/* GL_SUN_convolution_border_modes */
bool __loadGL_SUN_convolution_border_modes(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_SUN_convolution_border_modes = false;
/* GL_SUN_global_alpha */
PFNGLGLOBALALPHAFACTORBSUNPROC __glGlobalAlphaFactorbSUN = nullptr; void APIENTRY glGlobalAlphaFactorbSUN (GLbyte factor) { if (__glGlobalAlphaFactorbSUN != 0) (__glGlobalAlphaFactorbSUN)(factor);  }
PFNGLGLOBALALPHAFACTORDSUNPROC __glGlobalAlphaFactordSUN = nullptr; void APIENTRY glGlobalAlphaFactordSUN (GLdouble factor) { if (__glGlobalAlphaFactordSUN != 0) (__glGlobalAlphaFactordSUN)(factor);  }
PFNGLGLOBALALPHAFACTORFSUNPROC __glGlobalAlphaFactorfSUN = nullptr; void APIENTRY glGlobalAlphaFactorfSUN (GLfloat factor) { if (__glGlobalAlphaFactorfSUN != 0) (__glGlobalAlphaFactorfSUN)(factor);  }
PFNGLGLOBALALPHAFACTORISUNPROC __glGlobalAlphaFactoriSUN = nullptr; void APIENTRY glGlobalAlphaFactoriSUN (GLint factor) { if (__glGlobalAlphaFactoriSUN != 0) (__glGlobalAlphaFactoriSUN)(factor);  }
PFNGLGLOBALALPHAFACTORSSUNPROC __glGlobalAlphaFactorsSUN = nullptr; void APIENTRY glGlobalAlphaFactorsSUN (GLshort factor) { if (__glGlobalAlphaFactorsSUN != 0) (__glGlobalAlphaFactorsSUN)(factor);  }
PFNGLGLOBALALPHAFACTORUBSUNPROC __glGlobalAlphaFactorubSUN = nullptr; void APIENTRY glGlobalAlphaFactorubSUN (GLubyte factor) { if (__glGlobalAlphaFactorubSUN != 0) (__glGlobalAlphaFactorubSUN)(factor);  }
PFNGLGLOBALALPHAFACTORUISUNPROC __glGlobalAlphaFactoruiSUN = nullptr; void APIENTRY glGlobalAlphaFactoruiSUN (GLuint factor) { if (__glGlobalAlphaFactoruiSUN != 0) (__glGlobalAlphaFactoruiSUN)(factor);  }
PFNGLGLOBALALPHAFACTORUSSUNPROC __glGlobalAlphaFactorusSUN = nullptr; void APIENTRY glGlobalAlphaFactorusSUN (GLushort factor) { if (__glGlobalAlphaFactorusSUN != 0) (__glGlobalAlphaFactorusSUN)(factor);  }
bool __loadGL_SUN_global_alpha(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glGlobalAlphaFactorbSUN = (PFNGLGLOBALALPHAFACTORBSUNPROC)proc((const GLubyte*)"glGlobalAlphaFactorbSUN")) != nullptr) || r;
    r = ((__glGlobalAlphaFactordSUN = (PFNGLGLOBALALPHAFACTORDSUNPROC)proc((const GLubyte*)"glGlobalAlphaFactordSUN")) != nullptr) || r;
    r = ((__glGlobalAlphaFactorfSUN = (PFNGLGLOBALALPHAFACTORFSUNPROC)proc((const GLubyte*)"glGlobalAlphaFactorfSUN")) != nullptr) || r;
    r = ((__glGlobalAlphaFactoriSUN = (PFNGLGLOBALALPHAFACTORISUNPROC)proc((const GLubyte*)"glGlobalAlphaFactoriSUN")) != nullptr) || r;
    r = ((__glGlobalAlphaFactorsSUN = (PFNGLGLOBALALPHAFACTORSSUNPROC)proc((const GLubyte*)"glGlobalAlphaFactorsSUN")) != nullptr) || r;
    r = ((__glGlobalAlphaFactorubSUN = (PFNGLGLOBALALPHAFACTORUBSUNPROC)proc((const GLubyte*)"glGlobalAlphaFactorubSUN")) != nullptr) || r;
    r = ((__glGlobalAlphaFactoruiSUN = (PFNGLGLOBALALPHAFACTORUISUNPROC)proc((const GLubyte*)"glGlobalAlphaFactoruiSUN")) != nullptr) || r;
    r = ((__glGlobalAlphaFactorusSUN = (PFNGLGLOBALALPHAFACTORUSSUNPROC)proc((const GLubyte*)"glGlobalAlphaFactorusSUN")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_SUN_global_alpha = false;
/* GL_SUN_mesh_array */
PFNGLDRAWMESHARRAYSSUNPROC __glDrawMeshArraysSUN = nullptr; void APIENTRY glDrawMeshArraysSUN (GLenum mode, GLint first, GLsizei count, GLsizei width) { if (__glDrawMeshArraysSUN != 0) (__glDrawMeshArraysSUN)(mode, first, count, width);  }
bool __loadGL_SUN_mesh_array(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glDrawMeshArraysSUN = (PFNGLDRAWMESHARRAYSSUNPROC)proc((const GLubyte*)"glDrawMeshArraysSUN")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_SUN_mesh_array = false;
/* GL_SUN_slice_accum */
bool __loadGL_SUN_slice_accum(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_SUN_slice_accum = false;
/* GL_SUN_triangle_list */
PFNGLREPLACEMENTCODEPOINTERSUNPROC __glReplacementCodePointerSUN = nullptr; void APIENTRY glReplacementCodePointerSUN (GLenum type, GLsizei stride, const void **pointer) { if (__glReplacementCodePointerSUN != 0) (__glReplacementCodePointerSUN)(type, stride, pointer);  }
PFNGLREPLACEMENTCODEUBSUNPROC __glReplacementCodeubSUN = nullptr; void APIENTRY glReplacementCodeubSUN (GLubyte code) { if (__glReplacementCodeubSUN != 0) (__glReplacementCodeubSUN)(code);  }
PFNGLREPLACEMENTCODEUBVSUNPROC __glReplacementCodeubvSUN = nullptr; void APIENTRY glReplacementCodeubvSUN (const GLubyte *code) { if (__glReplacementCodeubvSUN != 0) (__glReplacementCodeubvSUN)(code);  }
PFNGLREPLACEMENTCODEUISUNPROC __glReplacementCodeuiSUN = nullptr; void APIENTRY glReplacementCodeuiSUN (GLuint code) { if (__glReplacementCodeuiSUN != 0) (__glReplacementCodeuiSUN)(code);  }
PFNGLREPLACEMENTCODEUIVSUNPROC __glReplacementCodeuivSUN = nullptr; void APIENTRY glReplacementCodeuivSUN (const GLuint *code) { if (__glReplacementCodeuivSUN != 0) (__glReplacementCodeuivSUN)(code);  }
PFNGLREPLACEMENTCODEUSSUNPROC __glReplacementCodeusSUN = nullptr; void APIENTRY glReplacementCodeusSUN (GLushort code) { if (__glReplacementCodeusSUN != 0) (__glReplacementCodeusSUN)(code);  }
PFNGLREPLACEMENTCODEUSVSUNPROC __glReplacementCodeusvSUN = nullptr; void APIENTRY glReplacementCodeusvSUN (const GLushort *code) { if (__glReplacementCodeusvSUN != 0) (__glReplacementCodeusvSUN)(code);  }
bool __loadGL_SUN_triangle_list(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glReplacementCodePointerSUN = (PFNGLREPLACEMENTCODEPOINTERSUNPROC)proc((const GLubyte*)"glReplacementCodePointerSUN")) != nullptr) || r;
    r = ((__glReplacementCodeubSUN = (PFNGLREPLACEMENTCODEUBSUNPROC)proc((const GLubyte*)"glReplacementCodeubSUN")) != nullptr) || r;
    r = ((__glReplacementCodeubvSUN = (PFNGLREPLACEMENTCODEUBVSUNPROC)proc((const GLubyte*)"glReplacementCodeubvSUN")) != nullptr) || r;
    r = ((__glReplacementCodeuiSUN = (PFNGLREPLACEMENTCODEUISUNPROC)proc((const GLubyte*)"glReplacementCodeuiSUN")) != nullptr) || r;
    r = ((__glReplacementCodeuivSUN = (PFNGLREPLACEMENTCODEUIVSUNPROC)proc((const GLubyte*)"glReplacementCodeuivSUN")) != nullptr) || r;
    r = ((__glReplacementCodeusSUN = (PFNGLREPLACEMENTCODEUSSUNPROC)proc((const GLubyte*)"glReplacementCodeusSUN")) != nullptr) || r;
    r = ((__glReplacementCodeusvSUN = (PFNGLREPLACEMENTCODEUSVSUNPROC)proc((const GLubyte*)"glReplacementCodeusvSUN")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_SUN_triangle_list = false;
/* GL_SUN_vertex */
PFNGLCOLOR3FVERTEX3FSUNPROC __glColor3fVertex3fSUN = nullptr; void APIENTRY glColor3fVertex3fSUN (GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z) { if (__glColor3fVertex3fSUN != 0) (__glColor3fVertex3fSUN)(r, g, b, x, y, z);  }
PFNGLCOLOR3FVERTEX3FVSUNPROC __glColor3fVertex3fvSUN = nullptr; void APIENTRY glColor3fVertex3fvSUN (const GLfloat *c, const GLfloat *v) { if (__glColor3fVertex3fvSUN != 0) (__glColor3fVertex3fvSUN)(c, v);  }
PFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC __glColor4fNormal3fVertex3fSUN = nullptr; void APIENTRY glColor4fNormal3fVertex3fSUN (GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) { if (__glColor4fNormal3fVertex3fSUN != 0) (__glColor4fNormal3fVertex3fSUN)(r, g, b, a, nx, ny, nz, x, y, z);  }
PFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC __glColor4fNormal3fVertex3fvSUN = nullptr; void APIENTRY glColor4fNormal3fVertex3fvSUN (const GLfloat *c, const GLfloat *n, const GLfloat *v) { if (__glColor4fNormal3fVertex3fvSUN != 0) (__glColor4fNormal3fVertex3fvSUN)(c, n, v);  }
PFNGLCOLOR4UBVERTEX2FSUNPROC __glColor4ubVertex2fSUN = nullptr; void APIENTRY glColor4ubVertex2fSUN (GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y) { if (__glColor4ubVertex2fSUN != 0) (__glColor4ubVertex2fSUN)(r, g, b, a, x, y);  }
PFNGLCOLOR4UBVERTEX2FVSUNPROC __glColor4ubVertex2fvSUN = nullptr; void APIENTRY glColor4ubVertex2fvSUN (const GLubyte *c, const GLfloat *v) { if (__glColor4ubVertex2fvSUN != 0) (__glColor4ubVertex2fvSUN)(c, v);  }
PFNGLCOLOR4UBVERTEX3FSUNPROC __glColor4ubVertex3fSUN = nullptr; void APIENTRY glColor4ubVertex3fSUN (GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z) { if (__glColor4ubVertex3fSUN != 0) (__glColor4ubVertex3fSUN)(r, g, b, a, x, y, z);  }
PFNGLCOLOR4UBVERTEX3FVSUNPROC __glColor4ubVertex3fvSUN = nullptr; void APIENTRY glColor4ubVertex3fvSUN (const GLubyte *c, const GLfloat *v) { if (__glColor4ubVertex3fvSUN != 0) (__glColor4ubVertex3fvSUN)(c, v);  }
PFNGLNORMAL3FVERTEX3FSUNPROC __glNormal3fVertex3fSUN = nullptr; void APIENTRY glNormal3fVertex3fSUN (GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) { if (__glNormal3fVertex3fSUN != 0) (__glNormal3fVertex3fSUN)(nx, ny, nz, x, y, z);  }
PFNGLNORMAL3FVERTEX3FVSUNPROC __glNormal3fVertex3fvSUN = nullptr; void APIENTRY glNormal3fVertex3fvSUN (const GLfloat *n, const GLfloat *v) { if (__glNormal3fVertex3fvSUN != 0) (__glNormal3fVertex3fvSUN)(n, v);  }
PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC __glReplacementCodeuiColor3fVertex3fSUN = nullptr; void APIENTRY glReplacementCodeuiColor3fVertex3fSUN (GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z) { if (__glReplacementCodeuiColor3fVertex3fSUN != 0) (__glReplacementCodeuiColor3fVertex3fSUN)(rc, r, g, b, x, y, z);  }
PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC __glReplacementCodeuiColor3fVertex3fvSUN = nullptr; void APIENTRY glReplacementCodeuiColor3fVertex3fvSUN (const GLuint *rc, const GLfloat *c, const GLfloat *v) { if (__glReplacementCodeuiColor3fVertex3fvSUN != 0) (__glReplacementCodeuiColor3fVertex3fvSUN)(rc, c, v);  }
PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC __glReplacementCodeuiColor4fNormal3fVertex3fSUN = nullptr; void APIENTRY glReplacementCodeuiColor4fNormal3fVertex3fSUN (GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) { if (__glReplacementCodeuiColor4fNormal3fVertex3fSUN != 0) (__glReplacementCodeuiColor4fNormal3fVertex3fSUN)(rc, r, g, b, a, nx, ny, nz, x, y, z);  }
PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC __glReplacementCodeuiColor4fNormal3fVertex3fvSUN = nullptr; void APIENTRY glReplacementCodeuiColor4fNormal3fVertex3fvSUN (const GLuint *rc, const GLfloat *c, const GLfloat *n, const GLfloat *v) { if (__glReplacementCodeuiColor4fNormal3fVertex3fvSUN != 0) (__glReplacementCodeuiColor4fNormal3fVertex3fvSUN)(rc, c, n, v);  }
PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC __glReplacementCodeuiColor4ubVertex3fSUN = nullptr; void APIENTRY glReplacementCodeuiColor4ubVertex3fSUN (GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z) { if (__glReplacementCodeuiColor4ubVertex3fSUN != 0) (__glReplacementCodeuiColor4ubVertex3fSUN)(rc, r, g, b, a, x, y, z);  }
PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC __glReplacementCodeuiColor4ubVertex3fvSUN = nullptr; void APIENTRY glReplacementCodeuiColor4ubVertex3fvSUN (const GLuint *rc, const GLubyte *c, const GLfloat *v) { if (__glReplacementCodeuiColor4ubVertex3fvSUN != 0) (__glReplacementCodeuiColor4ubVertex3fvSUN)(rc, c, v);  }
PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC __glReplacementCodeuiNormal3fVertex3fSUN = nullptr; void APIENTRY glReplacementCodeuiNormal3fVertex3fSUN (GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) { if (__glReplacementCodeuiNormal3fVertex3fSUN != 0) (__glReplacementCodeuiNormal3fVertex3fSUN)(rc, nx, ny, nz, x, y, z);  }
PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC __glReplacementCodeuiNormal3fVertex3fvSUN = nullptr; void APIENTRY glReplacementCodeuiNormal3fVertex3fvSUN (const GLuint *rc, const GLfloat *n, const GLfloat *v) { if (__glReplacementCodeuiNormal3fVertex3fvSUN != 0) (__glReplacementCodeuiNormal3fVertex3fvSUN)(rc, n, v);  }
PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC __glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN = nullptr; void APIENTRY glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN (GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) { if (__glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN != 0) (__glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN)(rc, s, t, r, g, b, a, nx, ny, nz, x, y, z);  }
PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC __glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN = nullptr; void APIENTRY glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN (const GLuint *rc, const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v) { if (__glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN != 0) (__glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN)(rc, tc, c, n, v);  }
PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC __glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN = nullptr; void APIENTRY glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN (GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) { if (__glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN != 0) (__glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN)(rc, s, t, nx, ny, nz, x, y, z);  }
PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC __glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN = nullptr; void APIENTRY glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN (const GLuint *rc, const GLfloat *tc, const GLfloat *n, const GLfloat *v) { if (__glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN != 0) (__glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN)(rc, tc, n, v);  }
PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC __glReplacementCodeuiTexCoord2fVertex3fSUN = nullptr; void APIENTRY glReplacementCodeuiTexCoord2fVertex3fSUN (GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z) { if (__glReplacementCodeuiTexCoord2fVertex3fSUN != 0) (__glReplacementCodeuiTexCoord2fVertex3fSUN)(rc, s, t, x, y, z);  }
PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC __glReplacementCodeuiTexCoord2fVertex3fvSUN = nullptr; void APIENTRY glReplacementCodeuiTexCoord2fVertex3fvSUN (const GLuint *rc, const GLfloat *tc, const GLfloat *v) { if (__glReplacementCodeuiTexCoord2fVertex3fvSUN != 0) (__glReplacementCodeuiTexCoord2fVertex3fvSUN)(rc, tc, v);  }
PFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC __glReplacementCodeuiVertex3fSUN = nullptr; void APIENTRY glReplacementCodeuiVertex3fSUN (GLuint rc, GLfloat x, GLfloat y, GLfloat z) { if (__glReplacementCodeuiVertex3fSUN != 0) (__glReplacementCodeuiVertex3fSUN)(rc, x, y, z);  }
PFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC __glReplacementCodeuiVertex3fvSUN = nullptr; void APIENTRY glReplacementCodeuiVertex3fvSUN (const GLuint *rc, const GLfloat *v) { if (__glReplacementCodeuiVertex3fvSUN != 0) (__glReplacementCodeuiVertex3fvSUN)(rc, v);  }
PFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC __glTexCoord2fColor3fVertex3fSUN = nullptr; void APIENTRY glTexCoord2fColor3fVertex3fSUN (GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z) { if (__glTexCoord2fColor3fVertex3fSUN != 0) (__glTexCoord2fColor3fVertex3fSUN)(s, t, r, g, b, x, y, z);  }
PFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC __glTexCoord2fColor3fVertex3fvSUN = nullptr; void APIENTRY glTexCoord2fColor3fVertex3fvSUN (const GLfloat *tc, const GLfloat *c, const GLfloat *v) { if (__glTexCoord2fColor3fVertex3fvSUN != 0) (__glTexCoord2fColor3fVertex3fvSUN)(tc, c, v);  }
PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC __glTexCoord2fColor4fNormal3fVertex3fSUN = nullptr; void APIENTRY glTexCoord2fColor4fNormal3fVertex3fSUN (GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) { if (__glTexCoord2fColor4fNormal3fVertex3fSUN != 0) (__glTexCoord2fColor4fNormal3fVertex3fSUN)(s, t, r, g, b, a, nx, ny, nz, x, y, z);  }
PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC __glTexCoord2fColor4fNormal3fVertex3fvSUN = nullptr; void APIENTRY glTexCoord2fColor4fNormal3fVertex3fvSUN (const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v) { if (__glTexCoord2fColor4fNormal3fVertex3fvSUN != 0) (__glTexCoord2fColor4fNormal3fVertex3fvSUN)(tc, c, n, v);  }
PFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC __glTexCoord2fColor4ubVertex3fSUN = nullptr; void APIENTRY glTexCoord2fColor4ubVertex3fSUN (GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z) { if (__glTexCoord2fColor4ubVertex3fSUN != 0) (__glTexCoord2fColor4ubVertex3fSUN)(s, t, r, g, b, a, x, y, z);  }
PFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC __glTexCoord2fColor4ubVertex3fvSUN = nullptr; void APIENTRY glTexCoord2fColor4ubVertex3fvSUN (const GLfloat *tc, const GLubyte *c, const GLfloat *v) { if (__glTexCoord2fColor4ubVertex3fvSUN != 0) (__glTexCoord2fColor4ubVertex3fvSUN)(tc, c, v);  }
PFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC __glTexCoord2fNormal3fVertex3fSUN = nullptr; void APIENTRY glTexCoord2fNormal3fVertex3fSUN (GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) { if (__glTexCoord2fNormal3fVertex3fSUN != 0) (__glTexCoord2fNormal3fVertex3fSUN)(s, t, nx, ny, nz, x, y, z);  }
PFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC __glTexCoord2fNormal3fVertex3fvSUN = nullptr; void APIENTRY glTexCoord2fNormal3fVertex3fvSUN (const GLfloat *tc, const GLfloat *n, const GLfloat *v) { if (__glTexCoord2fNormal3fVertex3fvSUN != 0) (__glTexCoord2fNormal3fVertex3fvSUN)(tc, n, v);  }
PFNGLTEXCOORD2FVERTEX3FSUNPROC __glTexCoord2fVertex3fSUN = nullptr; void APIENTRY glTexCoord2fVertex3fSUN (GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z) { if (__glTexCoord2fVertex3fSUN != 0) (__glTexCoord2fVertex3fSUN)(s, t, x, y, z);  }
PFNGLTEXCOORD2FVERTEX3FVSUNPROC __glTexCoord2fVertex3fvSUN = nullptr; void APIENTRY glTexCoord2fVertex3fvSUN (const GLfloat *tc, const GLfloat *v) { if (__glTexCoord2fVertex3fvSUN != 0) (__glTexCoord2fVertex3fvSUN)(tc, v);  }
PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC __glTexCoord4fColor4fNormal3fVertex4fSUN = nullptr; void APIENTRY glTexCoord4fColor4fNormal3fVertex4fSUN (GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w) { if (__glTexCoord4fColor4fNormal3fVertex4fSUN != 0) (__glTexCoord4fColor4fNormal3fVertex4fSUN)(s, t, p, q, r, g, b, a, nx, ny, nz, x, y, z, w);  }
PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC __glTexCoord4fColor4fNormal3fVertex4fvSUN = nullptr; void APIENTRY glTexCoord4fColor4fNormal3fVertex4fvSUN (const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v) { if (__glTexCoord4fColor4fNormal3fVertex4fvSUN != 0) (__glTexCoord4fColor4fNormal3fVertex4fvSUN)(tc, c, n, v);  }
PFNGLTEXCOORD4FVERTEX4FSUNPROC __glTexCoord4fVertex4fSUN = nullptr; void APIENTRY glTexCoord4fVertex4fSUN (GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w) { if (__glTexCoord4fVertex4fSUN != 0) (__glTexCoord4fVertex4fSUN)(s, t, p, q, x, y, z, w);  }
PFNGLTEXCOORD4FVERTEX4FVSUNPROC __glTexCoord4fVertex4fvSUN = nullptr; void APIENTRY glTexCoord4fVertex4fvSUN (const GLfloat *tc, const GLfloat *v) { if (__glTexCoord4fVertex4fvSUN != 0) (__glTexCoord4fVertex4fvSUN)(tc, v);  }
bool __loadGL_SUN_vertex(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__glColor3fVertex3fSUN = (PFNGLCOLOR3FVERTEX3FSUNPROC)proc((const GLubyte*)"glColor3fVertex3fSUN")) != nullptr) || r;
    r = ((__glColor3fVertex3fvSUN = (PFNGLCOLOR3FVERTEX3FVSUNPROC)proc((const GLubyte*)"glColor3fVertex3fvSUN")) != nullptr) || r;
    r = ((__glColor4fNormal3fVertex3fSUN = (PFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC)proc((const GLubyte*)"glColor4fNormal3fVertex3fSUN")) != nullptr) || r;
    r = ((__glColor4fNormal3fVertex3fvSUN = (PFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC)proc((const GLubyte*)"glColor4fNormal3fVertex3fvSUN")) != nullptr) || r;
    r = ((__glColor4ubVertex2fSUN = (PFNGLCOLOR4UBVERTEX2FSUNPROC)proc((const GLubyte*)"glColor4ubVertex2fSUN")) != nullptr) || r;
    r = ((__glColor4ubVertex2fvSUN = (PFNGLCOLOR4UBVERTEX2FVSUNPROC)proc((const GLubyte*)"glColor4ubVertex2fvSUN")) != nullptr) || r;
    r = ((__glColor4ubVertex3fSUN = (PFNGLCOLOR4UBVERTEX3FSUNPROC)proc((const GLubyte*)"glColor4ubVertex3fSUN")) != nullptr) || r;
    r = ((__glColor4ubVertex3fvSUN = (PFNGLCOLOR4UBVERTEX3FVSUNPROC)proc((const GLubyte*)"glColor4ubVertex3fvSUN")) != nullptr) || r;
    r = ((__glNormal3fVertex3fSUN = (PFNGLNORMAL3FVERTEX3FSUNPROC)proc((const GLubyte*)"glNormal3fVertex3fSUN")) != nullptr) || r;
    r = ((__glNormal3fVertex3fvSUN = (PFNGLNORMAL3FVERTEX3FVSUNPROC)proc((const GLubyte*)"glNormal3fVertex3fvSUN")) != nullptr) || r;
    r = ((__glReplacementCodeuiColor3fVertex3fSUN = (PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC)proc((const GLubyte*)"glReplacementCodeuiColor3fVertex3fSUN")) != nullptr) || r;
    r = ((__glReplacementCodeuiColor3fVertex3fvSUN = (PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC)proc((const GLubyte*)"glReplacementCodeuiColor3fVertex3fvSUN")) != nullptr) || r;
    r = ((__glReplacementCodeuiColor4fNormal3fVertex3fSUN = (PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC)proc((const GLubyte*)"glReplacementCodeuiColor4fNormal3fVertex3fSUN")) != nullptr) || r;
    r = ((__glReplacementCodeuiColor4fNormal3fVertex3fvSUN = (PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC)proc((const GLubyte*)"glReplacementCodeuiColor4fNormal3fVertex3fvSUN")) != nullptr) || r;
    r = ((__glReplacementCodeuiColor4ubVertex3fSUN = (PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC)proc((const GLubyte*)"glReplacementCodeuiColor4ubVertex3fSUN")) != nullptr) || r;
    r = ((__glReplacementCodeuiColor4ubVertex3fvSUN = (PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC)proc((const GLubyte*)"glReplacementCodeuiColor4ubVertex3fvSUN")) != nullptr) || r;
    r = ((__glReplacementCodeuiNormal3fVertex3fSUN = (PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC)proc((const GLubyte*)"glReplacementCodeuiNormal3fVertex3fSUN")) != nullptr) || r;
    r = ((__glReplacementCodeuiNormal3fVertex3fvSUN = (PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC)proc((const GLubyte*)"glReplacementCodeuiNormal3fVertex3fvSUN")) != nullptr) || r;
    r = ((__glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN = (PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC)proc((const GLubyte*)"glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN")) != nullptr) || r;
    r = ((__glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN = (PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC)proc((const GLubyte*)"glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN")) != nullptr) || r;
    r = ((__glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN = (PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC)proc((const GLubyte*)"glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN")) != nullptr) || r;
    r = ((__glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN = (PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC)proc((const GLubyte*)"glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN")) != nullptr) || r;
    r = ((__glReplacementCodeuiTexCoord2fVertex3fSUN = (PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC)proc((const GLubyte*)"glReplacementCodeuiTexCoord2fVertex3fSUN")) != nullptr) || r;
    r = ((__glReplacementCodeuiTexCoord2fVertex3fvSUN = (PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC)proc((const GLubyte*)"glReplacementCodeuiTexCoord2fVertex3fvSUN")) != nullptr) || r;
    r = ((__glReplacementCodeuiVertex3fSUN = (PFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC)proc((const GLubyte*)"glReplacementCodeuiVertex3fSUN")) != nullptr) || r;
    r = ((__glReplacementCodeuiVertex3fvSUN = (PFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC)proc((const GLubyte*)"glReplacementCodeuiVertex3fvSUN")) != nullptr) || r;
    r = ((__glTexCoord2fColor3fVertex3fSUN = (PFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC)proc((const GLubyte*)"glTexCoord2fColor3fVertex3fSUN")) != nullptr) || r;
    r = ((__glTexCoord2fColor3fVertex3fvSUN = (PFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC)proc((const GLubyte*)"glTexCoord2fColor3fVertex3fvSUN")) != nullptr) || r;
    r = ((__glTexCoord2fColor4fNormal3fVertex3fSUN = (PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC)proc((const GLubyte*)"glTexCoord2fColor4fNormal3fVertex3fSUN")) != nullptr) || r;
    r = ((__glTexCoord2fColor4fNormal3fVertex3fvSUN = (PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC)proc((const GLubyte*)"glTexCoord2fColor4fNormal3fVertex3fvSUN")) != nullptr) || r;
    r = ((__glTexCoord2fColor4ubVertex3fSUN = (PFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC)proc((const GLubyte*)"glTexCoord2fColor4ubVertex3fSUN")) != nullptr) || r;
    r = ((__glTexCoord2fColor4ubVertex3fvSUN = (PFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC)proc((const GLubyte*)"glTexCoord2fColor4ubVertex3fvSUN")) != nullptr) || r;
    r = ((__glTexCoord2fNormal3fVertex3fSUN = (PFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC)proc((const GLubyte*)"glTexCoord2fNormal3fVertex3fSUN")) != nullptr) || r;
    r = ((__glTexCoord2fNormal3fVertex3fvSUN = (PFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC)proc((const GLubyte*)"glTexCoord2fNormal3fVertex3fvSUN")) != nullptr) || r;
    r = ((__glTexCoord2fVertex3fSUN = (PFNGLTEXCOORD2FVERTEX3FSUNPROC)proc((const GLubyte*)"glTexCoord2fVertex3fSUN")) != nullptr) || r;
    r = ((__glTexCoord2fVertex3fvSUN = (PFNGLTEXCOORD2FVERTEX3FVSUNPROC)proc((const GLubyte*)"glTexCoord2fVertex3fvSUN")) != nullptr) || r;
    r = ((__glTexCoord4fColor4fNormal3fVertex4fSUN = (PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC)proc((const GLubyte*)"glTexCoord4fColor4fNormal3fVertex4fSUN")) != nullptr) || r;
    r = ((__glTexCoord4fColor4fNormal3fVertex4fvSUN = (PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC)proc((const GLubyte*)"glTexCoord4fColor4fNormal3fVertex4fvSUN")) != nullptr) || r;
    r = ((__glTexCoord4fVertex4fSUN = (PFNGLTEXCOORD4FVERTEX4FSUNPROC)proc((const GLubyte*)"glTexCoord4fVertex4fSUN")) != nullptr) || r;
    r = ((__glTexCoord4fVertex4fvSUN = (PFNGLTEXCOORD4FVERTEX4FVSUNPROC)proc((const GLubyte*)"glTexCoord4fVertex4fvSUN")) != nullptr) || r;
    return r;
}
static bool __isLoadedGL_SUN_vertex = false;
/* GL_WIN_phong_shading */
bool __loadGL_WIN_phong_shading(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_WIN_phong_shading = false;
/* GL_WIN_specular_fog */
bool __loadGL_WIN_specular_fog(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedGL_WIN_specular_fog = false;
#ifdef _WIN32
/* WGL_ARB_buffer_region */
PFNWGLCREATEBUFFERREGIONARBPROC __wglCreateBufferRegionARB = nullptr; HANDLE WINAPI wglCreateBufferRegionARB (HDC hDC, int iLayerPlane, UINT uType) { if (__wglCreateBufferRegionARB != 0) return (__wglCreateBufferRegionARB)(hDC, iLayerPlane, uType); return 0; }
PFNWGLDELETEBUFFERREGIONARBPROC __wglDeleteBufferRegionARB = nullptr; VOID WINAPI wglDeleteBufferRegionARB (HANDLE hRegion) { if (__wglDeleteBufferRegionARB != 0) (__wglDeleteBufferRegionARB)(hRegion);  }
PFNWGLRESTOREBUFFERREGIONARBPROC __wglRestoreBufferRegionARB = nullptr; BOOL WINAPI wglRestoreBufferRegionARB (HANDLE hRegion, int x, int y, int width, int height, int xSrc, int ySrc) { if (__wglRestoreBufferRegionARB != 0) return (__wglRestoreBufferRegionARB)(hRegion, x, y, width, height, xSrc, ySrc); return 0; }
PFNWGLSAVEBUFFERREGIONARBPROC __wglSaveBufferRegionARB = nullptr; BOOL WINAPI wglSaveBufferRegionARB (HANDLE hRegion, int x, int y, int width, int height) { if (__wglSaveBufferRegionARB != 0) return (__wglSaveBufferRegionARB)(hRegion, x, y, width, height); return 0; }
bool __loadWGL_ARB_buffer_region(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__wglCreateBufferRegionARB = (PFNWGLCREATEBUFFERREGIONARBPROC)proc((const GLubyte*)"wglCreateBufferRegionARB")) != nullptr) || r;
    r = ((__wglDeleteBufferRegionARB = (PFNWGLDELETEBUFFERREGIONARBPROC)proc((const GLubyte*)"wglDeleteBufferRegionARB")) != nullptr) || r;
    r = ((__wglRestoreBufferRegionARB = (PFNWGLRESTOREBUFFERREGIONARBPROC)proc((const GLubyte*)"wglRestoreBufferRegionARB")) != nullptr) || r;
    r = ((__wglSaveBufferRegionARB = (PFNWGLSAVEBUFFERREGIONARBPROC)proc((const GLubyte*)"wglSaveBufferRegionARB")) != nullptr) || r;
    return r;
}
static bool __isLoadedWGL_ARB_buffer_region = false;
#endif

#ifdef _WIN32
/* WGL_ARB_context_flush_control */
bool __loadWGL_ARB_context_flush_control(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedWGL_ARB_context_flush_control = false;
#endif

#ifdef _WIN32
/* WGL_ARB_create_context */
PFNWGLCREATECONTEXTATTRIBSARBPROC __wglCreateContextAttribsARB = nullptr; HGLRC WINAPI wglCreateContextAttribsARB (HDC hDC, HGLRC hShareContext, const int *attribList) { if (__wglCreateContextAttribsARB != 0) return (__wglCreateContextAttribsARB)(hDC, hShareContext, attribList); return 0; }
bool __loadWGL_ARB_create_context(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__wglCreateContextAttribsARB = (PFNWGLCREATECONTEXTATTRIBSARBPROC)proc((const GLubyte*)"wglCreateContextAttribsARB")) != nullptr) || r;
    return r;
}
static bool __isLoadedWGL_ARB_create_context = false;
#endif

#ifdef _WIN32
/* WGL_ARB_create_context_profile */
bool __loadWGL_ARB_create_context_profile(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedWGL_ARB_create_context_profile = false;
#endif

#ifdef _WIN32
/* WGL_ARB_create_context_robustness */
bool __loadWGL_ARB_create_context_robustness(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedWGL_ARB_create_context_robustness = false;
#endif

#ifdef _WIN32
/* WGL_ARB_extensions_string */
PFNWGLGETEXTENSIONSSTRINGARBPROC __wglGetExtensionsStringARB = nullptr; const char *WINAPI wglGetExtensionsStringARB (HDC hdc) { if (__wglGetExtensionsStringARB != 0) return (__wglGetExtensionsStringARB)(hdc); return 0; }
bool __loadWGL_ARB_extensions_string(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__wglGetExtensionsStringARB = (PFNWGLGETEXTENSIONSSTRINGARBPROC)proc((const GLubyte*)"wglGetExtensionsStringARB")) != nullptr) || r;
    return r;
}
static bool __isLoadedWGL_ARB_extensions_string = false;
#endif

#ifdef _WIN32
/* WGL_ARB_framebuffer_sRGB */
bool __loadWGL_ARB_framebuffer_sRGB(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedWGL_ARB_framebuffer_sRGB = false;
#endif

#ifdef _WIN32
/* WGL_ARB_make_current_read */
PFNWGLGETCURRENTREADDCARBPROC __wglGetCurrentReadDCARB = nullptr; HDC WINAPI wglGetCurrentReadDCARB () { if (__wglGetCurrentReadDCARB != 0) return (__wglGetCurrentReadDCARB)(); return 0; }
PFNWGLMAKECONTEXTCURRENTARBPROC __wglMakeContextCurrentARB = nullptr; BOOL WINAPI wglMakeContextCurrentARB (HDC hDrawDC, HDC hReadDC, HGLRC hglrc) { if (__wglMakeContextCurrentARB != 0) return (__wglMakeContextCurrentARB)(hDrawDC, hReadDC, hglrc); return 0; }
bool __loadWGL_ARB_make_current_read(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__wglGetCurrentReadDCARB = (PFNWGLGETCURRENTREADDCARBPROC)proc((const GLubyte*)"wglGetCurrentReadDCARB")) != nullptr) || r;
    r = ((__wglMakeContextCurrentARB = (PFNWGLMAKECONTEXTCURRENTARBPROC)proc((const GLubyte*)"wglMakeContextCurrentARB")) != nullptr) || r;
    return r;
}
static bool __isLoadedWGL_ARB_make_current_read = false;
#endif

#ifdef _WIN32
/* WGL_ARB_multisample */
bool __loadWGL_ARB_multisample(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedWGL_ARB_multisample = false;
#endif

#ifdef _WIN32
/* WGL_ARB_pbuffer */
PFNWGLCREATEPBUFFERARBPROC __wglCreatePbufferARB = nullptr; HPBUFFERARB WINAPI wglCreatePbufferARB (HDC hDC, int iPixelFormat, int iWidth, int iHeight, const int *piAttribList) { if (__wglCreatePbufferARB != 0) return (__wglCreatePbufferARB)(hDC, iPixelFormat, iWidth, iHeight, piAttribList); return 0; }
PFNWGLDESTROYPBUFFERARBPROC __wglDestroyPbufferARB = nullptr; BOOL WINAPI wglDestroyPbufferARB (HPBUFFERARB hPbuffer) { if (__wglDestroyPbufferARB != 0) return (__wglDestroyPbufferARB)(hPbuffer); return 0; }
PFNWGLGETPBUFFERDCARBPROC __wglGetPbufferDCARB = nullptr; HDC WINAPI wglGetPbufferDCARB (HPBUFFERARB hPbuffer) { if (__wglGetPbufferDCARB != 0) return (__wglGetPbufferDCARB)(hPbuffer); return 0; }
PFNWGLQUERYPBUFFERARBPROC __wglQueryPbufferARB = nullptr; BOOL WINAPI wglQueryPbufferARB (HPBUFFERARB hPbuffer, int iAttribute, int *piValue) { if (__wglQueryPbufferARB != 0) return (__wglQueryPbufferARB)(hPbuffer, iAttribute, piValue); return 0; }
PFNWGLRELEASEPBUFFERDCARBPROC __wglReleasePbufferDCARB = nullptr; int WINAPI wglReleasePbufferDCARB (HPBUFFERARB hPbuffer, HDC hDC) { if (__wglReleasePbufferDCARB != 0) return (__wglReleasePbufferDCARB)(hPbuffer, hDC); return 0; }
bool __loadWGL_ARB_pbuffer(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__wglCreatePbufferARB = (PFNWGLCREATEPBUFFERARBPROC)proc((const GLubyte*)"wglCreatePbufferARB")) != nullptr) || r;
    r = ((__wglDestroyPbufferARB = (PFNWGLDESTROYPBUFFERARBPROC)proc((const GLubyte*)"wglDestroyPbufferARB")) != nullptr) || r;
    r = ((__wglGetPbufferDCARB = (PFNWGLGETPBUFFERDCARBPROC)proc((const GLubyte*)"wglGetPbufferDCARB")) != nullptr) || r;
    r = ((__wglQueryPbufferARB = (PFNWGLQUERYPBUFFERARBPROC)proc((const GLubyte*)"wglQueryPbufferARB")) != nullptr) || r;
    r = ((__wglReleasePbufferDCARB = (PFNWGLRELEASEPBUFFERDCARBPROC)proc((const GLubyte*)"wglReleasePbufferDCARB")) != nullptr) || r;
    return r;
}
static bool __isLoadedWGL_ARB_pbuffer = false;
#endif

#ifdef _WIN32
/* WGL_ARB_pixel_format */
PFNWGLCHOOSEPIXELFORMATARBPROC __wglChoosePixelFormatARB = nullptr; BOOL WINAPI wglChoosePixelFormatARB (HDC hdc, const int *piAttribIList, const FLOAT *pfAttribFList, UINT nMaxFormats, int *piFormats, UINT *nNumFormats) { if (__wglChoosePixelFormatARB != 0) return (__wglChoosePixelFormatARB)(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats); return 0; }
PFNWGLGETPIXELFORMATATTRIBFVARBPROC __wglGetPixelFormatAttribfvARB = nullptr; BOOL WINAPI wglGetPixelFormatAttribfvARB (HDC hdc, int iPixelFormat, int iLayerPlane, UINT nAttributes, const int *piAttributes, FLOAT *pfValues) { if (__wglGetPixelFormatAttribfvARB != 0) return (__wglGetPixelFormatAttribfvARB)(hdc, iPixelFormat, iLayerPlane, nAttributes, piAttributes, pfValues); return 0; }
PFNWGLGETPIXELFORMATATTRIBIVARBPROC __wglGetPixelFormatAttribivARB = nullptr; BOOL WINAPI wglGetPixelFormatAttribivARB (HDC hdc, int iPixelFormat, int iLayerPlane, UINT nAttributes, const int *piAttributes, int *piValues) { if (__wglGetPixelFormatAttribivARB != 0) return (__wglGetPixelFormatAttribivARB)(hdc, iPixelFormat, iLayerPlane, nAttributes, piAttributes, piValues); return 0; }
bool __loadWGL_ARB_pixel_format(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__wglChoosePixelFormatARB = (PFNWGLCHOOSEPIXELFORMATARBPROC)proc((const GLubyte*)"wglChoosePixelFormatARB")) != nullptr) || r;
    r = ((__wglGetPixelFormatAttribfvARB = (PFNWGLGETPIXELFORMATATTRIBFVARBPROC)proc((const GLubyte*)"wglGetPixelFormatAttribfvARB")) != nullptr) || r;
    r = ((__wglGetPixelFormatAttribivARB = (PFNWGLGETPIXELFORMATATTRIBIVARBPROC)proc((const GLubyte*)"wglGetPixelFormatAttribivARB")) != nullptr) || r;
    return r;
}
static bool __isLoadedWGL_ARB_pixel_format = false;
#endif

#ifdef _WIN32
/* WGL_ARB_pixel_format_float */
bool __loadWGL_ARB_pixel_format_float(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedWGL_ARB_pixel_format_float = false;
#endif

#ifdef _WIN32
/* WGL_ARB_render_texture */
PFNWGLBINDTEXIMAGEARBPROC __wglBindTexImageARB = nullptr; BOOL WINAPI wglBindTexImageARB (HPBUFFERARB hPbuffer, int iBuffer) { if (__wglBindTexImageARB != 0) return (__wglBindTexImageARB)(hPbuffer, iBuffer); return 0; }
PFNWGLRELEASETEXIMAGEARBPROC __wglReleaseTexImageARB = nullptr; BOOL WINAPI wglReleaseTexImageARB (HPBUFFERARB hPbuffer, int iBuffer) { if (__wglReleaseTexImageARB != 0) return (__wglReleaseTexImageARB)(hPbuffer, iBuffer); return 0; }
PFNWGLSETPBUFFERATTRIBARBPROC __wglSetPbufferAttribARB = nullptr; BOOL WINAPI wglSetPbufferAttribARB (HPBUFFERARB hPbuffer, const int *piAttribList) { if (__wglSetPbufferAttribARB != 0) return (__wglSetPbufferAttribARB)(hPbuffer, piAttribList); return 0; }
bool __loadWGL_ARB_render_texture(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__wglBindTexImageARB = (PFNWGLBINDTEXIMAGEARBPROC)proc((const GLubyte*)"wglBindTexImageARB")) != nullptr) || r;
    r = ((__wglReleaseTexImageARB = (PFNWGLRELEASETEXIMAGEARBPROC)proc((const GLubyte*)"wglReleaseTexImageARB")) != nullptr) || r;
    r = ((__wglSetPbufferAttribARB = (PFNWGLSETPBUFFERATTRIBARBPROC)proc((const GLubyte*)"wglSetPbufferAttribARB")) != nullptr) || r;
    return r;
}
static bool __isLoadedWGL_ARB_render_texture = false;
#endif

#ifdef _WIN32
/* WGL_ARB_robustness_application_isolation */
bool __loadWGL_ARB_robustness_application_isolation(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedWGL_ARB_robustness_application_isolation = false;
#endif

#ifdef _WIN32
/* WGL_ARB_robustness_share_group_isolation */
bool __loadWGL_ARB_robustness_share_group_isolation(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedWGL_ARB_robustness_share_group_isolation = false;
#endif

#ifdef _WIN32
/* WGL_3DFX_multisample */
bool __loadWGL_3DFX_multisample(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedWGL_3DFX_multisample = false;
#endif

#ifdef _WIN32
/* WGL_3DL_stereo_control */
PFNWGLSETSTEREOEMITTERSTATE3DLPROC __wglSetStereoEmitterState3DL = nullptr; BOOL WINAPI wglSetStereoEmitterState3DL (HDC hDC, UINT uState) { if (__wglSetStereoEmitterState3DL != 0) return (__wglSetStereoEmitterState3DL)(hDC, uState); return 0; }
bool __loadWGL_3DL_stereo_control(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__wglSetStereoEmitterState3DL = (PFNWGLSETSTEREOEMITTERSTATE3DLPROC)proc((const GLubyte*)"wglSetStereoEmitterState3DL")) != nullptr) || r;
    return r;
}
static bool __isLoadedWGL_3DL_stereo_control = false;
#endif

#ifdef _WIN32
/* WGL_AMD_gpu_association */
PFNWGLBLITCONTEXTFRAMEBUFFERAMDPROC __wglBlitContextFramebufferAMD = nullptr; VOID WINAPI wglBlitContextFramebufferAMD (HGLRC dstCtx, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) { if (__wglBlitContextFramebufferAMD != 0) (__wglBlitContextFramebufferAMD)(dstCtx, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);  }
PFNWGLCREATEASSOCIATEDCONTEXTAMDPROC __wglCreateAssociatedContextAMD = nullptr; HGLRC WINAPI wglCreateAssociatedContextAMD (UINT id) { if (__wglCreateAssociatedContextAMD != 0) return (__wglCreateAssociatedContextAMD)(id); return 0; }
PFNWGLCREATEASSOCIATEDCONTEXTATTRIBSAMDPROC __wglCreateAssociatedContextAttribsAMD = nullptr; HGLRC WINAPI wglCreateAssociatedContextAttribsAMD (UINT id, HGLRC hShareContext, const int *attribList) { if (__wglCreateAssociatedContextAttribsAMD != 0) return (__wglCreateAssociatedContextAttribsAMD)(id, hShareContext, attribList); return 0; }
PFNWGLDELETEASSOCIATEDCONTEXTAMDPROC __wglDeleteAssociatedContextAMD = nullptr; BOOL WINAPI wglDeleteAssociatedContextAMD (HGLRC hglrc) { if (__wglDeleteAssociatedContextAMD != 0) return (__wglDeleteAssociatedContextAMD)(hglrc); return 0; }
PFNWGLGETCONTEXTGPUIDAMDPROC __wglGetContextGPUIDAMD = nullptr; UINT WINAPI wglGetContextGPUIDAMD (HGLRC hglrc) { if (__wglGetContextGPUIDAMD != 0) return (__wglGetContextGPUIDAMD)(hglrc); return 0; }
PFNWGLGETCURRENTASSOCIATEDCONTEXTAMDPROC __wglGetCurrentAssociatedContextAMD = nullptr; HGLRC WINAPI wglGetCurrentAssociatedContextAMD () { if (__wglGetCurrentAssociatedContextAMD != 0) return (__wglGetCurrentAssociatedContextAMD)(); return 0; }
PFNWGLGETGPUIDSAMDPROC __wglGetGPUIDsAMD = nullptr; UINT WINAPI wglGetGPUIDsAMD (UINT maxCount, UINT *ids) { if (__wglGetGPUIDsAMD != 0) return (__wglGetGPUIDsAMD)(maxCount, ids); return 0; }
PFNWGLGETGPUINFOAMDPROC __wglGetGPUInfoAMD = nullptr; INT WINAPI wglGetGPUInfoAMD (UINT id, int property, GLenum dataType, UINT size, void *data) { if (__wglGetGPUInfoAMD != 0) return (__wglGetGPUInfoAMD)(id, property, dataType, size, data); return 0; }
PFNWGLMAKEASSOCIATEDCONTEXTCURRENTAMDPROC __wglMakeAssociatedContextCurrentAMD = nullptr; BOOL WINAPI wglMakeAssociatedContextCurrentAMD (HGLRC hglrc) { if (__wglMakeAssociatedContextCurrentAMD != 0) return (__wglMakeAssociatedContextCurrentAMD)(hglrc); return 0; }
bool __loadWGL_AMD_gpu_association(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__wglBlitContextFramebufferAMD = (PFNWGLBLITCONTEXTFRAMEBUFFERAMDPROC)proc((const GLubyte*)"wglBlitContextFramebufferAMD")) != nullptr) || r;
    r = ((__wglCreateAssociatedContextAMD = (PFNWGLCREATEASSOCIATEDCONTEXTAMDPROC)proc((const GLubyte*)"wglCreateAssociatedContextAMD")) != nullptr) || r;
    r = ((__wglCreateAssociatedContextAttribsAMD = (PFNWGLCREATEASSOCIATEDCONTEXTATTRIBSAMDPROC)proc((const GLubyte*)"wglCreateAssociatedContextAttribsAMD")) != nullptr) || r;
    r = ((__wglDeleteAssociatedContextAMD = (PFNWGLDELETEASSOCIATEDCONTEXTAMDPROC)proc((const GLubyte*)"wglDeleteAssociatedContextAMD")) != nullptr) || r;
    r = ((__wglGetContextGPUIDAMD = (PFNWGLGETCONTEXTGPUIDAMDPROC)proc((const GLubyte*)"wglGetContextGPUIDAMD")) != nullptr) || r;
    r = ((__wglGetCurrentAssociatedContextAMD = (PFNWGLGETCURRENTASSOCIATEDCONTEXTAMDPROC)proc((const GLubyte*)"wglGetCurrentAssociatedContextAMD")) != nullptr) || r;
    r = ((__wglGetGPUIDsAMD = (PFNWGLGETGPUIDSAMDPROC)proc((const GLubyte*)"wglGetGPUIDsAMD")) != nullptr) || r;
    r = ((__wglGetGPUInfoAMD = (PFNWGLGETGPUINFOAMDPROC)proc((const GLubyte*)"wglGetGPUInfoAMD")) != nullptr) || r;
    r = ((__wglMakeAssociatedContextCurrentAMD = (PFNWGLMAKEASSOCIATEDCONTEXTCURRENTAMDPROC)proc((const GLubyte*)"wglMakeAssociatedContextCurrentAMD")) != nullptr) || r;
    return r;
}
static bool __isLoadedWGL_AMD_gpu_association = false;
#endif

#ifdef _WIN32
/* WGL_ATI_pixel_format_float */
bool __loadWGL_ATI_pixel_format_float(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedWGL_ATI_pixel_format_float = false;
#endif

#ifdef _WIN32
/* WGL_EXT_create_context_es2_profile */
bool __loadWGL_EXT_create_context_es2_profile(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedWGL_EXT_create_context_es2_profile = false;
#endif

#ifdef _WIN32
/* WGL_EXT_create_context_es_profile */
bool __loadWGL_EXT_create_context_es_profile(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedWGL_EXT_create_context_es_profile = false;
#endif

#ifdef _WIN32
/* WGL_EXT_depth_float */
bool __loadWGL_EXT_depth_float(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedWGL_EXT_depth_float = false;
#endif

#ifdef _WIN32
/* WGL_EXT_display_color_table */
PFNWGLBINDDISPLAYCOLORTABLEEXTPROC __wglBindDisplayColorTableEXT = nullptr; GLboolean WINAPI wglBindDisplayColorTableEXT (GLushort id) { if (__wglBindDisplayColorTableEXT != 0) return (__wglBindDisplayColorTableEXT)(id); return 0; }
PFNWGLCREATEDISPLAYCOLORTABLEEXTPROC __wglCreateDisplayColorTableEXT = nullptr; GLboolean WINAPI wglCreateDisplayColorTableEXT (GLushort id) { if (__wglCreateDisplayColorTableEXT != 0) return (__wglCreateDisplayColorTableEXT)(id); return 0; }
PFNWGLDESTROYDISPLAYCOLORTABLEEXTPROC __wglDestroyDisplayColorTableEXT = nullptr; VOID WINAPI wglDestroyDisplayColorTableEXT (GLushort id) { if (__wglDestroyDisplayColorTableEXT != 0) (__wglDestroyDisplayColorTableEXT)(id);  }
PFNWGLLOADDISPLAYCOLORTABLEEXTPROC __wglLoadDisplayColorTableEXT = nullptr; GLboolean WINAPI wglLoadDisplayColorTableEXT (const GLushort *table, GLuint length) { if (__wglLoadDisplayColorTableEXT != 0) return (__wglLoadDisplayColorTableEXT)(table, length); return 0; }
bool __loadWGL_EXT_display_color_table(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__wglBindDisplayColorTableEXT = (PFNWGLBINDDISPLAYCOLORTABLEEXTPROC)proc((const GLubyte*)"wglBindDisplayColorTableEXT")) != nullptr) || r;
    r = ((__wglCreateDisplayColorTableEXT = (PFNWGLCREATEDISPLAYCOLORTABLEEXTPROC)proc((const GLubyte*)"wglCreateDisplayColorTableEXT")) != nullptr) || r;
    r = ((__wglDestroyDisplayColorTableEXT = (PFNWGLDESTROYDISPLAYCOLORTABLEEXTPROC)proc((const GLubyte*)"wglDestroyDisplayColorTableEXT")) != nullptr) || r;
    r = ((__wglLoadDisplayColorTableEXT = (PFNWGLLOADDISPLAYCOLORTABLEEXTPROC)proc((const GLubyte*)"wglLoadDisplayColorTableEXT")) != nullptr) || r;
    return r;
}
static bool __isLoadedWGL_EXT_display_color_table = false;
#endif

#ifdef _WIN32
/* WGL_EXT_extensions_string */
PFNWGLGETEXTENSIONSSTRINGEXTPROC __wglGetExtensionsStringEXT = nullptr; const char *WINAPI wglGetExtensionsStringEXT () { if (__wglGetExtensionsStringEXT != 0) return (__wglGetExtensionsStringEXT)(); return 0; }
bool __loadWGL_EXT_extensions_string(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__wglGetExtensionsStringEXT = (PFNWGLGETEXTENSIONSSTRINGEXTPROC)proc((const GLubyte*)"wglGetExtensionsStringEXT")) != nullptr) || r;
    return r;
}
static bool __isLoadedWGL_EXT_extensions_string = false;
#endif

#ifdef _WIN32
/* WGL_EXT_framebuffer_sRGB */
bool __loadWGL_EXT_framebuffer_sRGB(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedWGL_EXT_framebuffer_sRGB = false;
#endif

#ifdef _WIN32
/* WGL_EXT_make_current_read */
PFNWGLGETCURRENTREADDCEXTPROC __wglGetCurrentReadDCEXT = nullptr; HDC WINAPI wglGetCurrentReadDCEXT () { if (__wglGetCurrentReadDCEXT != 0) return (__wglGetCurrentReadDCEXT)(); return 0; }
PFNWGLMAKECONTEXTCURRENTEXTPROC __wglMakeContextCurrentEXT = nullptr; BOOL WINAPI wglMakeContextCurrentEXT (HDC hDrawDC, HDC hReadDC, HGLRC hglrc) { if (__wglMakeContextCurrentEXT != 0) return (__wglMakeContextCurrentEXT)(hDrawDC, hReadDC, hglrc); return 0; }
bool __loadWGL_EXT_make_current_read(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__wglGetCurrentReadDCEXT = (PFNWGLGETCURRENTREADDCEXTPROC)proc((const GLubyte*)"wglGetCurrentReadDCEXT")) != nullptr) || r;
    r = ((__wglMakeContextCurrentEXT = (PFNWGLMAKECONTEXTCURRENTEXTPROC)proc((const GLubyte*)"wglMakeContextCurrentEXT")) != nullptr) || r;
    return r;
}
static bool __isLoadedWGL_EXT_make_current_read = false;
#endif

#ifdef _WIN32
/* WGL_EXT_multisample */
bool __loadWGL_EXT_multisample(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedWGL_EXT_multisample = false;
#endif

#ifdef _WIN32
/* WGL_EXT_pbuffer */
PFNWGLCREATEPBUFFEREXTPROC __wglCreatePbufferEXT = nullptr; HPBUFFEREXT WINAPI wglCreatePbufferEXT (HDC hDC, int iPixelFormat, int iWidth, int iHeight, const int *piAttribList) { if (__wglCreatePbufferEXT != 0) return (__wglCreatePbufferEXT)(hDC, iPixelFormat, iWidth, iHeight, piAttribList); return 0; }
PFNWGLDESTROYPBUFFEREXTPROC __wglDestroyPbufferEXT = nullptr; BOOL WINAPI wglDestroyPbufferEXT (HPBUFFEREXT hPbuffer) { if (__wglDestroyPbufferEXT != 0) return (__wglDestroyPbufferEXT)(hPbuffer); return 0; }
PFNWGLGETPBUFFERDCEXTPROC __wglGetPbufferDCEXT = nullptr; HDC WINAPI wglGetPbufferDCEXT (HPBUFFEREXT hPbuffer) { if (__wglGetPbufferDCEXT != 0) return (__wglGetPbufferDCEXT)(hPbuffer); return 0; }
PFNWGLQUERYPBUFFEREXTPROC __wglQueryPbufferEXT = nullptr; BOOL WINAPI wglQueryPbufferEXT (HPBUFFEREXT hPbuffer, int iAttribute, int *piValue) { if (__wglQueryPbufferEXT != 0) return (__wglQueryPbufferEXT)(hPbuffer, iAttribute, piValue); return 0; }
PFNWGLRELEASEPBUFFERDCEXTPROC __wglReleasePbufferDCEXT = nullptr; int WINAPI wglReleasePbufferDCEXT (HPBUFFEREXT hPbuffer, HDC hDC) { if (__wglReleasePbufferDCEXT != 0) return (__wglReleasePbufferDCEXT)(hPbuffer, hDC); return 0; }
bool __loadWGL_EXT_pbuffer(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__wglCreatePbufferEXT = (PFNWGLCREATEPBUFFEREXTPROC)proc((const GLubyte*)"wglCreatePbufferEXT")) != nullptr) || r;
    r = ((__wglDestroyPbufferEXT = (PFNWGLDESTROYPBUFFEREXTPROC)proc((const GLubyte*)"wglDestroyPbufferEXT")) != nullptr) || r;
    r = ((__wglGetPbufferDCEXT = (PFNWGLGETPBUFFERDCEXTPROC)proc((const GLubyte*)"wglGetPbufferDCEXT")) != nullptr) || r;
    r = ((__wglQueryPbufferEXT = (PFNWGLQUERYPBUFFEREXTPROC)proc((const GLubyte*)"wglQueryPbufferEXT")) != nullptr) || r;
    r = ((__wglReleasePbufferDCEXT = (PFNWGLRELEASEPBUFFERDCEXTPROC)proc((const GLubyte*)"wglReleasePbufferDCEXT")) != nullptr) || r;
    return r;
}
static bool __isLoadedWGL_EXT_pbuffer = false;
#endif

#ifdef _WIN32
/* WGL_EXT_pixel_format */
PFNWGLCHOOSEPIXELFORMATEXTPROC __wglChoosePixelFormatEXT = nullptr; BOOL WINAPI wglChoosePixelFormatEXT (HDC hdc, const int *piAttribIList, const FLOAT *pfAttribFList, UINT nMaxFormats, int *piFormats, UINT *nNumFormats) { if (__wglChoosePixelFormatEXT != 0) return (__wglChoosePixelFormatEXT)(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats); return 0; }
PFNWGLGETPIXELFORMATATTRIBFVEXTPROC __wglGetPixelFormatAttribfvEXT = nullptr; BOOL WINAPI wglGetPixelFormatAttribfvEXT (HDC hdc, int iPixelFormat, int iLayerPlane, UINT nAttributes, int *piAttributes, FLOAT *pfValues) { if (__wglGetPixelFormatAttribfvEXT != 0) return (__wglGetPixelFormatAttribfvEXT)(hdc, iPixelFormat, iLayerPlane, nAttributes, piAttributes, pfValues); return 0; }
PFNWGLGETPIXELFORMATATTRIBIVEXTPROC __wglGetPixelFormatAttribivEXT = nullptr; BOOL WINAPI wglGetPixelFormatAttribivEXT (HDC hdc, int iPixelFormat, int iLayerPlane, UINT nAttributes, int *piAttributes, int *piValues) { if (__wglGetPixelFormatAttribivEXT != 0) return (__wglGetPixelFormatAttribivEXT)(hdc, iPixelFormat, iLayerPlane, nAttributes, piAttributes, piValues); return 0; }
bool __loadWGL_EXT_pixel_format(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__wglChoosePixelFormatEXT = (PFNWGLCHOOSEPIXELFORMATEXTPROC)proc((const GLubyte*)"wglChoosePixelFormatEXT")) != nullptr) || r;
    r = ((__wglGetPixelFormatAttribfvEXT = (PFNWGLGETPIXELFORMATATTRIBFVEXTPROC)proc((const GLubyte*)"wglGetPixelFormatAttribfvEXT")) != nullptr) || r;
    r = ((__wglGetPixelFormatAttribivEXT = (PFNWGLGETPIXELFORMATATTRIBIVEXTPROC)proc((const GLubyte*)"wglGetPixelFormatAttribivEXT")) != nullptr) || r;
    return r;
}
static bool __isLoadedWGL_EXT_pixel_format = false;
#endif

#ifdef _WIN32
/* WGL_EXT_pixel_format_packed_float */
bool __loadWGL_EXT_pixel_format_packed_float(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedWGL_EXT_pixel_format_packed_float = false;
#endif

#ifdef _WIN32
/* WGL_EXT_swap_control */
PFNWGLGETSWAPINTERVALEXTPROC __wglGetSwapIntervalEXT = nullptr; int WINAPI wglGetSwapIntervalEXT () { if (__wglGetSwapIntervalEXT != 0) return (__wglGetSwapIntervalEXT)(); return 0; }
PFNWGLSWAPINTERVALEXTPROC __wglSwapIntervalEXT = nullptr; BOOL WINAPI wglSwapIntervalEXT (int interval) { if (__wglSwapIntervalEXT != 0) return (__wglSwapIntervalEXT)(interval); return 0; }
bool __loadWGL_EXT_swap_control(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__wglGetSwapIntervalEXT = (PFNWGLGETSWAPINTERVALEXTPROC)proc((const GLubyte*)"wglGetSwapIntervalEXT")) != nullptr) || r;
    r = ((__wglSwapIntervalEXT = (PFNWGLSWAPINTERVALEXTPROC)proc((const GLubyte*)"wglSwapIntervalEXT")) != nullptr) || r;
    return r;
}
static bool __isLoadedWGL_EXT_swap_control = false;
#endif

#ifdef _WIN32
/* WGL_EXT_swap_control_tear */
bool __loadWGL_EXT_swap_control_tear(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedWGL_EXT_swap_control_tear = false;
#endif

#ifdef _WIN32
/* WGL_I3D_digital_video_control */
PFNWGLGETDIGITALVIDEOPARAMETERSI3DPROC __wglGetDigitalVideoParametersI3D = nullptr; BOOL WINAPI wglGetDigitalVideoParametersI3D (HDC hDC, int iAttribute, int *piValue) { if (__wglGetDigitalVideoParametersI3D != 0) return (__wglGetDigitalVideoParametersI3D)(hDC, iAttribute, piValue); return 0; }
PFNWGLSETDIGITALVIDEOPARAMETERSI3DPROC __wglSetDigitalVideoParametersI3D = nullptr; BOOL WINAPI wglSetDigitalVideoParametersI3D (HDC hDC, int iAttribute, const int *piValue) { if (__wglSetDigitalVideoParametersI3D != 0) return (__wglSetDigitalVideoParametersI3D)(hDC, iAttribute, piValue); return 0; }
bool __loadWGL_I3D_digital_video_control(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__wglGetDigitalVideoParametersI3D = (PFNWGLGETDIGITALVIDEOPARAMETERSI3DPROC)proc((const GLubyte*)"wglGetDigitalVideoParametersI3D")) != nullptr) || r;
    r = ((__wglSetDigitalVideoParametersI3D = (PFNWGLSETDIGITALVIDEOPARAMETERSI3DPROC)proc((const GLubyte*)"wglSetDigitalVideoParametersI3D")) != nullptr) || r;
    return r;
}
static bool __isLoadedWGL_I3D_digital_video_control = false;
#endif

#ifdef _WIN32
/* WGL_I3D_gamma */
PFNWGLGETGAMMATABLEI3DPROC __wglGetGammaTableI3D = nullptr; BOOL WINAPI wglGetGammaTableI3D (HDC hDC, int iEntries, USHORT *puRed, USHORT *puGreen, USHORT *puBlue) { if (__wglGetGammaTableI3D != 0) return (__wglGetGammaTableI3D)(hDC, iEntries, puRed, puGreen, puBlue); return 0; }
PFNWGLGETGAMMATABLEPARAMETERSI3DPROC __wglGetGammaTableParametersI3D = nullptr; BOOL WINAPI wglGetGammaTableParametersI3D (HDC hDC, int iAttribute, int *piValue) { if (__wglGetGammaTableParametersI3D != 0) return (__wglGetGammaTableParametersI3D)(hDC, iAttribute, piValue); return 0; }
PFNWGLSETGAMMATABLEI3DPROC __wglSetGammaTableI3D = nullptr; BOOL WINAPI wglSetGammaTableI3D (HDC hDC, int iEntries, const USHORT *puRed, const USHORT *puGreen, const USHORT *puBlue) { if (__wglSetGammaTableI3D != 0) return (__wglSetGammaTableI3D)(hDC, iEntries, puRed, puGreen, puBlue); return 0; }
PFNWGLSETGAMMATABLEPARAMETERSI3DPROC __wglSetGammaTableParametersI3D = nullptr; BOOL WINAPI wglSetGammaTableParametersI3D (HDC hDC, int iAttribute, const int *piValue) { if (__wglSetGammaTableParametersI3D != 0) return (__wglSetGammaTableParametersI3D)(hDC, iAttribute, piValue); return 0; }
bool __loadWGL_I3D_gamma(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__wglGetGammaTableI3D = (PFNWGLGETGAMMATABLEI3DPROC)proc((const GLubyte*)"wglGetGammaTableI3D")) != nullptr) || r;
    r = ((__wglGetGammaTableParametersI3D = (PFNWGLGETGAMMATABLEPARAMETERSI3DPROC)proc((const GLubyte*)"wglGetGammaTableParametersI3D")) != nullptr) || r;
    r = ((__wglSetGammaTableI3D = (PFNWGLSETGAMMATABLEI3DPROC)proc((const GLubyte*)"wglSetGammaTableI3D")) != nullptr) || r;
    r = ((__wglSetGammaTableParametersI3D = (PFNWGLSETGAMMATABLEPARAMETERSI3DPROC)proc((const GLubyte*)"wglSetGammaTableParametersI3D")) != nullptr) || r;
    return r;
}
static bool __isLoadedWGL_I3D_gamma = false;
#endif

#ifdef _WIN32
/* WGL_I3D_genlock */
PFNWGLDISABLEGENLOCKI3DPROC __wglDisableGenlockI3D = nullptr; BOOL WINAPI wglDisableGenlockI3D (HDC hDC) { if (__wglDisableGenlockI3D != 0) return (__wglDisableGenlockI3D)(hDC); return 0; }
PFNWGLENABLEGENLOCKI3DPROC __wglEnableGenlockI3D = nullptr; BOOL WINAPI wglEnableGenlockI3D (HDC hDC) { if (__wglEnableGenlockI3D != 0) return (__wglEnableGenlockI3D)(hDC); return 0; }
PFNWGLGENLOCKSAMPLERATEI3DPROC __wglGenlockSampleRateI3D = nullptr; BOOL WINAPI wglGenlockSampleRateI3D (HDC hDC, UINT uRate) { if (__wglGenlockSampleRateI3D != 0) return (__wglGenlockSampleRateI3D)(hDC, uRate); return 0; }
PFNWGLGENLOCKSOURCEDELAYI3DPROC __wglGenlockSourceDelayI3D = nullptr; BOOL WINAPI wglGenlockSourceDelayI3D (HDC hDC, UINT uDelay) { if (__wglGenlockSourceDelayI3D != 0) return (__wglGenlockSourceDelayI3D)(hDC, uDelay); return 0; }
PFNWGLGENLOCKSOURCEEDGEI3DPROC __wglGenlockSourceEdgeI3D = nullptr; BOOL WINAPI wglGenlockSourceEdgeI3D (HDC hDC, UINT uEdge) { if (__wglGenlockSourceEdgeI3D != 0) return (__wglGenlockSourceEdgeI3D)(hDC, uEdge); return 0; }
PFNWGLGENLOCKSOURCEI3DPROC __wglGenlockSourceI3D = nullptr; BOOL WINAPI wglGenlockSourceI3D (HDC hDC, UINT uSource) { if (__wglGenlockSourceI3D != 0) return (__wglGenlockSourceI3D)(hDC, uSource); return 0; }
PFNWGLGETGENLOCKSAMPLERATEI3DPROC __wglGetGenlockSampleRateI3D = nullptr; BOOL WINAPI wglGetGenlockSampleRateI3D (HDC hDC, UINT *uRate) { if (__wglGetGenlockSampleRateI3D != 0) return (__wglGetGenlockSampleRateI3D)(hDC, uRate); return 0; }
PFNWGLGETGENLOCKSOURCEDELAYI3DPROC __wglGetGenlockSourceDelayI3D = nullptr; BOOL WINAPI wglGetGenlockSourceDelayI3D (HDC hDC, UINT *uDelay) { if (__wglGetGenlockSourceDelayI3D != 0) return (__wglGetGenlockSourceDelayI3D)(hDC, uDelay); return 0; }
PFNWGLGETGENLOCKSOURCEEDGEI3DPROC __wglGetGenlockSourceEdgeI3D = nullptr; BOOL WINAPI wglGetGenlockSourceEdgeI3D (HDC hDC, UINT *uEdge) { if (__wglGetGenlockSourceEdgeI3D != 0) return (__wglGetGenlockSourceEdgeI3D)(hDC, uEdge); return 0; }
PFNWGLGETGENLOCKSOURCEI3DPROC __wglGetGenlockSourceI3D = nullptr; BOOL WINAPI wglGetGenlockSourceI3D (HDC hDC, UINT *uSource) { if (__wglGetGenlockSourceI3D != 0) return (__wglGetGenlockSourceI3D)(hDC, uSource); return 0; }
PFNWGLISENABLEDGENLOCKI3DPROC __wglIsEnabledGenlockI3D = nullptr; BOOL WINAPI wglIsEnabledGenlockI3D (HDC hDC, BOOL *pFlag) { if (__wglIsEnabledGenlockI3D != 0) return (__wglIsEnabledGenlockI3D)(hDC, pFlag); return 0; }
PFNWGLQUERYGENLOCKMAXSOURCEDELAYI3DPROC __wglQueryGenlockMaxSourceDelayI3D = nullptr; BOOL WINAPI wglQueryGenlockMaxSourceDelayI3D (HDC hDC, UINT *uMaxLineDelay, UINT *uMaxPixelDelay) { if (__wglQueryGenlockMaxSourceDelayI3D != 0) return (__wglQueryGenlockMaxSourceDelayI3D)(hDC, uMaxLineDelay, uMaxPixelDelay); return 0; }
bool __loadWGL_I3D_genlock(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__wglDisableGenlockI3D = (PFNWGLDISABLEGENLOCKI3DPROC)proc((const GLubyte*)"wglDisableGenlockI3D")) != nullptr) || r;
    r = ((__wglEnableGenlockI3D = (PFNWGLENABLEGENLOCKI3DPROC)proc((const GLubyte*)"wglEnableGenlockI3D")) != nullptr) || r;
    r = ((__wglGenlockSampleRateI3D = (PFNWGLGENLOCKSAMPLERATEI3DPROC)proc((const GLubyte*)"wglGenlockSampleRateI3D")) != nullptr) || r;
    r = ((__wglGenlockSourceDelayI3D = (PFNWGLGENLOCKSOURCEDELAYI3DPROC)proc((const GLubyte*)"wglGenlockSourceDelayI3D")) != nullptr) || r;
    r = ((__wglGenlockSourceEdgeI3D = (PFNWGLGENLOCKSOURCEEDGEI3DPROC)proc((const GLubyte*)"wglGenlockSourceEdgeI3D")) != nullptr) || r;
    r = ((__wglGenlockSourceI3D = (PFNWGLGENLOCKSOURCEI3DPROC)proc((const GLubyte*)"wglGenlockSourceI3D")) != nullptr) || r;
    r = ((__wglGetGenlockSampleRateI3D = (PFNWGLGETGENLOCKSAMPLERATEI3DPROC)proc((const GLubyte*)"wglGetGenlockSampleRateI3D")) != nullptr) || r;
    r = ((__wglGetGenlockSourceDelayI3D = (PFNWGLGETGENLOCKSOURCEDELAYI3DPROC)proc((const GLubyte*)"wglGetGenlockSourceDelayI3D")) != nullptr) || r;
    r = ((__wglGetGenlockSourceEdgeI3D = (PFNWGLGETGENLOCKSOURCEEDGEI3DPROC)proc((const GLubyte*)"wglGetGenlockSourceEdgeI3D")) != nullptr) || r;
    r = ((__wglGetGenlockSourceI3D = (PFNWGLGETGENLOCKSOURCEI3DPROC)proc((const GLubyte*)"wglGetGenlockSourceI3D")) != nullptr) || r;
    r = ((__wglIsEnabledGenlockI3D = (PFNWGLISENABLEDGENLOCKI3DPROC)proc((const GLubyte*)"wglIsEnabledGenlockI3D")) != nullptr) || r;
    r = ((__wglQueryGenlockMaxSourceDelayI3D = (PFNWGLQUERYGENLOCKMAXSOURCEDELAYI3DPROC)proc((const GLubyte*)"wglQueryGenlockMaxSourceDelayI3D")) != nullptr) || r;
    return r;
}
static bool __isLoadedWGL_I3D_genlock = false;
#endif

#ifdef _WIN32
/* WGL_I3D_image_buffer */
PFNWGLASSOCIATEIMAGEBUFFEREVENTSI3DPROC __wglAssociateImageBufferEventsI3D = nullptr; BOOL WINAPI wglAssociateImageBufferEventsI3D (HDC hDC, const HANDLE *pEvent, const LPVOID *pAddress, const DWORD *pSize, UINT count) { if (__wglAssociateImageBufferEventsI3D != 0) return (__wglAssociateImageBufferEventsI3D)(hDC, pEvent, pAddress, pSize, count); return 0; }
PFNWGLCREATEIMAGEBUFFERI3DPROC __wglCreateImageBufferI3D = nullptr; LPVOID WINAPI wglCreateImageBufferI3D (HDC hDC, DWORD dwSize, UINT uFlags) { if (__wglCreateImageBufferI3D != 0) return (__wglCreateImageBufferI3D)(hDC, dwSize, uFlags); return 0; }
PFNWGLDESTROYIMAGEBUFFERI3DPROC __wglDestroyImageBufferI3D = nullptr; BOOL WINAPI wglDestroyImageBufferI3D (HDC hDC, LPVOID pAddress) { if (__wglDestroyImageBufferI3D != 0) return (__wglDestroyImageBufferI3D)(hDC, pAddress); return 0; }
PFNWGLRELEASEIMAGEBUFFEREVENTSI3DPROC __wglReleaseImageBufferEventsI3D = nullptr; BOOL WINAPI wglReleaseImageBufferEventsI3D (HDC hDC, const LPVOID *pAddress, UINT count) { if (__wglReleaseImageBufferEventsI3D != 0) return (__wglReleaseImageBufferEventsI3D)(hDC, pAddress, count); return 0; }
bool __loadWGL_I3D_image_buffer(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__wglAssociateImageBufferEventsI3D = (PFNWGLASSOCIATEIMAGEBUFFEREVENTSI3DPROC)proc((const GLubyte*)"wglAssociateImageBufferEventsI3D")) != nullptr) || r;
    r = ((__wglCreateImageBufferI3D = (PFNWGLCREATEIMAGEBUFFERI3DPROC)proc((const GLubyte*)"wglCreateImageBufferI3D")) != nullptr) || r;
    r = ((__wglDestroyImageBufferI3D = (PFNWGLDESTROYIMAGEBUFFERI3DPROC)proc((const GLubyte*)"wglDestroyImageBufferI3D")) != nullptr) || r;
    r = ((__wglReleaseImageBufferEventsI3D = (PFNWGLRELEASEIMAGEBUFFEREVENTSI3DPROC)proc((const GLubyte*)"wglReleaseImageBufferEventsI3D")) != nullptr) || r;
    return r;
}
static bool __isLoadedWGL_I3D_image_buffer = false;
#endif

#ifdef _WIN32
/* WGL_I3D_swap_frame_lock */
PFNWGLDISABLEFRAMELOCKI3DPROC __wglDisableFrameLockI3D = nullptr; BOOL WINAPI wglDisableFrameLockI3D () { if (__wglDisableFrameLockI3D != 0) return (__wglDisableFrameLockI3D)(); return 0; }
PFNWGLENABLEFRAMELOCKI3DPROC __wglEnableFrameLockI3D = nullptr; BOOL WINAPI wglEnableFrameLockI3D () { if (__wglEnableFrameLockI3D != 0) return (__wglEnableFrameLockI3D)(); return 0; }
PFNWGLISENABLEDFRAMELOCKI3DPROC __wglIsEnabledFrameLockI3D = nullptr; BOOL WINAPI wglIsEnabledFrameLockI3D (BOOL *pFlag) { if (__wglIsEnabledFrameLockI3D != 0) return (__wglIsEnabledFrameLockI3D)(pFlag); return 0; }
PFNWGLQUERYFRAMELOCKMASTERI3DPROC __wglQueryFrameLockMasterI3D = nullptr; BOOL WINAPI wglQueryFrameLockMasterI3D (BOOL *pFlag) { if (__wglQueryFrameLockMasterI3D != 0) return (__wglQueryFrameLockMasterI3D)(pFlag); return 0; }
bool __loadWGL_I3D_swap_frame_lock(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__wglDisableFrameLockI3D = (PFNWGLDISABLEFRAMELOCKI3DPROC)proc((const GLubyte*)"wglDisableFrameLockI3D")) != nullptr) || r;
    r = ((__wglEnableFrameLockI3D = (PFNWGLENABLEFRAMELOCKI3DPROC)proc((const GLubyte*)"wglEnableFrameLockI3D")) != nullptr) || r;
    r = ((__wglIsEnabledFrameLockI3D = (PFNWGLISENABLEDFRAMELOCKI3DPROC)proc((const GLubyte*)"wglIsEnabledFrameLockI3D")) != nullptr) || r;
    r = ((__wglQueryFrameLockMasterI3D = (PFNWGLQUERYFRAMELOCKMASTERI3DPROC)proc((const GLubyte*)"wglQueryFrameLockMasterI3D")) != nullptr) || r;
    return r;
}
static bool __isLoadedWGL_I3D_swap_frame_lock = false;
#endif

#ifdef _WIN32
/* WGL_I3D_swap_frame_usage */
PFNWGLBEGINFRAMETRACKINGI3DPROC __wglBeginFrameTrackingI3D = nullptr; BOOL WINAPI wglBeginFrameTrackingI3D () { if (__wglBeginFrameTrackingI3D != 0) return (__wglBeginFrameTrackingI3D)(); return 0; }
PFNWGLENDFRAMETRACKINGI3DPROC __wglEndFrameTrackingI3D = nullptr; BOOL WINAPI wglEndFrameTrackingI3D () { if (__wglEndFrameTrackingI3D != 0) return (__wglEndFrameTrackingI3D)(); return 0; }
PFNWGLGETFRAMEUSAGEI3DPROC __wglGetFrameUsageI3D = nullptr; BOOL WINAPI wglGetFrameUsageI3D (float *pUsage) { if (__wglGetFrameUsageI3D != 0) return (__wglGetFrameUsageI3D)(pUsage); return 0; }
PFNWGLQUERYFRAMETRACKINGI3DPROC __wglQueryFrameTrackingI3D = nullptr; BOOL WINAPI wglQueryFrameTrackingI3D (DWORD *pFrameCount, DWORD *pMissedFrames, float *pLastMissedUsage) { if (__wglQueryFrameTrackingI3D != 0) return (__wglQueryFrameTrackingI3D)(pFrameCount, pMissedFrames, pLastMissedUsage); return 0; }
bool __loadWGL_I3D_swap_frame_usage(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__wglBeginFrameTrackingI3D = (PFNWGLBEGINFRAMETRACKINGI3DPROC)proc((const GLubyte*)"wglBeginFrameTrackingI3D")) != nullptr) || r;
    r = ((__wglEndFrameTrackingI3D = (PFNWGLENDFRAMETRACKINGI3DPROC)proc((const GLubyte*)"wglEndFrameTrackingI3D")) != nullptr) || r;
    r = ((__wglGetFrameUsageI3D = (PFNWGLGETFRAMEUSAGEI3DPROC)proc((const GLubyte*)"wglGetFrameUsageI3D")) != nullptr) || r;
    r = ((__wglQueryFrameTrackingI3D = (PFNWGLQUERYFRAMETRACKINGI3DPROC)proc((const GLubyte*)"wglQueryFrameTrackingI3D")) != nullptr) || r;
    return r;
}
static bool __isLoadedWGL_I3D_swap_frame_usage = false;
#endif

#ifdef _WIN32
/* WGL_NV_DX_interop */
PFNWGLDXCLOSEDEVICENVPROC __wglDXCloseDeviceNV = nullptr; BOOL WINAPI wglDXCloseDeviceNV (HANDLE hDevice) { if (__wglDXCloseDeviceNV != 0) return (__wglDXCloseDeviceNV)(hDevice); return 0; }
PFNWGLDXLOCKOBJECTSNVPROC __wglDXLockObjectsNV = nullptr; BOOL WINAPI wglDXLockObjectsNV (HANDLE hDevice, GLint count, HANDLE *hObjects) { if (__wglDXLockObjectsNV != 0) return (__wglDXLockObjectsNV)(hDevice, count, hObjects); return 0; }
PFNWGLDXOBJECTACCESSNVPROC __wglDXObjectAccessNV = nullptr; BOOL WINAPI wglDXObjectAccessNV (HANDLE hObject, GLenum access) { if (__wglDXObjectAccessNV != 0) return (__wglDXObjectAccessNV)(hObject, access); return 0; }
PFNWGLDXOPENDEVICENVPROC __wglDXOpenDeviceNV = nullptr; HANDLE WINAPI wglDXOpenDeviceNV (void *dxDevice) { if (__wglDXOpenDeviceNV != 0) return (__wglDXOpenDeviceNV)(dxDevice); return 0; }
PFNWGLDXREGISTEROBJECTNVPROC __wglDXRegisterObjectNV = nullptr; HANDLE WINAPI wglDXRegisterObjectNV (HANDLE hDevice, void *dxObject, GLuint name, GLenum type, GLenum access) { if (__wglDXRegisterObjectNV != 0) return (__wglDXRegisterObjectNV)(hDevice, dxObject, name, type, access); return 0; }
PFNWGLDXSETRESOURCESHAREHANDLENVPROC __wglDXSetResourceShareHandleNV = nullptr; BOOL WINAPI wglDXSetResourceShareHandleNV (void *dxObject, HANDLE shareHandle) { if (__wglDXSetResourceShareHandleNV != 0) return (__wglDXSetResourceShareHandleNV)(dxObject, shareHandle); return 0; }
PFNWGLDXUNLOCKOBJECTSNVPROC __wglDXUnlockObjectsNV = nullptr; BOOL WINAPI wglDXUnlockObjectsNV (HANDLE hDevice, GLint count, HANDLE *hObjects) { if (__wglDXUnlockObjectsNV != 0) return (__wglDXUnlockObjectsNV)(hDevice, count, hObjects); return 0; }
PFNWGLDXUNREGISTEROBJECTNVPROC __wglDXUnregisterObjectNV = nullptr; BOOL WINAPI wglDXUnregisterObjectNV (HANDLE hDevice, HANDLE hObject) { if (__wglDXUnregisterObjectNV != 0) return (__wglDXUnregisterObjectNV)(hDevice, hObject); return 0; }
bool __loadWGL_NV_DX_interop(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__wglDXCloseDeviceNV = (PFNWGLDXCLOSEDEVICENVPROC)proc((const GLubyte*)"wglDXCloseDeviceNV")) != nullptr) || r;
    r = ((__wglDXLockObjectsNV = (PFNWGLDXLOCKOBJECTSNVPROC)proc((const GLubyte*)"wglDXLockObjectsNV")) != nullptr) || r;
    r = ((__wglDXObjectAccessNV = (PFNWGLDXOBJECTACCESSNVPROC)proc((const GLubyte*)"wglDXObjectAccessNV")) != nullptr) || r;
    r = ((__wglDXOpenDeviceNV = (PFNWGLDXOPENDEVICENVPROC)proc((const GLubyte*)"wglDXOpenDeviceNV")) != nullptr) || r;
    r = ((__wglDXRegisterObjectNV = (PFNWGLDXREGISTEROBJECTNVPROC)proc((const GLubyte*)"wglDXRegisterObjectNV")) != nullptr) || r;
    r = ((__wglDXSetResourceShareHandleNV = (PFNWGLDXSETRESOURCESHAREHANDLENVPROC)proc((const GLubyte*)"wglDXSetResourceShareHandleNV")) != nullptr) || r;
    r = ((__wglDXUnlockObjectsNV = (PFNWGLDXUNLOCKOBJECTSNVPROC)proc((const GLubyte*)"wglDXUnlockObjectsNV")) != nullptr) || r;
    r = ((__wglDXUnregisterObjectNV = (PFNWGLDXUNREGISTEROBJECTNVPROC)proc((const GLubyte*)"wglDXUnregisterObjectNV")) != nullptr) || r;
    return r;
}
static bool __isLoadedWGL_NV_DX_interop = false;
#endif

#ifdef _WIN32
/* WGL_NV_DX_interop2 */
bool __loadWGL_NV_DX_interop2(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedWGL_NV_DX_interop2 = false;
#endif

#ifdef _WIN32
/* WGL_NV_copy_image */
PFNWGLCOPYIMAGESUBDATANVPROC __wglCopyImageSubDataNV = nullptr; BOOL WINAPI wglCopyImageSubDataNV (HGLRC hSrcRC, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, HGLRC hDstRC, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth) { if (__wglCopyImageSubDataNV != 0) return (__wglCopyImageSubDataNV)(hSrcRC, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, hDstRC, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth); return 0; }
bool __loadWGL_NV_copy_image(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__wglCopyImageSubDataNV = (PFNWGLCOPYIMAGESUBDATANVPROC)proc((const GLubyte*)"wglCopyImageSubDataNV")) != nullptr) || r;
    return r;
}
static bool __isLoadedWGL_NV_copy_image = false;
#endif

#ifdef _WIN32
/* WGL_NV_delay_before_swap */
PFNWGLDELAYBEFORESWAPNVPROC __wglDelayBeforeSwapNV = nullptr; BOOL WINAPI wglDelayBeforeSwapNV (HDC hDC, GLfloat seconds) { if (__wglDelayBeforeSwapNV != 0) return (__wglDelayBeforeSwapNV)(hDC, seconds); return 0; }
bool __loadWGL_NV_delay_before_swap(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__wglDelayBeforeSwapNV = (PFNWGLDELAYBEFORESWAPNVPROC)proc((const GLubyte*)"wglDelayBeforeSwapNV")) != nullptr) || r;
    return r;
}
static bool __isLoadedWGL_NV_delay_before_swap = false;
#endif

#ifdef _WIN32
/* WGL_NV_float_buffer */
bool __loadWGL_NV_float_buffer(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedWGL_NV_float_buffer = false;
#endif

#ifdef _WIN32
/* WGL_NV_gpu_affinity */
PFNWGLCREATEAFFINITYDCNVPROC __wglCreateAffinityDCNV = nullptr; HDC WINAPI wglCreateAffinityDCNV (const HGPUNV *phGpuList) { if (__wglCreateAffinityDCNV != 0) return (__wglCreateAffinityDCNV)(phGpuList); return 0; }
PFNWGLDELETEDCNVPROC __wglDeleteDCNV = nullptr; BOOL WINAPI wglDeleteDCNV (HDC hdc) { if (__wglDeleteDCNV != 0) return (__wglDeleteDCNV)(hdc); return 0; }
PFNWGLENUMGPUDEVICESNVPROC __wglEnumGpuDevicesNV = nullptr; BOOL WINAPI wglEnumGpuDevicesNV (HGPUNV hGpu, UINT iDeviceIndex, PGPU_DEVICE lpGpuDevice) { if (__wglEnumGpuDevicesNV != 0) return (__wglEnumGpuDevicesNV)(hGpu, iDeviceIndex, lpGpuDevice); return 0; }
PFNWGLENUMGPUSFROMAFFINITYDCNVPROC __wglEnumGpusFromAffinityDCNV = nullptr; BOOL WINAPI wglEnumGpusFromAffinityDCNV (HDC hAffinityDC, UINT iGpuIndex, HGPUNV *hGpu) { if (__wglEnumGpusFromAffinityDCNV != 0) return (__wglEnumGpusFromAffinityDCNV)(hAffinityDC, iGpuIndex, hGpu); return 0; }
PFNWGLENUMGPUSNVPROC __wglEnumGpusNV = nullptr; BOOL WINAPI wglEnumGpusNV (UINT iGpuIndex, HGPUNV *phGpu) { if (__wglEnumGpusNV != 0) return (__wglEnumGpusNV)(iGpuIndex, phGpu); return 0; }
bool __loadWGL_NV_gpu_affinity(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__wglCreateAffinityDCNV = (PFNWGLCREATEAFFINITYDCNVPROC)proc((const GLubyte*)"wglCreateAffinityDCNV")) != nullptr) || r;
    r = ((__wglDeleteDCNV = (PFNWGLDELETEDCNVPROC)proc((const GLubyte*)"wglDeleteDCNV")) != nullptr) || r;
    r = ((__wglEnumGpuDevicesNV = (PFNWGLENUMGPUDEVICESNVPROC)proc((const GLubyte*)"wglEnumGpuDevicesNV")) != nullptr) || r;
    r = ((__wglEnumGpusFromAffinityDCNV = (PFNWGLENUMGPUSFROMAFFINITYDCNVPROC)proc((const GLubyte*)"wglEnumGpusFromAffinityDCNV")) != nullptr) || r;
    r = ((__wglEnumGpusNV = (PFNWGLENUMGPUSNVPROC)proc((const GLubyte*)"wglEnumGpusNV")) != nullptr) || r;
    return r;
}
static bool __isLoadedWGL_NV_gpu_affinity = false;
#endif

#ifdef _WIN32
/* WGL_NV_multisample_coverage */
bool __loadWGL_NV_multisample_coverage(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedWGL_NV_multisample_coverage = false;
#endif

#ifdef _WIN32
/* WGL_NV_present_video */
PFNWGLBINDVIDEODEVICENVPROC __wglBindVideoDeviceNV = nullptr; BOOL WINAPI wglBindVideoDeviceNV (HDC hDC, unsigned int uVideoSlot, HVIDEOOUTPUTDEVICENV hVideoDevice, const int *piAttribList) { if (__wglBindVideoDeviceNV != 0) return (__wglBindVideoDeviceNV)(hDC, uVideoSlot, hVideoDevice, piAttribList); return 0; }
PFNWGLENUMERATEVIDEODEVICESNVPROC __wglEnumerateVideoDevicesNV = nullptr; int WINAPI wglEnumerateVideoDevicesNV (HDC hDC, HVIDEOOUTPUTDEVICENV *phDeviceList) { if (__wglEnumerateVideoDevicesNV != 0) return (__wglEnumerateVideoDevicesNV)(hDC, phDeviceList); return 0; }
PFNWGLQUERYCURRENTCONTEXTNVPROC __wglQueryCurrentContextNV = nullptr; BOOL WINAPI wglQueryCurrentContextNV (int iAttribute, int *piValue) { if (__wglQueryCurrentContextNV != 0) return (__wglQueryCurrentContextNV)(iAttribute, piValue); return 0; }
bool __loadWGL_NV_present_video(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__wglBindVideoDeviceNV = (PFNWGLBINDVIDEODEVICENVPROC)proc((const GLubyte*)"wglBindVideoDeviceNV")) != nullptr) || r;
    r = ((__wglEnumerateVideoDevicesNV = (PFNWGLENUMERATEVIDEODEVICESNVPROC)proc((const GLubyte*)"wglEnumerateVideoDevicesNV")) != nullptr) || r;
    r = ((__wglQueryCurrentContextNV = (PFNWGLQUERYCURRENTCONTEXTNVPROC)proc((const GLubyte*)"wglQueryCurrentContextNV")) != nullptr) || r;
    return r;
}
static bool __isLoadedWGL_NV_present_video = false;
#endif

#ifdef _WIN32
/* WGL_NV_render_depth_texture */
bool __loadWGL_NV_render_depth_texture(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedWGL_NV_render_depth_texture = false;
#endif

#ifdef _WIN32
/* WGL_NV_render_texture_rectangle */
bool __loadWGL_NV_render_texture_rectangle(PFNGLGETPROC* proc)
{
    bool r = false;
    return r;
}
static bool __isLoadedWGL_NV_render_texture_rectangle = false;
#endif

#ifdef _WIN32
/* WGL_NV_swap_group */
PFNWGLBINDSWAPBARRIERNVPROC __wglBindSwapBarrierNV = nullptr; BOOL WINAPI wglBindSwapBarrierNV (GLuint group, GLuint barrier) { if (__wglBindSwapBarrierNV != 0) return (__wglBindSwapBarrierNV)(group, barrier); return 0; }
PFNWGLJOINSWAPGROUPNVPROC __wglJoinSwapGroupNV = nullptr; BOOL WINAPI wglJoinSwapGroupNV (HDC hDC, GLuint group) { if (__wglJoinSwapGroupNV != 0) return (__wglJoinSwapGroupNV)(hDC, group); return 0; }
PFNWGLQUERYFRAMECOUNTNVPROC __wglQueryFrameCountNV = nullptr; BOOL WINAPI wglQueryFrameCountNV (HDC hDC, GLuint *count) { if (__wglQueryFrameCountNV != 0) return (__wglQueryFrameCountNV)(hDC, count); return 0; }
PFNWGLQUERYMAXSWAPGROUPSNVPROC __wglQueryMaxSwapGroupsNV = nullptr; BOOL WINAPI wglQueryMaxSwapGroupsNV (HDC hDC, GLuint *maxGroups, GLuint *maxBarriers) { if (__wglQueryMaxSwapGroupsNV != 0) return (__wglQueryMaxSwapGroupsNV)(hDC, maxGroups, maxBarriers); return 0; }
PFNWGLQUERYSWAPGROUPNVPROC __wglQuerySwapGroupNV = nullptr; BOOL WINAPI wglQuerySwapGroupNV (HDC hDC, GLuint *group, GLuint *barrier) { if (__wglQuerySwapGroupNV != 0) return (__wglQuerySwapGroupNV)(hDC, group, barrier); return 0; }
PFNWGLRESETFRAMECOUNTNVPROC __wglResetFrameCountNV = nullptr; BOOL WINAPI wglResetFrameCountNV (HDC hDC) { if (__wglResetFrameCountNV != 0) return (__wglResetFrameCountNV)(hDC); return 0; }
bool __loadWGL_NV_swap_group(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__wglBindSwapBarrierNV = (PFNWGLBINDSWAPBARRIERNVPROC)proc((const GLubyte*)"wglBindSwapBarrierNV")) != nullptr) || r;
    r = ((__wglJoinSwapGroupNV = (PFNWGLJOINSWAPGROUPNVPROC)proc((const GLubyte*)"wglJoinSwapGroupNV")) != nullptr) || r;
    r = ((__wglQueryFrameCountNV = (PFNWGLQUERYFRAMECOUNTNVPROC)proc((const GLubyte*)"wglQueryFrameCountNV")) != nullptr) || r;
    r = ((__wglQueryMaxSwapGroupsNV = (PFNWGLQUERYMAXSWAPGROUPSNVPROC)proc((const GLubyte*)"wglQueryMaxSwapGroupsNV")) != nullptr) || r;
    r = ((__wglQuerySwapGroupNV = (PFNWGLQUERYSWAPGROUPNVPROC)proc((const GLubyte*)"wglQuerySwapGroupNV")) != nullptr) || r;
    r = ((__wglResetFrameCountNV = (PFNWGLRESETFRAMECOUNTNVPROC)proc((const GLubyte*)"wglResetFrameCountNV")) != nullptr) || r;
    return r;
}
static bool __isLoadedWGL_NV_swap_group = false;
#endif

#ifdef _WIN32
/* WGL_NV_vertex_array_range */
PFNWGLALLOCATEMEMORYNVPROC __wglAllocateMemoryNV = nullptr; void *WINAPI wglAllocateMemoryNV (GLsizei size, GLfloat readfreq, GLfloat writefreq, GLfloat priority) { if (__wglAllocateMemoryNV != 0) return (__wglAllocateMemoryNV)(size, readfreq, writefreq, priority); return 0; }
PFNWGLFREEMEMORYNVPROC __wglFreeMemoryNV = nullptr; void WINAPI wglFreeMemoryNV (void *pointer) { if (__wglFreeMemoryNV != 0) (__wglFreeMemoryNV)(pointer);  }
bool __loadWGL_NV_vertex_array_range(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__wglAllocateMemoryNV = (PFNWGLALLOCATEMEMORYNVPROC)proc((const GLubyte*)"wglAllocateMemoryNV")) != nullptr) || r;
    r = ((__wglFreeMemoryNV = (PFNWGLFREEMEMORYNVPROC)proc((const GLubyte*)"wglFreeMemoryNV")) != nullptr) || r;
    return r;
}
static bool __isLoadedWGL_NV_vertex_array_range = false;
#endif

#ifdef _WIN32
/* WGL_NV_video_capture */
PFNWGLBINDVIDEOCAPTUREDEVICENVPROC __wglBindVideoCaptureDeviceNV = nullptr; BOOL WINAPI wglBindVideoCaptureDeviceNV (UINT uVideoSlot, HVIDEOINPUTDEVICENV hDevice) { if (__wglBindVideoCaptureDeviceNV != 0) return (__wglBindVideoCaptureDeviceNV)(uVideoSlot, hDevice); return 0; }
PFNWGLENUMERATEVIDEOCAPTUREDEVICESNVPROC __wglEnumerateVideoCaptureDevicesNV = nullptr; UINT WINAPI wglEnumerateVideoCaptureDevicesNV (HDC hDc, HVIDEOINPUTDEVICENV *phDeviceList) { if (__wglEnumerateVideoCaptureDevicesNV != 0) return (__wglEnumerateVideoCaptureDevicesNV)(hDc, phDeviceList); return 0; }
PFNWGLLOCKVIDEOCAPTUREDEVICENVPROC __wglLockVideoCaptureDeviceNV = nullptr; BOOL WINAPI wglLockVideoCaptureDeviceNV (HDC hDc, HVIDEOINPUTDEVICENV hDevice) { if (__wglLockVideoCaptureDeviceNV != 0) return (__wglLockVideoCaptureDeviceNV)(hDc, hDevice); return 0; }
PFNWGLQUERYVIDEOCAPTUREDEVICENVPROC __wglQueryVideoCaptureDeviceNV = nullptr; BOOL WINAPI wglQueryVideoCaptureDeviceNV (HDC hDc, HVIDEOINPUTDEVICENV hDevice, int iAttribute, int *piValue) { if (__wglQueryVideoCaptureDeviceNV != 0) return (__wglQueryVideoCaptureDeviceNV)(hDc, hDevice, iAttribute, piValue); return 0; }
PFNWGLRELEASEVIDEOCAPTUREDEVICENVPROC __wglReleaseVideoCaptureDeviceNV = nullptr; BOOL WINAPI wglReleaseVideoCaptureDeviceNV (HDC hDc, HVIDEOINPUTDEVICENV hDevice) { if (__wglReleaseVideoCaptureDeviceNV != 0) return (__wglReleaseVideoCaptureDeviceNV)(hDc, hDevice); return 0; }
bool __loadWGL_NV_video_capture(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__wglBindVideoCaptureDeviceNV = (PFNWGLBINDVIDEOCAPTUREDEVICENVPROC)proc((const GLubyte*)"wglBindVideoCaptureDeviceNV")) != nullptr) || r;
    r = ((__wglEnumerateVideoCaptureDevicesNV = (PFNWGLENUMERATEVIDEOCAPTUREDEVICESNVPROC)proc((const GLubyte*)"wglEnumerateVideoCaptureDevicesNV")) != nullptr) || r;
    r = ((__wglLockVideoCaptureDeviceNV = (PFNWGLLOCKVIDEOCAPTUREDEVICENVPROC)proc((const GLubyte*)"wglLockVideoCaptureDeviceNV")) != nullptr) || r;
    r = ((__wglQueryVideoCaptureDeviceNV = (PFNWGLQUERYVIDEOCAPTUREDEVICENVPROC)proc((const GLubyte*)"wglQueryVideoCaptureDeviceNV")) != nullptr) || r;
    r = ((__wglReleaseVideoCaptureDeviceNV = (PFNWGLRELEASEVIDEOCAPTUREDEVICENVPROC)proc((const GLubyte*)"wglReleaseVideoCaptureDeviceNV")) != nullptr) || r;
    return r;
}
static bool __isLoadedWGL_NV_video_capture = false;
#endif

#ifdef _WIN32
/* WGL_NV_video_output */
PFNWGLBINDVIDEOIMAGENVPROC __wglBindVideoImageNV = nullptr; BOOL WINAPI wglBindVideoImageNV (HPVIDEODEV hVideoDevice, HPBUFFERARB hPbuffer, int iVideoBuffer) { if (__wglBindVideoImageNV != 0) return (__wglBindVideoImageNV)(hVideoDevice, hPbuffer, iVideoBuffer); return 0; }
PFNWGLGETVIDEODEVICENVPROC __wglGetVideoDeviceNV = nullptr; BOOL WINAPI wglGetVideoDeviceNV (HDC hDC, int numDevices, HPVIDEODEV *hVideoDevice) { if (__wglGetVideoDeviceNV != 0) return (__wglGetVideoDeviceNV)(hDC, numDevices, hVideoDevice); return 0; }
PFNWGLGETVIDEOINFONVPROC __wglGetVideoInfoNV = nullptr; BOOL WINAPI wglGetVideoInfoNV (HPVIDEODEV hpVideoDevice, unsigned long *pulCounterOutputPbuffer, unsigned long *pulCounterOutputVideo) { if (__wglGetVideoInfoNV != 0) return (__wglGetVideoInfoNV)(hpVideoDevice, pulCounterOutputPbuffer, pulCounterOutputVideo); return 0; }
PFNWGLRELEASEVIDEODEVICENVPROC __wglReleaseVideoDeviceNV = nullptr; BOOL WINAPI wglReleaseVideoDeviceNV (HPVIDEODEV hVideoDevice) { if (__wglReleaseVideoDeviceNV != 0) return (__wglReleaseVideoDeviceNV)(hVideoDevice); return 0; }
PFNWGLRELEASEVIDEOIMAGENVPROC __wglReleaseVideoImageNV = nullptr; BOOL WINAPI wglReleaseVideoImageNV (HPBUFFERARB hPbuffer, int iVideoBuffer) { if (__wglReleaseVideoImageNV != 0) return (__wglReleaseVideoImageNV)(hPbuffer, iVideoBuffer); return 0; }
PFNWGLSENDPBUFFERTOVIDEONVPROC __wglSendPbufferToVideoNV = nullptr; BOOL WINAPI wglSendPbufferToVideoNV (HPBUFFERARB hPbuffer, int iBufferType, unsigned long *pulCounterPbuffer, BOOL bBlock) { if (__wglSendPbufferToVideoNV != 0) return (__wglSendPbufferToVideoNV)(hPbuffer, iBufferType, pulCounterPbuffer, bBlock); return 0; }
bool __loadWGL_NV_video_output(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__wglBindVideoImageNV = (PFNWGLBINDVIDEOIMAGENVPROC)proc((const GLubyte*)"wglBindVideoImageNV")) != nullptr) || r;
    r = ((__wglGetVideoDeviceNV = (PFNWGLGETVIDEODEVICENVPROC)proc((const GLubyte*)"wglGetVideoDeviceNV")) != nullptr) || r;
    r = ((__wglGetVideoInfoNV = (PFNWGLGETVIDEOINFONVPROC)proc((const GLubyte*)"wglGetVideoInfoNV")) != nullptr) || r;
    r = ((__wglReleaseVideoDeviceNV = (PFNWGLRELEASEVIDEODEVICENVPROC)proc((const GLubyte*)"wglReleaseVideoDeviceNV")) != nullptr) || r;
    r = ((__wglReleaseVideoImageNV = (PFNWGLRELEASEVIDEOIMAGENVPROC)proc((const GLubyte*)"wglReleaseVideoImageNV")) != nullptr) || r;
    r = ((__wglSendPbufferToVideoNV = (PFNWGLSENDPBUFFERTOVIDEONVPROC)proc((const GLubyte*)"wglSendPbufferToVideoNV")) != nullptr) || r;
    return r;
}
static bool __isLoadedWGL_NV_video_output = false;
#endif

#ifdef _WIN32
/* WGL_OML_sync_control */
PFNWGLGETMSCRATEOMLPROC __wglGetMscRateOML = nullptr; BOOL WINAPI wglGetMscRateOML (HDC hdc, INT32 *numerator, INT32 *denominator) { if (__wglGetMscRateOML != 0) return (__wglGetMscRateOML)(hdc, numerator, denominator); return 0; }
PFNWGLGETSYNCVALUESOMLPROC __wglGetSyncValuesOML = nullptr; BOOL WINAPI wglGetSyncValuesOML (HDC hdc, INT64 *ust, INT64 *msc, INT64 *sbc) { if (__wglGetSyncValuesOML != 0) return (__wglGetSyncValuesOML)(hdc, ust, msc, sbc); return 0; }
PFNWGLSWAPBUFFERSMSCOMLPROC __wglSwapBuffersMscOML = nullptr; INT64 WINAPI wglSwapBuffersMscOML (HDC hdc, INT64 target_msc, INT64 divisor, INT64 remainder) { if (__wglSwapBuffersMscOML != 0) return (__wglSwapBuffersMscOML)(hdc, target_msc, divisor, remainder); return 0; }
PFNWGLSWAPLAYERBUFFERSMSCOMLPROC __wglSwapLayerBuffersMscOML = nullptr; INT64 WINAPI wglSwapLayerBuffersMscOML (HDC hdc, int fuPlanes, INT64 target_msc, INT64 divisor, INT64 remainder) { if (__wglSwapLayerBuffersMscOML != 0) return (__wglSwapLayerBuffersMscOML)(hdc, fuPlanes, target_msc, divisor, remainder); return 0; }
PFNWGLWAITFORMSCOMLPROC __wglWaitForMscOML = nullptr; BOOL WINAPI wglWaitForMscOML (HDC hdc, INT64 target_msc, INT64 divisor, INT64 remainder, INT64 *ust, INT64 *msc, INT64 *sbc) { if (__wglWaitForMscOML != 0) return (__wglWaitForMscOML)(hdc, target_msc, divisor, remainder, ust, msc, sbc); return 0; }
PFNWGLWAITFORSBCOMLPROC __wglWaitForSbcOML = nullptr; BOOL WINAPI wglWaitForSbcOML (HDC hdc, INT64 target_sbc, INT64 *ust, INT64 *msc, INT64 *sbc) { if (__wglWaitForSbcOML != 0) return (__wglWaitForSbcOML)(hdc, target_sbc, ust, msc, sbc); return 0; }
bool __loadWGL_OML_sync_control(PFNGLGETPROC* proc)
{
    bool r = false;
    r = ((__wglGetMscRateOML = (PFNWGLGETMSCRATEOMLPROC)proc((const GLubyte*)"wglGetMscRateOML")) != nullptr) || r;
    r = ((__wglGetSyncValuesOML = (PFNWGLGETSYNCVALUESOMLPROC)proc((const GLubyte*)"wglGetSyncValuesOML")) != nullptr) || r;
    r = ((__wglSwapBuffersMscOML = (PFNWGLSWAPBUFFERSMSCOMLPROC)proc((const GLubyte*)"wglSwapBuffersMscOML")) != nullptr) || r;
    r = ((__wglSwapLayerBuffersMscOML = (PFNWGLSWAPLAYERBUFFERSMSCOMLPROC)proc((const GLubyte*)"wglSwapLayerBuffersMscOML")) != nullptr) || r;
    r = ((__wglWaitForMscOML = (PFNWGLWAITFORMSCOMLPROC)proc((const GLubyte*)"wglWaitForMscOML")) != nullptr) || r;
    r = ((__wglWaitForSbcOML = (PFNWGLWAITFORSBCOMLPROC)proc((const GLubyte*)"wglWaitForSbcOML")) != nullptr) || r;
    return r;
}
static bool __isLoadedWGL_OML_sync_control = false;
#endif

bool glExtLoadAll(PFNGLGETPROC* proc)
{
    __isLoadedGL_VERSION_1_2 = __loadGL_VERSION_1_2(proc);
    __isLoadedGL_VERSION_1_3 = __loadGL_VERSION_1_3(proc);
    __isLoadedGL_VERSION_1_4 = __loadGL_VERSION_1_4(proc);
    __isLoadedGL_VERSION_1_5 = __loadGL_VERSION_1_5(proc);
    __isLoadedGL_VERSION_2_0 = __loadGL_VERSION_2_0(proc);
    __isLoadedGL_VERSION_2_1 = __loadGL_VERSION_2_1(proc);
    __isLoadedGL_VERSION_3_0 = __loadGL_VERSION_3_0(proc);
    __isLoadedGL_VERSION_3_1 = __loadGL_VERSION_3_1(proc);
    __isLoadedGL_VERSION_3_2 = __loadGL_VERSION_3_2(proc);
    __isLoadedGL_VERSION_3_3 = __loadGL_VERSION_3_3(proc);
    __isLoadedGL_VERSION_4_0 = __loadGL_VERSION_4_0(proc);
    __isLoadedGL_VERSION_4_1 = __loadGL_VERSION_4_1(proc);
    __isLoadedGL_VERSION_4_2 = __loadGL_VERSION_4_2(proc);
    __isLoadedGL_VERSION_4_3 = __loadGL_VERSION_4_3(proc);
    __isLoadedGL_VERSION_4_4 = __loadGL_VERSION_4_4(proc);
    __isLoadedGL_VERSION_4_5 = __loadGL_VERSION_4_5(proc);
    __isLoadedGL_ARB_ES2_compatibility = __loadGL_ARB_ES2_compatibility(proc);
    __isLoadedGL_ARB_ES3_1_compatibility = __loadGL_ARB_ES3_1_compatibility(proc);
    __isLoadedGL_ARB_ES3_2_compatibility = __loadGL_ARB_ES3_2_compatibility(proc);
    __isLoadedGL_ARB_ES3_compatibility = __loadGL_ARB_ES3_compatibility(proc);
    __isLoadedGL_ARB_arrays_of_arrays = __loadGL_ARB_arrays_of_arrays(proc);
    __isLoadedGL_ARB_base_instance = __loadGL_ARB_base_instance(proc);
    __isLoadedGL_ARB_bindless_texture = __loadGL_ARB_bindless_texture(proc);
    __isLoadedGL_ARB_blend_func_extended = __loadGL_ARB_blend_func_extended(proc);
    __isLoadedGL_ARB_buffer_storage = __loadGL_ARB_buffer_storage(proc);
    __isLoadedGL_ARB_cl_event = __loadGL_ARB_cl_event(proc);
    __isLoadedGL_ARB_clear_buffer_object = __loadGL_ARB_clear_buffer_object(proc);
    __isLoadedGL_ARB_clear_texture = __loadGL_ARB_clear_texture(proc);
    __isLoadedGL_ARB_clip_control = __loadGL_ARB_clip_control(proc);
    __isLoadedGL_ARB_color_buffer_float = __loadGL_ARB_color_buffer_float(proc);
    __isLoadedGL_ARB_compatibility = __loadGL_ARB_compatibility(proc);
    __isLoadedGL_ARB_compressed_texture_pixel_storage = __loadGL_ARB_compressed_texture_pixel_storage(proc);
    __isLoadedGL_ARB_compute_shader = __loadGL_ARB_compute_shader(proc);
    __isLoadedGL_ARB_compute_variable_group_size = __loadGL_ARB_compute_variable_group_size(proc);
    __isLoadedGL_ARB_conditional_render_inverted = __loadGL_ARB_conditional_render_inverted(proc);
    __isLoadedGL_ARB_conservative_depth = __loadGL_ARB_conservative_depth(proc);
    __isLoadedGL_ARB_copy_buffer = __loadGL_ARB_copy_buffer(proc);
    __isLoadedGL_ARB_copy_image = __loadGL_ARB_copy_image(proc);
    __isLoadedGL_ARB_cull_distance = __loadGL_ARB_cull_distance(proc);
    __isLoadedGL_ARB_debug_output = __loadGL_ARB_debug_output(proc);
    __isLoadedGL_ARB_depth_buffer_float = __loadGL_ARB_depth_buffer_float(proc);
    __isLoadedGL_ARB_depth_clamp = __loadGL_ARB_depth_clamp(proc);
    __isLoadedGL_ARB_depth_texture = __loadGL_ARB_depth_texture(proc);
    __isLoadedGL_ARB_derivative_control = __loadGL_ARB_derivative_control(proc);
    __isLoadedGL_ARB_direct_state_access = __loadGL_ARB_direct_state_access(proc);
    __isLoadedGL_ARB_draw_buffers = __loadGL_ARB_draw_buffers(proc);
    __isLoadedGL_ARB_draw_buffers_blend = __loadGL_ARB_draw_buffers_blend(proc);
    __isLoadedGL_ARB_draw_elements_base_vertex = __loadGL_ARB_draw_elements_base_vertex(proc);
    __isLoadedGL_ARB_draw_indirect = __loadGL_ARB_draw_indirect(proc);
    __isLoadedGL_ARB_draw_instanced = __loadGL_ARB_draw_instanced(proc);
    __isLoadedGL_ARB_enhanced_layouts = __loadGL_ARB_enhanced_layouts(proc);
    __isLoadedGL_ARB_explicit_attrib_location = __loadGL_ARB_explicit_attrib_location(proc);
    __isLoadedGL_ARB_explicit_uniform_location = __loadGL_ARB_explicit_uniform_location(proc);
    __isLoadedGL_ARB_fragment_coord_conventions = __loadGL_ARB_fragment_coord_conventions(proc);
    __isLoadedGL_ARB_fragment_layer_viewport = __loadGL_ARB_fragment_layer_viewport(proc);
    __isLoadedGL_ARB_fragment_program = __loadGL_ARB_fragment_program(proc);
    __isLoadedGL_ARB_fragment_program_shadow = __loadGL_ARB_fragment_program_shadow(proc);
    __isLoadedGL_ARB_fragment_shader = __loadGL_ARB_fragment_shader(proc);
    __isLoadedGL_ARB_fragment_shader_interlock = __loadGL_ARB_fragment_shader_interlock(proc);
    __isLoadedGL_ARB_framebuffer_no_attachments = __loadGL_ARB_framebuffer_no_attachments(proc);
    __isLoadedGL_ARB_framebuffer_object = __loadGL_ARB_framebuffer_object(proc);
    __isLoadedGL_ARB_framebuffer_sRGB = __loadGL_ARB_framebuffer_sRGB(proc);
    __isLoadedGL_ARB_geometry_shader4 = __loadGL_ARB_geometry_shader4(proc);
    __isLoadedGL_ARB_get_program_binary = __loadGL_ARB_get_program_binary(proc);
    __isLoadedGL_ARB_get_texture_sub_image = __loadGL_ARB_get_texture_sub_image(proc);
    __isLoadedGL_ARB_gpu_shader5 = __loadGL_ARB_gpu_shader5(proc);
    __isLoadedGL_ARB_gpu_shader_fp64 = __loadGL_ARB_gpu_shader_fp64(proc);
    __isLoadedGL_ARB_gpu_shader_int64 = __loadGL_ARB_gpu_shader_int64(proc);
    __isLoadedGL_ARB_half_float_pixel = __loadGL_ARB_half_float_pixel(proc);
    __isLoadedGL_ARB_half_float_vertex = __loadGL_ARB_half_float_vertex(proc);
    __isLoadedGL_ARB_imaging = __loadGL_ARB_imaging(proc);
    __isLoadedGL_ARB_indirect_parameters = __loadGL_ARB_indirect_parameters(proc);
    __isLoadedGL_ARB_instanced_arrays = __loadGL_ARB_instanced_arrays(proc);
    __isLoadedGL_ARB_internalformat_query = __loadGL_ARB_internalformat_query(proc);
    __isLoadedGL_ARB_internalformat_query2 = __loadGL_ARB_internalformat_query2(proc);
    __isLoadedGL_ARB_invalidate_subdata = __loadGL_ARB_invalidate_subdata(proc);
    __isLoadedGL_ARB_map_buffer_alignment = __loadGL_ARB_map_buffer_alignment(proc);
    __isLoadedGL_ARB_map_buffer_range = __loadGL_ARB_map_buffer_range(proc);
    __isLoadedGL_ARB_matrix_palette = __loadGL_ARB_matrix_palette(proc);
    __isLoadedGL_ARB_multi_bind = __loadGL_ARB_multi_bind(proc);
    __isLoadedGL_ARB_multi_draw_indirect = __loadGL_ARB_multi_draw_indirect(proc);
    __isLoadedGL_ARB_multisample = __loadGL_ARB_multisample(proc);
    __isLoadedGL_ARB_multitexture = __loadGL_ARB_multitexture(proc);
    __isLoadedGL_ARB_occlusion_query = __loadGL_ARB_occlusion_query(proc);
    __isLoadedGL_ARB_occlusion_query2 = __loadGL_ARB_occlusion_query2(proc);
    __isLoadedGL_ARB_parallel_shader_compile = __loadGL_ARB_parallel_shader_compile(proc);
    __isLoadedGL_ARB_pipeline_statistics_query = __loadGL_ARB_pipeline_statistics_query(proc);
    __isLoadedGL_ARB_pixel_buffer_object = __loadGL_ARB_pixel_buffer_object(proc);
    __isLoadedGL_ARB_point_parameters = __loadGL_ARB_point_parameters(proc);
    __isLoadedGL_ARB_point_sprite = __loadGL_ARB_point_sprite(proc);
    __isLoadedGL_ARB_post_depth_coverage = __loadGL_ARB_post_depth_coverage(proc);
    __isLoadedGL_ARB_program_interface_query = __loadGL_ARB_program_interface_query(proc);
    __isLoadedGL_ARB_provoking_vertex = __loadGL_ARB_provoking_vertex(proc);
    __isLoadedGL_ARB_query_buffer_object = __loadGL_ARB_query_buffer_object(proc);
    __isLoadedGL_ARB_robust_buffer_access_behavior = __loadGL_ARB_robust_buffer_access_behavior(proc);
    __isLoadedGL_ARB_robustness = __loadGL_ARB_robustness(proc);
    __isLoadedGL_ARB_robustness_isolation = __loadGL_ARB_robustness_isolation(proc);
    __isLoadedGL_ARB_sample_locations = __loadGL_ARB_sample_locations(proc);
    __isLoadedGL_ARB_sample_shading = __loadGL_ARB_sample_shading(proc);
    __isLoadedGL_ARB_sampler_objects = __loadGL_ARB_sampler_objects(proc);
    __isLoadedGL_ARB_seamless_cube_map = __loadGL_ARB_seamless_cube_map(proc);
    __isLoadedGL_ARB_seamless_cubemap_per_texture = __loadGL_ARB_seamless_cubemap_per_texture(proc);
    __isLoadedGL_ARB_separate_shader_objects = __loadGL_ARB_separate_shader_objects(proc);
    __isLoadedGL_ARB_shader_atomic_counter_ops = __loadGL_ARB_shader_atomic_counter_ops(proc);
    __isLoadedGL_ARB_shader_atomic_counters = __loadGL_ARB_shader_atomic_counters(proc);
    __isLoadedGL_ARB_shader_ballot = __loadGL_ARB_shader_ballot(proc);
    __isLoadedGL_ARB_shader_bit_encoding = __loadGL_ARB_shader_bit_encoding(proc);
    __isLoadedGL_ARB_shader_clock = __loadGL_ARB_shader_clock(proc);
    __isLoadedGL_ARB_shader_draw_parameters = __loadGL_ARB_shader_draw_parameters(proc);
    __isLoadedGL_ARB_shader_group_vote = __loadGL_ARB_shader_group_vote(proc);
    __isLoadedGL_ARB_shader_image_load_store = __loadGL_ARB_shader_image_load_store(proc);
    __isLoadedGL_ARB_shader_image_size = __loadGL_ARB_shader_image_size(proc);
    __isLoadedGL_ARB_shader_objects = __loadGL_ARB_shader_objects(proc);
    __isLoadedGL_ARB_shader_precision = __loadGL_ARB_shader_precision(proc);
    __isLoadedGL_ARB_shader_stencil_export = __loadGL_ARB_shader_stencil_export(proc);
    __isLoadedGL_ARB_shader_storage_buffer_object = __loadGL_ARB_shader_storage_buffer_object(proc);
    __isLoadedGL_ARB_shader_subroutine = __loadGL_ARB_shader_subroutine(proc);
    __isLoadedGL_ARB_shader_texture_image_samples = __loadGL_ARB_shader_texture_image_samples(proc);
    __isLoadedGL_ARB_shader_texture_lod = __loadGL_ARB_shader_texture_lod(proc);
    __isLoadedGL_ARB_shader_viewport_layer_array = __loadGL_ARB_shader_viewport_layer_array(proc);
    __isLoadedGL_ARB_shading_language_100 = __loadGL_ARB_shading_language_100(proc);
    __isLoadedGL_ARB_shading_language_420pack = __loadGL_ARB_shading_language_420pack(proc);
    __isLoadedGL_ARB_shading_language_include = __loadGL_ARB_shading_language_include(proc);
    __isLoadedGL_ARB_shading_language_packing = __loadGL_ARB_shading_language_packing(proc);
    __isLoadedGL_ARB_shadow = __loadGL_ARB_shadow(proc);
    __isLoadedGL_ARB_shadow_ambient = __loadGL_ARB_shadow_ambient(proc);
    __isLoadedGL_ARB_sparse_buffer = __loadGL_ARB_sparse_buffer(proc);
    __isLoadedGL_ARB_sparse_texture = __loadGL_ARB_sparse_texture(proc);
    __isLoadedGL_ARB_sparse_texture2 = __loadGL_ARB_sparse_texture2(proc);
    __isLoadedGL_ARB_sparse_texture_clamp = __loadGL_ARB_sparse_texture_clamp(proc);
    __isLoadedGL_ARB_stencil_texturing = __loadGL_ARB_stencil_texturing(proc);
    __isLoadedGL_ARB_sync = __loadGL_ARB_sync(proc);
    __isLoadedGL_ARB_tessellation_shader = __loadGL_ARB_tessellation_shader(proc);
    __isLoadedGL_ARB_texture_barrier = __loadGL_ARB_texture_barrier(proc);
    __isLoadedGL_ARB_texture_border_clamp = __loadGL_ARB_texture_border_clamp(proc);
    __isLoadedGL_ARB_texture_buffer_object = __loadGL_ARB_texture_buffer_object(proc);
    __isLoadedGL_ARB_texture_buffer_object_rgb32 = __loadGL_ARB_texture_buffer_object_rgb32(proc);
    __isLoadedGL_ARB_texture_buffer_range = __loadGL_ARB_texture_buffer_range(proc);
    __isLoadedGL_ARB_texture_compression = __loadGL_ARB_texture_compression(proc);
    __isLoadedGL_ARB_texture_compression_bptc = __loadGL_ARB_texture_compression_bptc(proc);
    __isLoadedGL_ARB_texture_compression_rgtc = __loadGL_ARB_texture_compression_rgtc(proc);
    __isLoadedGL_ARB_texture_cube_map = __loadGL_ARB_texture_cube_map(proc);
    __isLoadedGL_ARB_texture_cube_map_array = __loadGL_ARB_texture_cube_map_array(proc);
    __isLoadedGL_ARB_texture_env_add = __loadGL_ARB_texture_env_add(proc);
    __isLoadedGL_ARB_texture_env_combine = __loadGL_ARB_texture_env_combine(proc);
    __isLoadedGL_ARB_texture_env_crossbar = __loadGL_ARB_texture_env_crossbar(proc);
    __isLoadedGL_ARB_texture_env_dot3 = __loadGL_ARB_texture_env_dot3(proc);
    __isLoadedGL_ARB_texture_filter_minmax = __loadGL_ARB_texture_filter_minmax(proc);
    __isLoadedGL_ARB_texture_float = __loadGL_ARB_texture_float(proc);
    __isLoadedGL_ARB_texture_gather = __loadGL_ARB_texture_gather(proc);
    __isLoadedGL_ARB_texture_mirror_clamp_to_edge = __loadGL_ARB_texture_mirror_clamp_to_edge(proc);
    __isLoadedGL_ARB_texture_mirrored_repeat = __loadGL_ARB_texture_mirrored_repeat(proc);
    __isLoadedGL_ARB_texture_multisample = __loadGL_ARB_texture_multisample(proc);
    __isLoadedGL_ARB_texture_non_power_of_two = __loadGL_ARB_texture_non_power_of_two(proc);
    __isLoadedGL_ARB_texture_query_levels = __loadGL_ARB_texture_query_levels(proc);
    __isLoadedGL_ARB_texture_query_lod = __loadGL_ARB_texture_query_lod(proc);
    __isLoadedGL_ARB_texture_rectangle = __loadGL_ARB_texture_rectangle(proc);
    __isLoadedGL_ARB_texture_rg = __loadGL_ARB_texture_rg(proc);
    __isLoadedGL_ARB_texture_rgb10_a2ui = __loadGL_ARB_texture_rgb10_a2ui(proc);
    __isLoadedGL_ARB_texture_stencil8 = __loadGL_ARB_texture_stencil8(proc);
    __isLoadedGL_ARB_texture_storage = __loadGL_ARB_texture_storage(proc);
    __isLoadedGL_ARB_texture_storage_multisample = __loadGL_ARB_texture_storage_multisample(proc);
    __isLoadedGL_ARB_texture_swizzle = __loadGL_ARB_texture_swizzle(proc);
    __isLoadedGL_ARB_texture_view = __loadGL_ARB_texture_view(proc);
    __isLoadedGL_ARB_timer_query = __loadGL_ARB_timer_query(proc);
    __isLoadedGL_ARB_transform_feedback2 = __loadGL_ARB_transform_feedback2(proc);
    __isLoadedGL_ARB_transform_feedback3 = __loadGL_ARB_transform_feedback3(proc);
    __isLoadedGL_ARB_transform_feedback_instanced = __loadGL_ARB_transform_feedback_instanced(proc);
    __isLoadedGL_ARB_transform_feedback_overflow_query = __loadGL_ARB_transform_feedback_overflow_query(proc);
    __isLoadedGL_ARB_transpose_matrix = __loadGL_ARB_transpose_matrix(proc);
    __isLoadedGL_ARB_uniform_buffer_object = __loadGL_ARB_uniform_buffer_object(proc);
    __isLoadedGL_ARB_vertex_array_bgra = __loadGL_ARB_vertex_array_bgra(proc);
    __isLoadedGL_ARB_vertex_array_object = __loadGL_ARB_vertex_array_object(proc);
    __isLoadedGL_ARB_vertex_attrib_64bit = __loadGL_ARB_vertex_attrib_64bit(proc);
    __isLoadedGL_ARB_vertex_attrib_binding = __loadGL_ARB_vertex_attrib_binding(proc);
    __isLoadedGL_ARB_vertex_blend = __loadGL_ARB_vertex_blend(proc);
    __isLoadedGL_ARB_vertex_buffer_object = __loadGL_ARB_vertex_buffer_object(proc);
    __isLoadedGL_ARB_vertex_program = __loadGL_ARB_vertex_program(proc);
    __isLoadedGL_ARB_vertex_shader = __loadGL_ARB_vertex_shader(proc);
    __isLoadedGL_ARB_vertex_type_10f_11f_11f_rev = __loadGL_ARB_vertex_type_10f_11f_11f_rev(proc);
    __isLoadedGL_ARB_vertex_type_2_10_10_10_rev = __loadGL_ARB_vertex_type_2_10_10_10_rev(proc);
    __isLoadedGL_ARB_viewport_array = __loadGL_ARB_viewport_array(proc);
    __isLoadedGL_ARB_window_pos = __loadGL_ARB_window_pos(proc);
    __isLoadedGL_KHR_blend_equation_advanced = __loadGL_KHR_blend_equation_advanced(proc);
    __isLoadedGL_KHR_blend_equation_advanced_coherent = __loadGL_KHR_blend_equation_advanced_coherent(proc);
    __isLoadedGL_KHR_context_flush_control = __loadGL_KHR_context_flush_control(proc);
    __isLoadedGL_KHR_debug = __loadGL_KHR_debug(proc);
    __isLoadedGL_KHR_no_error = __loadGL_KHR_no_error(proc);
    __isLoadedGL_KHR_robust_buffer_access_behavior = __loadGL_KHR_robust_buffer_access_behavior(proc);
    __isLoadedGL_KHR_robustness = __loadGL_KHR_robustness(proc);
    __isLoadedGL_KHR_texture_compression_astc_hdr = __loadGL_KHR_texture_compression_astc_hdr(proc);
    __isLoadedGL_KHR_texture_compression_astc_ldr = __loadGL_KHR_texture_compression_astc_ldr(proc);
    __isLoadedGL_KHR_texture_compression_astc_sliced_3d = __loadGL_KHR_texture_compression_astc_sliced_3d(proc);
    __isLoadedGL_OES_byte_coordinates = __loadGL_OES_byte_coordinates(proc);
    __isLoadedGL_OES_compressed_paletted_texture = __loadGL_OES_compressed_paletted_texture(proc);
    __isLoadedGL_OES_fixed_point = __loadGL_OES_fixed_point(proc);
    __isLoadedGL_OES_query_matrix = __loadGL_OES_query_matrix(proc);
    __isLoadedGL_OES_read_format = __loadGL_OES_read_format(proc);
    __isLoadedGL_OES_single_precision = __loadGL_OES_single_precision(proc);
    __isLoadedGL_3DFX_multisample = __loadGL_3DFX_multisample(proc);
    __isLoadedGL_3DFX_tbuffer = __loadGL_3DFX_tbuffer(proc);
    __isLoadedGL_3DFX_texture_compression_FXT1 = __loadGL_3DFX_texture_compression_FXT1(proc);
    __isLoadedGL_AMD_blend_minmax_factor = __loadGL_AMD_blend_minmax_factor(proc);
    __isLoadedGL_AMD_conservative_depth = __loadGL_AMD_conservative_depth(proc);
    __isLoadedGL_AMD_debug_output = __loadGL_AMD_debug_output(proc);
    __isLoadedGL_AMD_depth_clamp_separate = __loadGL_AMD_depth_clamp_separate(proc);
    __isLoadedGL_AMD_draw_buffers_blend = __loadGL_AMD_draw_buffers_blend(proc);
    __isLoadedGL_AMD_gcn_shader = __loadGL_AMD_gcn_shader(proc);
    __isLoadedGL_AMD_gpu_shader_int64 = __loadGL_AMD_gpu_shader_int64(proc);
    __isLoadedGL_AMD_interleaved_elements = __loadGL_AMD_interleaved_elements(proc);
    __isLoadedGL_AMD_multi_draw_indirect = __loadGL_AMD_multi_draw_indirect(proc);
    __isLoadedGL_AMD_name_gen_delete = __loadGL_AMD_name_gen_delete(proc);
    __isLoadedGL_AMD_occlusion_query_event = __loadGL_AMD_occlusion_query_event(proc);
    __isLoadedGL_AMD_performance_monitor = __loadGL_AMD_performance_monitor(proc);
    __isLoadedGL_AMD_pinned_memory = __loadGL_AMD_pinned_memory(proc);
    __isLoadedGL_AMD_query_buffer_object = __loadGL_AMD_query_buffer_object(proc);
    __isLoadedGL_AMD_sample_positions = __loadGL_AMD_sample_positions(proc);
    __isLoadedGL_AMD_seamless_cubemap_per_texture = __loadGL_AMD_seamless_cubemap_per_texture(proc);
    __isLoadedGL_AMD_shader_atomic_counter_ops = __loadGL_AMD_shader_atomic_counter_ops(proc);
    __isLoadedGL_AMD_shader_stencil_export = __loadGL_AMD_shader_stencil_export(proc);
    __isLoadedGL_AMD_shader_trinary_minmax = __loadGL_AMD_shader_trinary_minmax(proc);
    __isLoadedGL_AMD_sparse_texture = __loadGL_AMD_sparse_texture(proc);
    __isLoadedGL_AMD_stencil_operation_extended = __loadGL_AMD_stencil_operation_extended(proc);
    __isLoadedGL_AMD_texture_texture4 = __loadGL_AMD_texture_texture4(proc);
    __isLoadedGL_AMD_transform_feedback3_lines_triangles = __loadGL_AMD_transform_feedback3_lines_triangles(proc);
    __isLoadedGL_AMD_transform_feedback4 = __loadGL_AMD_transform_feedback4(proc);
    __isLoadedGL_AMD_vertex_shader_layer = __loadGL_AMD_vertex_shader_layer(proc);
    __isLoadedGL_AMD_vertex_shader_tessellator = __loadGL_AMD_vertex_shader_tessellator(proc);
    __isLoadedGL_AMD_vertex_shader_viewport_index = __loadGL_AMD_vertex_shader_viewport_index(proc);
    __isLoadedGL_APPLE_aux_depth_stencil = __loadGL_APPLE_aux_depth_stencil(proc);
    __isLoadedGL_APPLE_client_storage = __loadGL_APPLE_client_storage(proc);
    __isLoadedGL_APPLE_element_array = __loadGL_APPLE_element_array(proc);
    __isLoadedGL_APPLE_fence = __loadGL_APPLE_fence(proc);
    __isLoadedGL_APPLE_float_pixels = __loadGL_APPLE_float_pixels(proc);
    __isLoadedGL_APPLE_flush_buffer_range = __loadGL_APPLE_flush_buffer_range(proc);
    __isLoadedGL_APPLE_object_purgeable = __loadGL_APPLE_object_purgeable(proc);
    __isLoadedGL_APPLE_rgb_422 = __loadGL_APPLE_rgb_422(proc);
    __isLoadedGL_APPLE_row_bytes = __loadGL_APPLE_row_bytes(proc);
    __isLoadedGL_APPLE_specular_vector = __loadGL_APPLE_specular_vector(proc);
    __isLoadedGL_APPLE_texture_range = __loadGL_APPLE_texture_range(proc);
    __isLoadedGL_APPLE_transform_hint = __loadGL_APPLE_transform_hint(proc);
    __isLoadedGL_APPLE_vertex_array_object = __loadGL_APPLE_vertex_array_object(proc);
    __isLoadedGL_APPLE_vertex_array_range = __loadGL_APPLE_vertex_array_range(proc);
    __isLoadedGL_APPLE_vertex_program_evaluators = __loadGL_APPLE_vertex_program_evaluators(proc);
    __isLoadedGL_APPLE_ycbcr_422 = __loadGL_APPLE_ycbcr_422(proc);
    __isLoadedGL_ATI_draw_buffers = __loadGL_ATI_draw_buffers(proc);
    __isLoadedGL_ATI_element_array = __loadGL_ATI_element_array(proc);
    __isLoadedGL_ATI_envmap_bumpmap = __loadGL_ATI_envmap_bumpmap(proc);
    __isLoadedGL_ATI_fragment_shader = __loadGL_ATI_fragment_shader(proc);
    __isLoadedGL_ATI_map_object_buffer = __loadGL_ATI_map_object_buffer(proc);
    __isLoadedGL_ATI_meminfo = __loadGL_ATI_meminfo(proc);
    __isLoadedGL_ATI_pixel_format_float = __loadGL_ATI_pixel_format_float(proc);
    __isLoadedGL_ATI_pn_triangles = __loadGL_ATI_pn_triangles(proc);
    __isLoadedGL_ATI_separate_stencil = __loadGL_ATI_separate_stencil(proc);
    __isLoadedGL_ATI_text_fragment_shader = __loadGL_ATI_text_fragment_shader(proc);
    __isLoadedGL_ATI_texture_env_combine3 = __loadGL_ATI_texture_env_combine3(proc);
    __isLoadedGL_ATI_texture_float = __loadGL_ATI_texture_float(proc);
    __isLoadedGL_ATI_texture_mirror_once = __loadGL_ATI_texture_mirror_once(proc);
    __isLoadedGL_ATI_vertex_array_object = __loadGL_ATI_vertex_array_object(proc);
    __isLoadedGL_ATI_vertex_attrib_array_object = __loadGL_ATI_vertex_attrib_array_object(proc);
    __isLoadedGL_ATI_vertex_streams = __loadGL_ATI_vertex_streams(proc);
    __isLoadedGL_EXT_422_pixels = __loadGL_EXT_422_pixels(proc);
    __isLoadedGL_EXT_abgr = __loadGL_EXT_abgr(proc);
    __isLoadedGL_EXT_bgra = __loadGL_EXT_bgra(proc);
    __isLoadedGL_EXT_bindable_uniform = __loadGL_EXT_bindable_uniform(proc);
    __isLoadedGL_EXT_blend_color = __loadGL_EXT_blend_color(proc);
    __isLoadedGL_EXT_blend_equation_separate = __loadGL_EXT_blend_equation_separate(proc);
    __isLoadedGL_EXT_blend_func_separate = __loadGL_EXT_blend_func_separate(proc);
    __isLoadedGL_EXT_blend_logic_op = __loadGL_EXT_blend_logic_op(proc);
    __isLoadedGL_EXT_blend_minmax = __loadGL_EXT_blend_minmax(proc);
    __isLoadedGL_EXT_blend_subtract = __loadGL_EXT_blend_subtract(proc);
    __isLoadedGL_EXT_clip_volume_hint = __loadGL_EXT_clip_volume_hint(proc);
    __isLoadedGL_EXT_cmyka = __loadGL_EXT_cmyka(proc);
    __isLoadedGL_EXT_color_subtable = __loadGL_EXT_color_subtable(proc);
    __isLoadedGL_EXT_compiled_vertex_array = __loadGL_EXT_compiled_vertex_array(proc);
    __isLoadedGL_EXT_convolution = __loadGL_EXT_convolution(proc);
    __isLoadedGL_EXT_coordinate_frame = __loadGL_EXT_coordinate_frame(proc);
    __isLoadedGL_EXT_copy_texture = __loadGL_EXT_copy_texture(proc);
    __isLoadedGL_EXT_cull_vertex = __loadGL_EXT_cull_vertex(proc);
    __isLoadedGL_EXT_debug_label = __loadGL_EXT_debug_label(proc);
    __isLoadedGL_EXT_debug_marker = __loadGL_EXT_debug_marker(proc);
    __isLoadedGL_EXT_depth_bounds_test = __loadGL_EXT_depth_bounds_test(proc);
    __isLoadedGL_EXT_direct_state_access = __loadGL_EXT_direct_state_access(proc);
    __isLoadedGL_EXT_draw_buffers2 = __loadGL_EXT_draw_buffers2(proc);
    __isLoadedGL_EXT_draw_instanced = __loadGL_EXT_draw_instanced(proc);
    __isLoadedGL_EXT_draw_range_elements = __loadGL_EXT_draw_range_elements(proc);
    __isLoadedGL_EXT_fog_coord = __loadGL_EXT_fog_coord(proc);
    __isLoadedGL_EXT_framebuffer_blit = __loadGL_EXT_framebuffer_blit(proc);
    __isLoadedGL_EXT_framebuffer_multisample = __loadGL_EXT_framebuffer_multisample(proc);
    __isLoadedGL_EXT_framebuffer_multisample_blit_scaled = __loadGL_EXT_framebuffer_multisample_blit_scaled(proc);
    __isLoadedGL_EXT_framebuffer_object = __loadGL_EXT_framebuffer_object(proc);
    __isLoadedGL_EXT_framebuffer_sRGB = __loadGL_EXT_framebuffer_sRGB(proc);
    __isLoadedGL_EXT_geometry_shader4 = __loadGL_EXT_geometry_shader4(proc);
    __isLoadedGL_EXT_gpu_program_parameters = __loadGL_EXT_gpu_program_parameters(proc);
    __isLoadedGL_EXT_gpu_shader4 = __loadGL_EXT_gpu_shader4(proc);
    __isLoadedGL_EXT_histogram = __loadGL_EXT_histogram(proc);
    __isLoadedGL_EXT_index_array_formats = __loadGL_EXT_index_array_formats(proc);
    __isLoadedGL_EXT_index_func = __loadGL_EXT_index_func(proc);
    __isLoadedGL_EXT_index_material = __loadGL_EXT_index_material(proc);
    __isLoadedGL_EXT_index_texture = __loadGL_EXT_index_texture(proc);
    __isLoadedGL_EXT_light_texture = __loadGL_EXT_light_texture(proc);
    __isLoadedGL_EXT_misc_attribute = __loadGL_EXT_misc_attribute(proc);
    __isLoadedGL_EXT_multi_draw_arrays = __loadGL_EXT_multi_draw_arrays(proc);
    __isLoadedGL_EXT_multisample = __loadGL_EXT_multisample(proc);
    __isLoadedGL_EXT_packed_depth_stencil = __loadGL_EXT_packed_depth_stencil(proc);
    __isLoadedGL_EXT_packed_float = __loadGL_EXT_packed_float(proc);
    __isLoadedGL_EXT_packed_pixels = __loadGL_EXT_packed_pixels(proc);
    __isLoadedGL_EXT_paletted_texture = __loadGL_EXT_paletted_texture(proc);
    __isLoadedGL_EXT_pixel_buffer_object = __loadGL_EXT_pixel_buffer_object(proc);
    __isLoadedGL_EXT_pixel_transform = __loadGL_EXT_pixel_transform(proc);
    __isLoadedGL_EXT_pixel_transform_color_table = __loadGL_EXT_pixel_transform_color_table(proc);
    __isLoadedGL_EXT_point_parameters = __loadGL_EXT_point_parameters(proc);
    __isLoadedGL_EXT_polygon_offset = __loadGL_EXT_polygon_offset(proc);
    __isLoadedGL_EXT_polygon_offset_clamp = __loadGL_EXT_polygon_offset_clamp(proc);
    __isLoadedGL_EXT_post_depth_coverage = __loadGL_EXT_post_depth_coverage(proc);
    __isLoadedGL_EXT_provoking_vertex = __loadGL_EXT_provoking_vertex(proc);
    __isLoadedGL_EXT_raster_multisample = __loadGL_EXT_raster_multisample(proc);
    __isLoadedGL_EXT_rescale_normal = __loadGL_EXT_rescale_normal(proc);
    __isLoadedGL_EXT_secondary_color = __loadGL_EXT_secondary_color(proc);
    __isLoadedGL_EXT_separate_shader_objects = __loadGL_EXT_separate_shader_objects(proc);
    __isLoadedGL_EXT_separate_specular_color = __loadGL_EXT_separate_specular_color(proc);
    __isLoadedGL_EXT_shader_image_load_formatted = __loadGL_EXT_shader_image_load_formatted(proc);
    __isLoadedGL_EXT_shader_image_load_store = __loadGL_EXT_shader_image_load_store(proc);
    __isLoadedGL_EXT_shader_integer_mix = __loadGL_EXT_shader_integer_mix(proc);
    __isLoadedGL_EXT_shadow_funcs = __loadGL_EXT_shadow_funcs(proc);
    __isLoadedGL_EXT_shared_texture_palette = __loadGL_EXT_shared_texture_palette(proc);
    __isLoadedGL_EXT_sparse_texture2 = __loadGL_EXT_sparse_texture2(proc);
    __isLoadedGL_EXT_stencil_clear_tag = __loadGL_EXT_stencil_clear_tag(proc);
    __isLoadedGL_EXT_stencil_two_side = __loadGL_EXT_stencil_two_side(proc);
    __isLoadedGL_EXT_stencil_wrap = __loadGL_EXT_stencil_wrap(proc);
    __isLoadedGL_EXT_subtexture = __loadGL_EXT_subtexture(proc);
    __isLoadedGL_EXT_texture = __loadGL_EXT_texture(proc);
    __isLoadedGL_EXT_texture3D = __loadGL_EXT_texture3D(proc);
    __isLoadedGL_EXT_texture_array = __loadGL_EXT_texture_array(proc);
    __isLoadedGL_EXT_texture_buffer_object = __loadGL_EXT_texture_buffer_object(proc);
    __isLoadedGL_EXT_texture_compression_latc = __loadGL_EXT_texture_compression_latc(proc);
    __isLoadedGL_EXT_texture_compression_rgtc = __loadGL_EXT_texture_compression_rgtc(proc);
    __isLoadedGL_EXT_texture_compression_s3tc = __loadGL_EXT_texture_compression_s3tc(proc);
    __isLoadedGL_EXT_texture_cube_map = __loadGL_EXT_texture_cube_map(proc);
    __isLoadedGL_EXT_texture_env_add = __loadGL_EXT_texture_env_add(proc);
    __isLoadedGL_EXT_texture_env_combine = __loadGL_EXT_texture_env_combine(proc);
    __isLoadedGL_EXT_texture_env_dot3 = __loadGL_EXT_texture_env_dot3(proc);
    __isLoadedGL_EXT_texture_filter_anisotropic = __loadGL_EXT_texture_filter_anisotropic(proc);
    __isLoadedGL_EXT_texture_filter_minmax = __loadGL_EXT_texture_filter_minmax(proc);
    __isLoadedGL_EXT_texture_integer = __loadGL_EXT_texture_integer(proc);
    __isLoadedGL_EXT_texture_lod_bias = __loadGL_EXT_texture_lod_bias(proc);
    __isLoadedGL_EXT_texture_mirror_clamp = __loadGL_EXT_texture_mirror_clamp(proc);
    __isLoadedGL_EXT_texture_object = __loadGL_EXT_texture_object(proc);
    __isLoadedGL_EXT_texture_perturb_normal = __loadGL_EXT_texture_perturb_normal(proc);
    __isLoadedGL_EXT_texture_sRGB = __loadGL_EXT_texture_sRGB(proc);
    __isLoadedGL_EXT_texture_sRGB_decode = __loadGL_EXT_texture_sRGB_decode(proc);
    __isLoadedGL_EXT_texture_shared_exponent = __loadGL_EXT_texture_shared_exponent(proc);
    __isLoadedGL_EXT_texture_snorm = __loadGL_EXT_texture_snorm(proc);
    __isLoadedGL_EXT_texture_swizzle = __loadGL_EXT_texture_swizzle(proc);
    __isLoadedGL_EXT_timer_query = __loadGL_EXT_timer_query(proc);
    __isLoadedGL_EXT_transform_feedback = __loadGL_EXT_transform_feedback(proc);
    __isLoadedGL_EXT_vertex_array = __loadGL_EXT_vertex_array(proc);
    __isLoadedGL_EXT_vertex_array_bgra = __loadGL_EXT_vertex_array_bgra(proc);
    __isLoadedGL_EXT_vertex_attrib_64bit = __loadGL_EXT_vertex_attrib_64bit(proc);
    __isLoadedGL_EXT_vertex_shader = __loadGL_EXT_vertex_shader(proc);
    __isLoadedGL_EXT_vertex_weighting = __loadGL_EXT_vertex_weighting(proc);
    __isLoadedGL_EXT_x11_sync_object = __loadGL_EXT_x11_sync_object(proc);
    __isLoadedGL_GREMEDY_frame_terminator = __loadGL_GREMEDY_frame_terminator(proc);
    __isLoadedGL_GREMEDY_string_marker = __loadGL_GREMEDY_string_marker(proc);
    __isLoadedGL_HP_convolution_border_modes = __loadGL_HP_convolution_border_modes(proc);
    __isLoadedGL_HP_image_transform = __loadGL_HP_image_transform(proc);
    __isLoadedGL_HP_occlusion_test = __loadGL_HP_occlusion_test(proc);
    __isLoadedGL_HP_texture_lighting = __loadGL_HP_texture_lighting(proc);
    __isLoadedGL_IBM_cull_vertex = __loadGL_IBM_cull_vertex(proc);
    __isLoadedGL_IBM_multimode_draw_arrays = __loadGL_IBM_multimode_draw_arrays(proc);
    __isLoadedGL_IBM_rasterpos_clip = __loadGL_IBM_rasterpos_clip(proc);
    __isLoadedGL_IBM_static_data = __loadGL_IBM_static_data(proc);
    __isLoadedGL_IBM_texture_mirrored_repeat = __loadGL_IBM_texture_mirrored_repeat(proc);
    __isLoadedGL_IBM_vertex_array_lists = __loadGL_IBM_vertex_array_lists(proc);
    __isLoadedGL_INGR_blend_func_separate = __loadGL_INGR_blend_func_separate(proc);
    __isLoadedGL_INGR_color_clamp = __loadGL_INGR_color_clamp(proc);
    __isLoadedGL_INGR_interlace_read = __loadGL_INGR_interlace_read(proc);
    __isLoadedGL_INTEL_fragment_shader_ordering = __loadGL_INTEL_fragment_shader_ordering(proc);
    __isLoadedGL_INTEL_framebuffer_CMAA = __loadGL_INTEL_framebuffer_CMAA(proc);
    __isLoadedGL_INTEL_map_texture = __loadGL_INTEL_map_texture(proc);
    __isLoadedGL_INTEL_parallel_arrays = __loadGL_INTEL_parallel_arrays(proc);
    __isLoadedGL_INTEL_performance_query = __loadGL_INTEL_performance_query(proc);
    __isLoadedGL_MESAX_texture_stack = __loadGL_MESAX_texture_stack(proc);
    __isLoadedGL_MESA_pack_invert = __loadGL_MESA_pack_invert(proc);
    __isLoadedGL_MESA_resize_buffers = __loadGL_MESA_resize_buffers(proc);
    __isLoadedGL_MESA_window_pos = __loadGL_MESA_window_pos(proc);
    __isLoadedGL_MESA_ycbcr_texture = __loadGL_MESA_ycbcr_texture(proc);
    __isLoadedGL_NVX_conditional_render = __loadGL_NVX_conditional_render(proc);
    __isLoadedGL_NVX_gpu_memory_info = __loadGL_NVX_gpu_memory_info(proc);
    __isLoadedGL_NV_bindless_multi_draw_indirect = __loadGL_NV_bindless_multi_draw_indirect(proc);
    __isLoadedGL_NV_bindless_multi_draw_indirect_count = __loadGL_NV_bindless_multi_draw_indirect_count(proc);
    __isLoadedGL_NV_bindless_texture = __loadGL_NV_bindless_texture(proc);
    __isLoadedGL_NV_blend_equation_advanced = __loadGL_NV_blend_equation_advanced(proc);
    __isLoadedGL_NV_blend_equation_advanced_coherent = __loadGL_NV_blend_equation_advanced_coherent(proc);
    __isLoadedGL_NV_blend_square = __loadGL_NV_blend_square(proc);
    __isLoadedGL_NV_command_list = __loadGL_NV_command_list(proc);
    __isLoadedGL_NV_compute_program5 = __loadGL_NV_compute_program5(proc);
    __isLoadedGL_NV_conditional_render = __loadGL_NV_conditional_render(proc);
    __isLoadedGL_NV_conservative_raster = __loadGL_NV_conservative_raster(proc);
    __isLoadedGL_NV_conservative_raster_dilate = __loadGL_NV_conservative_raster_dilate(proc);
    __isLoadedGL_NV_copy_depth_to_color = __loadGL_NV_copy_depth_to_color(proc);
    __isLoadedGL_NV_copy_image = __loadGL_NV_copy_image(proc);
    __isLoadedGL_NV_deep_texture3D = __loadGL_NV_deep_texture3D(proc);
    __isLoadedGL_NV_depth_buffer_float = __loadGL_NV_depth_buffer_float(proc);
    __isLoadedGL_NV_depth_clamp = __loadGL_NV_depth_clamp(proc);
    __isLoadedGL_NV_draw_texture = __loadGL_NV_draw_texture(proc);
    __isLoadedGL_NV_evaluators = __loadGL_NV_evaluators(proc);
    __isLoadedGL_NV_explicit_multisample = __loadGL_NV_explicit_multisample(proc);
    __isLoadedGL_NV_fence = __loadGL_NV_fence(proc);
    __isLoadedGL_NV_fill_rectangle = __loadGL_NV_fill_rectangle(proc);
    __isLoadedGL_NV_float_buffer = __loadGL_NV_float_buffer(proc);
    __isLoadedGL_NV_fog_distance = __loadGL_NV_fog_distance(proc);
    __isLoadedGL_NV_fragment_coverage_to_color = __loadGL_NV_fragment_coverage_to_color(proc);
    __isLoadedGL_NV_fragment_program = __loadGL_NV_fragment_program(proc);
    __isLoadedGL_NV_fragment_program2 = __loadGL_NV_fragment_program2(proc);
    __isLoadedGL_NV_fragment_program4 = __loadGL_NV_fragment_program4(proc);
    __isLoadedGL_NV_fragment_program_option = __loadGL_NV_fragment_program_option(proc);
    __isLoadedGL_NV_fragment_shader_interlock = __loadGL_NV_fragment_shader_interlock(proc);
    __isLoadedGL_NV_framebuffer_mixed_samples = __loadGL_NV_framebuffer_mixed_samples(proc);
    __isLoadedGL_NV_framebuffer_multisample_coverage = __loadGL_NV_framebuffer_multisample_coverage(proc);
    __isLoadedGL_NV_geometry_program4 = __loadGL_NV_geometry_program4(proc);
    __isLoadedGL_NV_geometry_shader4 = __loadGL_NV_geometry_shader4(proc);
    __isLoadedGL_NV_geometry_shader_passthrough = __loadGL_NV_geometry_shader_passthrough(proc);
    __isLoadedGL_NV_gpu_program4 = __loadGL_NV_gpu_program4(proc);
    __isLoadedGL_NV_gpu_program5 = __loadGL_NV_gpu_program5(proc);
    __isLoadedGL_NV_gpu_program5_mem_extended = __loadGL_NV_gpu_program5_mem_extended(proc);
    __isLoadedGL_NV_gpu_shader5 = __loadGL_NV_gpu_shader5(proc);
    __isLoadedGL_NV_half_float = __loadGL_NV_half_float(proc);
    __isLoadedGL_NV_internalformat_sample_query = __loadGL_NV_internalformat_sample_query(proc);
    __isLoadedGL_NV_light_max_exponent = __loadGL_NV_light_max_exponent(proc);
    __isLoadedGL_NV_multisample_coverage = __loadGL_NV_multisample_coverage(proc);
    __isLoadedGL_NV_multisample_filter_hint = __loadGL_NV_multisample_filter_hint(proc);
    __isLoadedGL_NV_occlusion_query = __loadGL_NV_occlusion_query(proc);
    __isLoadedGL_NV_packed_depth_stencil = __loadGL_NV_packed_depth_stencil(proc);
    __isLoadedGL_NV_parameter_buffer_object = __loadGL_NV_parameter_buffer_object(proc);
    __isLoadedGL_NV_parameter_buffer_object2 = __loadGL_NV_parameter_buffer_object2(proc);
    __isLoadedGL_NV_path_rendering = __loadGL_NV_path_rendering(proc);
    __isLoadedGL_NV_path_rendering_shared_edge = __loadGL_NV_path_rendering_shared_edge(proc);
    __isLoadedGL_NV_pixel_data_range = __loadGL_NV_pixel_data_range(proc);
    __isLoadedGL_NV_point_sprite = __loadGL_NV_point_sprite(proc);
    __isLoadedGL_NV_present_video = __loadGL_NV_present_video(proc);
    __isLoadedGL_NV_primitive_restart = __loadGL_NV_primitive_restart(proc);
    __isLoadedGL_NV_register_combiners = __loadGL_NV_register_combiners(proc);
    __isLoadedGL_NV_register_combiners2 = __loadGL_NV_register_combiners2(proc);
    __isLoadedGL_NV_sample_locations = __loadGL_NV_sample_locations(proc);
    __isLoadedGL_NV_sample_mask_override_coverage = __loadGL_NV_sample_mask_override_coverage(proc);
    __isLoadedGL_NV_shader_atomic_counters = __loadGL_NV_shader_atomic_counters(proc);
    __isLoadedGL_NV_shader_atomic_float = __loadGL_NV_shader_atomic_float(proc);
    __isLoadedGL_NV_shader_atomic_fp16_vector = __loadGL_NV_shader_atomic_fp16_vector(proc);
    __isLoadedGL_NV_shader_atomic_int64 = __loadGL_NV_shader_atomic_int64(proc);
    __isLoadedGL_NV_shader_buffer_load = __loadGL_NV_shader_buffer_load(proc);
    __isLoadedGL_NV_shader_buffer_store = __loadGL_NV_shader_buffer_store(proc);
    __isLoadedGL_NV_shader_storage_buffer_object = __loadGL_NV_shader_storage_buffer_object(proc);
    __isLoadedGL_NV_shader_thread_group = __loadGL_NV_shader_thread_group(proc);
    __isLoadedGL_NV_shader_thread_shuffle = __loadGL_NV_shader_thread_shuffle(proc);
    __isLoadedGL_NV_tessellation_program5 = __loadGL_NV_tessellation_program5(proc);
    __isLoadedGL_NV_texgen_emboss = __loadGL_NV_texgen_emboss(proc);
    __isLoadedGL_NV_texgen_reflection = __loadGL_NV_texgen_reflection(proc);
    __isLoadedGL_NV_texture_barrier = __loadGL_NV_texture_barrier(proc);
    __isLoadedGL_NV_texture_compression_vtc = __loadGL_NV_texture_compression_vtc(proc);
    __isLoadedGL_NV_texture_env_combine4 = __loadGL_NV_texture_env_combine4(proc);
    __isLoadedGL_NV_texture_expand_normal = __loadGL_NV_texture_expand_normal(proc);
    __isLoadedGL_NV_texture_multisample = __loadGL_NV_texture_multisample(proc);
    __isLoadedGL_NV_texture_rectangle = __loadGL_NV_texture_rectangle(proc);
    __isLoadedGL_NV_texture_shader = __loadGL_NV_texture_shader(proc);
    __isLoadedGL_NV_texture_shader2 = __loadGL_NV_texture_shader2(proc);
    __isLoadedGL_NV_texture_shader3 = __loadGL_NV_texture_shader3(proc);
    __isLoadedGL_NV_transform_feedback = __loadGL_NV_transform_feedback(proc);
    __isLoadedGL_NV_transform_feedback2 = __loadGL_NV_transform_feedback2(proc);
    __isLoadedGL_NV_uniform_buffer_unified_memory = __loadGL_NV_uniform_buffer_unified_memory(proc);
    __isLoadedGL_NV_vdpau_interop = __loadGL_NV_vdpau_interop(proc);
    __isLoadedGL_NV_vertex_array_range = __loadGL_NV_vertex_array_range(proc);
    __isLoadedGL_NV_vertex_array_range2 = __loadGL_NV_vertex_array_range2(proc);
    __isLoadedGL_NV_vertex_attrib_integer_64bit = __loadGL_NV_vertex_attrib_integer_64bit(proc);
    __isLoadedGL_NV_vertex_buffer_unified_memory = __loadGL_NV_vertex_buffer_unified_memory(proc);
    __isLoadedGL_NV_vertex_program = __loadGL_NV_vertex_program(proc);
    __isLoadedGL_NV_vertex_program1_1 = __loadGL_NV_vertex_program1_1(proc);
    __isLoadedGL_NV_vertex_program2 = __loadGL_NV_vertex_program2(proc);
    __isLoadedGL_NV_vertex_program2_option = __loadGL_NV_vertex_program2_option(proc);
    __isLoadedGL_NV_vertex_program3 = __loadGL_NV_vertex_program3(proc);
    __isLoadedGL_NV_vertex_program4 = __loadGL_NV_vertex_program4(proc);
    __isLoadedGL_NV_video_capture = __loadGL_NV_video_capture(proc);
    __isLoadedGL_NV_viewport_array2 = __loadGL_NV_viewport_array2(proc);
    __isLoadedGL_OML_interlace = __loadGL_OML_interlace(proc);
    __isLoadedGL_OML_resample = __loadGL_OML_resample(proc);
    __isLoadedGL_OML_subsample = __loadGL_OML_subsample(proc);
    __isLoadedGL_OVR_multiview = __loadGL_OVR_multiview(proc);
    __isLoadedGL_OVR_multiview2 = __loadGL_OVR_multiview2(proc);
    __isLoadedGL_PGI_misc_hints = __loadGL_PGI_misc_hints(proc);
    __isLoadedGL_PGI_vertex_hints = __loadGL_PGI_vertex_hints(proc);
    __isLoadedGL_REND_screen_coordinates = __loadGL_REND_screen_coordinates(proc);
    __isLoadedGL_S3_s3tc = __loadGL_S3_s3tc(proc);
    __isLoadedGL_SGIS_detail_texture = __loadGL_SGIS_detail_texture(proc);
    __isLoadedGL_SGIS_fog_function = __loadGL_SGIS_fog_function(proc);
    __isLoadedGL_SGIS_generate_mipmap = __loadGL_SGIS_generate_mipmap(proc);
    __isLoadedGL_SGIS_multisample = __loadGL_SGIS_multisample(proc);
    __isLoadedGL_SGIS_pixel_texture = __loadGL_SGIS_pixel_texture(proc);
    __isLoadedGL_SGIS_point_line_texgen = __loadGL_SGIS_point_line_texgen(proc);
    __isLoadedGL_SGIS_point_parameters = __loadGL_SGIS_point_parameters(proc);
    __isLoadedGL_SGIS_sharpen_texture = __loadGL_SGIS_sharpen_texture(proc);
    __isLoadedGL_SGIS_texture4D = __loadGL_SGIS_texture4D(proc);
    __isLoadedGL_SGIS_texture_border_clamp = __loadGL_SGIS_texture_border_clamp(proc);
    __isLoadedGL_SGIS_texture_color_mask = __loadGL_SGIS_texture_color_mask(proc);
    __isLoadedGL_SGIS_texture_edge_clamp = __loadGL_SGIS_texture_edge_clamp(proc);
    __isLoadedGL_SGIS_texture_filter4 = __loadGL_SGIS_texture_filter4(proc);
    __isLoadedGL_SGIS_texture_lod = __loadGL_SGIS_texture_lod(proc);
    __isLoadedGL_SGIS_texture_select = __loadGL_SGIS_texture_select(proc);
    __isLoadedGL_SGIX_async = __loadGL_SGIX_async(proc);
    __isLoadedGL_SGIX_async_histogram = __loadGL_SGIX_async_histogram(proc);
    __isLoadedGL_SGIX_async_pixel = __loadGL_SGIX_async_pixel(proc);
    __isLoadedGL_SGIX_blend_alpha_minmax = __loadGL_SGIX_blend_alpha_minmax(proc);
    __isLoadedGL_SGIX_calligraphic_fragment = __loadGL_SGIX_calligraphic_fragment(proc);
    __isLoadedGL_SGIX_clipmap = __loadGL_SGIX_clipmap(proc);
    __isLoadedGL_SGIX_convolution_accuracy = __loadGL_SGIX_convolution_accuracy(proc);
    __isLoadedGL_SGIX_depth_pass_instrument = __loadGL_SGIX_depth_pass_instrument(proc);
    __isLoadedGL_SGIX_depth_texture = __loadGL_SGIX_depth_texture(proc);
    __isLoadedGL_SGIX_flush_raster = __loadGL_SGIX_flush_raster(proc);
    __isLoadedGL_SGIX_fog_offset = __loadGL_SGIX_fog_offset(proc);
    __isLoadedGL_SGIX_fragment_lighting = __loadGL_SGIX_fragment_lighting(proc);
    __isLoadedGL_SGIX_framezoom = __loadGL_SGIX_framezoom(proc);
    __isLoadedGL_SGIX_igloo_interface = __loadGL_SGIX_igloo_interface(proc);
    __isLoadedGL_SGIX_instruments = __loadGL_SGIX_instruments(proc);
    __isLoadedGL_SGIX_interlace = __loadGL_SGIX_interlace(proc);
    __isLoadedGL_SGIX_ir_instrument1 = __loadGL_SGIX_ir_instrument1(proc);
    __isLoadedGL_SGIX_list_priority = __loadGL_SGIX_list_priority(proc);
    __isLoadedGL_SGIX_pixel_texture = __loadGL_SGIX_pixel_texture(proc);
    __isLoadedGL_SGIX_pixel_tiles = __loadGL_SGIX_pixel_tiles(proc);
    __isLoadedGL_SGIX_polynomial_ffd = __loadGL_SGIX_polynomial_ffd(proc);
    __isLoadedGL_SGIX_reference_plane = __loadGL_SGIX_reference_plane(proc);
    __isLoadedGL_SGIX_resample = __loadGL_SGIX_resample(proc);
    __isLoadedGL_SGIX_scalebias_hint = __loadGL_SGIX_scalebias_hint(proc);
    __isLoadedGL_SGIX_shadow = __loadGL_SGIX_shadow(proc);
    __isLoadedGL_SGIX_shadow_ambient = __loadGL_SGIX_shadow_ambient(proc);
    __isLoadedGL_SGIX_sprite = __loadGL_SGIX_sprite(proc);
    __isLoadedGL_SGIX_subsample = __loadGL_SGIX_subsample(proc);
    __isLoadedGL_SGIX_tag_sample_buffer = __loadGL_SGIX_tag_sample_buffer(proc);
    __isLoadedGL_SGIX_texture_add_env = __loadGL_SGIX_texture_add_env(proc);
    __isLoadedGL_SGIX_texture_coordinate_clamp = __loadGL_SGIX_texture_coordinate_clamp(proc);
    __isLoadedGL_SGIX_texture_lod_bias = __loadGL_SGIX_texture_lod_bias(proc);
    __isLoadedGL_SGIX_texture_multi_buffer = __loadGL_SGIX_texture_multi_buffer(proc);
    __isLoadedGL_SGIX_texture_scale_bias = __loadGL_SGIX_texture_scale_bias(proc);
    __isLoadedGL_SGIX_vertex_preclip = __loadGL_SGIX_vertex_preclip(proc);
    __isLoadedGL_SGIX_ycrcb = __loadGL_SGIX_ycrcb(proc);
    __isLoadedGL_SGIX_ycrcb_subsample = __loadGL_SGIX_ycrcb_subsample(proc);
    __isLoadedGL_SGIX_ycrcba = __loadGL_SGIX_ycrcba(proc);
    __isLoadedGL_SGI_color_matrix = __loadGL_SGI_color_matrix(proc);
    __isLoadedGL_SGI_color_table = __loadGL_SGI_color_table(proc);
    __isLoadedGL_SGI_texture_color_table = __loadGL_SGI_texture_color_table(proc);
    __isLoadedGL_SUNX_constant_data = __loadGL_SUNX_constant_data(proc);
    __isLoadedGL_SUN_convolution_border_modes = __loadGL_SUN_convolution_border_modes(proc);
    __isLoadedGL_SUN_global_alpha = __loadGL_SUN_global_alpha(proc);
    __isLoadedGL_SUN_mesh_array = __loadGL_SUN_mesh_array(proc);
    __isLoadedGL_SUN_slice_accum = __loadGL_SUN_slice_accum(proc);
    __isLoadedGL_SUN_triangle_list = __loadGL_SUN_triangle_list(proc);
    __isLoadedGL_SUN_vertex = __loadGL_SUN_vertex(proc);
    __isLoadedGL_WIN_phong_shading = __loadGL_WIN_phong_shading(proc);
    __isLoadedGL_WIN_specular_fog = __loadGL_WIN_specular_fog(proc);
    __isLoadedWGL_ARB_buffer_region = __loadWGL_ARB_buffer_region(proc);
    __isLoadedWGL_ARB_context_flush_control = __loadWGL_ARB_context_flush_control(proc);
    __isLoadedWGL_ARB_create_context = __loadWGL_ARB_create_context(proc);
    __isLoadedWGL_ARB_create_context_profile = __loadWGL_ARB_create_context_profile(proc);
    __isLoadedWGL_ARB_create_context_robustness = __loadWGL_ARB_create_context_robustness(proc);
    __isLoadedWGL_ARB_extensions_string = __loadWGL_ARB_extensions_string(proc);
    __isLoadedWGL_ARB_framebuffer_sRGB = __loadWGL_ARB_framebuffer_sRGB(proc);
    __isLoadedWGL_ARB_make_current_read = __loadWGL_ARB_make_current_read(proc);
    __isLoadedWGL_ARB_multisample = __loadWGL_ARB_multisample(proc);
    __isLoadedWGL_ARB_pbuffer = __loadWGL_ARB_pbuffer(proc);
    __isLoadedWGL_ARB_pixel_format = __loadWGL_ARB_pixel_format(proc);
    __isLoadedWGL_ARB_pixel_format_float = __loadWGL_ARB_pixel_format_float(proc);
    __isLoadedWGL_ARB_render_texture = __loadWGL_ARB_render_texture(proc);
    __isLoadedWGL_ARB_robustness_application_isolation = __loadWGL_ARB_robustness_application_isolation(proc);
    __isLoadedWGL_ARB_robustness_share_group_isolation = __loadWGL_ARB_robustness_share_group_isolation(proc);
    __isLoadedWGL_3DFX_multisample = __loadWGL_3DFX_multisample(proc);
    __isLoadedWGL_3DL_stereo_control = __loadWGL_3DL_stereo_control(proc);
    __isLoadedWGL_AMD_gpu_association = __loadWGL_AMD_gpu_association(proc);
    __isLoadedWGL_ATI_pixel_format_float = __loadWGL_ATI_pixel_format_float(proc);
    __isLoadedWGL_EXT_create_context_es2_profile = __loadWGL_EXT_create_context_es2_profile(proc);
    __isLoadedWGL_EXT_create_context_es_profile = __loadWGL_EXT_create_context_es_profile(proc);
    __isLoadedWGL_EXT_depth_float = __loadWGL_EXT_depth_float(proc);
    __isLoadedWGL_EXT_display_color_table = __loadWGL_EXT_display_color_table(proc);
    __isLoadedWGL_EXT_extensions_string = __loadWGL_EXT_extensions_string(proc);
    __isLoadedWGL_EXT_framebuffer_sRGB = __loadWGL_EXT_framebuffer_sRGB(proc);
    __isLoadedWGL_EXT_make_current_read = __loadWGL_EXT_make_current_read(proc);
    __isLoadedWGL_EXT_multisample = __loadWGL_EXT_multisample(proc);
    __isLoadedWGL_EXT_pbuffer = __loadWGL_EXT_pbuffer(proc);
    __isLoadedWGL_EXT_pixel_format = __loadWGL_EXT_pixel_format(proc);
    __isLoadedWGL_EXT_pixel_format_packed_float = __loadWGL_EXT_pixel_format_packed_float(proc);
    __isLoadedWGL_EXT_swap_control = __loadWGL_EXT_swap_control(proc);
    __isLoadedWGL_EXT_swap_control_tear = __loadWGL_EXT_swap_control_tear(proc);
    __isLoadedWGL_I3D_digital_video_control = __loadWGL_I3D_digital_video_control(proc);
    __isLoadedWGL_I3D_gamma = __loadWGL_I3D_gamma(proc);
    __isLoadedWGL_I3D_genlock = __loadWGL_I3D_genlock(proc);
    __isLoadedWGL_I3D_image_buffer = __loadWGL_I3D_image_buffer(proc);
    __isLoadedWGL_I3D_swap_frame_lock = __loadWGL_I3D_swap_frame_lock(proc);
    __isLoadedWGL_I3D_swap_frame_usage = __loadWGL_I3D_swap_frame_usage(proc);
    __isLoadedWGL_NV_DX_interop = __loadWGL_NV_DX_interop(proc);
    __isLoadedWGL_NV_DX_interop2 = __loadWGL_NV_DX_interop2(proc);
    __isLoadedWGL_NV_copy_image = __loadWGL_NV_copy_image(proc);
    __isLoadedWGL_NV_delay_before_swap = __loadWGL_NV_delay_before_swap(proc);
    __isLoadedWGL_NV_float_buffer = __loadWGL_NV_float_buffer(proc);
    __isLoadedWGL_NV_gpu_affinity = __loadWGL_NV_gpu_affinity(proc);
    __isLoadedWGL_NV_multisample_coverage = __loadWGL_NV_multisample_coverage(proc);
    __isLoadedWGL_NV_present_video = __loadWGL_NV_present_video(proc);
    __isLoadedWGL_NV_render_depth_texture = __loadWGL_NV_render_depth_texture(proc);
    __isLoadedWGL_NV_render_texture_rectangle = __loadWGL_NV_render_texture_rectangle(proc);
    __isLoadedWGL_NV_swap_group = __loadWGL_NV_swap_group(proc);
    __isLoadedWGL_NV_vertex_array_range = __loadWGL_NV_vertex_array_range(proc);
    __isLoadedWGL_NV_video_capture = __loadWGL_NV_video_capture(proc);
    __isLoadedWGL_NV_video_output = __loadWGL_NV_video_output(proc);
    __isLoadedWGL_OML_sync_control = __loadWGL_OML_sync_control(proc);
    return true;
}

bool glExtLoadOne(PFNGLGETPROC* proc, const char* name)
{
    if(strcmp(name,"GL_VERSION_1_2") == 0) return __isLoadedGL_VERSION_1_2 = __loadGL_VERSION_1_2(proc);
    if(strcmp(name,"GL_VERSION_1_3") == 0) return __isLoadedGL_VERSION_1_3 = __loadGL_VERSION_1_3(proc);
    if(strcmp(name,"GL_VERSION_1_4") == 0) return __isLoadedGL_VERSION_1_4 = __loadGL_VERSION_1_4(proc);
    if(strcmp(name,"GL_VERSION_1_5") == 0) return __isLoadedGL_VERSION_1_5 = __loadGL_VERSION_1_5(proc);
    if(strcmp(name,"GL_VERSION_2_0") == 0) return __isLoadedGL_VERSION_2_0 = __loadGL_VERSION_2_0(proc);
    if(strcmp(name,"GL_VERSION_2_1") == 0) return __isLoadedGL_VERSION_2_1 = __loadGL_VERSION_2_1(proc);
    if(strcmp(name,"GL_VERSION_3_0") == 0) return __isLoadedGL_VERSION_3_0 = __loadGL_VERSION_3_0(proc);
    if(strcmp(name,"GL_VERSION_3_1") == 0) return __isLoadedGL_VERSION_3_1 = __loadGL_VERSION_3_1(proc);
    if(strcmp(name,"GL_VERSION_3_2") == 0) return __isLoadedGL_VERSION_3_2 = __loadGL_VERSION_3_2(proc);
    if(strcmp(name,"GL_VERSION_3_3") == 0) return __isLoadedGL_VERSION_3_3 = __loadGL_VERSION_3_3(proc);
    if(strcmp(name,"GL_VERSION_4_0") == 0) return __isLoadedGL_VERSION_4_0 = __loadGL_VERSION_4_0(proc);
    if(strcmp(name,"GL_VERSION_4_1") == 0) return __isLoadedGL_VERSION_4_1 = __loadGL_VERSION_4_1(proc);
    if(strcmp(name,"GL_VERSION_4_2") == 0) return __isLoadedGL_VERSION_4_2 = __loadGL_VERSION_4_2(proc);
    if(strcmp(name,"GL_VERSION_4_3") == 0) return __isLoadedGL_VERSION_4_3 = __loadGL_VERSION_4_3(proc);
    if(strcmp(name,"GL_VERSION_4_4") == 0) return __isLoadedGL_VERSION_4_4 = __loadGL_VERSION_4_4(proc);
    if(strcmp(name,"GL_VERSION_4_5") == 0) return __isLoadedGL_VERSION_4_5 = __loadGL_VERSION_4_5(proc);
    if(strcmp(name,"GL_ARB_ES2_compatibility") == 0) return __isLoadedGL_ARB_ES2_compatibility = __loadGL_ARB_ES2_compatibility(proc);
    if(strcmp(name,"GL_ARB_ES3_1_compatibility") == 0) return __isLoadedGL_ARB_ES3_1_compatibility = __loadGL_ARB_ES3_1_compatibility(proc);
    if(strcmp(name,"GL_ARB_ES3_2_compatibility") == 0) return __isLoadedGL_ARB_ES3_2_compatibility = __loadGL_ARB_ES3_2_compatibility(proc);
    if(strcmp(name,"GL_ARB_ES3_compatibility") == 0) return __isLoadedGL_ARB_ES3_compatibility = __loadGL_ARB_ES3_compatibility(proc);
    if(strcmp(name,"GL_ARB_arrays_of_arrays") == 0) return __isLoadedGL_ARB_arrays_of_arrays = __loadGL_ARB_arrays_of_arrays(proc);
    if(strcmp(name,"GL_ARB_base_instance") == 0) return __isLoadedGL_ARB_base_instance = __loadGL_ARB_base_instance(proc);
    if(strcmp(name,"GL_ARB_bindless_texture") == 0) return __isLoadedGL_ARB_bindless_texture = __loadGL_ARB_bindless_texture(proc);
    if(strcmp(name,"GL_ARB_blend_func_extended") == 0) return __isLoadedGL_ARB_blend_func_extended = __loadGL_ARB_blend_func_extended(proc);
    if(strcmp(name,"GL_ARB_buffer_storage") == 0) return __isLoadedGL_ARB_buffer_storage = __loadGL_ARB_buffer_storage(proc);
    if(strcmp(name,"GL_ARB_cl_event") == 0) return __isLoadedGL_ARB_cl_event = __loadGL_ARB_cl_event(proc);
    if(strcmp(name,"GL_ARB_clear_buffer_object") == 0) return __isLoadedGL_ARB_clear_buffer_object = __loadGL_ARB_clear_buffer_object(proc);
    if(strcmp(name,"GL_ARB_clear_texture") == 0) return __isLoadedGL_ARB_clear_texture = __loadGL_ARB_clear_texture(proc);
    if(strcmp(name,"GL_ARB_clip_control") == 0) return __isLoadedGL_ARB_clip_control = __loadGL_ARB_clip_control(proc);
    if(strcmp(name,"GL_ARB_color_buffer_float") == 0) return __isLoadedGL_ARB_color_buffer_float = __loadGL_ARB_color_buffer_float(proc);
    if(strcmp(name,"GL_ARB_compatibility") == 0) return __isLoadedGL_ARB_compatibility = __loadGL_ARB_compatibility(proc);
    if(strcmp(name,"GL_ARB_compressed_texture_pixel_storage") == 0) return __isLoadedGL_ARB_compressed_texture_pixel_storage = __loadGL_ARB_compressed_texture_pixel_storage(proc);
    if(strcmp(name,"GL_ARB_compute_shader") == 0) return __isLoadedGL_ARB_compute_shader = __loadGL_ARB_compute_shader(proc);
    if(strcmp(name,"GL_ARB_compute_variable_group_size") == 0) return __isLoadedGL_ARB_compute_variable_group_size = __loadGL_ARB_compute_variable_group_size(proc);
    if(strcmp(name,"GL_ARB_conditional_render_inverted") == 0) return __isLoadedGL_ARB_conditional_render_inverted = __loadGL_ARB_conditional_render_inverted(proc);
    if(strcmp(name,"GL_ARB_conservative_depth") == 0) return __isLoadedGL_ARB_conservative_depth = __loadGL_ARB_conservative_depth(proc);
    if(strcmp(name,"GL_ARB_copy_buffer") == 0) return __isLoadedGL_ARB_copy_buffer = __loadGL_ARB_copy_buffer(proc);
    if(strcmp(name,"GL_ARB_copy_image") == 0) return __isLoadedGL_ARB_copy_image = __loadGL_ARB_copy_image(proc);
    if(strcmp(name,"GL_ARB_cull_distance") == 0) return __isLoadedGL_ARB_cull_distance = __loadGL_ARB_cull_distance(proc);
    if(strcmp(name,"GL_ARB_debug_output") == 0) return __isLoadedGL_ARB_debug_output = __loadGL_ARB_debug_output(proc);
    if(strcmp(name,"GL_ARB_depth_buffer_float") == 0) return __isLoadedGL_ARB_depth_buffer_float = __loadGL_ARB_depth_buffer_float(proc);
    if(strcmp(name,"GL_ARB_depth_clamp") == 0) return __isLoadedGL_ARB_depth_clamp = __loadGL_ARB_depth_clamp(proc);
    if(strcmp(name,"GL_ARB_depth_texture") == 0) return __isLoadedGL_ARB_depth_texture = __loadGL_ARB_depth_texture(proc);
    if(strcmp(name,"GL_ARB_derivative_control") == 0) return __isLoadedGL_ARB_derivative_control = __loadGL_ARB_derivative_control(proc);
    if(strcmp(name,"GL_ARB_direct_state_access") == 0) return __isLoadedGL_ARB_direct_state_access = __loadGL_ARB_direct_state_access(proc);
    if(strcmp(name,"GL_ARB_draw_buffers") == 0) return __isLoadedGL_ARB_draw_buffers = __loadGL_ARB_draw_buffers(proc);
    if(strcmp(name,"GL_ARB_draw_buffers_blend") == 0) return __isLoadedGL_ARB_draw_buffers_blend = __loadGL_ARB_draw_buffers_blend(proc);
    if(strcmp(name,"GL_ARB_draw_elements_base_vertex") == 0) return __isLoadedGL_ARB_draw_elements_base_vertex = __loadGL_ARB_draw_elements_base_vertex(proc);
    if(strcmp(name,"GL_ARB_draw_indirect") == 0) return __isLoadedGL_ARB_draw_indirect = __loadGL_ARB_draw_indirect(proc);
    if(strcmp(name,"GL_ARB_draw_instanced") == 0) return __isLoadedGL_ARB_draw_instanced = __loadGL_ARB_draw_instanced(proc);
    if(strcmp(name,"GL_ARB_enhanced_layouts") == 0) return __isLoadedGL_ARB_enhanced_layouts = __loadGL_ARB_enhanced_layouts(proc);
    if(strcmp(name,"GL_ARB_explicit_attrib_location") == 0) return __isLoadedGL_ARB_explicit_attrib_location = __loadGL_ARB_explicit_attrib_location(proc);
    if(strcmp(name,"GL_ARB_explicit_uniform_location") == 0) return __isLoadedGL_ARB_explicit_uniform_location = __loadGL_ARB_explicit_uniform_location(proc);
    if(strcmp(name,"GL_ARB_fragment_coord_conventions") == 0) return __isLoadedGL_ARB_fragment_coord_conventions = __loadGL_ARB_fragment_coord_conventions(proc);
    if(strcmp(name,"GL_ARB_fragment_layer_viewport") == 0) return __isLoadedGL_ARB_fragment_layer_viewport = __loadGL_ARB_fragment_layer_viewport(proc);
    if(strcmp(name,"GL_ARB_fragment_program") == 0) return __isLoadedGL_ARB_fragment_program = __loadGL_ARB_fragment_program(proc);
    if(strcmp(name,"GL_ARB_fragment_program_shadow") == 0) return __isLoadedGL_ARB_fragment_program_shadow = __loadGL_ARB_fragment_program_shadow(proc);
    if(strcmp(name,"GL_ARB_fragment_shader") == 0) return __isLoadedGL_ARB_fragment_shader = __loadGL_ARB_fragment_shader(proc);
    if(strcmp(name,"GL_ARB_fragment_shader_interlock") == 0) return __isLoadedGL_ARB_fragment_shader_interlock = __loadGL_ARB_fragment_shader_interlock(proc);
    if(strcmp(name,"GL_ARB_framebuffer_no_attachments") == 0) return __isLoadedGL_ARB_framebuffer_no_attachments = __loadGL_ARB_framebuffer_no_attachments(proc);
    if(strcmp(name,"GL_ARB_framebuffer_object") == 0) return __isLoadedGL_ARB_framebuffer_object = __loadGL_ARB_framebuffer_object(proc);
    if(strcmp(name,"GL_ARB_framebuffer_sRGB") == 0) return __isLoadedGL_ARB_framebuffer_sRGB = __loadGL_ARB_framebuffer_sRGB(proc);
    if(strcmp(name,"GL_ARB_geometry_shader4") == 0) return __isLoadedGL_ARB_geometry_shader4 = __loadGL_ARB_geometry_shader4(proc);
    if(strcmp(name,"GL_ARB_get_program_binary") == 0) return __isLoadedGL_ARB_get_program_binary = __loadGL_ARB_get_program_binary(proc);
    if(strcmp(name,"GL_ARB_get_texture_sub_image") == 0) return __isLoadedGL_ARB_get_texture_sub_image = __loadGL_ARB_get_texture_sub_image(proc);
    if(strcmp(name,"GL_ARB_gpu_shader5") == 0) return __isLoadedGL_ARB_gpu_shader5 = __loadGL_ARB_gpu_shader5(proc);
    if(strcmp(name,"GL_ARB_gpu_shader_fp64") == 0) return __isLoadedGL_ARB_gpu_shader_fp64 = __loadGL_ARB_gpu_shader_fp64(proc);
    if(strcmp(name,"GL_ARB_gpu_shader_int64") == 0) return __isLoadedGL_ARB_gpu_shader_int64 = __loadGL_ARB_gpu_shader_int64(proc);
    if(strcmp(name,"GL_ARB_half_float_pixel") == 0) return __isLoadedGL_ARB_half_float_pixel = __loadGL_ARB_half_float_pixel(proc);
    if(strcmp(name,"GL_ARB_half_float_vertex") == 0) return __isLoadedGL_ARB_half_float_vertex = __loadGL_ARB_half_float_vertex(proc);
    if(strcmp(name,"GL_ARB_imaging") == 0) return __isLoadedGL_ARB_imaging = __loadGL_ARB_imaging(proc);
    if(strcmp(name,"GL_ARB_indirect_parameters") == 0) return __isLoadedGL_ARB_indirect_parameters = __loadGL_ARB_indirect_parameters(proc);
    if(strcmp(name,"GL_ARB_instanced_arrays") == 0) return __isLoadedGL_ARB_instanced_arrays = __loadGL_ARB_instanced_arrays(proc);
    if(strcmp(name,"GL_ARB_internalformat_query") == 0) return __isLoadedGL_ARB_internalformat_query = __loadGL_ARB_internalformat_query(proc);
    if(strcmp(name,"GL_ARB_internalformat_query2") == 0) return __isLoadedGL_ARB_internalformat_query2 = __loadGL_ARB_internalformat_query2(proc);
    if(strcmp(name,"GL_ARB_invalidate_subdata") == 0) return __isLoadedGL_ARB_invalidate_subdata = __loadGL_ARB_invalidate_subdata(proc);
    if(strcmp(name,"GL_ARB_map_buffer_alignment") == 0) return __isLoadedGL_ARB_map_buffer_alignment = __loadGL_ARB_map_buffer_alignment(proc);
    if(strcmp(name,"GL_ARB_map_buffer_range") == 0) return __isLoadedGL_ARB_map_buffer_range = __loadGL_ARB_map_buffer_range(proc);
    if(strcmp(name,"GL_ARB_matrix_palette") == 0) return __isLoadedGL_ARB_matrix_palette = __loadGL_ARB_matrix_palette(proc);
    if(strcmp(name,"GL_ARB_multi_bind") == 0) return __isLoadedGL_ARB_multi_bind = __loadGL_ARB_multi_bind(proc);
    if(strcmp(name,"GL_ARB_multi_draw_indirect") == 0) return __isLoadedGL_ARB_multi_draw_indirect = __loadGL_ARB_multi_draw_indirect(proc);
    if(strcmp(name,"GL_ARB_multisample") == 0) return __isLoadedGL_ARB_multisample = __loadGL_ARB_multisample(proc);
    if(strcmp(name,"GL_ARB_multitexture") == 0) return __isLoadedGL_ARB_multitexture = __loadGL_ARB_multitexture(proc);
    if(strcmp(name,"GL_ARB_occlusion_query") == 0) return __isLoadedGL_ARB_occlusion_query = __loadGL_ARB_occlusion_query(proc);
    if(strcmp(name,"GL_ARB_occlusion_query2") == 0) return __isLoadedGL_ARB_occlusion_query2 = __loadGL_ARB_occlusion_query2(proc);
    if(strcmp(name,"GL_ARB_parallel_shader_compile") == 0) return __isLoadedGL_ARB_parallel_shader_compile = __loadGL_ARB_parallel_shader_compile(proc);
    if(strcmp(name,"GL_ARB_pipeline_statistics_query") == 0) return __isLoadedGL_ARB_pipeline_statistics_query = __loadGL_ARB_pipeline_statistics_query(proc);
    if(strcmp(name,"GL_ARB_pixel_buffer_object") == 0) return __isLoadedGL_ARB_pixel_buffer_object = __loadGL_ARB_pixel_buffer_object(proc);
    if(strcmp(name,"GL_ARB_point_parameters") == 0) return __isLoadedGL_ARB_point_parameters = __loadGL_ARB_point_parameters(proc);
    if(strcmp(name,"GL_ARB_point_sprite") == 0) return __isLoadedGL_ARB_point_sprite = __loadGL_ARB_point_sprite(proc);
    if(strcmp(name,"GL_ARB_post_depth_coverage") == 0) return __isLoadedGL_ARB_post_depth_coverage = __loadGL_ARB_post_depth_coverage(proc);
    if(strcmp(name,"GL_ARB_program_interface_query") == 0) return __isLoadedGL_ARB_program_interface_query = __loadGL_ARB_program_interface_query(proc);
    if(strcmp(name,"GL_ARB_provoking_vertex") == 0) return __isLoadedGL_ARB_provoking_vertex = __loadGL_ARB_provoking_vertex(proc);
    if(strcmp(name,"GL_ARB_query_buffer_object") == 0) return __isLoadedGL_ARB_query_buffer_object = __loadGL_ARB_query_buffer_object(proc);
    if(strcmp(name,"GL_ARB_robust_buffer_access_behavior") == 0) return __isLoadedGL_ARB_robust_buffer_access_behavior = __loadGL_ARB_robust_buffer_access_behavior(proc);
    if(strcmp(name,"GL_ARB_robustness") == 0) return __isLoadedGL_ARB_robustness = __loadGL_ARB_robustness(proc);
    if(strcmp(name,"GL_ARB_robustness_isolation") == 0) return __isLoadedGL_ARB_robustness_isolation = __loadGL_ARB_robustness_isolation(proc);
    if(strcmp(name,"GL_ARB_sample_locations") == 0) return __isLoadedGL_ARB_sample_locations = __loadGL_ARB_sample_locations(proc);
    if(strcmp(name,"GL_ARB_sample_shading") == 0) return __isLoadedGL_ARB_sample_shading = __loadGL_ARB_sample_shading(proc);
    if(strcmp(name,"GL_ARB_sampler_objects") == 0) return __isLoadedGL_ARB_sampler_objects = __loadGL_ARB_sampler_objects(proc);
    if(strcmp(name,"GL_ARB_seamless_cube_map") == 0) return __isLoadedGL_ARB_seamless_cube_map = __loadGL_ARB_seamless_cube_map(proc);
    if(strcmp(name,"GL_ARB_seamless_cubemap_per_texture") == 0) return __isLoadedGL_ARB_seamless_cubemap_per_texture = __loadGL_ARB_seamless_cubemap_per_texture(proc);
    if(strcmp(name,"GL_ARB_separate_shader_objects") == 0) return __isLoadedGL_ARB_separate_shader_objects = __loadGL_ARB_separate_shader_objects(proc);
    if(strcmp(name,"GL_ARB_shader_atomic_counter_ops") == 0) return __isLoadedGL_ARB_shader_atomic_counter_ops = __loadGL_ARB_shader_atomic_counter_ops(proc);
    if(strcmp(name,"GL_ARB_shader_atomic_counters") == 0) return __isLoadedGL_ARB_shader_atomic_counters = __loadGL_ARB_shader_atomic_counters(proc);
    if(strcmp(name,"GL_ARB_shader_ballot") == 0) return __isLoadedGL_ARB_shader_ballot = __loadGL_ARB_shader_ballot(proc);
    if(strcmp(name,"GL_ARB_shader_bit_encoding") == 0) return __isLoadedGL_ARB_shader_bit_encoding = __loadGL_ARB_shader_bit_encoding(proc);
    if(strcmp(name,"GL_ARB_shader_clock") == 0) return __isLoadedGL_ARB_shader_clock = __loadGL_ARB_shader_clock(proc);
    if(strcmp(name,"GL_ARB_shader_draw_parameters") == 0) return __isLoadedGL_ARB_shader_draw_parameters = __loadGL_ARB_shader_draw_parameters(proc);
    if(strcmp(name,"GL_ARB_shader_group_vote") == 0) return __isLoadedGL_ARB_shader_group_vote = __loadGL_ARB_shader_group_vote(proc);
    if(strcmp(name,"GL_ARB_shader_image_load_store") == 0) return __isLoadedGL_ARB_shader_image_load_store = __loadGL_ARB_shader_image_load_store(proc);
    if(strcmp(name,"GL_ARB_shader_image_size") == 0) return __isLoadedGL_ARB_shader_image_size = __loadGL_ARB_shader_image_size(proc);
    if(strcmp(name,"GL_ARB_shader_objects") == 0) return __isLoadedGL_ARB_shader_objects = __loadGL_ARB_shader_objects(proc);
    if(strcmp(name,"GL_ARB_shader_precision") == 0) return __isLoadedGL_ARB_shader_precision = __loadGL_ARB_shader_precision(proc);
    if(strcmp(name,"GL_ARB_shader_stencil_export") == 0) return __isLoadedGL_ARB_shader_stencil_export = __loadGL_ARB_shader_stencil_export(proc);
    if(strcmp(name,"GL_ARB_shader_storage_buffer_object") == 0) return __isLoadedGL_ARB_shader_storage_buffer_object = __loadGL_ARB_shader_storage_buffer_object(proc);
    if(strcmp(name,"GL_ARB_shader_subroutine") == 0) return __isLoadedGL_ARB_shader_subroutine = __loadGL_ARB_shader_subroutine(proc);
    if(strcmp(name,"GL_ARB_shader_texture_image_samples") == 0) return __isLoadedGL_ARB_shader_texture_image_samples = __loadGL_ARB_shader_texture_image_samples(proc);
    if(strcmp(name,"GL_ARB_shader_texture_lod") == 0) return __isLoadedGL_ARB_shader_texture_lod = __loadGL_ARB_shader_texture_lod(proc);
    if(strcmp(name,"GL_ARB_shader_viewport_layer_array") == 0) return __isLoadedGL_ARB_shader_viewport_layer_array = __loadGL_ARB_shader_viewport_layer_array(proc);
    if(strcmp(name,"GL_ARB_shading_language_100") == 0) return __isLoadedGL_ARB_shading_language_100 = __loadGL_ARB_shading_language_100(proc);
    if(strcmp(name,"GL_ARB_shading_language_420pack") == 0) return __isLoadedGL_ARB_shading_language_420pack = __loadGL_ARB_shading_language_420pack(proc);
    if(strcmp(name,"GL_ARB_shading_language_include") == 0) return __isLoadedGL_ARB_shading_language_include = __loadGL_ARB_shading_language_include(proc);
    if(strcmp(name,"GL_ARB_shading_language_packing") == 0) return __isLoadedGL_ARB_shading_language_packing = __loadGL_ARB_shading_language_packing(proc);
    if(strcmp(name,"GL_ARB_shadow") == 0) return __isLoadedGL_ARB_shadow = __loadGL_ARB_shadow(proc);
    if(strcmp(name,"GL_ARB_shadow_ambient") == 0) return __isLoadedGL_ARB_shadow_ambient = __loadGL_ARB_shadow_ambient(proc);
    if(strcmp(name,"GL_ARB_sparse_buffer") == 0) return __isLoadedGL_ARB_sparse_buffer = __loadGL_ARB_sparse_buffer(proc);
    if(strcmp(name,"GL_ARB_sparse_texture") == 0) return __isLoadedGL_ARB_sparse_texture = __loadGL_ARB_sparse_texture(proc);
    if(strcmp(name,"GL_ARB_sparse_texture2") == 0) return __isLoadedGL_ARB_sparse_texture2 = __loadGL_ARB_sparse_texture2(proc);
    if(strcmp(name,"GL_ARB_sparse_texture_clamp") == 0) return __isLoadedGL_ARB_sparse_texture_clamp = __loadGL_ARB_sparse_texture_clamp(proc);
    if(strcmp(name,"GL_ARB_stencil_texturing") == 0) return __isLoadedGL_ARB_stencil_texturing = __loadGL_ARB_stencil_texturing(proc);
    if(strcmp(name,"GL_ARB_sync") == 0) return __isLoadedGL_ARB_sync = __loadGL_ARB_sync(proc);
    if(strcmp(name,"GL_ARB_tessellation_shader") == 0) return __isLoadedGL_ARB_tessellation_shader = __loadGL_ARB_tessellation_shader(proc);
    if(strcmp(name,"GL_ARB_texture_barrier") == 0) return __isLoadedGL_ARB_texture_barrier = __loadGL_ARB_texture_barrier(proc);
    if(strcmp(name,"GL_ARB_texture_border_clamp") == 0) return __isLoadedGL_ARB_texture_border_clamp = __loadGL_ARB_texture_border_clamp(proc);
    if(strcmp(name,"GL_ARB_texture_buffer_object") == 0) return __isLoadedGL_ARB_texture_buffer_object = __loadGL_ARB_texture_buffer_object(proc);
    if(strcmp(name,"GL_ARB_texture_buffer_object_rgb32") == 0) return __isLoadedGL_ARB_texture_buffer_object_rgb32 = __loadGL_ARB_texture_buffer_object_rgb32(proc);
    if(strcmp(name,"GL_ARB_texture_buffer_range") == 0) return __isLoadedGL_ARB_texture_buffer_range = __loadGL_ARB_texture_buffer_range(proc);
    if(strcmp(name,"GL_ARB_texture_compression") == 0) return __isLoadedGL_ARB_texture_compression = __loadGL_ARB_texture_compression(proc);
    if(strcmp(name,"GL_ARB_texture_compression_bptc") == 0) return __isLoadedGL_ARB_texture_compression_bptc = __loadGL_ARB_texture_compression_bptc(proc);
    if(strcmp(name,"GL_ARB_texture_compression_rgtc") == 0) return __isLoadedGL_ARB_texture_compression_rgtc = __loadGL_ARB_texture_compression_rgtc(proc);
    if(strcmp(name,"GL_ARB_texture_cube_map") == 0) return __isLoadedGL_ARB_texture_cube_map = __loadGL_ARB_texture_cube_map(proc);
    if(strcmp(name,"GL_ARB_texture_cube_map_array") == 0) return __isLoadedGL_ARB_texture_cube_map_array = __loadGL_ARB_texture_cube_map_array(proc);
    if(strcmp(name,"GL_ARB_texture_env_add") == 0) return __isLoadedGL_ARB_texture_env_add = __loadGL_ARB_texture_env_add(proc);
    if(strcmp(name,"GL_ARB_texture_env_combine") == 0) return __isLoadedGL_ARB_texture_env_combine = __loadGL_ARB_texture_env_combine(proc);
    if(strcmp(name,"GL_ARB_texture_env_crossbar") == 0) return __isLoadedGL_ARB_texture_env_crossbar = __loadGL_ARB_texture_env_crossbar(proc);
    if(strcmp(name,"GL_ARB_texture_env_dot3") == 0) return __isLoadedGL_ARB_texture_env_dot3 = __loadGL_ARB_texture_env_dot3(proc);
    if(strcmp(name,"GL_ARB_texture_filter_minmax") == 0) return __isLoadedGL_ARB_texture_filter_minmax = __loadGL_ARB_texture_filter_minmax(proc);
    if(strcmp(name,"GL_ARB_texture_float") == 0) return __isLoadedGL_ARB_texture_float = __loadGL_ARB_texture_float(proc);
    if(strcmp(name,"GL_ARB_texture_gather") == 0) return __isLoadedGL_ARB_texture_gather = __loadGL_ARB_texture_gather(proc);
    if(strcmp(name,"GL_ARB_texture_mirror_clamp_to_edge") == 0) return __isLoadedGL_ARB_texture_mirror_clamp_to_edge = __loadGL_ARB_texture_mirror_clamp_to_edge(proc);
    if(strcmp(name,"GL_ARB_texture_mirrored_repeat") == 0) return __isLoadedGL_ARB_texture_mirrored_repeat = __loadGL_ARB_texture_mirrored_repeat(proc);
    if(strcmp(name,"GL_ARB_texture_multisample") == 0) return __isLoadedGL_ARB_texture_multisample = __loadGL_ARB_texture_multisample(proc);
    if(strcmp(name,"GL_ARB_texture_non_power_of_two") == 0) return __isLoadedGL_ARB_texture_non_power_of_two = __loadGL_ARB_texture_non_power_of_two(proc);
    if(strcmp(name,"GL_ARB_texture_query_levels") == 0) return __isLoadedGL_ARB_texture_query_levels = __loadGL_ARB_texture_query_levels(proc);
    if(strcmp(name,"GL_ARB_texture_query_lod") == 0) return __isLoadedGL_ARB_texture_query_lod = __loadGL_ARB_texture_query_lod(proc);
    if(strcmp(name,"GL_ARB_texture_rectangle") == 0) return __isLoadedGL_ARB_texture_rectangle = __loadGL_ARB_texture_rectangle(proc);
    if(strcmp(name,"GL_ARB_texture_rg") == 0) return __isLoadedGL_ARB_texture_rg = __loadGL_ARB_texture_rg(proc);
    if(strcmp(name,"GL_ARB_texture_rgb10_a2ui") == 0) return __isLoadedGL_ARB_texture_rgb10_a2ui = __loadGL_ARB_texture_rgb10_a2ui(proc);
    if(strcmp(name,"GL_ARB_texture_stencil8") == 0) return __isLoadedGL_ARB_texture_stencil8 = __loadGL_ARB_texture_stencil8(proc);
    if(strcmp(name,"GL_ARB_texture_storage") == 0) return __isLoadedGL_ARB_texture_storage = __loadGL_ARB_texture_storage(proc);
    if(strcmp(name,"GL_ARB_texture_storage_multisample") == 0) return __isLoadedGL_ARB_texture_storage_multisample = __loadGL_ARB_texture_storage_multisample(proc);
    if(strcmp(name,"GL_ARB_texture_swizzle") == 0) return __isLoadedGL_ARB_texture_swizzle = __loadGL_ARB_texture_swizzle(proc);
    if(strcmp(name,"GL_ARB_texture_view") == 0) return __isLoadedGL_ARB_texture_view = __loadGL_ARB_texture_view(proc);
    if(strcmp(name,"GL_ARB_timer_query") == 0) return __isLoadedGL_ARB_timer_query = __loadGL_ARB_timer_query(proc);
    if(strcmp(name,"GL_ARB_transform_feedback2") == 0) return __isLoadedGL_ARB_transform_feedback2 = __loadGL_ARB_transform_feedback2(proc);
    if(strcmp(name,"GL_ARB_transform_feedback3") == 0) return __isLoadedGL_ARB_transform_feedback3 = __loadGL_ARB_transform_feedback3(proc);
    if(strcmp(name,"GL_ARB_transform_feedback_instanced") == 0) return __isLoadedGL_ARB_transform_feedback_instanced = __loadGL_ARB_transform_feedback_instanced(proc);
    if(strcmp(name,"GL_ARB_transform_feedback_overflow_query") == 0) return __isLoadedGL_ARB_transform_feedback_overflow_query = __loadGL_ARB_transform_feedback_overflow_query(proc);
    if(strcmp(name,"GL_ARB_transpose_matrix") == 0) return __isLoadedGL_ARB_transpose_matrix = __loadGL_ARB_transpose_matrix(proc);
    if(strcmp(name,"GL_ARB_uniform_buffer_object") == 0) return __isLoadedGL_ARB_uniform_buffer_object = __loadGL_ARB_uniform_buffer_object(proc);
    if(strcmp(name,"GL_ARB_vertex_array_bgra") == 0) return __isLoadedGL_ARB_vertex_array_bgra = __loadGL_ARB_vertex_array_bgra(proc);
    if(strcmp(name,"GL_ARB_vertex_array_object") == 0) return __isLoadedGL_ARB_vertex_array_object = __loadGL_ARB_vertex_array_object(proc);
    if(strcmp(name,"GL_ARB_vertex_attrib_64bit") == 0) return __isLoadedGL_ARB_vertex_attrib_64bit = __loadGL_ARB_vertex_attrib_64bit(proc);
    if(strcmp(name,"GL_ARB_vertex_attrib_binding") == 0) return __isLoadedGL_ARB_vertex_attrib_binding = __loadGL_ARB_vertex_attrib_binding(proc);
    if(strcmp(name,"GL_ARB_vertex_blend") == 0) return __isLoadedGL_ARB_vertex_blend = __loadGL_ARB_vertex_blend(proc);
    if(strcmp(name,"GL_ARB_vertex_buffer_object") == 0) return __isLoadedGL_ARB_vertex_buffer_object = __loadGL_ARB_vertex_buffer_object(proc);
    if(strcmp(name,"GL_ARB_vertex_program") == 0) return __isLoadedGL_ARB_vertex_program = __loadGL_ARB_vertex_program(proc);
    if(strcmp(name,"GL_ARB_vertex_shader") == 0) return __isLoadedGL_ARB_vertex_shader = __loadGL_ARB_vertex_shader(proc);
    if(strcmp(name,"GL_ARB_vertex_type_10f_11f_11f_rev") == 0) return __isLoadedGL_ARB_vertex_type_10f_11f_11f_rev = __loadGL_ARB_vertex_type_10f_11f_11f_rev(proc);
    if(strcmp(name,"GL_ARB_vertex_type_2_10_10_10_rev") == 0) return __isLoadedGL_ARB_vertex_type_2_10_10_10_rev = __loadGL_ARB_vertex_type_2_10_10_10_rev(proc);
    if(strcmp(name,"GL_ARB_viewport_array") == 0) return __isLoadedGL_ARB_viewport_array = __loadGL_ARB_viewport_array(proc);
    if(strcmp(name,"GL_ARB_window_pos") == 0) return __isLoadedGL_ARB_window_pos = __loadGL_ARB_window_pos(proc);
    if(strcmp(name,"GL_KHR_blend_equation_advanced") == 0) return __isLoadedGL_KHR_blend_equation_advanced = __loadGL_KHR_blend_equation_advanced(proc);
    if(strcmp(name,"GL_KHR_blend_equation_advanced_coherent") == 0) return __isLoadedGL_KHR_blend_equation_advanced_coherent = __loadGL_KHR_blend_equation_advanced_coherent(proc);
    if(strcmp(name,"GL_KHR_context_flush_control") == 0) return __isLoadedGL_KHR_context_flush_control = __loadGL_KHR_context_flush_control(proc);
    if(strcmp(name,"GL_KHR_debug") == 0) return __isLoadedGL_KHR_debug = __loadGL_KHR_debug(proc);
    if(strcmp(name,"GL_KHR_no_error") == 0) return __isLoadedGL_KHR_no_error = __loadGL_KHR_no_error(proc);
    if(strcmp(name,"GL_KHR_robust_buffer_access_behavior") == 0) return __isLoadedGL_KHR_robust_buffer_access_behavior = __loadGL_KHR_robust_buffer_access_behavior(proc);
    if(strcmp(name,"GL_KHR_robustness") == 0) return __isLoadedGL_KHR_robustness = __loadGL_KHR_robustness(proc);
    if(strcmp(name,"GL_KHR_texture_compression_astc_hdr") == 0) return __isLoadedGL_KHR_texture_compression_astc_hdr = __loadGL_KHR_texture_compression_astc_hdr(proc);
    if(strcmp(name,"GL_KHR_texture_compression_astc_ldr") == 0) return __isLoadedGL_KHR_texture_compression_astc_ldr = __loadGL_KHR_texture_compression_astc_ldr(proc);
    if(strcmp(name,"GL_KHR_texture_compression_astc_sliced_3d") == 0) return __isLoadedGL_KHR_texture_compression_astc_sliced_3d = __loadGL_KHR_texture_compression_astc_sliced_3d(proc);
    if(strcmp(name,"GL_OES_byte_coordinates") == 0) return __isLoadedGL_OES_byte_coordinates = __loadGL_OES_byte_coordinates(proc);
    if(strcmp(name,"GL_OES_compressed_paletted_texture") == 0) return __isLoadedGL_OES_compressed_paletted_texture = __loadGL_OES_compressed_paletted_texture(proc);
    if(strcmp(name,"GL_OES_fixed_point") == 0) return __isLoadedGL_OES_fixed_point = __loadGL_OES_fixed_point(proc);
    if(strcmp(name,"GL_OES_query_matrix") == 0) return __isLoadedGL_OES_query_matrix = __loadGL_OES_query_matrix(proc);
    if(strcmp(name,"GL_OES_read_format") == 0) return __isLoadedGL_OES_read_format = __loadGL_OES_read_format(proc);
    if(strcmp(name,"GL_OES_single_precision") == 0) return __isLoadedGL_OES_single_precision = __loadGL_OES_single_precision(proc);
    if(strcmp(name,"GL_3DFX_multisample") == 0) return __isLoadedGL_3DFX_multisample = __loadGL_3DFX_multisample(proc);
    if(strcmp(name,"GL_3DFX_tbuffer") == 0) return __isLoadedGL_3DFX_tbuffer = __loadGL_3DFX_tbuffer(proc);
    if(strcmp(name,"GL_3DFX_texture_compression_FXT1") == 0) return __isLoadedGL_3DFX_texture_compression_FXT1 = __loadGL_3DFX_texture_compression_FXT1(proc);
    if(strcmp(name,"GL_AMD_blend_minmax_factor") == 0) return __isLoadedGL_AMD_blend_minmax_factor = __loadGL_AMD_blend_minmax_factor(proc);
    if(strcmp(name,"GL_AMD_conservative_depth") == 0) return __isLoadedGL_AMD_conservative_depth = __loadGL_AMD_conservative_depth(proc);
    if(strcmp(name,"GL_AMD_debug_output") == 0) return __isLoadedGL_AMD_debug_output = __loadGL_AMD_debug_output(proc);
    if(strcmp(name,"GL_AMD_depth_clamp_separate") == 0) return __isLoadedGL_AMD_depth_clamp_separate = __loadGL_AMD_depth_clamp_separate(proc);
    if(strcmp(name,"GL_AMD_draw_buffers_blend") == 0) return __isLoadedGL_AMD_draw_buffers_blend = __loadGL_AMD_draw_buffers_blend(proc);
    if(strcmp(name,"GL_AMD_gcn_shader") == 0) return __isLoadedGL_AMD_gcn_shader = __loadGL_AMD_gcn_shader(proc);
    if(strcmp(name,"GL_AMD_gpu_shader_int64") == 0) return __isLoadedGL_AMD_gpu_shader_int64 = __loadGL_AMD_gpu_shader_int64(proc);
    if(strcmp(name,"GL_AMD_interleaved_elements") == 0) return __isLoadedGL_AMD_interleaved_elements = __loadGL_AMD_interleaved_elements(proc);
    if(strcmp(name,"GL_AMD_multi_draw_indirect") == 0) return __isLoadedGL_AMD_multi_draw_indirect = __loadGL_AMD_multi_draw_indirect(proc);
    if(strcmp(name,"GL_AMD_name_gen_delete") == 0) return __isLoadedGL_AMD_name_gen_delete = __loadGL_AMD_name_gen_delete(proc);
    if(strcmp(name,"GL_AMD_occlusion_query_event") == 0) return __isLoadedGL_AMD_occlusion_query_event = __loadGL_AMD_occlusion_query_event(proc);
    if(strcmp(name,"GL_AMD_performance_monitor") == 0) return __isLoadedGL_AMD_performance_monitor = __loadGL_AMD_performance_monitor(proc);
    if(strcmp(name,"GL_AMD_pinned_memory") == 0) return __isLoadedGL_AMD_pinned_memory = __loadGL_AMD_pinned_memory(proc);
    if(strcmp(name,"GL_AMD_query_buffer_object") == 0) return __isLoadedGL_AMD_query_buffer_object = __loadGL_AMD_query_buffer_object(proc);
    if(strcmp(name,"GL_AMD_sample_positions") == 0) return __isLoadedGL_AMD_sample_positions = __loadGL_AMD_sample_positions(proc);
    if(strcmp(name,"GL_AMD_seamless_cubemap_per_texture") == 0) return __isLoadedGL_AMD_seamless_cubemap_per_texture = __loadGL_AMD_seamless_cubemap_per_texture(proc);
    if(strcmp(name,"GL_AMD_shader_atomic_counter_ops") == 0) return __isLoadedGL_AMD_shader_atomic_counter_ops = __loadGL_AMD_shader_atomic_counter_ops(proc);
    if(strcmp(name,"GL_AMD_shader_stencil_export") == 0) return __isLoadedGL_AMD_shader_stencil_export = __loadGL_AMD_shader_stencil_export(proc);
    if(strcmp(name,"GL_AMD_shader_trinary_minmax") == 0) return __isLoadedGL_AMD_shader_trinary_minmax = __loadGL_AMD_shader_trinary_minmax(proc);
    if(strcmp(name,"GL_AMD_sparse_texture") == 0) return __isLoadedGL_AMD_sparse_texture = __loadGL_AMD_sparse_texture(proc);
    if(strcmp(name,"GL_AMD_stencil_operation_extended") == 0) return __isLoadedGL_AMD_stencil_operation_extended = __loadGL_AMD_stencil_operation_extended(proc);
    if(strcmp(name,"GL_AMD_texture_texture4") == 0) return __isLoadedGL_AMD_texture_texture4 = __loadGL_AMD_texture_texture4(proc);
    if(strcmp(name,"GL_AMD_transform_feedback3_lines_triangles") == 0) return __isLoadedGL_AMD_transform_feedback3_lines_triangles = __loadGL_AMD_transform_feedback3_lines_triangles(proc);
    if(strcmp(name,"GL_AMD_transform_feedback4") == 0) return __isLoadedGL_AMD_transform_feedback4 = __loadGL_AMD_transform_feedback4(proc);
    if(strcmp(name,"GL_AMD_vertex_shader_layer") == 0) return __isLoadedGL_AMD_vertex_shader_layer = __loadGL_AMD_vertex_shader_layer(proc);
    if(strcmp(name,"GL_AMD_vertex_shader_tessellator") == 0) return __isLoadedGL_AMD_vertex_shader_tessellator = __loadGL_AMD_vertex_shader_tessellator(proc);
    if(strcmp(name,"GL_AMD_vertex_shader_viewport_index") == 0) return __isLoadedGL_AMD_vertex_shader_viewport_index = __loadGL_AMD_vertex_shader_viewport_index(proc);
    if(strcmp(name,"GL_APPLE_aux_depth_stencil") == 0) return __isLoadedGL_APPLE_aux_depth_stencil = __loadGL_APPLE_aux_depth_stencil(proc);
    if(strcmp(name,"GL_APPLE_client_storage") == 0) return __isLoadedGL_APPLE_client_storage = __loadGL_APPLE_client_storage(proc);
    if(strcmp(name,"GL_APPLE_element_array") == 0) return __isLoadedGL_APPLE_element_array = __loadGL_APPLE_element_array(proc);
    if(strcmp(name,"GL_APPLE_fence") == 0) return __isLoadedGL_APPLE_fence = __loadGL_APPLE_fence(proc);
    if(strcmp(name,"GL_APPLE_float_pixels") == 0) return __isLoadedGL_APPLE_float_pixels = __loadGL_APPLE_float_pixels(proc);
    if(strcmp(name,"GL_APPLE_flush_buffer_range") == 0) return __isLoadedGL_APPLE_flush_buffer_range = __loadGL_APPLE_flush_buffer_range(proc);
    if(strcmp(name,"GL_APPLE_object_purgeable") == 0) return __isLoadedGL_APPLE_object_purgeable = __loadGL_APPLE_object_purgeable(proc);
    if(strcmp(name,"GL_APPLE_rgb_422") == 0) return __isLoadedGL_APPLE_rgb_422 = __loadGL_APPLE_rgb_422(proc);
    if(strcmp(name,"GL_APPLE_row_bytes") == 0) return __isLoadedGL_APPLE_row_bytes = __loadGL_APPLE_row_bytes(proc);
    if(strcmp(name,"GL_APPLE_specular_vector") == 0) return __isLoadedGL_APPLE_specular_vector = __loadGL_APPLE_specular_vector(proc);
    if(strcmp(name,"GL_APPLE_texture_range") == 0) return __isLoadedGL_APPLE_texture_range = __loadGL_APPLE_texture_range(proc);
    if(strcmp(name,"GL_APPLE_transform_hint") == 0) return __isLoadedGL_APPLE_transform_hint = __loadGL_APPLE_transform_hint(proc);
    if(strcmp(name,"GL_APPLE_vertex_array_object") == 0) return __isLoadedGL_APPLE_vertex_array_object = __loadGL_APPLE_vertex_array_object(proc);
    if(strcmp(name,"GL_APPLE_vertex_array_range") == 0) return __isLoadedGL_APPLE_vertex_array_range = __loadGL_APPLE_vertex_array_range(proc);
    if(strcmp(name,"GL_APPLE_vertex_program_evaluators") == 0) return __isLoadedGL_APPLE_vertex_program_evaluators = __loadGL_APPLE_vertex_program_evaluators(proc);
    if(strcmp(name,"GL_APPLE_ycbcr_422") == 0) return __isLoadedGL_APPLE_ycbcr_422 = __loadGL_APPLE_ycbcr_422(proc);
    if(strcmp(name,"GL_ATI_draw_buffers") == 0) return __isLoadedGL_ATI_draw_buffers = __loadGL_ATI_draw_buffers(proc);
    if(strcmp(name,"GL_ATI_element_array") == 0) return __isLoadedGL_ATI_element_array = __loadGL_ATI_element_array(proc);
    if(strcmp(name,"GL_ATI_envmap_bumpmap") == 0) return __isLoadedGL_ATI_envmap_bumpmap = __loadGL_ATI_envmap_bumpmap(proc);
    if(strcmp(name,"GL_ATI_fragment_shader") == 0) return __isLoadedGL_ATI_fragment_shader = __loadGL_ATI_fragment_shader(proc);
    if(strcmp(name,"GL_ATI_map_object_buffer") == 0) return __isLoadedGL_ATI_map_object_buffer = __loadGL_ATI_map_object_buffer(proc);
    if(strcmp(name,"GL_ATI_meminfo") == 0) return __isLoadedGL_ATI_meminfo = __loadGL_ATI_meminfo(proc);
    if(strcmp(name,"GL_ATI_pixel_format_float") == 0) return __isLoadedGL_ATI_pixel_format_float = __loadGL_ATI_pixel_format_float(proc);
    if(strcmp(name,"GL_ATI_pn_triangles") == 0) return __isLoadedGL_ATI_pn_triangles = __loadGL_ATI_pn_triangles(proc);
    if(strcmp(name,"GL_ATI_separate_stencil") == 0) return __isLoadedGL_ATI_separate_stencil = __loadGL_ATI_separate_stencil(proc);
    if(strcmp(name,"GL_ATI_text_fragment_shader") == 0) return __isLoadedGL_ATI_text_fragment_shader = __loadGL_ATI_text_fragment_shader(proc);
    if(strcmp(name,"GL_ATI_texture_env_combine3") == 0) return __isLoadedGL_ATI_texture_env_combine3 = __loadGL_ATI_texture_env_combine3(proc);
    if(strcmp(name,"GL_ATI_texture_float") == 0) return __isLoadedGL_ATI_texture_float = __loadGL_ATI_texture_float(proc);
    if(strcmp(name,"GL_ATI_texture_mirror_once") == 0) return __isLoadedGL_ATI_texture_mirror_once = __loadGL_ATI_texture_mirror_once(proc);
    if(strcmp(name,"GL_ATI_vertex_array_object") == 0) return __isLoadedGL_ATI_vertex_array_object = __loadGL_ATI_vertex_array_object(proc);
    if(strcmp(name,"GL_ATI_vertex_attrib_array_object") == 0) return __isLoadedGL_ATI_vertex_attrib_array_object = __loadGL_ATI_vertex_attrib_array_object(proc);
    if(strcmp(name,"GL_ATI_vertex_streams") == 0) return __isLoadedGL_ATI_vertex_streams = __loadGL_ATI_vertex_streams(proc);
    if(strcmp(name,"GL_EXT_422_pixels") == 0) return __isLoadedGL_EXT_422_pixels = __loadGL_EXT_422_pixels(proc);
    if(strcmp(name,"GL_EXT_abgr") == 0) return __isLoadedGL_EXT_abgr = __loadGL_EXT_abgr(proc);
    if(strcmp(name,"GL_EXT_bgra") == 0) return __isLoadedGL_EXT_bgra = __loadGL_EXT_bgra(proc);
    if(strcmp(name,"GL_EXT_bindable_uniform") == 0) return __isLoadedGL_EXT_bindable_uniform = __loadGL_EXT_bindable_uniform(proc);
    if(strcmp(name,"GL_EXT_blend_color") == 0) return __isLoadedGL_EXT_blend_color = __loadGL_EXT_blend_color(proc);
    if(strcmp(name,"GL_EXT_blend_equation_separate") == 0) return __isLoadedGL_EXT_blend_equation_separate = __loadGL_EXT_blend_equation_separate(proc);
    if(strcmp(name,"GL_EXT_blend_func_separate") == 0) return __isLoadedGL_EXT_blend_func_separate = __loadGL_EXT_blend_func_separate(proc);
    if(strcmp(name,"GL_EXT_blend_logic_op") == 0) return __isLoadedGL_EXT_blend_logic_op = __loadGL_EXT_blend_logic_op(proc);
    if(strcmp(name,"GL_EXT_blend_minmax") == 0) return __isLoadedGL_EXT_blend_minmax = __loadGL_EXT_blend_minmax(proc);
    if(strcmp(name,"GL_EXT_blend_subtract") == 0) return __isLoadedGL_EXT_blend_subtract = __loadGL_EXT_blend_subtract(proc);
    if(strcmp(name,"GL_EXT_clip_volume_hint") == 0) return __isLoadedGL_EXT_clip_volume_hint = __loadGL_EXT_clip_volume_hint(proc);
    if(strcmp(name,"GL_EXT_cmyka") == 0) return __isLoadedGL_EXT_cmyka = __loadGL_EXT_cmyka(proc);
    if(strcmp(name,"GL_EXT_color_subtable") == 0) return __isLoadedGL_EXT_color_subtable = __loadGL_EXT_color_subtable(proc);
    if(strcmp(name,"GL_EXT_compiled_vertex_array") == 0) return __isLoadedGL_EXT_compiled_vertex_array = __loadGL_EXT_compiled_vertex_array(proc);
    if(strcmp(name,"GL_EXT_convolution") == 0) return __isLoadedGL_EXT_convolution = __loadGL_EXT_convolution(proc);
    if(strcmp(name,"GL_EXT_coordinate_frame") == 0) return __isLoadedGL_EXT_coordinate_frame = __loadGL_EXT_coordinate_frame(proc);
    if(strcmp(name,"GL_EXT_copy_texture") == 0) return __isLoadedGL_EXT_copy_texture = __loadGL_EXT_copy_texture(proc);
    if(strcmp(name,"GL_EXT_cull_vertex") == 0) return __isLoadedGL_EXT_cull_vertex = __loadGL_EXT_cull_vertex(proc);
    if(strcmp(name,"GL_EXT_debug_label") == 0) return __isLoadedGL_EXT_debug_label = __loadGL_EXT_debug_label(proc);
    if(strcmp(name,"GL_EXT_debug_marker") == 0) return __isLoadedGL_EXT_debug_marker = __loadGL_EXT_debug_marker(proc);
    if(strcmp(name,"GL_EXT_depth_bounds_test") == 0) return __isLoadedGL_EXT_depth_bounds_test = __loadGL_EXT_depth_bounds_test(proc);
    if(strcmp(name,"GL_EXT_direct_state_access") == 0) return __isLoadedGL_EXT_direct_state_access = __loadGL_EXT_direct_state_access(proc);
    if(strcmp(name,"GL_EXT_draw_buffers2") == 0) return __isLoadedGL_EXT_draw_buffers2 = __loadGL_EXT_draw_buffers2(proc);
    if(strcmp(name,"GL_EXT_draw_instanced") == 0) return __isLoadedGL_EXT_draw_instanced = __loadGL_EXT_draw_instanced(proc);
    if(strcmp(name,"GL_EXT_draw_range_elements") == 0) return __isLoadedGL_EXT_draw_range_elements = __loadGL_EXT_draw_range_elements(proc);
    if(strcmp(name,"GL_EXT_fog_coord") == 0) return __isLoadedGL_EXT_fog_coord = __loadGL_EXT_fog_coord(proc);
    if(strcmp(name,"GL_EXT_framebuffer_blit") == 0) return __isLoadedGL_EXT_framebuffer_blit = __loadGL_EXT_framebuffer_blit(proc);
    if(strcmp(name,"GL_EXT_framebuffer_multisample") == 0) return __isLoadedGL_EXT_framebuffer_multisample = __loadGL_EXT_framebuffer_multisample(proc);
    if(strcmp(name,"GL_EXT_framebuffer_multisample_blit_scaled") == 0) return __isLoadedGL_EXT_framebuffer_multisample_blit_scaled = __loadGL_EXT_framebuffer_multisample_blit_scaled(proc);
    if(strcmp(name,"GL_EXT_framebuffer_object") == 0) return __isLoadedGL_EXT_framebuffer_object = __loadGL_EXT_framebuffer_object(proc);
    if(strcmp(name,"GL_EXT_framebuffer_sRGB") == 0) return __isLoadedGL_EXT_framebuffer_sRGB = __loadGL_EXT_framebuffer_sRGB(proc);
    if(strcmp(name,"GL_EXT_geometry_shader4") == 0) return __isLoadedGL_EXT_geometry_shader4 = __loadGL_EXT_geometry_shader4(proc);
    if(strcmp(name,"GL_EXT_gpu_program_parameters") == 0) return __isLoadedGL_EXT_gpu_program_parameters = __loadGL_EXT_gpu_program_parameters(proc);
    if(strcmp(name,"GL_EXT_gpu_shader4") == 0) return __isLoadedGL_EXT_gpu_shader4 = __loadGL_EXT_gpu_shader4(proc);
    if(strcmp(name,"GL_EXT_histogram") == 0) return __isLoadedGL_EXT_histogram = __loadGL_EXT_histogram(proc);
    if(strcmp(name,"GL_EXT_index_array_formats") == 0) return __isLoadedGL_EXT_index_array_formats = __loadGL_EXT_index_array_formats(proc);
    if(strcmp(name,"GL_EXT_index_func") == 0) return __isLoadedGL_EXT_index_func = __loadGL_EXT_index_func(proc);
    if(strcmp(name,"GL_EXT_index_material") == 0) return __isLoadedGL_EXT_index_material = __loadGL_EXT_index_material(proc);
    if(strcmp(name,"GL_EXT_index_texture") == 0) return __isLoadedGL_EXT_index_texture = __loadGL_EXT_index_texture(proc);
    if(strcmp(name,"GL_EXT_light_texture") == 0) return __isLoadedGL_EXT_light_texture = __loadGL_EXT_light_texture(proc);
    if(strcmp(name,"GL_EXT_misc_attribute") == 0) return __isLoadedGL_EXT_misc_attribute = __loadGL_EXT_misc_attribute(proc);
    if(strcmp(name,"GL_EXT_multi_draw_arrays") == 0) return __isLoadedGL_EXT_multi_draw_arrays = __loadGL_EXT_multi_draw_arrays(proc);
    if(strcmp(name,"GL_EXT_multisample") == 0) return __isLoadedGL_EXT_multisample = __loadGL_EXT_multisample(proc);
    if(strcmp(name,"GL_EXT_packed_depth_stencil") == 0) return __isLoadedGL_EXT_packed_depth_stencil = __loadGL_EXT_packed_depth_stencil(proc);
    if(strcmp(name,"GL_EXT_packed_float") == 0) return __isLoadedGL_EXT_packed_float = __loadGL_EXT_packed_float(proc);
    if(strcmp(name,"GL_EXT_packed_pixels") == 0) return __isLoadedGL_EXT_packed_pixels = __loadGL_EXT_packed_pixels(proc);
    if(strcmp(name,"GL_EXT_paletted_texture") == 0) return __isLoadedGL_EXT_paletted_texture = __loadGL_EXT_paletted_texture(proc);
    if(strcmp(name,"GL_EXT_pixel_buffer_object") == 0) return __isLoadedGL_EXT_pixel_buffer_object = __loadGL_EXT_pixel_buffer_object(proc);
    if(strcmp(name,"GL_EXT_pixel_transform") == 0) return __isLoadedGL_EXT_pixel_transform = __loadGL_EXT_pixel_transform(proc);
    if(strcmp(name,"GL_EXT_pixel_transform_color_table") == 0) return __isLoadedGL_EXT_pixel_transform_color_table = __loadGL_EXT_pixel_transform_color_table(proc);
    if(strcmp(name,"GL_EXT_point_parameters") == 0) return __isLoadedGL_EXT_point_parameters = __loadGL_EXT_point_parameters(proc);
    if(strcmp(name,"GL_EXT_polygon_offset") == 0) return __isLoadedGL_EXT_polygon_offset = __loadGL_EXT_polygon_offset(proc);
    if(strcmp(name,"GL_EXT_polygon_offset_clamp") == 0) return __isLoadedGL_EXT_polygon_offset_clamp = __loadGL_EXT_polygon_offset_clamp(proc);
    if(strcmp(name,"GL_EXT_post_depth_coverage") == 0) return __isLoadedGL_EXT_post_depth_coverage = __loadGL_EXT_post_depth_coverage(proc);
    if(strcmp(name,"GL_EXT_provoking_vertex") == 0) return __isLoadedGL_EXT_provoking_vertex = __loadGL_EXT_provoking_vertex(proc);
    if(strcmp(name,"GL_EXT_raster_multisample") == 0) return __isLoadedGL_EXT_raster_multisample = __loadGL_EXT_raster_multisample(proc);
    if(strcmp(name,"GL_EXT_rescale_normal") == 0) return __isLoadedGL_EXT_rescale_normal = __loadGL_EXT_rescale_normal(proc);
    if(strcmp(name,"GL_EXT_secondary_color") == 0) return __isLoadedGL_EXT_secondary_color = __loadGL_EXT_secondary_color(proc);
    if(strcmp(name,"GL_EXT_separate_shader_objects") == 0) return __isLoadedGL_EXT_separate_shader_objects = __loadGL_EXT_separate_shader_objects(proc);
    if(strcmp(name,"GL_EXT_separate_specular_color") == 0) return __isLoadedGL_EXT_separate_specular_color = __loadGL_EXT_separate_specular_color(proc);
    if(strcmp(name,"GL_EXT_shader_image_load_formatted") == 0) return __isLoadedGL_EXT_shader_image_load_formatted = __loadGL_EXT_shader_image_load_formatted(proc);
    if(strcmp(name,"GL_EXT_shader_image_load_store") == 0) return __isLoadedGL_EXT_shader_image_load_store = __loadGL_EXT_shader_image_load_store(proc);
    if(strcmp(name,"GL_EXT_shader_integer_mix") == 0) return __isLoadedGL_EXT_shader_integer_mix = __loadGL_EXT_shader_integer_mix(proc);
    if(strcmp(name,"GL_EXT_shadow_funcs") == 0) return __isLoadedGL_EXT_shadow_funcs = __loadGL_EXT_shadow_funcs(proc);
    if(strcmp(name,"GL_EXT_shared_texture_palette") == 0) return __isLoadedGL_EXT_shared_texture_palette = __loadGL_EXT_shared_texture_palette(proc);
    if(strcmp(name,"GL_EXT_sparse_texture2") == 0) return __isLoadedGL_EXT_sparse_texture2 = __loadGL_EXT_sparse_texture2(proc);
    if(strcmp(name,"GL_EXT_stencil_clear_tag") == 0) return __isLoadedGL_EXT_stencil_clear_tag = __loadGL_EXT_stencil_clear_tag(proc);
    if(strcmp(name,"GL_EXT_stencil_two_side") == 0) return __isLoadedGL_EXT_stencil_two_side = __loadGL_EXT_stencil_two_side(proc);
    if(strcmp(name,"GL_EXT_stencil_wrap") == 0) return __isLoadedGL_EXT_stencil_wrap = __loadGL_EXT_stencil_wrap(proc);
    if(strcmp(name,"GL_EXT_subtexture") == 0) return __isLoadedGL_EXT_subtexture = __loadGL_EXT_subtexture(proc);
    if(strcmp(name,"GL_EXT_texture") == 0) return __isLoadedGL_EXT_texture = __loadGL_EXT_texture(proc);
    if(strcmp(name,"GL_EXT_texture3D") == 0) return __isLoadedGL_EXT_texture3D = __loadGL_EXT_texture3D(proc);
    if(strcmp(name,"GL_EXT_texture_array") == 0) return __isLoadedGL_EXT_texture_array = __loadGL_EXT_texture_array(proc);
    if(strcmp(name,"GL_EXT_texture_buffer_object") == 0) return __isLoadedGL_EXT_texture_buffer_object = __loadGL_EXT_texture_buffer_object(proc);
    if(strcmp(name,"GL_EXT_texture_compression_latc") == 0) return __isLoadedGL_EXT_texture_compression_latc = __loadGL_EXT_texture_compression_latc(proc);
    if(strcmp(name,"GL_EXT_texture_compression_rgtc") == 0) return __isLoadedGL_EXT_texture_compression_rgtc = __loadGL_EXT_texture_compression_rgtc(proc);
    if(strcmp(name,"GL_EXT_texture_compression_s3tc") == 0) return __isLoadedGL_EXT_texture_compression_s3tc = __loadGL_EXT_texture_compression_s3tc(proc);
    if(strcmp(name,"GL_EXT_texture_cube_map") == 0) return __isLoadedGL_EXT_texture_cube_map = __loadGL_EXT_texture_cube_map(proc);
    if(strcmp(name,"GL_EXT_texture_env_add") == 0) return __isLoadedGL_EXT_texture_env_add = __loadGL_EXT_texture_env_add(proc);
    if(strcmp(name,"GL_EXT_texture_env_combine") == 0) return __isLoadedGL_EXT_texture_env_combine = __loadGL_EXT_texture_env_combine(proc);
    if(strcmp(name,"GL_EXT_texture_env_dot3") == 0) return __isLoadedGL_EXT_texture_env_dot3 = __loadGL_EXT_texture_env_dot3(proc);
    if(strcmp(name,"GL_EXT_texture_filter_anisotropic") == 0) return __isLoadedGL_EXT_texture_filter_anisotropic = __loadGL_EXT_texture_filter_anisotropic(proc);
    if(strcmp(name,"GL_EXT_texture_filter_minmax") == 0) return __isLoadedGL_EXT_texture_filter_minmax = __loadGL_EXT_texture_filter_minmax(proc);
    if(strcmp(name,"GL_EXT_texture_integer") == 0) return __isLoadedGL_EXT_texture_integer = __loadGL_EXT_texture_integer(proc);
    if(strcmp(name,"GL_EXT_texture_lod_bias") == 0) return __isLoadedGL_EXT_texture_lod_bias = __loadGL_EXT_texture_lod_bias(proc);
    if(strcmp(name,"GL_EXT_texture_mirror_clamp") == 0) return __isLoadedGL_EXT_texture_mirror_clamp = __loadGL_EXT_texture_mirror_clamp(proc);
    if(strcmp(name,"GL_EXT_texture_object") == 0) return __isLoadedGL_EXT_texture_object = __loadGL_EXT_texture_object(proc);
    if(strcmp(name,"GL_EXT_texture_perturb_normal") == 0) return __isLoadedGL_EXT_texture_perturb_normal = __loadGL_EXT_texture_perturb_normal(proc);
    if(strcmp(name,"GL_EXT_texture_sRGB") == 0) return __isLoadedGL_EXT_texture_sRGB = __loadGL_EXT_texture_sRGB(proc);
    if(strcmp(name,"GL_EXT_texture_sRGB_decode") == 0) return __isLoadedGL_EXT_texture_sRGB_decode = __loadGL_EXT_texture_sRGB_decode(proc);
    if(strcmp(name,"GL_EXT_texture_shared_exponent") == 0) return __isLoadedGL_EXT_texture_shared_exponent = __loadGL_EXT_texture_shared_exponent(proc);
    if(strcmp(name,"GL_EXT_texture_snorm") == 0) return __isLoadedGL_EXT_texture_snorm = __loadGL_EXT_texture_snorm(proc);
    if(strcmp(name,"GL_EXT_texture_swizzle") == 0) return __isLoadedGL_EXT_texture_swizzle = __loadGL_EXT_texture_swizzle(proc);
    if(strcmp(name,"GL_EXT_timer_query") == 0) return __isLoadedGL_EXT_timer_query = __loadGL_EXT_timer_query(proc);
    if(strcmp(name,"GL_EXT_transform_feedback") == 0) return __isLoadedGL_EXT_transform_feedback = __loadGL_EXT_transform_feedback(proc);
    if(strcmp(name,"GL_EXT_vertex_array") == 0) return __isLoadedGL_EXT_vertex_array = __loadGL_EXT_vertex_array(proc);
    if(strcmp(name,"GL_EXT_vertex_array_bgra") == 0) return __isLoadedGL_EXT_vertex_array_bgra = __loadGL_EXT_vertex_array_bgra(proc);
    if(strcmp(name,"GL_EXT_vertex_attrib_64bit") == 0) return __isLoadedGL_EXT_vertex_attrib_64bit = __loadGL_EXT_vertex_attrib_64bit(proc);
    if(strcmp(name,"GL_EXT_vertex_shader") == 0) return __isLoadedGL_EXT_vertex_shader = __loadGL_EXT_vertex_shader(proc);
    if(strcmp(name,"GL_EXT_vertex_weighting") == 0) return __isLoadedGL_EXT_vertex_weighting = __loadGL_EXT_vertex_weighting(proc);
    if(strcmp(name,"GL_EXT_x11_sync_object") == 0) return __isLoadedGL_EXT_x11_sync_object = __loadGL_EXT_x11_sync_object(proc);
    if(strcmp(name,"GL_GREMEDY_frame_terminator") == 0) return __isLoadedGL_GREMEDY_frame_terminator = __loadGL_GREMEDY_frame_terminator(proc);
    if(strcmp(name,"GL_GREMEDY_string_marker") == 0) return __isLoadedGL_GREMEDY_string_marker = __loadGL_GREMEDY_string_marker(proc);
    if(strcmp(name,"GL_HP_convolution_border_modes") == 0) return __isLoadedGL_HP_convolution_border_modes = __loadGL_HP_convolution_border_modes(proc);
    if(strcmp(name,"GL_HP_image_transform") == 0) return __isLoadedGL_HP_image_transform = __loadGL_HP_image_transform(proc);
    if(strcmp(name,"GL_HP_occlusion_test") == 0) return __isLoadedGL_HP_occlusion_test = __loadGL_HP_occlusion_test(proc);
    if(strcmp(name,"GL_HP_texture_lighting") == 0) return __isLoadedGL_HP_texture_lighting = __loadGL_HP_texture_lighting(proc);
    if(strcmp(name,"GL_IBM_cull_vertex") == 0) return __isLoadedGL_IBM_cull_vertex = __loadGL_IBM_cull_vertex(proc);
    if(strcmp(name,"GL_IBM_multimode_draw_arrays") == 0) return __isLoadedGL_IBM_multimode_draw_arrays = __loadGL_IBM_multimode_draw_arrays(proc);
    if(strcmp(name,"GL_IBM_rasterpos_clip") == 0) return __isLoadedGL_IBM_rasterpos_clip = __loadGL_IBM_rasterpos_clip(proc);
    if(strcmp(name,"GL_IBM_static_data") == 0) return __isLoadedGL_IBM_static_data = __loadGL_IBM_static_data(proc);
    if(strcmp(name,"GL_IBM_texture_mirrored_repeat") == 0) return __isLoadedGL_IBM_texture_mirrored_repeat = __loadGL_IBM_texture_mirrored_repeat(proc);
    if(strcmp(name,"GL_IBM_vertex_array_lists") == 0) return __isLoadedGL_IBM_vertex_array_lists = __loadGL_IBM_vertex_array_lists(proc);
    if(strcmp(name,"GL_INGR_blend_func_separate") == 0) return __isLoadedGL_INGR_blend_func_separate = __loadGL_INGR_blend_func_separate(proc);
    if(strcmp(name,"GL_INGR_color_clamp") == 0) return __isLoadedGL_INGR_color_clamp = __loadGL_INGR_color_clamp(proc);
    if(strcmp(name,"GL_INGR_interlace_read") == 0) return __isLoadedGL_INGR_interlace_read = __loadGL_INGR_interlace_read(proc);
    if(strcmp(name,"GL_INTEL_fragment_shader_ordering") == 0) return __isLoadedGL_INTEL_fragment_shader_ordering = __loadGL_INTEL_fragment_shader_ordering(proc);
    if(strcmp(name,"GL_INTEL_framebuffer_CMAA") == 0) return __isLoadedGL_INTEL_framebuffer_CMAA = __loadGL_INTEL_framebuffer_CMAA(proc);
    if(strcmp(name,"GL_INTEL_map_texture") == 0) return __isLoadedGL_INTEL_map_texture = __loadGL_INTEL_map_texture(proc);
    if(strcmp(name,"GL_INTEL_parallel_arrays") == 0) return __isLoadedGL_INTEL_parallel_arrays = __loadGL_INTEL_parallel_arrays(proc);
    if(strcmp(name,"GL_INTEL_performance_query") == 0) return __isLoadedGL_INTEL_performance_query = __loadGL_INTEL_performance_query(proc);
    if(strcmp(name,"GL_MESAX_texture_stack") == 0) return __isLoadedGL_MESAX_texture_stack = __loadGL_MESAX_texture_stack(proc);
    if(strcmp(name,"GL_MESA_pack_invert") == 0) return __isLoadedGL_MESA_pack_invert = __loadGL_MESA_pack_invert(proc);
    if(strcmp(name,"GL_MESA_resize_buffers") == 0) return __isLoadedGL_MESA_resize_buffers = __loadGL_MESA_resize_buffers(proc);
    if(strcmp(name,"GL_MESA_window_pos") == 0) return __isLoadedGL_MESA_window_pos = __loadGL_MESA_window_pos(proc);
    if(strcmp(name,"GL_MESA_ycbcr_texture") == 0) return __isLoadedGL_MESA_ycbcr_texture = __loadGL_MESA_ycbcr_texture(proc);
    if(strcmp(name,"GL_NVX_conditional_render") == 0) return __isLoadedGL_NVX_conditional_render = __loadGL_NVX_conditional_render(proc);
    if(strcmp(name,"GL_NVX_gpu_memory_info") == 0) return __isLoadedGL_NVX_gpu_memory_info = __loadGL_NVX_gpu_memory_info(proc);
    if(strcmp(name,"GL_NV_bindless_multi_draw_indirect") == 0) return __isLoadedGL_NV_bindless_multi_draw_indirect = __loadGL_NV_bindless_multi_draw_indirect(proc);
    if(strcmp(name,"GL_NV_bindless_multi_draw_indirect_count") == 0) return __isLoadedGL_NV_bindless_multi_draw_indirect_count = __loadGL_NV_bindless_multi_draw_indirect_count(proc);
    if(strcmp(name,"GL_NV_bindless_texture") == 0) return __isLoadedGL_NV_bindless_texture = __loadGL_NV_bindless_texture(proc);
    if(strcmp(name,"GL_NV_blend_equation_advanced") == 0) return __isLoadedGL_NV_blend_equation_advanced = __loadGL_NV_blend_equation_advanced(proc);
    if(strcmp(name,"GL_NV_blend_equation_advanced_coherent") == 0) return __isLoadedGL_NV_blend_equation_advanced_coherent = __loadGL_NV_blend_equation_advanced_coherent(proc);
    if(strcmp(name,"GL_NV_blend_square") == 0) return __isLoadedGL_NV_blend_square = __loadGL_NV_blend_square(proc);
    if(strcmp(name,"GL_NV_command_list") == 0) return __isLoadedGL_NV_command_list = __loadGL_NV_command_list(proc);
    if(strcmp(name,"GL_NV_compute_program5") == 0) return __isLoadedGL_NV_compute_program5 = __loadGL_NV_compute_program5(proc);
    if(strcmp(name,"GL_NV_conditional_render") == 0) return __isLoadedGL_NV_conditional_render = __loadGL_NV_conditional_render(proc);
    if(strcmp(name,"GL_NV_conservative_raster") == 0) return __isLoadedGL_NV_conservative_raster = __loadGL_NV_conservative_raster(proc);
    if(strcmp(name,"GL_NV_conservative_raster_dilate") == 0) return __isLoadedGL_NV_conservative_raster_dilate = __loadGL_NV_conservative_raster_dilate(proc);
    if(strcmp(name,"GL_NV_copy_depth_to_color") == 0) return __isLoadedGL_NV_copy_depth_to_color = __loadGL_NV_copy_depth_to_color(proc);
    if(strcmp(name,"GL_NV_copy_image") == 0) return __isLoadedGL_NV_copy_image = __loadGL_NV_copy_image(proc);
    if(strcmp(name,"GL_NV_deep_texture3D") == 0) return __isLoadedGL_NV_deep_texture3D = __loadGL_NV_deep_texture3D(proc);
    if(strcmp(name,"GL_NV_depth_buffer_float") == 0) return __isLoadedGL_NV_depth_buffer_float = __loadGL_NV_depth_buffer_float(proc);
    if(strcmp(name,"GL_NV_depth_clamp") == 0) return __isLoadedGL_NV_depth_clamp = __loadGL_NV_depth_clamp(proc);
    if(strcmp(name,"GL_NV_draw_texture") == 0) return __isLoadedGL_NV_draw_texture = __loadGL_NV_draw_texture(proc);
    if(strcmp(name,"GL_NV_evaluators") == 0) return __isLoadedGL_NV_evaluators = __loadGL_NV_evaluators(proc);
    if(strcmp(name,"GL_NV_explicit_multisample") == 0) return __isLoadedGL_NV_explicit_multisample = __loadGL_NV_explicit_multisample(proc);
    if(strcmp(name,"GL_NV_fence") == 0) return __isLoadedGL_NV_fence = __loadGL_NV_fence(proc);
    if(strcmp(name,"GL_NV_fill_rectangle") == 0) return __isLoadedGL_NV_fill_rectangle = __loadGL_NV_fill_rectangle(proc);
    if(strcmp(name,"GL_NV_float_buffer") == 0) return __isLoadedGL_NV_float_buffer = __loadGL_NV_float_buffer(proc);
    if(strcmp(name,"GL_NV_fog_distance") == 0) return __isLoadedGL_NV_fog_distance = __loadGL_NV_fog_distance(proc);
    if(strcmp(name,"GL_NV_fragment_coverage_to_color") == 0) return __isLoadedGL_NV_fragment_coverage_to_color = __loadGL_NV_fragment_coverage_to_color(proc);
    if(strcmp(name,"GL_NV_fragment_program") == 0) return __isLoadedGL_NV_fragment_program = __loadGL_NV_fragment_program(proc);
    if(strcmp(name,"GL_NV_fragment_program2") == 0) return __isLoadedGL_NV_fragment_program2 = __loadGL_NV_fragment_program2(proc);
    if(strcmp(name,"GL_NV_fragment_program4") == 0) return __isLoadedGL_NV_fragment_program4 = __loadGL_NV_fragment_program4(proc);
    if(strcmp(name,"GL_NV_fragment_program_option") == 0) return __isLoadedGL_NV_fragment_program_option = __loadGL_NV_fragment_program_option(proc);
    if(strcmp(name,"GL_NV_fragment_shader_interlock") == 0) return __isLoadedGL_NV_fragment_shader_interlock = __loadGL_NV_fragment_shader_interlock(proc);
    if(strcmp(name,"GL_NV_framebuffer_mixed_samples") == 0) return __isLoadedGL_NV_framebuffer_mixed_samples = __loadGL_NV_framebuffer_mixed_samples(proc);
    if(strcmp(name,"GL_NV_framebuffer_multisample_coverage") == 0) return __isLoadedGL_NV_framebuffer_multisample_coverage = __loadGL_NV_framebuffer_multisample_coverage(proc);
    if(strcmp(name,"GL_NV_geometry_program4") == 0) return __isLoadedGL_NV_geometry_program4 = __loadGL_NV_geometry_program4(proc);
    if(strcmp(name,"GL_NV_geometry_shader4") == 0) return __isLoadedGL_NV_geometry_shader4 = __loadGL_NV_geometry_shader4(proc);
    if(strcmp(name,"GL_NV_geometry_shader_passthrough") == 0) return __isLoadedGL_NV_geometry_shader_passthrough = __loadGL_NV_geometry_shader_passthrough(proc);
    if(strcmp(name,"GL_NV_gpu_program4") == 0) return __isLoadedGL_NV_gpu_program4 = __loadGL_NV_gpu_program4(proc);
    if(strcmp(name,"GL_NV_gpu_program5") == 0) return __isLoadedGL_NV_gpu_program5 = __loadGL_NV_gpu_program5(proc);
    if(strcmp(name,"GL_NV_gpu_program5_mem_extended") == 0) return __isLoadedGL_NV_gpu_program5_mem_extended = __loadGL_NV_gpu_program5_mem_extended(proc);
    if(strcmp(name,"GL_NV_gpu_shader5") == 0) return __isLoadedGL_NV_gpu_shader5 = __loadGL_NV_gpu_shader5(proc);
    if(strcmp(name,"GL_NV_half_float") == 0) return __isLoadedGL_NV_half_float = __loadGL_NV_half_float(proc);
    if(strcmp(name,"GL_NV_internalformat_sample_query") == 0) return __isLoadedGL_NV_internalformat_sample_query = __loadGL_NV_internalformat_sample_query(proc);
    if(strcmp(name,"GL_NV_light_max_exponent") == 0) return __isLoadedGL_NV_light_max_exponent = __loadGL_NV_light_max_exponent(proc);
    if(strcmp(name,"GL_NV_multisample_coverage") == 0) return __isLoadedGL_NV_multisample_coverage = __loadGL_NV_multisample_coverage(proc);
    if(strcmp(name,"GL_NV_multisample_filter_hint") == 0) return __isLoadedGL_NV_multisample_filter_hint = __loadGL_NV_multisample_filter_hint(proc);
    if(strcmp(name,"GL_NV_occlusion_query") == 0) return __isLoadedGL_NV_occlusion_query = __loadGL_NV_occlusion_query(proc);
    if(strcmp(name,"GL_NV_packed_depth_stencil") == 0) return __isLoadedGL_NV_packed_depth_stencil = __loadGL_NV_packed_depth_stencil(proc);
    if(strcmp(name,"GL_NV_parameter_buffer_object") == 0) return __isLoadedGL_NV_parameter_buffer_object = __loadGL_NV_parameter_buffer_object(proc);
    if(strcmp(name,"GL_NV_parameter_buffer_object2") == 0) return __isLoadedGL_NV_parameter_buffer_object2 = __loadGL_NV_parameter_buffer_object2(proc);
    if(strcmp(name,"GL_NV_path_rendering") == 0) return __isLoadedGL_NV_path_rendering = __loadGL_NV_path_rendering(proc);
    if(strcmp(name,"GL_NV_path_rendering_shared_edge") == 0) return __isLoadedGL_NV_path_rendering_shared_edge = __loadGL_NV_path_rendering_shared_edge(proc);
    if(strcmp(name,"GL_NV_pixel_data_range") == 0) return __isLoadedGL_NV_pixel_data_range = __loadGL_NV_pixel_data_range(proc);
    if(strcmp(name,"GL_NV_point_sprite") == 0) return __isLoadedGL_NV_point_sprite = __loadGL_NV_point_sprite(proc);
    if(strcmp(name,"GL_NV_present_video") == 0) return __isLoadedGL_NV_present_video = __loadGL_NV_present_video(proc);
    if(strcmp(name,"GL_NV_primitive_restart") == 0) return __isLoadedGL_NV_primitive_restart = __loadGL_NV_primitive_restart(proc);
    if(strcmp(name,"GL_NV_register_combiners") == 0) return __isLoadedGL_NV_register_combiners = __loadGL_NV_register_combiners(proc);
    if(strcmp(name,"GL_NV_register_combiners2") == 0) return __isLoadedGL_NV_register_combiners2 = __loadGL_NV_register_combiners2(proc);
    if(strcmp(name,"GL_NV_sample_locations") == 0) return __isLoadedGL_NV_sample_locations = __loadGL_NV_sample_locations(proc);
    if(strcmp(name,"GL_NV_sample_mask_override_coverage") == 0) return __isLoadedGL_NV_sample_mask_override_coverage = __loadGL_NV_sample_mask_override_coverage(proc);
    if(strcmp(name,"GL_NV_shader_atomic_counters") == 0) return __isLoadedGL_NV_shader_atomic_counters = __loadGL_NV_shader_atomic_counters(proc);
    if(strcmp(name,"GL_NV_shader_atomic_float") == 0) return __isLoadedGL_NV_shader_atomic_float = __loadGL_NV_shader_atomic_float(proc);
    if(strcmp(name,"GL_NV_shader_atomic_fp16_vector") == 0) return __isLoadedGL_NV_shader_atomic_fp16_vector = __loadGL_NV_shader_atomic_fp16_vector(proc);
    if(strcmp(name,"GL_NV_shader_atomic_int64") == 0) return __isLoadedGL_NV_shader_atomic_int64 = __loadGL_NV_shader_atomic_int64(proc);
    if(strcmp(name,"GL_NV_shader_buffer_load") == 0) return __isLoadedGL_NV_shader_buffer_load = __loadGL_NV_shader_buffer_load(proc);
    if(strcmp(name,"GL_NV_shader_buffer_store") == 0) return __isLoadedGL_NV_shader_buffer_store = __loadGL_NV_shader_buffer_store(proc);
    if(strcmp(name,"GL_NV_shader_storage_buffer_object") == 0) return __isLoadedGL_NV_shader_storage_buffer_object = __loadGL_NV_shader_storage_buffer_object(proc);
    if(strcmp(name,"GL_NV_shader_thread_group") == 0) return __isLoadedGL_NV_shader_thread_group = __loadGL_NV_shader_thread_group(proc);
    if(strcmp(name,"GL_NV_shader_thread_shuffle") == 0) return __isLoadedGL_NV_shader_thread_shuffle = __loadGL_NV_shader_thread_shuffle(proc);
    if(strcmp(name,"GL_NV_tessellation_program5") == 0) return __isLoadedGL_NV_tessellation_program5 = __loadGL_NV_tessellation_program5(proc);
    if(strcmp(name,"GL_NV_texgen_emboss") == 0) return __isLoadedGL_NV_texgen_emboss = __loadGL_NV_texgen_emboss(proc);
    if(strcmp(name,"GL_NV_texgen_reflection") == 0) return __isLoadedGL_NV_texgen_reflection = __loadGL_NV_texgen_reflection(proc);
    if(strcmp(name,"GL_NV_texture_barrier") == 0) return __isLoadedGL_NV_texture_barrier = __loadGL_NV_texture_barrier(proc);
    if(strcmp(name,"GL_NV_texture_compression_vtc") == 0) return __isLoadedGL_NV_texture_compression_vtc = __loadGL_NV_texture_compression_vtc(proc);
    if(strcmp(name,"GL_NV_texture_env_combine4") == 0) return __isLoadedGL_NV_texture_env_combine4 = __loadGL_NV_texture_env_combine4(proc);
    if(strcmp(name,"GL_NV_texture_expand_normal") == 0) return __isLoadedGL_NV_texture_expand_normal = __loadGL_NV_texture_expand_normal(proc);
    if(strcmp(name,"GL_NV_texture_multisample") == 0) return __isLoadedGL_NV_texture_multisample = __loadGL_NV_texture_multisample(proc);
    if(strcmp(name,"GL_NV_texture_rectangle") == 0) return __isLoadedGL_NV_texture_rectangle = __loadGL_NV_texture_rectangle(proc);
    if(strcmp(name,"GL_NV_texture_shader") == 0) return __isLoadedGL_NV_texture_shader = __loadGL_NV_texture_shader(proc);
    if(strcmp(name,"GL_NV_texture_shader2") == 0) return __isLoadedGL_NV_texture_shader2 = __loadGL_NV_texture_shader2(proc);
    if(strcmp(name,"GL_NV_texture_shader3") == 0) return __isLoadedGL_NV_texture_shader3 = __loadGL_NV_texture_shader3(proc);
    if(strcmp(name,"GL_NV_transform_feedback") == 0) return __isLoadedGL_NV_transform_feedback = __loadGL_NV_transform_feedback(proc);
    if(strcmp(name,"GL_NV_transform_feedback2") == 0) return __isLoadedGL_NV_transform_feedback2 = __loadGL_NV_transform_feedback2(proc);
    if(strcmp(name,"GL_NV_uniform_buffer_unified_memory") == 0) return __isLoadedGL_NV_uniform_buffer_unified_memory = __loadGL_NV_uniform_buffer_unified_memory(proc);
    if(strcmp(name,"GL_NV_vdpau_interop") == 0) return __isLoadedGL_NV_vdpau_interop = __loadGL_NV_vdpau_interop(proc);
    if(strcmp(name,"GL_NV_vertex_array_range") == 0) return __isLoadedGL_NV_vertex_array_range = __loadGL_NV_vertex_array_range(proc);
    if(strcmp(name,"GL_NV_vertex_array_range2") == 0) return __isLoadedGL_NV_vertex_array_range2 = __loadGL_NV_vertex_array_range2(proc);
    if(strcmp(name,"GL_NV_vertex_attrib_integer_64bit") == 0) return __isLoadedGL_NV_vertex_attrib_integer_64bit = __loadGL_NV_vertex_attrib_integer_64bit(proc);
    if(strcmp(name,"GL_NV_vertex_buffer_unified_memory") == 0) return __isLoadedGL_NV_vertex_buffer_unified_memory = __loadGL_NV_vertex_buffer_unified_memory(proc);
    if(strcmp(name,"GL_NV_vertex_program") == 0) return __isLoadedGL_NV_vertex_program = __loadGL_NV_vertex_program(proc);
    if(strcmp(name,"GL_NV_vertex_program1_1") == 0) return __isLoadedGL_NV_vertex_program1_1 = __loadGL_NV_vertex_program1_1(proc);
    if(strcmp(name,"GL_NV_vertex_program2") == 0) return __isLoadedGL_NV_vertex_program2 = __loadGL_NV_vertex_program2(proc);
    if(strcmp(name,"GL_NV_vertex_program2_option") == 0) return __isLoadedGL_NV_vertex_program2_option = __loadGL_NV_vertex_program2_option(proc);
    if(strcmp(name,"GL_NV_vertex_program3") == 0) return __isLoadedGL_NV_vertex_program3 = __loadGL_NV_vertex_program3(proc);
    if(strcmp(name,"GL_NV_vertex_program4") == 0) return __isLoadedGL_NV_vertex_program4 = __loadGL_NV_vertex_program4(proc);
    if(strcmp(name,"GL_NV_video_capture") == 0) return __isLoadedGL_NV_video_capture = __loadGL_NV_video_capture(proc);
    if(strcmp(name,"GL_NV_viewport_array2") == 0) return __isLoadedGL_NV_viewport_array2 = __loadGL_NV_viewport_array2(proc);
    if(strcmp(name,"GL_OML_interlace") == 0) return __isLoadedGL_OML_interlace = __loadGL_OML_interlace(proc);
    if(strcmp(name,"GL_OML_resample") == 0) return __isLoadedGL_OML_resample = __loadGL_OML_resample(proc);
    if(strcmp(name,"GL_OML_subsample") == 0) return __isLoadedGL_OML_subsample = __loadGL_OML_subsample(proc);
    if(strcmp(name,"GL_OVR_multiview") == 0) return __isLoadedGL_OVR_multiview = __loadGL_OVR_multiview(proc);
    if(strcmp(name,"GL_OVR_multiview2") == 0) return __isLoadedGL_OVR_multiview2 = __loadGL_OVR_multiview2(proc);
    if(strcmp(name,"GL_PGI_misc_hints") == 0) return __isLoadedGL_PGI_misc_hints = __loadGL_PGI_misc_hints(proc);
    if(strcmp(name,"GL_PGI_vertex_hints") == 0) return __isLoadedGL_PGI_vertex_hints = __loadGL_PGI_vertex_hints(proc);
    if(strcmp(name,"GL_REND_screen_coordinates") == 0) return __isLoadedGL_REND_screen_coordinates = __loadGL_REND_screen_coordinates(proc);
    if(strcmp(name,"GL_S3_s3tc") == 0) return __isLoadedGL_S3_s3tc = __loadGL_S3_s3tc(proc);
    if(strcmp(name,"GL_SGIS_detail_texture") == 0) return __isLoadedGL_SGIS_detail_texture = __loadGL_SGIS_detail_texture(proc);
    if(strcmp(name,"GL_SGIS_fog_function") == 0) return __isLoadedGL_SGIS_fog_function = __loadGL_SGIS_fog_function(proc);
    if(strcmp(name,"GL_SGIS_generate_mipmap") == 0) return __isLoadedGL_SGIS_generate_mipmap = __loadGL_SGIS_generate_mipmap(proc);
    if(strcmp(name,"GL_SGIS_multisample") == 0) return __isLoadedGL_SGIS_multisample = __loadGL_SGIS_multisample(proc);
    if(strcmp(name,"GL_SGIS_pixel_texture") == 0) return __isLoadedGL_SGIS_pixel_texture = __loadGL_SGIS_pixel_texture(proc);
    if(strcmp(name,"GL_SGIS_point_line_texgen") == 0) return __isLoadedGL_SGIS_point_line_texgen = __loadGL_SGIS_point_line_texgen(proc);
    if(strcmp(name,"GL_SGIS_point_parameters") == 0) return __isLoadedGL_SGIS_point_parameters = __loadGL_SGIS_point_parameters(proc);
    if(strcmp(name,"GL_SGIS_sharpen_texture") == 0) return __isLoadedGL_SGIS_sharpen_texture = __loadGL_SGIS_sharpen_texture(proc);
    if(strcmp(name,"GL_SGIS_texture4D") == 0) return __isLoadedGL_SGIS_texture4D = __loadGL_SGIS_texture4D(proc);
    if(strcmp(name,"GL_SGIS_texture_border_clamp") == 0) return __isLoadedGL_SGIS_texture_border_clamp = __loadGL_SGIS_texture_border_clamp(proc);
    if(strcmp(name,"GL_SGIS_texture_color_mask") == 0) return __isLoadedGL_SGIS_texture_color_mask = __loadGL_SGIS_texture_color_mask(proc);
    if(strcmp(name,"GL_SGIS_texture_edge_clamp") == 0) return __isLoadedGL_SGIS_texture_edge_clamp = __loadGL_SGIS_texture_edge_clamp(proc);
    if(strcmp(name,"GL_SGIS_texture_filter4") == 0) return __isLoadedGL_SGIS_texture_filter4 = __loadGL_SGIS_texture_filter4(proc);
    if(strcmp(name,"GL_SGIS_texture_lod") == 0) return __isLoadedGL_SGIS_texture_lod = __loadGL_SGIS_texture_lod(proc);
    if(strcmp(name,"GL_SGIS_texture_select") == 0) return __isLoadedGL_SGIS_texture_select = __loadGL_SGIS_texture_select(proc);
    if(strcmp(name,"GL_SGIX_async") == 0) return __isLoadedGL_SGIX_async = __loadGL_SGIX_async(proc);
    if(strcmp(name,"GL_SGIX_async_histogram") == 0) return __isLoadedGL_SGIX_async_histogram = __loadGL_SGIX_async_histogram(proc);
    if(strcmp(name,"GL_SGIX_async_pixel") == 0) return __isLoadedGL_SGIX_async_pixel = __loadGL_SGIX_async_pixel(proc);
    if(strcmp(name,"GL_SGIX_blend_alpha_minmax") == 0) return __isLoadedGL_SGIX_blend_alpha_minmax = __loadGL_SGIX_blend_alpha_minmax(proc);
    if(strcmp(name,"GL_SGIX_calligraphic_fragment") == 0) return __isLoadedGL_SGIX_calligraphic_fragment = __loadGL_SGIX_calligraphic_fragment(proc);
    if(strcmp(name,"GL_SGIX_clipmap") == 0) return __isLoadedGL_SGIX_clipmap = __loadGL_SGIX_clipmap(proc);
    if(strcmp(name,"GL_SGIX_convolution_accuracy") == 0) return __isLoadedGL_SGIX_convolution_accuracy = __loadGL_SGIX_convolution_accuracy(proc);
    if(strcmp(name,"GL_SGIX_depth_pass_instrument") == 0) return __isLoadedGL_SGIX_depth_pass_instrument = __loadGL_SGIX_depth_pass_instrument(proc);
    if(strcmp(name,"GL_SGIX_depth_texture") == 0) return __isLoadedGL_SGIX_depth_texture = __loadGL_SGIX_depth_texture(proc);
    if(strcmp(name,"GL_SGIX_flush_raster") == 0) return __isLoadedGL_SGIX_flush_raster = __loadGL_SGIX_flush_raster(proc);
    if(strcmp(name,"GL_SGIX_fog_offset") == 0) return __isLoadedGL_SGIX_fog_offset = __loadGL_SGIX_fog_offset(proc);
    if(strcmp(name,"GL_SGIX_fragment_lighting") == 0) return __isLoadedGL_SGIX_fragment_lighting = __loadGL_SGIX_fragment_lighting(proc);
    if(strcmp(name,"GL_SGIX_framezoom") == 0) return __isLoadedGL_SGIX_framezoom = __loadGL_SGIX_framezoom(proc);
    if(strcmp(name,"GL_SGIX_igloo_interface") == 0) return __isLoadedGL_SGIX_igloo_interface = __loadGL_SGIX_igloo_interface(proc);
    if(strcmp(name,"GL_SGIX_instruments") == 0) return __isLoadedGL_SGIX_instruments = __loadGL_SGIX_instruments(proc);
    if(strcmp(name,"GL_SGIX_interlace") == 0) return __isLoadedGL_SGIX_interlace = __loadGL_SGIX_interlace(proc);
    if(strcmp(name,"GL_SGIX_ir_instrument1") == 0) return __isLoadedGL_SGIX_ir_instrument1 = __loadGL_SGIX_ir_instrument1(proc);
    if(strcmp(name,"GL_SGIX_list_priority") == 0) return __isLoadedGL_SGIX_list_priority = __loadGL_SGIX_list_priority(proc);
    if(strcmp(name,"GL_SGIX_pixel_texture") == 0) return __isLoadedGL_SGIX_pixel_texture = __loadGL_SGIX_pixel_texture(proc);
    if(strcmp(name,"GL_SGIX_pixel_tiles") == 0) return __isLoadedGL_SGIX_pixel_tiles = __loadGL_SGIX_pixel_tiles(proc);
    if(strcmp(name,"GL_SGIX_polynomial_ffd") == 0) return __isLoadedGL_SGIX_polynomial_ffd = __loadGL_SGIX_polynomial_ffd(proc);
    if(strcmp(name,"GL_SGIX_reference_plane") == 0) return __isLoadedGL_SGIX_reference_plane = __loadGL_SGIX_reference_plane(proc);
    if(strcmp(name,"GL_SGIX_resample") == 0) return __isLoadedGL_SGIX_resample = __loadGL_SGIX_resample(proc);
    if(strcmp(name,"GL_SGIX_scalebias_hint") == 0) return __isLoadedGL_SGIX_scalebias_hint = __loadGL_SGIX_scalebias_hint(proc);
    if(strcmp(name,"GL_SGIX_shadow") == 0) return __isLoadedGL_SGIX_shadow = __loadGL_SGIX_shadow(proc);
    if(strcmp(name,"GL_SGIX_shadow_ambient") == 0) return __isLoadedGL_SGIX_shadow_ambient = __loadGL_SGIX_shadow_ambient(proc);
    if(strcmp(name,"GL_SGIX_sprite") == 0) return __isLoadedGL_SGIX_sprite = __loadGL_SGIX_sprite(proc);
    if(strcmp(name,"GL_SGIX_subsample") == 0) return __isLoadedGL_SGIX_subsample = __loadGL_SGIX_subsample(proc);
    if(strcmp(name,"GL_SGIX_tag_sample_buffer") == 0) return __isLoadedGL_SGIX_tag_sample_buffer = __loadGL_SGIX_tag_sample_buffer(proc);
    if(strcmp(name,"GL_SGIX_texture_add_env") == 0) return __isLoadedGL_SGIX_texture_add_env = __loadGL_SGIX_texture_add_env(proc);
    if(strcmp(name,"GL_SGIX_texture_coordinate_clamp") == 0) return __isLoadedGL_SGIX_texture_coordinate_clamp = __loadGL_SGIX_texture_coordinate_clamp(proc);
    if(strcmp(name,"GL_SGIX_texture_lod_bias") == 0) return __isLoadedGL_SGIX_texture_lod_bias = __loadGL_SGIX_texture_lod_bias(proc);
    if(strcmp(name,"GL_SGIX_texture_multi_buffer") == 0) return __isLoadedGL_SGIX_texture_multi_buffer = __loadGL_SGIX_texture_multi_buffer(proc);
    if(strcmp(name,"GL_SGIX_texture_scale_bias") == 0) return __isLoadedGL_SGIX_texture_scale_bias = __loadGL_SGIX_texture_scale_bias(proc);
    if(strcmp(name,"GL_SGIX_vertex_preclip") == 0) return __isLoadedGL_SGIX_vertex_preclip = __loadGL_SGIX_vertex_preclip(proc);
    if(strcmp(name,"GL_SGIX_ycrcb") == 0) return __isLoadedGL_SGIX_ycrcb = __loadGL_SGIX_ycrcb(proc);
    if(strcmp(name,"GL_SGIX_ycrcb_subsample") == 0) return __isLoadedGL_SGIX_ycrcb_subsample = __loadGL_SGIX_ycrcb_subsample(proc);
    if(strcmp(name,"GL_SGIX_ycrcba") == 0) return __isLoadedGL_SGIX_ycrcba = __loadGL_SGIX_ycrcba(proc);
    if(strcmp(name,"GL_SGI_color_matrix") == 0) return __isLoadedGL_SGI_color_matrix = __loadGL_SGI_color_matrix(proc);
    if(strcmp(name,"GL_SGI_color_table") == 0) return __isLoadedGL_SGI_color_table = __loadGL_SGI_color_table(proc);
    if(strcmp(name,"GL_SGI_texture_color_table") == 0) return __isLoadedGL_SGI_texture_color_table = __loadGL_SGI_texture_color_table(proc);
    if(strcmp(name,"GL_SUNX_constant_data") == 0) return __isLoadedGL_SUNX_constant_data = __loadGL_SUNX_constant_data(proc);
    if(strcmp(name,"GL_SUN_convolution_border_modes") == 0) return __isLoadedGL_SUN_convolution_border_modes = __loadGL_SUN_convolution_border_modes(proc);
    if(strcmp(name,"GL_SUN_global_alpha") == 0) return __isLoadedGL_SUN_global_alpha = __loadGL_SUN_global_alpha(proc);
    if(strcmp(name,"GL_SUN_mesh_array") == 0) return __isLoadedGL_SUN_mesh_array = __loadGL_SUN_mesh_array(proc);
    if(strcmp(name,"GL_SUN_slice_accum") == 0) return __isLoadedGL_SUN_slice_accum = __loadGL_SUN_slice_accum(proc);
    if(strcmp(name,"GL_SUN_triangle_list") == 0) return __isLoadedGL_SUN_triangle_list = __loadGL_SUN_triangle_list(proc);
    if(strcmp(name,"GL_SUN_vertex") == 0) return __isLoadedGL_SUN_vertex = __loadGL_SUN_vertex(proc);
    if(strcmp(name,"GL_WIN_phong_shading") == 0) return __isLoadedGL_WIN_phong_shading = __loadGL_WIN_phong_shading(proc);
    if(strcmp(name,"GL_WIN_specular_fog") == 0) return __isLoadedGL_WIN_specular_fog = __loadGL_WIN_specular_fog(proc);
    if(strcmp(name,"WGL_ARB_buffer_region") == 0) return __isLoadedWGL_ARB_buffer_region = __loadWGL_ARB_buffer_region(proc);
    if(strcmp(name,"WGL_ARB_context_flush_control") == 0) return __isLoadedWGL_ARB_context_flush_control = __loadWGL_ARB_context_flush_control(proc);
    if(strcmp(name,"WGL_ARB_create_context") == 0) return __isLoadedWGL_ARB_create_context = __loadWGL_ARB_create_context(proc);
    if(strcmp(name,"WGL_ARB_create_context_profile") == 0) return __isLoadedWGL_ARB_create_context_profile = __loadWGL_ARB_create_context_profile(proc);
    if(strcmp(name,"WGL_ARB_create_context_robustness") == 0) return __isLoadedWGL_ARB_create_context_robustness = __loadWGL_ARB_create_context_robustness(proc);
    if(strcmp(name,"WGL_ARB_extensions_string") == 0) return __isLoadedWGL_ARB_extensions_string = __loadWGL_ARB_extensions_string(proc);
    if(strcmp(name,"WGL_ARB_framebuffer_sRGB") == 0) return __isLoadedWGL_ARB_framebuffer_sRGB = __loadWGL_ARB_framebuffer_sRGB(proc);
    if(strcmp(name,"WGL_ARB_make_current_read") == 0) return __isLoadedWGL_ARB_make_current_read = __loadWGL_ARB_make_current_read(proc);
    if(strcmp(name,"WGL_ARB_multisample") == 0) return __isLoadedWGL_ARB_multisample = __loadWGL_ARB_multisample(proc);
    if(strcmp(name,"WGL_ARB_pbuffer") == 0) return __isLoadedWGL_ARB_pbuffer = __loadWGL_ARB_pbuffer(proc);
    if(strcmp(name,"WGL_ARB_pixel_format") == 0) return __isLoadedWGL_ARB_pixel_format = __loadWGL_ARB_pixel_format(proc);
    if(strcmp(name,"WGL_ARB_pixel_format_float") == 0) return __isLoadedWGL_ARB_pixel_format_float = __loadWGL_ARB_pixel_format_float(proc);
    if(strcmp(name,"WGL_ARB_render_texture") == 0) return __isLoadedWGL_ARB_render_texture = __loadWGL_ARB_render_texture(proc);
    if(strcmp(name,"WGL_ARB_robustness_application_isolation") == 0) return __isLoadedWGL_ARB_robustness_application_isolation = __loadWGL_ARB_robustness_application_isolation(proc);
    if(strcmp(name,"WGL_ARB_robustness_share_group_isolation") == 0) return __isLoadedWGL_ARB_robustness_share_group_isolation = __loadWGL_ARB_robustness_share_group_isolation(proc);
    if(strcmp(name,"WGL_3DFX_multisample") == 0) return __isLoadedWGL_3DFX_multisample = __loadWGL_3DFX_multisample(proc);
    if(strcmp(name,"WGL_3DL_stereo_control") == 0) return __isLoadedWGL_3DL_stereo_control = __loadWGL_3DL_stereo_control(proc);
    if(strcmp(name,"WGL_AMD_gpu_association") == 0) return __isLoadedWGL_AMD_gpu_association = __loadWGL_AMD_gpu_association(proc);
    if(strcmp(name,"WGL_ATI_pixel_format_float") == 0) return __isLoadedWGL_ATI_pixel_format_float = __loadWGL_ATI_pixel_format_float(proc);
    if(strcmp(name,"WGL_EXT_create_context_es2_profile") == 0) return __isLoadedWGL_EXT_create_context_es2_profile = __loadWGL_EXT_create_context_es2_profile(proc);
    if(strcmp(name,"WGL_EXT_create_context_es_profile") == 0) return __isLoadedWGL_EXT_create_context_es_profile = __loadWGL_EXT_create_context_es_profile(proc);
    if(strcmp(name,"WGL_EXT_depth_float") == 0) return __isLoadedWGL_EXT_depth_float = __loadWGL_EXT_depth_float(proc);
    if(strcmp(name,"WGL_EXT_display_color_table") == 0) return __isLoadedWGL_EXT_display_color_table = __loadWGL_EXT_display_color_table(proc);
    if(strcmp(name,"WGL_EXT_extensions_string") == 0) return __isLoadedWGL_EXT_extensions_string = __loadWGL_EXT_extensions_string(proc);
    if(strcmp(name,"WGL_EXT_framebuffer_sRGB") == 0) return __isLoadedWGL_EXT_framebuffer_sRGB = __loadWGL_EXT_framebuffer_sRGB(proc);
    if(strcmp(name,"WGL_EXT_make_current_read") == 0) return __isLoadedWGL_EXT_make_current_read = __loadWGL_EXT_make_current_read(proc);
    if(strcmp(name,"WGL_EXT_multisample") == 0) return __isLoadedWGL_EXT_multisample = __loadWGL_EXT_multisample(proc);
    if(strcmp(name,"WGL_EXT_pbuffer") == 0) return __isLoadedWGL_EXT_pbuffer = __loadWGL_EXT_pbuffer(proc);
    if(strcmp(name,"WGL_EXT_pixel_format") == 0) return __isLoadedWGL_EXT_pixel_format = __loadWGL_EXT_pixel_format(proc);
    if(strcmp(name,"WGL_EXT_pixel_format_packed_float") == 0) return __isLoadedWGL_EXT_pixel_format_packed_float = __loadWGL_EXT_pixel_format_packed_float(proc);
    if(strcmp(name,"WGL_EXT_swap_control") == 0) return __isLoadedWGL_EXT_swap_control = __loadWGL_EXT_swap_control(proc);
    if(strcmp(name,"WGL_EXT_swap_control_tear") == 0) return __isLoadedWGL_EXT_swap_control_tear = __loadWGL_EXT_swap_control_tear(proc);
    if(strcmp(name,"WGL_I3D_digital_video_control") == 0) return __isLoadedWGL_I3D_digital_video_control = __loadWGL_I3D_digital_video_control(proc);
    if(strcmp(name,"WGL_I3D_gamma") == 0) return __isLoadedWGL_I3D_gamma = __loadWGL_I3D_gamma(proc);
    if(strcmp(name,"WGL_I3D_genlock") == 0) return __isLoadedWGL_I3D_genlock = __loadWGL_I3D_genlock(proc);
    if(strcmp(name,"WGL_I3D_image_buffer") == 0) return __isLoadedWGL_I3D_image_buffer = __loadWGL_I3D_image_buffer(proc);
    if(strcmp(name,"WGL_I3D_swap_frame_lock") == 0) return __isLoadedWGL_I3D_swap_frame_lock = __loadWGL_I3D_swap_frame_lock(proc);
    if(strcmp(name,"WGL_I3D_swap_frame_usage") == 0) return __isLoadedWGL_I3D_swap_frame_usage = __loadWGL_I3D_swap_frame_usage(proc);
    if(strcmp(name,"WGL_NV_DX_interop") == 0) return __isLoadedWGL_NV_DX_interop = __loadWGL_NV_DX_interop(proc);
    if(strcmp(name,"WGL_NV_DX_interop2") == 0) return __isLoadedWGL_NV_DX_interop2 = __loadWGL_NV_DX_interop2(proc);
    if(strcmp(name,"WGL_NV_copy_image") == 0) return __isLoadedWGL_NV_copy_image = __loadWGL_NV_copy_image(proc);
    if(strcmp(name,"WGL_NV_delay_before_swap") == 0) return __isLoadedWGL_NV_delay_before_swap = __loadWGL_NV_delay_before_swap(proc);
    if(strcmp(name,"WGL_NV_float_buffer") == 0) return __isLoadedWGL_NV_float_buffer = __loadWGL_NV_float_buffer(proc);
    if(strcmp(name,"WGL_NV_gpu_affinity") == 0) return __isLoadedWGL_NV_gpu_affinity = __loadWGL_NV_gpu_affinity(proc);
    if(strcmp(name,"WGL_NV_multisample_coverage") == 0) return __isLoadedWGL_NV_multisample_coverage = __loadWGL_NV_multisample_coverage(proc);
    if(strcmp(name,"WGL_NV_present_video") == 0) return __isLoadedWGL_NV_present_video = __loadWGL_NV_present_video(proc);
    if(strcmp(name,"WGL_NV_render_depth_texture") == 0) return __isLoadedWGL_NV_render_depth_texture = __loadWGL_NV_render_depth_texture(proc);
    if(strcmp(name,"WGL_NV_render_texture_rectangle") == 0) return __isLoadedWGL_NV_render_texture_rectangle = __loadWGL_NV_render_texture_rectangle(proc);
    if(strcmp(name,"WGL_NV_swap_group") == 0) return __isLoadedWGL_NV_swap_group = __loadWGL_NV_swap_group(proc);
    if(strcmp(name,"WGL_NV_vertex_array_range") == 0) return __isLoadedWGL_NV_vertex_array_range = __loadWGL_NV_vertex_array_range(proc);
    if(strcmp(name,"WGL_NV_video_capture") == 0) return __isLoadedWGL_NV_video_capture = __loadWGL_NV_video_capture(proc);
    if(strcmp(name,"WGL_NV_video_output") == 0) return __isLoadedWGL_NV_video_output = __loadWGL_NV_video_output(proc);
    if(strcmp(name,"WGL_OML_sync_control") == 0) return __isLoadedWGL_OML_sync_control = __loadWGL_OML_sync_control(proc);
    return false;
}
bool glExtIsLoaded(const char* name)
{
    if(strcmp(name,"GL_VERSION_1_2") == 0) return __isLoadedGL_VERSION_1_2;
    if(strcmp(name,"GL_VERSION_1_3") == 0) return __isLoadedGL_VERSION_1_3;
    if(strcmp(name,"GL_VERSION_1_4") == 0) return __isLoadedGL_VERSION_1_4;
    if(strcmp(name,"GL_VERSION_1_5") == 0) return __isLoadedGL_VERSION_1_5;
    if(strcmp(name,"GL_VERSION_2_0") == 0) return __isLoadedGL_VERSION_2_0;
    if(strcmp(name,"GL_VERSION_2_1") == 0) return __isLoadedGL_VERSION_2_1;
    if(strcmp(name,"GL_VERSION_3_0") == 0) return __isLoadedGL_VERSION_3_0;
    if(strcmp(name,"GL_VERSION_3_1") == 0) return __isLoadedGL_VERSION_3_1;
    if(strcmp(name,"GL_VERSION_3_2") == 0) return __isLoadedGL_VERSION_3_2;
    if(strcmp(name,"GL_VERSION_3_3") == 0) return __isLoadedGL_VERSION_3_3;
    if(strcmp(name,"GL_VERSION_4_0") == 0) return __isLoadedGL_VERSION_4_0;
    if(strcmp(name,"GL_VERSION_4_1") == 0) return __isLoadedGL_VERSION_4_1;
    if(strcmp(name,"GL_VERSION_4_2") == 0) return __isLoadedGL_VERSION_4_2;
    if(strcmp(name,"GL_VERSION_4_3") == 0) return __isLoadedGL_VERSION_4_3;
    if(strcmp(name,"GL_VERSION_4_4") == 0) return __isLoadedGL_VERSION_4_4;
    if(strcmp(name,"GL_VERSION_4_5") == 0) return __isLoadedGL_VERSION_4_5;
    if(strcmp(name,"GL_ARB_ES2_compatibility") == 0) return __isLoadedGL_ARB_ES2_compatibility;
    if(strcmp(name,"GL_ARB_ES3_1_compatibility") == 0) return __isLoadedGL_ARB_ES3_1_compatibility;
    if(strcmp(name,"GL_ARB_ES3_2_compatibility") == 0) return __isLoadedGL_ARB_ES3_2_compatibility;
    if(strcmp(name,"GL_ARB_ES3_compatibility") == 0) return __isLoadedGL_ARB_ES3_compatibility;
    if(strcmp(name,"GL_ARB_arrays_of_arrays") == 0) return __isLoadedGL_ARB_arrays_of_arrays;
    if(strcmp(name,"GL_ARB_base_instance") == 0) return __isLoadedGL_ARB_base_instance;
    if(strcmp(name,"GL_ARB_bindless_texture") == 0) return __isLoadedGL_ARB_bindless_texture;
    if(strcmp(name,"GL_ARB_blend_func_extended") == 0) return __isLoadedGL_ARB_blend_func_extended;
    if(strcmp(name,"GL_ARB_buffer_storage") == 0) return __isLoadedGL_ARB_buffer_storage;
    if(strcmp(name,"GL_ARB_cl_event") == 0) return __isLoadedGL_ARB_cl_event;
    if(strcmp(name,"GL_ARB_clear_buffer_object") == 0) return __isLoadedGL_ARB_clear_buffer_object;
    if(strcmp(name,"GL_ARB_clear_texture") == 0) return __isLoadedGL_ARB_clear_texture;
    if(strcmp(name,"GL_ARB_clip_control") == 0) return __isLoadedGL_ARB_clip_control;
    if(strcmp(name,"GL_ARB_color_buffer_float") == 0) return __isLoadedGL_ARB_color_buffer_float;
    if(strcmp(name,"GL_ARB_compatibility") == 0) return __isLoadedGL_ARB_compatibility;
    if(strcmp(name,"GL_ARB_compressed_texture_pixel_storage") == 0) return __isLoadedGL_ARB_compressed_texture_pixel_storage;
    if(strcmp(name,"GL_ARB_compute_shader") == 0) return __isLoadedGL_ARB_compute_shader;
    if(strcmp(name,"GL_ARB_compute_variable_group_size") == 0) return __isLoadedGL_ARB_compute_variable_group_size;
    if(strcmp(name,"GL_ARB_conditional_render_inverted") == 0) return __isLoadedGL_ARB_conditional_render_inverted;
    if(strcmp(name,"GL_ARB_conservative_depth") == 0) return __isLoadedGL_ARB_conservative_depth;
    if(strcmp(name,"GL_ARB_copy_buffer") == 0) return __isLoadedGL_ARB_copy_buffer;
    if(strcmp(name,"GL_ARB_copy_image") == 0) return __isLoadedGL_ARB_copy_image;
    if(strcmp(name,"GL_ARB_cull_distance") == 0) return __isLoadedGL_ARB_cull_distance;
    if(strcmp(name,"GL_ARB_debug_output") == 0) return __isLoadedGL_ARB_debug_output;
    if(strcmp(name,"GL_ARB_depth_buffer_float") == 0) return __isLoadedGL_ARB_depth_buffer_float;
    if(strcmp(name,"GL_ARB_depth_clamp") == 0) return __isLoadedGL_ARB_depth_clamp;
    if(strcmp(name,"GL_ARB_depth_texture") == 0) return __isLoadedGL_ARB_depth_texture;
    if(strcmp(name,"GL_ARB_derivative_control") == 0) return __isLoadedGL_ARB_derivative_control;
    if(strcmp(name,"GL_ARB_direct_state_access") == 0) return __isLoadedGL_ARB_direct_state_access;
    if(strcmp(name,"GL_ARB_draw_buffers") == 0) return __isLoadedGL_ARB_draw_buffers;
    if(strcmp(name,"GL_ARB_draw_buffers_blend") == 0) return __isLoadedGL_ARB_draw_buffers_blend;
    if(strcmp(name,"GL_ARB_draw_elements_base_vertex") == 0) return __isLoadedGL_ARB_draw_elements_base_vertex;
    if(strcmp(name,"GL_ARB_draw_indirect") == 0) return __isLoadedGL_ARB_draw_indirect;
    if(strcmp(name,"GL_ARB_draw_instanced") == 0) return __isLoadedGL_ARB_draw_instanced;
    if(strcmp(name,"GL_ARB_enhanced_layouts") == 0) return __isLoadedGL_ARB_enhanced_layouts;
    if(strcmp(name,"GL_ARB_explicit_attrib_location") == 0) return __isLoadedGL_ARB_explicit_attrib_location;
    if(strcmp(name,"GL_ARB_explicit_uniform_location") == 0) return __isLoadedGL_ARB_explicit_uniform_location;
    if(strcmp(name,"GL_ARB_fragment_coord_conventions") == 0) return __isLoadedGL_ARB_fragment_coord_conventions;
    if(strcmp(name,"GL_ARB_fragment_layer_viewport") == 0) return __isLoadedGL_ARB_fragment_layer_viewport;
    if(strcmp(name,"GL_ARB_fragment_program") == 0) return __isLoadedGL_ARB_fragment_program;
    if(strcmp(name,"GL_ARB_fragment_program_shadow") == 0) return __isLoadedGL_ARB_fragment_program_shadow;
    if(strcmp(name,"GL_ARB_fragment_shader") == 0) return __isLoadedGL_ARB_fragment_shader;
    if(strcmp(name,"GL_ARB_fragment_shader_interlock") == 0) return __isLoadedGL_ARB_fragment_shader_interlock;
    if(strcmp(name,"GL_ARB_framebuffer_no_attachments") == 0) return __isLoadedGL_ARB_framebuffer_no_attachments;
    if(strcmp(name,"GL_ARB_framebuffer_object") == 0) return __isLoadedGL_ARB_framebuffer_object;
    if(strcmp(name,"GL_ARB_framebuffer_sRGB") == 0) return __isLoadedGL_ARB_framebuffer_sRGB;
    if(strcmp(name,"GL_ARB_geometry_shader4") == 0) return __isLoadedGL_ARB_geometry_shader4;
    if(strcmp(name,"GL_ARB_get_program_binary") == 0) return __isLoadedGL_ARB_get_program_binary;
    if(strcmp(name,"GL_ARB_get_texture_sub_image") == 0) return __isLoadedGL_ARB_get_texture_sub_image;
    if(strcmp(name,"GL_ARB_gpu_shader5") == 0) return __isLoadedGL_ARB_gpu_shader5;
    if(strcmp(name,"GL_ARB_gpu_shader_fp64") == 0) return __isLoadedGL_ARB_gpu_shader_fp64;
    if(strcmp(name,"GL_ARB_gpu_shader_int64") == 0) return __isLoadedGL_ARB_gpu_shader_int64;
    if(strcmp(name,"GL_ARB_half_float_pixel") == 0) return __isLoadedGL_ARB_half_float_pixel;
    if(strcmp(name,"GL_ARB_half_float_vertex") == 0) return __isLoadedGL_ARB_half_float_vertex;
    if(strcmp(name,"GL_ARB_imaging") == 0) return __isLoadedGL_ARB_imaging;
    if(strcmp(name,"GL_ARB_indirect_parameters") == 0) return __isLoadedGL_ARB_indirect_parameters;
    if(strcmp(name,"GL_ARB_instanced_arrays") == 0) return __isLoadedGL_ARB_instanced_arrays;
    if(strcmp(name,"GL_ARB_internalformat_query") == 0) return __isLoadedGL_ARB_internalformat_query;
    if(strcmp(name,"GL_ARB_internalformat_query2") == 0) return __isLoadedGL_ARB_internalformat_query2;
    if(strcmp(name,"GL_ARB_invalidate_subdata") == 0) return __isLoadedGL_ARB_invalidate_subdata;
    if(strcmp(name,"GL_ARB_map_buffer_alignment") == 0) return __isLoadedGL_ARB_map_buffer_alignment;
    if(strcmp(name,"GL_ARB_map_buffer_range") == 0) return __isLoadedGL_ARB_map_buffer_range;
    if(strcmp(name,"GL_ARB_matrix_palette") == 0) return __isLoadedGL_ARB_matrix_palette;
    if(strcmp(name,"GL_ARB_multi_bind") == 0) return __isLoadedGL_ARB_multi_bind;
    if(strcmp(name,"GL_ARB_multi_draw_indirect") == 0) return __isLoadedGL_ARB_multi_draw_indirect;
    if(strcmp(name,"GL_ARB_multisample") == 0) return __isLoadedGL_ARB_multisample;
    if(strcmp(name,"GL_ARB_multitexture") == 0) return __isLoadedGL_ARB_multitexture;
    if(strcmp(name,"GL_ARB_occlusion_query") == 0) return __isLoadedGL_ARB_occlusion_query;
    if(strcmp(name,"GL_ARB_occlusion_query2") == 0) return __isLoadedGL_ARB_occlusion_query2;
    if(strcmp(name,"GL_ARB_parallel_shader_compile") == 0) return __isLoadedGL_ARB_parallel_shader_compile;
    if(strcmp(name,"GL_ARB_pipeline_statistics_query") == 0) return __isLoadedGL_ARB_pipeline_statistics_query;
    if(strcmp(name,"GL_ARB_pixel_buffer_object") == 0) return __isLoadedGL_ARB_pixel_buffer_object;
    if(strcmp(name,"GL_ARB_point_parameters") == 0) return __isLoadedGL_ARB_point_parameters;
    if(strcmp(name,"GL_ARB_point_sprite") == 0) return __isLoadedGL_ARB_point_sprite;
    if(strcmp(name,"GL_ARB_post_depth_coverage") == 0) return __isLoadedGL_ARB_post_depth_coverage;
    if(strcmp(name,"GL_ARB_program_interface_query") == 0) return __isLoadedGL_ARB_program_interface_query;
    if(strcmp(name,"GL_ARB_provoking_vertex") == 0) return __isLoadedGL_ARB_provoking_vertex;
    if(strcmp(name,"GL_ARB_query_buffer_object") == 0) return __isLoadedGL_ARB_query_buffer_object;
    if(strcmp(name,"GL_ARB_robust_buffer_access_behavior") == 0) return __isLoadedGL_ARB_robust_buffer_access_behavior;
    if(strcmp(name,"GL_ARB_robustness") == 0) return __isLoadedGL_ARB_robustness;
    if(strcmp(name,"GL_ARB_robustness_isolation") == 0) return __isLoadedGL_ARB_robustness_isolation;
    if(strcmp(name,"GL_ARB_sample_locations") == 0) return __isLoadedGL_ARB_sample_locations;
    if(strcmp(name,"GL_ARB_sample_shading") == 0) return __isLoadedGL_ARB_sample_shading;
    if(strcmp(name,"GL_ARB_sampler_objects") == 0) return __isLoadedGL_ARB_sampler_objects;
    if(strcmp(name,"GL_ARB_seamless_cube_map") == 0) return __isLoadedGL_ARB_seamless_cube_map;
    if(strcmp(name,"GL_ARB_seamless_cubemap_per_texture") == 0) return __isLoadedGL_ARB_seamless_cubemap_per_texture;
    if(strcmp(name,"GL_ARB_separate_shader_objects") == 0) return __isLoadedGL_ARB_separate_shader_objects;
    if(strcmp(name,"GL_ARB_shader_atomic_counter_ops") == 0) return __isLoadedGL_ARB_shader_atomic_counter_ops;
    if(strcmp(name,"GL_ARB_shader_atomic_counters") == 0) return __isLoadedGL_ARB_shader_atomic_counters;
    if(strcmp(name,"GL_ARB_shader_ballot") == 0) return __isLoadedGL_ARB_shader_ballot;
    if(strcmp(name,"GL_ARB_shader_bit_encoding") == 0) return __isLoadedGL_ARB_shader_bit_encoding;
    if(strcmp(name,"GL_ARB_shader_clock") == 0) return __isLoadedGL_ARB_shader_clock;
    if(strcmp(name,"GL_ARB_shader_draw_parameters") == 0) return __isLoadedGL_ARB_shader_draw_parameters;
    if(strcmp(name,"GL_ARB_shader_group_vote") == 0) return __isLoadedGL_ARB_shader_group_vote;
    if(strcmp(name,"GL_ARB_shader_image_load_store") == 0) return __isLoadedGL_ARB_shader_image_load_store;
    if(strcmp(name,"GL_ARB_shader_image_size") == 0) return __isLoadedGL_ARB_shader_image_size;
    if(strcmp(name,"GL_ARB_shader_objects") == 0) return __isLoadedGL_ARB_shader_objects;
    if(strcmp(name,"GL_ARB_shader_precision") == 0) return __isLoadedGL_ARB_shader_precision;
    if(strcmp(name,"GL_ARB_shader_stencil_export") == 0) return __isLoadedGL_ARB_shader_stencil_export;
    if(strcmp(name,"GL_ARB_shader_storage_buffer_object") == 0) return __isLoadedGL_ARB_shader_storage_buffer_object;
    if(strcmp(name,"GL_ARB_shader_subroutine") == 0) return __isLoadedGL_ARB_shader_subroutine;
    if(strcmp(name,"GL_ARB_shader_texture_image_samples") == 0) return __isLoadedGL_ARB_shader_texture_image_samples;
    if(strcmp(name,"GL_ARB_shader_texture_lod") == 0) return __isLoadedGL_ARB_shader_texture_lod;
    if(strcmp(name,"GL_ARB_shader_viewport_layer_array") == 0) return __isLoadedGL_ARB_shader_viewport_layer_array;
    if(strcmp(name,"GL_ARB_shading_language_100") == 0) return __isLoadedGL_ARB_shading_language_100;
    if(strcmp(name,"GL_ARB_shading_language_420pack") == 0) return __isLoadedGL_ARB_shading_language_420pack;
    if(strcmp(name,"GL_ARB_shading_language_include") == 0) return __isLoadedGL_ARB_shading_language_include;
    if(strcmp(name,"GL_ARB_shading_language_packing") == 0) return __isLoadedGL_ARB_shading_language_packing;
    if(strcmp(name,"GL_ARB_shadow") == 0) return __isLoadedGL_ARB_shadow;
    if(strcmp(name,"GL_ARB_shadow_ambient") == 0) return __isLoadedGL_ARB_shadow_ambient;
    if(strcmp(name,"GL_ARB_sparse_buffer") == 0) return __isLoadedGL_ARB_sparse_buffer;
    if(strcmp(name,"GL_ARB_sparse_texture") == 0) return __isLoadedGL_ARB_sparse_texture;
    if(strcmp(name,"GL_ARB_sparse_texture2") == 0) return __isLoadedGL_ARB_sparse_texture2;
    if(strcmp(name,"GL_ARB_sparse_texture_clamp") == 0) return __isLoadedGL_ARB_sparse_texture_clamp;
    if(strcmp(name,"GL_ARB_stencil_texturing") == 0) return __isLoadedGL_ARB_stencil_texturing;
    if(strcmp(name,"GL_ARB_sync") == 0) return __isLoadedGL_ARB_sync;
    if(strcmp(name,"GL_ARB_tessellation_shader") == 0) return __isLoadedGL_ARB_tessellation_shader;
    if(strcmp(name,"GL_ARB_texture_barrier") == 0) return __isLoadedGL_ARB_texture_barrier;
    if(strcmp(name,"GL_ARB_texture_border_clamp") == 0) return __isLoadedGL_ARB_texture_border_clamp;
    if(strcmp(name,"GL_ARB_texture_buffer_object") == 0) return __isLoadedGL_ARB_texture_buffer_object;
    if(strcmp(name,"GL_ARB_texture_buffer_object_rgb32") == 0) return __isLoadedGL_ARB_texture_buffer_object_rgb32;
    if(strcmp(name,"GL_ARB_texture_buffer_range") == 0) return __isLoadedGL_ARB_texture_buffer_range;
    if(strcmp(name,"GL_ARB_texture_compression") == 0) return __isLoadedGL_ARB_texture_compression;
    if(strcmp(name,"GL_ARB_texture_compression_bptc") == 0) return __isLoadedGL_ARB_texture_compression_bptc;
    if(strcmp(name,"GL_ARB_texture_compression_rgtc") == 0) return __isLoadedGL_ARB_texture_compression_rgtc;
    if(strcmp(name,"GL_ARB_texture_cube_map") == 0) return __isLoadedGL_ARB_texture_cube_map;
    if(strcmp(name,"GL_ARB_texture_cube_map_array") == 0) return __isLoadedGL_ARB_texture_cube_map_array;
    if(strcmp(name,"GL_ARB_texture_env_add") == 0) return __isLoadedGL_ARB_texture_env_add;
    if(strcmp(name,"GL_ARB_texture_env_combine") == 0) return __isLoadedGL_ARB_texture_env_combine;
    if(strcmp(name,"GL_ARB_texture_env_crossbar") == 0) return __isLoadedGL_ARB_texture_env_crossbar;
    if(strcmp(name,"GL_ARB_texture_env_dot3") == 0) return __isLoadedGL_ARB_texture_env_dot3;
    if(strcmp(name,"GL_ARB_texture_filter_minmax") == 0) return __isLoadedGL_ARB_texture_filter_minmax;
    if(strcmp(name,"GL_ARB_texture_float") == 0) return __isLoadedGL_ARB_texture_float;
    if(strcmp(name,"GL_ARB_texture_gather") == 0) return __isLoadedGL_ARB_texture_gather;
    if(strcmp(name,"GL_ARB_texture_mirror_clamp_to_edge") == 0) return __isLoadedGL_ARB_texture_mirror_clamp_to_edge;
    if(strcmp(name,"GL_ARB_texture_mirrored_repeat") == 0) return __isLoadedGL_ARB_texture_mirrored_repeat;
    if(strcmp(name,"GL_ARB_texture_multisample") == 0) return __isLoadedGL_ARB_texture_multisample;
    if(strcmp(name,"GL_ARB_texture_non_power_of_two") == 0) return __isLoadedGL_ARB_texture_non_power_of_two;
    if(strcmp(name,"GL_ARB_texture_query_levels") == 0) return __isLoadedGL_ARB_texture_query_levels;
    if(strcmp(name,"GL_ARB_texture_query_lod") == 0) return __isLoadedGL_ARB_texture_query_lod;
    if(strcmp(name,"GL_ARB_texture_rectangle") == 0) return __isLoadedGL_ARB_texture_rectangle;
    if(strcmp(name,"GL_ARB_texture_rg") == 0) return __isLoadedGL_ARB_texture_rg;
    if(strcmp(name,"GL_ARB_texture_rgb10_a2ui") == 0) return __isLoadedGL_ARB_texture_rgb10_a2ui;
    if(strcmp(name,"GL_ARB_texture_stencil8") == 0) return __isLoadedGL_ARB_texture_stencil8;
    if(strcmp(name,"GL_ARB_texture_storage") == 0) return __isLoadedGL_ARB_texture_storage;
    if(strcmp(name,"GL_ARB_texture_storage_multisample") == 0) return __isLoadedGL_ARB_texture_storage_multisample;
    if(strcmp(name,"GL_ARB_texture_swizzle") == 0) return __isLoadedGL_ARB_texture_swizzle;
    if(strcmp(name,"GL_ARB_texture_view") == 0) return __isLoadedGL_ARB_texture_view;
    if(strcmp(name,"GL_ARB_timer_query") == 0) return __isLoadedGL_ARB_timer_query;
    if(strcmp(name,"GL_ARB_transform_feedback2") == 0) return __isLoadedGL_ARB_transform_feedback2;
    if(strcmp(name,"GL_ARB_transform_feedback3") == 0) return __isLoadedGL_ARB_transform_feedback3;
    if(strcmp(name,"GL_ARB_transform_feedback_instanced") == 0) return __isLoadedGL_ARB_transform_feedback_instanced;
    if(strcmp(name,"GL_ARB_transform_feedback_overflow_query") == 0) return __isLoadedGL_ARB_transform_feedback_overflow_query;
    if(strcmp(name,"GL_ARB_transpose_matrix") == 0) return __isLoadedGL_ARB_transpose_matrix;
    if(strcmp(name,"GL_ARB_uniform_buffer_object") == 0) return __isLoadedGL_ARB_uniform_buffer_object;
    if(strcmp(name,"GL_ARB_vertex_array_bgra") == 0) return __isLoadedGL_ARB_vertex_array_bgra;
    if(strcmp(name,"GL_ARB_vertex_array_object") == 0) return __isLoadedGL_ARB_vertex_array_object;
    if(strcmp(name,"GL_ARB_vertex_attrib_64bit") == 0) return __isLoadedGL_ARB_vertex_attrib_64bit;
    if(strcmp(name,"GL_ARB_vertex_attrib_binding") == 0) return __isLoadedGL_ARB_vertex_attrib_binding;
    if(strcmp(name,"GL_ARB_vertex_blend") == 0) return __isLoadedGL_ARB_vertex_blend;
    if(strcmp(name,"GL_ARB_vertex_buffer_object") == 0) return __isLoadedGL_ARB_vertex_buffer_object;
    if(strcmp(name,"GL_ARB_vertex_program") == 0) return __isLoadedGL_ARB_vertex_program;
    if(strcmp(name,"GL_ARB_vertex_shader") == 0) return __isLoadedGL_ARB_vertex_shader;
    if(strcmp(name,"GL_ARB_vertex_type_10f_11f_11f_rev") == 0) return __isLoadedGL_ARB_vertex_type_10f_11f_11f_rev;
    if(strcmp(name,"GL_ARB_vertex_type_2_10_10_10_rev") == 0) return __isLoadedGL_ARB_vertex_type_2_10_10_10_rev;
    if(strcmp(name,"GL_ARB_viewport_array") == 0) return __isLoadedGL_ARB_viewport_array;
    if(strcmp(name,"GL_ARB_window_pos") == 0) return __isLoadedGL_ARB_window_pos;
    if(strcmp(name,"GL_KHR_blend_equation_advanced") == 0) return __isLoadedGL_KHR_blend_equation_advanced;
    if(strcmp(name,"GL_KHR_blend_equation_advanced_coherent") == 0) return __isLoadedGL_KHR_blend_equation_advanced_coherent;
    if(strcmp(name,"GL_KHR_context_flush_control") == 0) return __isLoadedGL_KHR_context_flush_control;
    if(strcmp(name,"GL_KHR_debug") == 0) return __isLoadedGL_KHR_debug;
    if(strcmp(name,"GL_KHR_no_error") == 0) return __isLoadedGL_KHR_no_error;
    if(strcmp(name,"GL_KHR_robust_buffer_access_behavior") == 0) return __isLoadedGL_KHR_robust_buffer_access_behavior;
    if(strcmp(name,"GL_KHR_robustness") == 0) return __isLoadedGL_KHR_robustness;
    if(strcmp(name,"GL_KHR_texture_compression_astc_hdr") == 0) return __isLoadedGL_KHR_texture_compression_astc_hdr;
    if(strcmp(name,"GL_KHR_texture_compression_astc_ldr") == 0) return __isLoadedGL_KHR_texture_compression_astc_ldr;
    if(strcmp(name,"GL_KHR_texture_compression_astc_sliced_3d") == 0) return __isLoadedGL_KHR_texture_compression_astc_sliced_3d;
    if(strcmp(name,"GL_OES_byte_coordinates") == 0) return __isLoadedGL_OES_byte_coordinates;
    if(strcmp(name,"GL_OES_compressed_paletted_texture") == 0) return __isLoadedGL_OES_compressed_paletted_texture;
    if(strcmp(name,"GL_OES_fixed_point") == 0) return __isLoadedGL_OES_fixed_point;
    if(strcmp(name,"GL_OES_query_matrix") == 0) return __isLoadedGL_OES_query_matrix;
    if(strcmp(name,"GL_OES_read_format") == 0) return __isLoadedGL_OES_read_format;
    if(strcmp(name,"GL_OES_single_precision") == 0) return __isLoadedGL_OES_single_precision;
    if(strcmp(name,"GL_3DFX_multisample") == 0) return __isLoadedGL_3DFX_multisample;
    if(strcmp(name,"GL_3DFX_tbuffer") == 0) return __isLoadedGL_3DFX_tbuffer;
    if(strcmp(name,"GL_3DFX_texture_compression_FXT1") == 0) return __isLoadedGL_3DFX_texture_compression_FXT1;
    if(strcmp(name,"GL_AMD_blend_minmax_factor") == 0) return __isLoadedGL_AMD_blend_minmax_factor;
    if(strcmp(name,"GL_AMD_conservative_depth") == 0) return __isLoadedGL_AMD_conservative_depth;
    if(strcmp(name,"GL_AMD_debug_output") == 0) return __isLoadedGL_AMD_debug_output;
    if(strcmp(name,"GL_AMD_depth_clamp_separate") == 0) return __isLoadedGL_AMD_depth_clamp_separate;
    if(strcmp(name,"GL_AMD_draw_buffers_blend") == 0) return __isLoadedGL_AMD_draw_buffers_blend;
    if(strcmp(name,"GL_AMD_gcn_shader") == 0) return __isLoadedGL_AMD_gcn_shader;
    if(strcmp(name,"GL_AMD_gpu_shader_int64") == 0) return __isLoadedGL_AMD_gpu_shader_int64;
    if(strcmp(name,"GL_AMD_interleaved_elements") == 0) return __isLoadedGL_AMD_interleaved_elements;
    if(strcmp(name,"GL_AMD_multi_draw_indirect") == 0) return __isLoadedGL_AMD_multi_draw_indirect;
    if(strcmp(name,"GL_AMD_name_gen_delete") == 0) return __isLoadedGL_AMD_name_gen_delete;
    if(strcmp(name,"GL_AMD_occlusion_query_event") == 0) return __isLoadedGL_AMD_occlusion_query_event;
    if(strcmp(name,"GL_AMD_performance_monitor") == 0) return __isLoadedGL_AMD_performance_monitor;
    if(strcmp(name,"GL_AMD_pinned_memory") == 0) return __isLoadedGL_AMD_pinned_memory;
    if(strcmp(name,"GL_AMD_query_buffer_object") == 0) return __isLoadedGL_AMD_query_buffer_object;
    if(strcmp(name,"GL_AMD_sample_positions") == 0) return __isLoadedGL_AMD_sample_positions;
    if(strcmp(name,"GL_AMD_seamless_cubemap_per_texture") == 0) return __isLoadedGL_AMD_seamless_cubemap_per_texture;
    if(strcmp(name,"GL_AMD_shader_atomic_counter_ops") == 0) return __isLoadedGL_AMD_shader_atomic_counter_ops;
    if(strcmp(name,"GL_AMD_shader_stencil_export") == 0) return __isLoadedGL_AMD_shader_stencil_export;
    if(strcmp(name,"GL_AMD_shader_trinary_minmax") == 0) return __isLoadedGL_AMD_shader_trinary_minmax;
    if(strcmp(name,"GL_AMD_sparse_texture") == 0) return __isLoadedGL_AMD_sparse_texture;
    if(strcmp(name,"GL_AMD_stencil_operation_extended") == 0) return __isLoadedGL_AMD_stencil_operation_extended;
    if(strcmp(name,"GL_AMD_texture_texture4") == 0) return __isLoadedGL_AMD_texture_texture4;
    if(strcmp(name,"GL_AMD_transform_feedback3_lines_triangles") == 0) return __isLoadedGL_AMD_transform_feedback3_lines_triangles;
    if(strcmp(name,"GL_AMD_transform_feedback4") == 0) return __isLoadedGL_AMD_transform_feedback4;
    if(strcmp(name,"GL_AMD_vertex_shader_layer") == 0) return __isLoadedGL_AMD_vertex_shader_layer;
    if(strcmp(name,"GL_AMD_vertex_shader_tessellator") == 0) return __isLoadedGL_AMD_vertex_shader_tessellator;
    if(strcmp(name,"GL_AMD_vertex_shader_viewport_index") == 0) return __isLoadedGL_AMD_vertex_shader_viewport_index;
    if(strcmp(name,"GL_APPLE_aux_depth_stencil") == 0) return __isLoadedGL_APPLE_aux_depth_stencil;
    if(strcmp(name,"GL_APPLE_client_storage") == 0) return __isLoadedGL_APPLE_client_storage;
    if(strcmp(name,"GL_APPLE_element_array") == 0) return __isLoadedGL_APPLE_element_array;
    if(strcmp(name,"GL_APPLE_fence") == 0) return __isLoadedGL_APPLE_fence;
    if(strcmp(name,"GL_APPLE_float_pixels") == 0) return __isLoadedGL_APPLE_float_pixels;
    if(strcmp(name,"GL_APPLE_flush_buffer_range") == 0) return __isLoadedGL_APPLE_flush_buffer_range;
    if(strcmp(name,"GL_APPLE_object_purgeable") == 0) return __isLoadedGL_APPLE_object_purgeable;
    if(strcmp(name,"GL_APPLE_rgb_422") == 0) return __isLoadedGL_APPLE_rgb_422;
    if(strcmp(name,"GL_APPLE_row_bytes") == 0) return __isLoadedGL_APPLE_row_bytes;
    if(strcmp(name,"GL_APPLE_specular_vector") == 0) return __isLoadedGL_APPLE_specular_vector;
    if(strcmp(name,"GL_APPLE_texture_range") == 0) return __isLoadedGL_APPLE_texture_range;
    if(strcmp(name,"GL_APPLE_transform_hint") == 0) return __isLoadedGL_APPLE_transform_hint;
    if(strcmp(name,"GL_APPLE_vertex_array_object") == 0) return __isLoadedGL_APPLE_vertex_array_object;
    if(strcmp(name,"GL_APPLE_vertex_array_range") == 0) return __isLoadedGL_APPLE_vertex_array_range;
    if(strcmp(name,"GL_APPLE_vertex_program_evaluators") == 0) return __isLoadedGL_APPLE_vertex_program_evaluators;
    if(strcmp(name,"GL_APPLE_ycbcr_422") == 0) return __isLoadedGL_APPLE_ycbcr_422;
    if(strcmp(name,"GL_ATI_draw_buffers") == 0) return __isLoadedGL_ATI_draw_buffers;
    if(strcmp(name,"GL_ATI_element_array") == 0) return __isLoadedGL_ATI_element_array;
    if(strcmp(name,"GL_ATI_envmap_bumpmap") == 0) return __isLoadedGL_ATI_envmap_bumpmap;
    if(strcmp(name,"GL_ATI_fragment_shader") == 0) return __isLoadedGL_ATI_fragment_shader;
    if(strcmp(name,"GL_ATI_map_object_buffer") == 0) return __isLoadedGL_ATI_map_object_buffer;
    if(strcmp(name,"GL_ATI_meminfo") == 0) return __isLoadedGL_ATI_meminfo;
    if(strcmp(name,"GL_ATI_pixel_format_float") == 0) return __isLoadedGL_ATI_pixel_format_float;
    if(strcmp(name,"GL_ATI_pn_triangles") == 0) return __isLoadedGL_ATI_pn_triangles;
    if(strcmp(name,"GL_ATI_separate_stencil") == 0) return __isLoadedGL_ATI_separate_stencil;
    if(strcmp(name,"GL_ATI_text_fragment_shader") == 0) return __isLoadedGL_ATI_text_fragment_shader;
    if(strcmp(name,"GL_ATI_texture_env_combine3") == 0) return __isLoadedGL_ATI_texture_env_combine3;
    if(strcmp(name,"GL_ATI_texture_float") == 0) return __isLoadedGL_ATI_texture_float;
    if(strcmp(name,"GL_ATI_texture_mirror_once") == 0) return __isLoadedGL_ATI_texture_mirror_once;
    if(strcmp(name,"GL_ATI_vertex_array_object") == 0) return __isLoadedGL_ATI_vertex_array_object;
    if(strcmp(name,"GL_ATI_vertex_attrib_array_object") == 0) return __isLoadedGL_ATI_vertex_attrib_array_object;
    if(strcmp(name,"GL_ATI_vertex_streams") == 0) return __isLoadedGL_ATI_vertex_streams;
    if(strcmp(name,"GL_EXT_422_pixels") == 0) return __isLoadedGL_EXT_422_pixels;
    if(strcmp(name,"GL_EXT_abgr") == 0) return __isLoadedGL_EXT_abgr;
    if(strcmp(name,"GL_EXT_bgra") == 0) return __isLoadedGL_EXT_bgra;
    if(strcmp(name,"GL_EXT_bindable_uniform") == 0) return __isLoadedGL_EXT_bindable_uniform;
    if(strcmp(name,"GL_EXT_blend_color") == 0) return __isLoadedGL_EXT_blend_color;
    if(strcmp(name,"GL_EXT_blend_equation_separate") == 0) return __isLoadedGL_EXT_blend_equation_separate;
    if(strcmp(name,"GL_EXT_blend_func_separate") == 0) return __isLoadedGL_EXT_blend_func_separate;
    if(strcmp(name,"GL_EXT_blend_logic_op") == 0) return __isLoadedGL_EXT_blend_logic_op;
    if(strcmp(name,"GL_EXT_blend_minmax") == 0) return __isLoadedGL_EXT_blend_minmax;
    if(strcmp(name,"GL_EXT_blend_subtract") == 0) return __isLoadedGL_EXT_blend_subtract;
    if(strcmp(name,"GL_EXT_clip_volume_hint") == 0) return __isLoadedGL_EXT_clip_volume_hint;
    if(strcmp(name,"GL_EXT_cmyka") == 0) return __isLoadedGL_EXT_cmyka;
    if(strcmp(name,"GL_EXT_color_subtable") == 0) return __isLoadedGL_EXT_color_subtable;
    if(strcmp(name,"GL_EXT_compiled_vertex_array") == 0) return __isLoadedGL_EXT_compiled_vertex_array;
    if(strcmp(name,"GL_EXT_convolution") == 0) return __isLoadedGL_EXT_convolution;
    if(strcmp(name,"GL_EXT_coordinate_frame") == 0) return __isLoadedGL_EXT_coordinate_frame;
    if(strcmp(name,"GL_EXT_copy_texture") == 0) return __isLoadedGL_EXT_copy_texture;
    if(strcmp(name,"GL_EXT_cull_vertex") == 0) return __isLoadedGL_EXT_cull_vertex;
    if(strcmp(name,"GL_EXT_debug_label") == 0) return __isLoadedGL_EXT_debug_label;
    if(strcmp(name,"GL_EXT_debug_marker") == 0) return __isLoadedGL_EXT_debug_marker;
    if(strcmp(name,"GL_EXT_depth_bounds_test") == 0) return __isLoadedGL_EXT_depth_bounds_test;
    if(strcmp(name,"GL_EXT_direct_state_access") == 0) return __isLoadedGL_EXT_direct_state_access;
    if(strcmp(name,"GL_EXT_draw_buffers2") == 0) return __isLoadedGL_EXT_draw_buffers2;
    if(strcmp(name,"GL_EXT_draw_instanced") == 0) return __isLoadedGL_EXT_draw_instanced;
    if(strcmp(name,"GL_EXT_draw_range_elements") == 0) return __isLoadedGL_EXT_draw_range_elements;
    if(strcmp(name,"GL_EXT_fog_coord") == 0) return __isLoadedGL_EXT_fog_coord;
    if(strcmp(name,"GL_EXT_framebuffer_blit") == 0) return __isLoadedGL_EXT_framebuffer_blit;
    if(strcmp(name,"GL_EXT_framebuffer_multisample") == 0) return __isLoadedGL_EXT_framebuffer_multisample;
    if(strcmp(name,"GL_EXT_framebuffer_multisample_blit_scaled") == 0) return __isLoadedGL_EXT_framebuffer_multisample_blit_scaled;
    if(strcmp(name,"GL_EXT_framebuffer_object") == 0) return __isLoadedGL_EXT_framebuffer_object;
    if(strcmp(name,"GL_EXT_framebuffer_sRGB") == 0) return __isLoadedGL_EXT_framebuffer_sRGB;
    if(strcmp(name,"GL_EXT_geometry_shader4") == 0) return __isLoadedGL_EXT_geometry_shader4;
    if(strcmp(name,"GL_EXT_gpu_program_parameters") == 0) return __isLoadedGL_EXT_gpu_program_parameters;
    if(strcmp(name,"GL_EXT_gpu_shader4") == 0) return __isLoadedGL_EXT_gpu_shader4;
    if(strcmp(name,"GL_EXT_histogram") == 0) return __isLoadedGL_EXT_histogram;
    if(strcmp(name,"GL_EXT_index_array_formats") == 0) return __isLoadedGL_EXT_index_array_formats;
    if(strcmp(name,"GL_EXT_index_func") == 0) return __isLoadedGL_EXT_index_func;
    if(strcmp(name,"GL_EXT_index_material") == 0) return __isLoadedGL_EXT_index_material;
    if(strcmp(name,"GL_EXT_index_texture") == 0) return __isLoadedGL_EXT_index_texture;
    if(strcmp(name,"GL_EXT_light_texture") == 0) return __isLoadedGL_EXT_light_texture;
    if(strcmp(name,"GL_EXT_misc_attribute") == 0) return __isLoadedGL_EXT_misc_attribute;
    if(strcmp(name,"GL_EXT_multi_draw_arrays") == 0) return __isLoadedGL_EXT_multi_draw_arrays;
    if(strcmp(name,"GL_EXT_multisample") == 0) return __isLoadedGL_EXT_multisample;
    if(strcmp(name,"GL_EXT_packed_depth_stencil") == 0) return __isLoadedGL_EXT_packed_depth_stencil;
    if(strcmp(name,"GL_EXT_packed_float") == 0) return __isLoadedGL_EXT_packed_float;
    if(strcmp(name,"GL_EXT_packed_pixels") == 0) return __isLoadedGL_EXT_packed_pixels;
    if(strcmp(name,"GL_EXT_paletted_texture") == 0) return __isLoadedGL_EXT_paletted_texture;
    if(strcmp(name,"GL_EXT_pixel_buffer_object") == 0) return __isLoadedGL_EXT_pixel_buffer_object;
    if(strcmp(name,"GL_EXT_pixel_transform") == 0) return __isLoadedGL_EXT_pixel_transform;
    if(strcmp(name,"GL_EXT_pixel_transform_color_table") == 0) return __isLoadedGL_EXT_pixel_transform_color_table;
    if(strcmp(name,"GL_EXT_point_parameters") == 0) return __isLoadedGL_EXT_point_parameters;
    if(strcmp(name,"GL_EXT_polygon_offset") == 0) return __isLoadedGL_EXT_polygon_offset;
    if(strcmp(name,"GL_EXT_polygon_offset_clamp") == 0) return __isLoadedGL_EXT_polygon_offset_clamp;
    if(strcmp(name,"GL_EXT_post_depth_coverage") == 0) return __isLoadedGL_EXT_post_depth_coverage;
    if(strcmp(name,"GL_EXT_provoking_vertex") == 0) return __isLoadedGL_EXT_provoking_vertex;
    if(strcmp(name,"GL_EXT_raster_multisample") == 0) return __isLoadedGL_EXT_raster_multisample;
    if(strcmp(name,"GL_EXT_rescale_normal") == 0) return __isLoadedGL_EXT_rescale_normal;
    if(strcmp(name,"GL_EXT_secondary_color") == 0) return __isLoadedGL_EXT_secondary_color;
    if(strcmp(name,"GL_EXT_separate_shader_objects") == 0) return __isLoadedGL_EXT_separate_shader_objects;
    if(strcmp(name,"GL_EXT_separate_specular_color") == 0) return __isLoadedGL_EXT_separate_specular_color;
    if(strcmp(name,"GL_EXT_shader_image_load_formatted") == 0) return __isLoadedGL_EXT_shader_image_load_formatted;
    if(strcmp(name,"GL_EXT_shader_image_load_store") == 0) return __isLoadedGL_EXT_shader_image_load_store;
    if(strcmp(name,"GL_EXT_shader_integer_mix") == 0) return __isLoadedGL_EXT_shader_integer_mix;
    if(strcmp(name,"GL_EXT_shadow_funcs") == 0) return __isLoadedGL_EXT_shadow_funcs;
    if(strcmp(name,"GL_EXT_shared_texture_palette") == 0) return __isLoadedGL_EXT_shared_texture_palette;
    if(strcmp(name,"GL_EXT_sparse_texture2") == 0) return __isLoadedGL_EXT_sparse_texture2;
    if(strcmp(name,"GL_EXT_stencil_clear_tag") == 0) return __isLoadedGL_EXT_stencil_clear_tag;
    if(strcmp(name,"GL_EXT_stencil_two_side") == 0) return __isLoadedGL_EXT_stencil_two_side;
    if(strcmp(name,"GL_EXT_stencil_wrap") == 0) return __isLoadedGL_EXT_stencil_wrap;
    if(strcmp(name,"GL_EXT_subtexture") == 0) return __isLoadedGL_EXT_subtexture;
    if(strcmp(name,"GL_EXT_texture") == 0) return __isLoadedGL_EXT_texture;
    if(strcmp(name,"GL_EXT_texture3D") == 0) return __isLoadedGL_EXT_texture3D;
    if(strcmp(name,"GL_EXT_texture_array") == 0) return __isLoadedGL_EXT_texture_array;
    if(strcmp(name,"GL_EXT_texture_buffer_object") == 0) return __isLoadedGL_EXT_texture_buffer_object;
    if(strcmp(name,"GL_EXT_texture_compression_latc") == 0) return __isLoadedGL_EXT_texture_compression_latc;
    if(strcmp(name,"GL_EXT_texture_compression_rgtc") == 0) return __isLoadedGL_EXT_texture_compression_rgtc;
    if(strcmp(name,"GL_EXT_texture_compression_s3tc") == 0) return __isLoadedGL_EXT_texture_compression_s3tc;
    if(strcmp(name,"GL_EXT_texture_cube_map") == 0) return __isLoadedGL_EXT_texture_cube_map;
    if(strcmp(name,"GL_EXT_texture_env_add") == 0) return __isLoadedGL_EXT_texture_env_add;
    if(strcmp(name,"GL_EXT_texture_env_combine") == 0) return __isLoadedGL_EXT_texture_env_combine;
    if(strcmp(name,"GL_EXT_texture_env_dot3") == 0) return __isLoadedGL_EXT_texture_env_dot3;
    if(strcmp(name,"GL_EXT_texture_filter_anisotropic") == 0) return __isLoadedGL_EXT_texture_filter_anisotropic;
    if(strcmp(name,"GL_EXT_texture_filter_minmax") == 0) return __isLoadedGL_EXT_texture_filter_minmax;
    if(strcmp(name,"GL_EXT_texture_integer") == 0) return __isLoadedGL_EXT_texture_integer;
    if(strcmp(name,"GL_EXT_texture_lod_bias") == 0) return __isLoadedGL_EXT_texture_lod_bias;
    if(strcmp(name,"GL_EXT_texture_mirror_clamp") == 0) return __isLoadedGL_EXT_texture_mirror_clamp;
    if(strcmp(name,"GL_EXT_texture_object") == 0) return __isLoadedGL_EXT_texture_object;
    if(strcmp(name,"GL_EXT_texture_perturb_normal") == 0) return __isLoadedGL_EXT_texture_perturb_normal;
    if(strcmp(name,"GL_EXT_texture_sRGB") == 0) return __isLoadedGL_EXT_texture_sRGB;
    if(strcmp(name,"GL_EXT_texture_sRGB_decode") == 0) return __isLoadedGL_EXT_texture_sRGB_decode;
    if(strcmp(name,"GL_EXT_texture_shared_exponent") == 0) return __isLoadedGL_EXT_texture_shared_exponent;
    if(strcmp(name,"GL_EXT_texture_snorm") == 0) return __isLoadedGL_EXT_texture_snorm;
    if(strcmp(name,"GL_EXT_texture_swizzle") == 0) return __isLoadedGL_EXT_texture_swizzle;
    if(strcmp(name,"GL_EXT_timer_query") == 0) return __isLoadedGL_EXT_timer_query;
    if(strcmp(name,"GL_EXT_transform_feedback") == 0) return __isLoadedGL_EXT_transform_feedback;
    if(strcmp(name,"GL_EXT_vertex_array") == 0) return __isLoadedGL_EXT_vertex_array;
    if(strcmp(name,"GL_EXT_vertex_array_bgra") == 0) return __isLoadedGL_EXT_vertex_array_bgra;
    if(strcmp(name,"GL_EXT_vertex_attrib_64bit") == 0) return __isLoadedGL_EXT_vertex_attrib_64bit;
    if(strcmp(name,"GL_EXT_vertex_shader") == 0) return __isLoadedGL_EXT_vertex_shader;
    if(strcmp(name,"GL_EXT_vertex_weighting") == 0) return __isLoadedGL_EXT_vertex_weighting;
    if(strcmp(name,"GL_EXT_x11_sync_object") == 0) return __isLoadedGL_EXT_x11_sync_object;
    if(strcmp(name,"GL_GREMEDY_frame_terminator") == 0) return __isLoadedGL_GREMEDY_frame_terminator;
    if(strcmp(name,"GL_GREMEDY_string_marker") == 0) return __isLoadedGL_GREMEDY_string_marker;
    if(strcmp(name,"GL_HP_convolution_border_modes") == 0) return __isLoadedGL_HP_convolution_border_modes;
    if(strcmp(name,"GL_HP_image_transform") == 0) return __isLoadedGL_HP_image_transform;
    if(strcmp(name,"GL_HP_occlusion_test") == 0) return __isLoadedGL_HP_occlusion_test;
    if(strcmp(name,"GL_HP_texture_lighting") == 0) return __isLoadedGL_HP_texture_lighting;
    if(strcmp(name,"GL_IBM_cull_vertex") == 0) return __isLoadedGL_IBM_cull_vertex;
    if(strcmp(name,"GL_IBM_multimode_draw_arrays") == 0) return __isLoadedGL_IBM_multimode_draw_arrays;
    if(strcmp(name,"GL_IBM_rasterpos_clip") == 0) return __isLoadedGL_IBM_rasterpos_clip;
    if(strcmp(name,"GL_IBM_static_data") == 0) return __isLoadedGL_IBM_static_data;
    if(strcmp(name,"GL_IBM_texture_mirrored_repeat") == 0) return __isLoadedGL_IBM_texture_mirrored_repeat;
    if(strcmp(name,"GL_IBM_vertex_array_lists") == 0) return __isLoadedGL_IBM_vertex_array_lists;
    if(strcmp(name,"GL_INGR_blend_func_separate") == 0) return __isLoadedGL_INGR_blend_func_separate;
    if(strcmp(name,"GL_INGR_color_clamp") == 0) return __isLoadedGL_INGR_color_clamp;
    if(strcmp(name,"GL_INGR_interlace_read") == 0) return __isLoadedGL_INGR_interlace_read;
    if(strcmp(name,"GL_INTEL_fragment_shader_ordering") == 0) return __isLoadedGL_INTEL_fragment_shader_ordering;
    if(strcmp(name,"GL_INTEL_framebuffer_CMAA") == 0) return __isLoadedGL_INTEL_framebuffer_CMAA;
    if(strcmp(name,"GL_INTEL_map_texture") == 0) return __isLoadedGL_INTEL_map_texture;
    if(strcmp(name,"GL_INTEL_parallel_arrays") == 0) return __isLoadedGL_INTEL_parallel_arrays;
    if(strcmp(name,"GL_INTEL_performance_query") == 0) return __isLoadedGL_INTEL_performance_query;
    if(strcmp(name,"GL_MESAX_texture_stack") == 0) return __isLoadedGL_MESAX_texture_stack;
    if(strcmp(name,"GL_MESA_pack_invert") == 0) return __isLoadedGL_MESA_pack_invert;
    if(strcmp(name,"GL_MESA_resize_buffers") == 0) return __isLoadedGL_MESA_resize_buffers;
    if(strcmp(name,"GL_MESA_window_pos") == 0) return __isLoadedGL_MESA_window_pos;
    if(strcmp(name,"GL_MESA_ycbcr_texture") == 0) return __isLoadedGL_MESA_ycbcr_texture;
    if(strcmp(name,"GL_NVX_conditional_render") == 0) return __isLoadedGL_NVX_conditional_render;
    if(strcmp(name,"GL_NVX_gpu_memory_info") == 0) return __isLoadedGL_NVX_gpu_memory_info;
    if(strcmp(name,"GL_NV_bindless_multi_draw_indirect") == 0) return __isLoadedGL_NV_bindless_multi_draw_indirect;
    if(strcmp(name,"GL_NV_bindless_multi_draw_indirect_count") == 0) return __isLoadedGL_NV_bindless_multi_draw_indirect_count;
    if(strcmp(name,"GL_NV_bindless_texture") == 0) return __isLoadedGL_NV_bindless_texture;
    if(strcmp(name,"GL_NV_blend_equation_advanced") == 0) return __isLoadedGL_NV_blend_equation_advanced;
    if(strcmp(name,"GL_NV_blend_equation_advanced_coherent") == 0) return __isLoadedGL_NV_blend_equation_advanced_coherent;
    if(strcmp(name,"GL_NV_blend_square") == 0) return __isLoadedGL_NV_blend_square;
    if(strcmp(name,"GL_NV_command_list") == 0) return __isLoadedGL_NV_command_list;
    if(strcmp(name,"GL_NV_compute_program5") == 0) return __isLoadedGL_NV_compute_program5;
    if(strcmp(name,"GL_NV_conditional_render") == 0) return __isLoadedGL_NV_conditional_render;
    if(strcmp(name,"GL_NV_conservative_raster") == 0) return __isLoadedGL_NV_conservative_raster;
    if(strcmp(name,"GL_NV_conservative_raster_dilate") == 0) return __isLoadedGL_NV_conservative_raster_dilate;
    if(strcmp(name,"GL_NV_copy_depth_to_color") == 0) return __isLoadedGL_NV_copy_depth_to_color;
    if(strcmp(name,"GL_NV_copy_image") == 0) return __isLoadedGL_NV_copy_image;
    if(strcmp(name,"GL_NV_deep_texture3D") == 0) return __isLoadedGL_NV_deep_texture3D;
    if(strcmp(name,"GL_NV_depth_buffer_float") == 0) return __isLoadedGL_NV_depth_buffer_float;
    if(strcmp(name,"GL_NV_depth_clamp") == 0) return __isLoadedGL_NV_depth_clamp;
    if(strcmp(name,"GL_NV_draw_texture") == 0) return __isLoadedGL_NV_draw_texture;
    if(strcmp(name,"GL_NV_evaluators") == 0) return __isLoadedGL_NV_evaluators;
    if(strcmp(name,"GL_NV_explicit_multisample") == 0) return __isLoadedGL_NV_explicit_multisample;
    if(strcmp(name,"GL_NV_fence") == 0) return __isLoadedGL_NV_fence;
    if(strcmp(name,"GL_NV_fill_rectangle") == 0) return __isLoadedGL_NV_fill_rectangle;
    if(strcmp(name,"GL_NV_float_buffer") == 0) return __isLoadedGL_NV_float_buffer;
    if(strcmp(name,"GL_NV_fog_distance") == 0) return __isLoadedGL_NV_fog_distance;
    if(strcmp(name,"GL_NV_fragment_coverage_to_color") == 0) return __isLoadedGL_NV_fragment_coverage_to_color;
    if(strcmp(name,"GL_NV_fragment_program") == 0) return __isLoadedGL_NV_fragment_program;
    if(strcmp(name,"GL_NV_fragment_program2") == 0) return __isLoadedGL_NV_fragment_program2;
    if(strcmp(name,"GL_NV_fragment_program4") == 0) return __isLoadedGL_NV_fragment_program4;
    if(strcmp(name,"GL_NV_fragment_program_option") == 0) return __isLoadedGL_NV_fragment_program_option;
    if(strcmp(name,"GL_NV_fragment_shader_interlock") == 0) return __isLoadedGL_NV_fragment_shader_interlock;
    if(strcmp(name,"GL_NV_framebuffer_mixed_samples") == 0) return __isLoadedGL_NV_framebuffer_mixed_samples;
    if(strcmp(name,"GL_NV_framebuffer_multisample_coverage") == 0) return __isLoadedGL_NV_framebuffer_multisample_coverage;
    if(strcmp(name,"GL_NV_geometry_program4") == 0) return __isLoadedGL_NV_geometry_program4;
    if(strcmp(name,"GL_NV_geometry_shader4") == 0) return __isLoadedGL_NV_geometry_shader4;
    if(strcmp(name,"GL_NV_geometry_shader_passthrough") == 0) return __isLoadedGL_NV_geometry_shader_passthrough;
    if(strcmp(name,"GL_NV_gpu_program4") == 0) return __isLoadedGL_NV_gpu_program4;
    if(strcmp(name,"GL_NV_gpu_program5") == 0) return __isLoadedGL_NV_gpu_program5;
    if(strcmp(name,"GL_NV_gpu_program5_mem_extended") == 0) return __isLoadedGL_NV_gpu_program5_mem_extended;
    if(strcmp(name,"GL_NV_gpu_shader5") == 0) return __isLoadedGL_NV_gpu_shader5;
    if(strcmp(name,"GL_NV_half_float") == 0) return __isLoadedGL_NV_half_float;
    if(strcmp(name,"GL_NV_internalformat_sample_query") == 0) return __isLoadedGL_NV_internalformat_sample_query;
    if(strcmp(name,"GL_NV_light_max_exponent") == 0) return __isLoadedGL_NV_light_max_exponent;
    if(strcmp(name,"GL_NV_multisample_coverage") == 0) return __isLoadedGL_NV_multisample_coverage;
    if(strcmp(name,"GL_NV_multisample_filter_hint") == 0) return __isLoadedGL_NV_multisample_filter_hint;
    if(strcmp(name,"GL_NV_occlusion_query") == 0) return __isLoadedGL_NV_occlusion_query;
    if(strcmp(name,"GL_NV_packed_depth_stencil") == 0) return __isLoadedGL_NV_packed_depth_stencil;
    if(strcmp(name,"GL_NV_parameter_buffer_object") == 0) return __isLoadedGL_NV_parameter_buffer_object;
    if(strcmp(name,"GL_NV_parameter_buffer_object2") == 0) return __isLoadedGL_NV_parameter_buffer_object2;
    if(strcmp(name,"GL_NV_path_rendering") == 0) return __isLoadedGL_NV_path_rendering;
    if(strcmp(name,"GL_NV_path_rendering_shared_edge") == 0) return __isLoadedGL_NV_path_rendering_shared_edge;
    if(strcmp(name,"GL_NV_pixel_data_range") == 0) return __isLoadedGL_NV_pixel_data_range;
    if(strcmp(name,"GL_NV_point_sprite") == 0) return __isLoadedGL_NV_point_sprite;
    if(strcmp(name,"GL_NV_present_video") == 0) return __isLoadedGL_NV_present_video;
    if(strcmp(name,"GL_NV_primitive_restart") == 0) return __isLoadedGL_NV_primitive_restart;
    if(strcmp(name,"GL_NV_register_combiners") == 0) return __isLoadedGL_NV_register_combiners;
    if(strcmp(name,"GL_NV_register_combiners2") == 0) return __isLoadedGL_NV_register_combiners2;
    if(strcmp(name,"GL_NV_sample_locations") == 0) return __isLoadedGL_NV_sample_locations;
    if(strcmp(name,"GL_NV_sample_mask_override_coverage") == 0) return __isLoadedGL_NV_sample_mask_override_coverage;
    if(strcmp(name,"GL_NV_shader_atomic_counters") == 0) return __isLoadedGL_NV_shader_atomic_counters;
    if(strcmp(name,"GL_NV_shader_atomic_float") == 0) return __isLoadedGL_NV_shader_atomic_float;
    if(strcmp(name,"GL_NV_shader_atomic_fp16_vector") == 0) return __isLoadedGL_NV_shader_atomic_fp16_vector;
    if(strcmp(name,"GL_NV_shader_atomic_int64") == 0) return __isLoadedGL_NV_shader_atomic_int64;
    if(strcmp(name,"GL_NV_shader_buffer_load") == 0) return __isLoadedGL_NV_shader_buffer_load;
    if(strcmp(name,"GL_NV_shader_buffer_store") == 0) return __isLoadedGL_NV_shader_buffer_store;
    if(strcmp(name,"GL_NV_shader_storage_buffer_object") == 0) return __isLoadedGL_NV_shader_storage_buffer_object;
    if(strcmp(name,"GL_NV_shader_thread_group") == 0) return __isLoadedGL_NV_shader_thread_group;
    if(strcmp(name,"GL_NV_shader_thread_shuffle") == 0) return __isLoadedGL_NV_shader_thread_shuffle;
    if(strcmp(name,"GL_NV_tessellation_program5") == 0) return __isLoadedGL_NV_tessellation_program5;
    if(strcmp(name,"GL_NV_texgen_emboss") == 0) return __isLoadedGL_NV_texgen_emboss;
    if(strcmp(name,"GL_NV_texgen_reflection") == 0) return __isLoadedGL_NV_texgen_reflection;
    if(strcmp(name,"GL_NV_texture_barrier") == 0) return __isLoadedGL_NV_texture_barrier;
    if(strcmp(name,"GL_NV_texture_compression_vtc") == 0) return __isLoadedGL_NV_texture_compression_vtc;
    if(strcmp(name,"GL_NV_texture_env_combine4") == 0) return __isLoadedGL_NV_texture_env_combine4;
    if(strcmp(name,"GL_NV_texture_expand_normal") == 0) return __isLoadedGL_NV_texture_expand_normal;
    if(strcmp(name,"GL_NV_texture_multisample") == 0) return __isLoadedGL_NV_texture_multisample;
    if(strcmp(name,"GL_NV_texture_rectangle") == 0) return __isLoadedGL_NV_texture_rectangle;
    if(strcmp(name,"GL_NV_texture_shader") == 0) return __isLoadedGL_NV_texture_shader;
    if(strcmp(name,"GL_NV_texture_shader2") == 0) return __isLoadedGL_NV_texture_shader2;
    if(strcmp(name,"GL_NV_texture_shader3") == 0) return __isLoadedGL_NV_texture_shader3;
    if(strcmp(name,"GL_NV_transform_feedback") == 0) return __isLoadedGL_NV_transform_feedback;
    if(strcmp(name,"GL_NV_transform_feedback2") == 0) return __isLoadedGL_NV_transform_feedback2;
    if(strcmp(name,"GL_NV_uniform_buffer_unified_memory") == 0) return __isLoadedGL_NV_uniform_buffer_unified_memory;
    if(strcmp(name,"GL_NV_vdpau_interop") == 0) return __isLoadedGL_NV_vdpau_interop;
    if(strcmp(name,"GL_NV_vertex_array_range") == 0) return __isLoadedGL_NV_vertex_array_range;
    if(strcmp(name,"GL_NV_vertex_array_range2") == 0) return __isLoadedGL_NV_vertex_array_range2;
    if(strcmp(name,"GL_NV_vertex_attrib_integer_64bit") == 0) return __isLoadedGL_NV_vertex_attrib_integer_64bit;
    if(strcmp(name,"GL_NV_vertex_buffer_unified_memory") == 0) return __isLoadedGL_NV_vertex_buffer_unified_memory;
    if(strcmp(name,"GL_NV_vertex_program") == 0) return __isLoadedGL_NV_vertex_program;
    if(strcmp(name,"GL_NV_vertex_program1_1") == 0) return __isLoadedGL_NV_vertex_program1_1;
    if(strcmp(name,"GL_NV_vertex_program2") == 0) return __isLoadedGL_NV_vertex_program2;
    if(strcmp(name,"GL_NV_vertex_program2_option") == 0) return __isLoadedGL_NV_vertex_program2_option;
    if(strcmp(name,"GL_NV_vertex_program3") == 0) return __isLoadedGL_NV_vertex_program3;
    if(strcmp(name,"GL_NV_vertex_program4") == 0) return __isLoadedGL_NV_vertex_program4;
    if(strcmp(name,"GL_NV_video_capture") == 0) return __isLoadedGL_NV_video_capture;
    if(strcmp(name,"GL_NV_viewport_array2") == 0) return __isLoadedGL_NV_viewport_array2;
    if(strcmp(name,"GL_OML_interlace") == 0) return __isLoadedGL_OML_interlace;
    if(strcmp(name,"GL_OML_resample") == 0) return __isLoadedGL_OML_resample;
    if(strcmp(name,"GL_OML_subsample") == 0) return __isLoadedGL_OML_subsample;
    if(strcmp(name,"GL_OVR_multiview") == 0) return __isLoadedGL_OVR_multiview;
    if(strcmp(name,"GL_OVR_multiview2") == 0) return __isLoadedGL_OVR_multiview2;
    if(strcmp(name,"GL_PGI_misc_hints") == 0) return __isLoadedGL_PGI_misc_hints;
    if(strcmp(name,"GL_PGI_vertex_hints") == 0) return __isLoadedGL_PGI_vertex_hints;
    if(strcmp(name,"GL_REND_screen_coordinates") == 0) return __isLoadedGL_REND_screen_coordinates;
    if(strcmp(name,"GL_S3_s3tc") == 0) return __isLoadedGL_S3_s3tc;
    if(strcmp(name,"GL_SGIS_detail_texture") == 0) return __isLoadedGL_SGIS_detail_texture;
    if(strcmp(name,"GL_SGIS_fog_function") == 0) return __isLoadedGL_SGIS_fog_function;
    if(strcmp(name,"GL_SGIS_generate_mipmap") == 0) return __isLoadedGL_SGIS_generate_mipmap;
    if(strcmp(name,"GL_SGIS_multisample") == 0) return __isLoadedGL_SGIS_multisample;
    if(strcmp(name,"GL_SGIS_pixel_texture") == 0) return __isLoadedGL_SGIS_pixel_texture;
    if(strcmp(name,"GL_SGIS_point_line_texgen") == 0) return __isLoadedGL_SGIS_point_line_texgen;
    if(strcmp(name,"GL_SGIS_point_parameters") == 0) return __isLoadedGL_SGIS_point_parameters;
    if(strcmp(name,"GL_SGIS_sharpen_texture") == 0) return __isLoadedGL_SGIS_sharpen_texture;
    if(strcmp(name,"GL_SGIS_texture4D") == 0) return __isLoadedGL_SGIS_texture4D;
    if(strcmp(name,"GL_SGIS_texture_border_clamp") == 0) return __isLoadedGL_SGIS_texture_border_clamp;
    if(strcmp(name,"GL_SGIS_texture_color_mask") == 0) return __isLoadedGL_SGIS_texture_color_mask;
    if(strcmp(name,"GL_SGIS_texture_edge_clamp") == 0) return __isLoadedGL_SGIS_texture_edge_clamp;
    if(strcmp(name,"GL_SGIS_texture_filter4") == 0) return __isLoadedGL_SGIS_texture_filter4;
    if(strcmp(name,"GL_SGIS_texture_lod") == 0) return __isLoadedGL_SGIS_texture_lod;
    if(strcmp(name,"GL_SGIS_texture_select") == 0) return __isLoadedGL_SGIS_texture_select;
    if(strcmp(name,"GL_SGIX_async") == 0) return __isLoadedGL_SGIX_async;
    if(strcmp(name,"GL_SGIX_async_histogram") == 0) return __isLoadedGL_SGIX_async_histogram;
    if(strcmp(name,"GL_SGIX_async_pixel") == 0) return __isLoadedGL_SGIX_async_pixel;
    if(strcmp(name,"GL_SGIX_blend_alpha_minmax") == 0) return __isLoadedGL_SGIX_blend_alpha_minmax;
    if(strcmp(name,"GL_SGIX_calligraphic_fragment") == 0) return __isLoadedGL_SGIX_calligraphic_fragment;
    if(strcmp(name,"GL_SGIX_clipmap") == 0) return __isLoadedGL_SGIX_clipmap;
    if(strcmp(name,"GL_SGIX_convolution_accuracy") == 0) return __isLoadedGL_SGIX_convolution_accuracy;
    if(strcmp(name,"GL_SGIX_depth_pass_instrument") == 0) return __isLoadedGL_SGIX_depth_pass_instrument;
    if(strcmp(name,"GL_SGIX_depth_texture") == 0) return __isLoadedGL_SGIX_depth_texture;
    if(strcmp(name,"GL_SGIX_flush_raster") == 0) return __isLoadedGL_SGIX_flush_raster;
    if(strcmp(name,"GL_SGIX_fog_offset") == 0) return __isLoadedGL_SGIX_fog_offset;
    if(strcmp(name,"GL_SGIX_fragment_lighting") == 0) return __isLoadedGL_SGIX_fragment_lighting;
    if(strcmp(name,"GL_SGIX_framezoom") == 0) return __isLoadedGL_SGIX_framezoom;
    if(strcmp(name,"GL_SGIX_igloo_interface") == 0) return __isLoadedGL_SGIX_igloo_interface;
    if(strcmp(name,"GL_SGIX_instruments") == 0) return __isLoadedGL_SGIX_instruments;
    if(strcmp(name,"GL_SGIX_interlace") == 0) return __isLoadedGL_SGIX_interlace;
    if(strcmp(name,"GL_SGIX_ir_instrument1") == 0) return __isLoadedGL_SGIX_ir_instrument1;
    if(strcmp(name,"GL_SGIX_list_priority") == 0) return __isLoadedGL_SGIX_list_priority;
    if(strcmp(name,"GL_SGIX_pixel_texture") == 0) return __isLoadedGL_SGIX_pixel_texture;
    if(strcmp(name,"GL_SGIX_pixel_tiles") == 0) return __isLoadedGL_SGIX_pixel_tiles;
    if(strcmp(name,"GL_SGIX_polynomial_ffd") == 0) return __isLoadedGL_SGIX_polynomial_ffd;
    if(strcmp(name,"GL_SGIX_reference_plane") == 0) return __isLoadedGL_SGIX_reference_plane;
    if(strcmp(name,"GL_SGIX_resample") == 0) return __isLoadedGL_SGIX_resample;
    if(strcmp(name,"GL_SGIX_scalebias_hint") == 0) return __isLoadedGL_SGIX_scalebias_hint;
    if(strcmp(name,"GL_SGIX_shadow") == 0) return __isLoadedGL_SGIX_shadow;
    if(strcmp(name,"GL_SGIX_shadow_ambient") == 0) return __isLoadedGL_SGIX_shadow_ambient;
    if(strcmp(name,"GL_SGIX_sprite") == 0) return __isLoadedGL_SGIX_sprite;
    if(strcmp(name,"GL_SGIX_subsample") == 0) return __isLoadedGL_SGIX_subsample;
    if(strcmp(name,"GL_SGIX_tag_sample_buffer") == 0) return __isLoadedGL_SGIX_tag_sample_buffer;
    if(strcmp(name,"GL_SGIX_texture_add_env") == 0) return __isLoadedGL_SGIX_texture_add_env;
    if(strcmp(name,"GL_SGIX_texture_coordinate_clamp") == 0) return __isLoadedGL_SGIX_texture_coordinate_clamp;
    if(strcmp(name,"GL_SGIX_texture_lod_bias") == 0) return __isLoadedGL_SGIX_texture_lod_bias;
    if(strcmp(name,"GL_SGIX_texture_multi_buffer") == 0) return __isLoadedGL_SGIX_texture_multi_buffer;
    if(strcmp(name,"GL_SGIX_texture_scale_bias") == 0) return __isLoadedGL_SGIX_texture_scale_bias;
    if(strcmp(name,"GL_SGIX_vertex_preclip") == 0) return __isLoadedGL_SGIX_vertex_preclip;
    if(strcmp(name,"GL_SGIX_ycrcb") == 0) return __isLoadedGL_SGIX_ycrcb;
    if(strcmp(name,"GL_SGIX_ycrcb_subsample") == 0) return __isLoadedGL_SGIX_ycrcb_subsample;
    if(strcmp(name,"GL_SGIX_ycrcba") == 0) return __isLoadedGL_SGIX_ycrcba;
    if(strcmp(name,"GL_SGI_color_matrix") == 0) return __isLoadedGL_SGI_color_matrix;
    if(strcmp(name,"GL_SGI_color_table") == 0) return __isLoadedGL_SGI_color_table;
    if(strcmp(name,"GL_SGI_texture_color_table") == 0) return __isLoadedGL_SGI_texture_color_table;
    if(strcmp(name,"GL_SUNX_constant_data") == 0) return __isLoadedGL_SUNX_constant_data;
    if(strcmp(name,"GL_SUN_convolution_border_modes") == 0) return __isLoadedGL_SUN_convolution_border_modes;
    if(strcmp(name,"GL_SUN_global_alpha") == 0) return __isLoadedGL_SUN_global_alpha;
    if(strcmp(name,"GL_SUN_mesh_array") == 0) return __isLoadedGL_SUN_mesh_array;
    if(strcmp(name,"GL_SUN_slice_accum") == 0) return __isLoadedGL_SUN_slice_accum;
    if(strcmp(name,"GL_SUN_triangle_list") == 0) return __isLoadedGL_SUN_triangle_list;
    if(strcmp(name,"GL_SUN_vertex") == 0) return __isLoadedGL_SUN_vertex;
    if(strcmp(name,"GL_WIN_phong_shading") == 0) return __isLoadedGL_WIN_phong_shading;
    if(strcmp(name,"GL_WIN_specular_fog") == 0) return __isLoadedGL_WIN_specular_fog;
    if(strcmp(name,"WGL_ARB_buffer_region") == 0) return __isLoadedWGL_ARB_buffer_region;
    if(strcmp(name,"WGL_ARB_context_flush_control") == 0) return __isLoadedWGL_ARB_context_flush_control;
    if(strcmp(name,"WGL_ARB_create_context") == 0) return __isLoadedWGL_ARB_create_context;
    if(strcmp(name,"WGL_ARB_create_context_profile") == 0) return __isLoadedWGL_ARB_create_context_profile;
    if(strcmp(name,"WGL_ARB_create_context_robustness") == 0) return __isLoadedWGL_ARB_create_context_robustness;
    if(strcmp(name,"WGL_ARB_extensions_string") == 0) return __isLoadedWGL_ARB_extensions_string;
    if(strcmp(name,"WGL_ARB_framebuffer_sRGB") == 0) return __isLoadedWGL_ARB_framebuffer_sRGB;
    if(strcmp(name,"WGL_ARB_make_current_read") == 0) return __isLoadedWGL_ARB_make_current_read;
    if(strcmp(name,"WGL_ARB_multisample") == 0) return __isLoadedWGL_ARB_multisample;
    if(strcmp(name,"WGL_ARB_pbuffer") == 0) return __isLoadedWGL_ARB_pbuffer;
    if(strcmp(name,"WGL_ARB_pixel_format") == 0) return __isLoadedWGL_ARB_pixel_format;
    if(strcmp(name,"WGL_ARB_pixel_format_float") == 0) return __isLoadedWGL_ARB_pixel_format_float;
    if(strcmp(name,"WGL_ARB_render_texture") == 0) return __isLoadedWGL_ARB_render_texture;
    if(strcmp(name,"WGL_ARB_robustness_application_isolation") == 0) return __isLoadedWGL_ARB_robustness_application_isolation;
    if(strcmp(name,"WGL_ARB_robustness_share_group_isolation") == 0) return __isLoadedWGL_ARB_robustness_share_group_isolation;
    if(strcmp(name,"WGL_3DFX_multisample") == 0) return __isLoadedWGL_3DFX_multisample;
    if(strcmp(name,"WGL_3DL_stereo_control") == 0) return __isLoadedWGL_3DL_stereo_control;
    if(strcmp(name,"WGL_AMD_gpu_association") == 0) return __isLoadedWGL_AMD_gpu_association;
    if(strcmp(name,"WGL_ATI_pixel_format_float") == 0) return __isLoadedWGL_ATI_pixel_format_float;
    if(strcmp(name,"WGL_EXT_create_context_es2_profile") == 0) return __isLoadedWGL_EXT_create_context_es2_profile;
    if(strcmp(name,"WGL_EXT_create_context_es_profile") == 0) return __isLoadedWGL_EXT_create_context_es_profile;
    if(strcmp(name,"WGL_EXT_depth_float") == 0) return __isLoadedWGL_EXT_depth_float;
    if(strcmp(name,"WGL_EXT_display_color_table") == 0) return __isLoadedWGL_EXT_display_color_table;
    if(strcmp(name,"WGL_EXT_extensions_string") == 0) return __isLoadedWGL_EXT_extensions_string;
    if(strcmp(name,"WGL_EXT_framebuffer_sRGB") == 0) return __isLoadedWGL_EXT_framebuffer_sRGB;
    if(strcmp(name,"WGL_EXT_make_current_read") == 0) return __isLoadedWGL_EXT_make_current_read;
    if(strcmp(name,"WGL_EXT_multisample") == 0) return __isLoadedWGL_EXT_multisample;
    if(strcmp(name,"WGL_EXT_pbuffer") == 0) return __isLoadedWGL_EXT_pbuffer;
    if(strcmp(name,"WGL_EXT_pixel_format") == 0) return __isLoadedWGL_EXT_pixel_format;
    if(strcmp(name,"WGL_EXT_pixel_format_packed_float") == 0) return __isLoadedWGL_EXT_pixel_format_packed_float;
    if(strcmp(name,"WGL_EXT_swap_control") == 0) return __isLoadedWGL_EXT_swap_control;
    if(strcmp(name,"WGL_EXT_swap_control_tear") == 0) return __isLoadedWGL_EXT_swap_control_tear;
    if(strcmp(name,"WGL_I3D_digital_video_control") == 0) return __isLoadedWGL_I3D_digital_video_control;
    if(strcmp(name,"WGL_I3D_gamma") == 0) return __isLoadedWGL_I3D_gamma;
    if(strcmp(name,"WGL_I3D_genlock") == 0) return __isLoadedWGL_I3D_genlock;
    if(strcmp(name,"WGL_I3D_image_buffer") == 0) return __isLoadedWGL_I3D_image_buffer;
    if(strcmp(name,"WGL_I3D_swap_frame_lock") == 0) return __isLoadedWGL_I3D_swap_frame_lock;
    if(strcmp(name,"WGL_I3D_swap_frame_usage") == 0) return __isLoadedWGL_I3D_swap_frame_usage;
    if(strcmp(name,"WGL_NV_DX_interop") == 0) return __isLoadedWGL_NV_DX_interop;
    if(strcmp(name,"WGL_NV_DX_interop2") == 0) return __isLoadedWGL_NV_DX_interop2;
    if(strcmp(name,"WGL_NV_copy_image") == 0) return __isLoadedWGL_NV_copy_image;
    if(strcmp(name,"WGL_NV_delay_before_swap") == 0) return __isLoadedWGL_NV_delay_before_swap;
    if(strcmp(name,"WGL_NV_float_buffer") == 0) return __isLoadedWGL_NV_float_buffer;
    if(strcmp(name,"WGL_NV_gpu_affinity") == 0) return __isLoadedWGL_NV_gpu_affinity;
    if(strcmp(name,"WGL_NV_multisample_coverage") == 0) return __isLoadedWGL_NV_multisample_coverage;
    if(strcmp(name,"WGL_NV_present_video") == 0) return __isLoadedWGL_NV_present_video;
    if(strcmp(name,"WGL_NV_render_depth_texture") == 0) return __isLoadedWGL_NV_render_depth_texture;
    if(strcmp(name,"WGL_NV_render_texture_rectangle") == 0) return __isLoadedWGL_NV_render_texture_rectangle;
    if(strcmp(name,"WGL_NV_swap_group") == 0) return __isLoadedWGL_NV_swap_group;
    if(strcmp(name,"WGL_NV_vertex_array_range") == 0) return __isLoadedWGL_NV_vertex_array_range;
    if(strcmp(name,"WGL_NV_video_capture") == 0) return __isLoadedWGL_NV_video_capture;
    if(strcmp(name,"WGL_NV_video_output") == 0) return __isLoadedWGL_NV_video_output;
    if(strcmp(name,"WGL_OML_sync_control") == 0) return __isLoadedWGL_OML_sync_control;
    return false;
}
